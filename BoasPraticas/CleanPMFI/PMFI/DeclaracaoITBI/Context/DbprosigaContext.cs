using System;
using System.Collections.Generic;
using ITBI.Entities.DBProsiga;
using Microsoft.EntityFrameworkCore;

namespace ITBI.Context;

public partial class DbprosigaContext : DbContext
{
    public DbprosigaContext()
    {
    }

    public DbprosigaContext(DbContextOptions<DbprosigaContext> options)
        : base(options)
    {
    }

    public virtual DbSet<ATemp> ATemps { get; set; }

    public virtual DbSet<Aaaplan1> Aaaplan1s { get; set; }

    public virtual DbSet<Aaplan2008> Aaplan2008s { get; set; }

    public virtual DbSet<Aaplan2009> Aaplan2009s { get; set; }

    public virtual DbSet<Aaplan2010> Aaplan2010s { get; set; }

    public virtual DbSet<Aaplan2011> Aaplan2011s { get; set; }

    public virtual DbSet<Aaplan2012> Aaplan2012s { get; set; }

    public virtual DbSet<Aaplan2013> Aaplan2013s { get; set; }

    public virtual DbSet<Abastecimento> Abastecimentos { get; set; }

    public virtual DbSet<Acessorio> Acessorios { get; set; }

    public virtual DbSet<AcessoriosMoveisEquipamento> AcessoriosMoveisEquipamentos { get; set; }

    public virtual DbSet<AgeAgendaIntervalo> AgeAgendaIntervalos { get; set; }

    public virtual DbSet<AgeAgendaTipoAgendamento> AgeAgendaTipoAgendamentos { get; set; }

    public virtual DbSet<AgeAgendamento> AgeAgendamentos { get; set; }

    public virtual DbSet<AgeAgendum> AgeAgenda { get; set; }

    public virtual DbSet<AgeAnotacao> AgeAnotacaos { get; set; }

    public virtual DbSet<AgeAssunto> AgeAssuntos { get; set; }

    public virtual DbSet<AgeIntervalo> AgeIntervalos { get; set; }

    public virtual DbSet<AgeNotAviso> AgeNotAvisos { get; set; }

    public virtual DbSet<AgeNotNoticia> AgeNotNoticias { get; set; }

    public virtual DbSet<AgeNotNoticiaAnexo> AgeNotNoticiaAnexos { get; set; }

    public virtual DbSet<AgeNotTema> AgeNotTemas { get; set; }

    public virtual DbSet<AgePermissao> AgePermissaos { get; set; }

    public virtual DbSet<AgeTipoAgendamento> AgeTipoAgendamentos { get; set; }

    public virtual DbSet<Agencium> Agencia { get; set; }

    public virtual DbSet<Agendum> Agenda { get; set; }

    public virtual DbSet<AguaCaderno> AguaCadernos { get; set; }

    public virtual DbSet<AguaCategoria> AguaCategorias { get; set; }

    public virtual DbSet<AguaCategoriaTributo> AguaCategoriaTributos { get; set; }

    public virtual DbSet<AguaCobrancaBanco> AguaCobrancaBancos { get; set; }

    public virtual DbSet<AguaCompoServTrib> AguaCompoServTribs { get; set; }

    public virtual DbSet<AguaCqparam> AguaCqparams { get; set; }

    public virtual DbSet<AguaCqvalorParam> AguaCqvalorParams { get; set; }

    public virtual DbSet<AguaDividasLeitura> AguaDividasLeituras { get; set; }

    public virtual DbSet<AguaDividasServAgua> AguaDividasServAguas { get; set; }

    public virtual DbSet<AguaEdificacoesHidrometro> AguaEdificacoesHidrometros { get; set; }

    public virtual DbSet<AguaHidrometro> AguaHidrometros { get; set; }

    public virtual DbSet<AguaLeituraHidrometro> AguaLeituraHidrometros { get; set; }

    public virtual DbSet<AguaRateio> AguaRateios { get; set; }

    public virtual DbSet<AguaReqSolicServParc> AguaReqSolicServParcs { get; set; }

    public virtual DbSet<AguaReqSolicServTipoServ> AguaReqSolicServTipoServs { get; set; }

    public virtual DbSet<AguaReqSolicitacaoServico> AguaReqSolicitacaoServicos { get; set; }

    public virtual DbSet<AguaRuraisHidrometro> AguaRuraisHidrometros { get; set; }

    public virtual DbSet<AguaTarifasAgua> AguaTarifasAguas { get; set; }

    public virtual DbSet<AguaTiposServAgua> AguaTiposServAguas { get; set; }

    public virtual DbSet<AjustEdif> AjustEdifs { get; set; }

    public virtual DbSet<AjustEdifBoa> AjustEdifBoas { get; set; }

    public virtual DbSet<AlmEntrada> AlmEntradas { get; set; }

    public virtual DbSet<AlmEntradaIten> AlmEntradaItens { get; set; }

    public virtual DbSet<AlmEntradaNovoGiiG> AlmEntradaNovoGiiGs { get; set; }

    public virtual DbSet<AlmIten> AlmItens { get; set; }

    public virtual DbSet<AlmItensBkp> AlmItensBkps { get; set; }

    public virtual DbSet<AlmLote> AlmLotes { get; set; }

    public virtual DbSet<AlmRequisico> AlmRequisicoes { get; set; }

    public virtual DbSet<AlmRequisicoesIten> AlmRequisicoesItens { get; set; }

    public virtual DbSet<AlmSaida> AlmSaidas { get; set; }

    public virtual DbSet<AlmSaidasIten> AlmSaidasItens { get; set; }

    public virtual DbSet<AlmTipoSaidum> AlmTipoSaida { get; set; }

    public virtual DbSet<AlmUnMed> AlmUnMeds { get; set; }

    public virtual DbSet<AlmUsuarioIten> AlmUsuarioItens { get; set; }

    public virtual DbSet<AlmoxRequisicoesPendente> AlmoxRequisicoesPendentes { get; set; }

    public virtual DbSet<AlmoxReserva> AlmoxReservas { get; set; }

    public virtual DbSet<AlmoxReservasPendente> AlmoxReservasPendentes { get; set; }

    public virtual DbSet<AlmoxarifEquivalenciaIten> AlmoxarifEquivalenciaItens { get; set; }

    public virtual DbSet<AlmoxarifEquivalenciaItensNovoGiig> AlmoxarifEquivalenciaItensNovoGiigs { get; set; }

    public virtual DbSet<AlmoxarifIten> AlmoxarifItens { get; set; }

    public virtual DbSet<AlmoxarifLote> AlmoxarifLotes { get; set; }

    public virtual DbSet<Almoxarifado> Almoxarifados { get; set; }

    public virtual DbSet<AlmoxarifadosUsuario> AlmoxarifadosUsuarios { get; set; }

    public virtual DbSet<AltoRisco> AltoRiscos { get; set; }

    public virtual DbSet<AltoRiscoAgri> AltoRiscoAgris { get; set; }

    public virtual DbSet<AltoRiscoMeioAmb> AltoRiscoMeioAmbs { get; set; }

    public virtual DbSet<AltoRiscoSmfa> AltoRiscoSmfas { get; set; }

    public virtual DbSet<AlvaraConstrucaoProcesso> AlvaraConstrucaoProcessos { get; set; }

    public virtual DbSet<AnexosProcesso> AnexosProcessos { get; set; }

    public virtual DbSet<AssinaturasComposicao> AssinaturasComposicaos { get; set; }

    public virtual DbSet<AtoBaixa> AtoBaixas { get; set; }

    public virtual DbSet<AutoNumAnoNumero> AutoNumAnoNumeros { get; set; }

    public virtual DbSet<AutoNumEntidade> AutoNumEntidades { get; set; }

    public virtual DbSet<Autoidenty> Autoidenties { get; set; }

    public virtual DbSet<Autonomo> Autonomos { get; set; }

    public virtual DbSet<Bairro> Bairros { get; set; }

    public virtual DbSet<BaixaImoveisImoben> BaixaImoveisImobens { get; set; }

    public virtual DbSet<BaixaMoveisEquipamento> BaixaMoveisEquipamentos { get; set; }

    public virtual DbSet<BaixoRisco> BaixoRiscos { get; set; }

    public virtual DbSet<Banco> Bancos { get; set; }

    public virtual DbSet<BckAlvEmpresa> BckAlvEmpresas { get; set; }

    public virtual DbSet<Bkmapapgto> Bkmapapgtos { get; set; }

    public virtual DbSet<CadEquipamento> CadEquipamentos { get; set; }

    public virtual DbSet<Cadperg> Cadpergs { get; set; }

    public virtual DbSet<Cadunico> Cadunicos { get; set; }

    public virtual DbSet<CadunicoV1> CadunicoV1s { get; set; }

    public virtual DbSet<CargasProcesso> CargasProcessos { get; set; }

    public virtual DbSet<Cep> Ceps { get; set; }

    public virtual DbSet<CepPr> CepPrs { get; set; }

    public virtual DbSet<Cepcorreio> Cepcorreios { get; set; }

    public virtual DbSet<Chat> Chats { get; set; }

    public virtual DbSet<Cidade> Cidades { get; set; }

    public virtual DbSet<Cnae> Cnaes { get; set; }

    public virtual DbSet<Cnae10to20> Cnae10to20s { get; set; }

    public virtual DbSet<Cnae20> Cnae20s { get; set; }

    public virtual DbSet<CnaetribAtivAtividade> CnaetribAtivAtividades { get; set; }

    public virtual DbSet<CnaetribAtivClasse> CnaetribAtivClasses { get; set; }

    public virtual DbSet<CnaetribAtivDivisao> CnaetribAtivDivisaos { get; set; }

    public virtual DbSet<CnaetribAtivGrupo> CnaetribAtivGrupos { get; set; }

    public virtual DbSet<CnaetribAtivSecao> CnaetribAtivSecaos { get; set; }

    public virtual DbSet<CnpjSimple> CnpjSimples { get; set; }

    public virtual DbSet<CnpjSimple1> CnpjSimples1 { get; set; }

    public virtual DbSet<ColetaLixoCancelamento> ColetaLixoCancelamentos { get; set; }

    public virtual DbSet<Combustivel> Combustivels { get; set; }

    public virtual DbSet<CombustivelDeposito> CombustivelDepositos { get; set; }

    public virtual DbSet<CombustivelEntradum> CombustivelEntrada { get; set; }

    public virtual DbSet<CombustivelSaidaCupomFiscal> CombustivelSaidaCupomFiscals { get; set; }

    public virtual DbSet<CombustivelSaidaMovimento> CombustivelSaidaMovimentos { get; set; }

    public virtual DbSet<CombustivelSaidum> CombustivelSaida { get; set; }

    public virtual DbSet<ComponentesServico> ComponentesServicos { get; set; }

    public virtual DbSet<Condutores1registro> Condutores1registros { get; set; }

    public virtual DbSet<ContratoConcessao> ContratoConcessaos { get; set; }

    public virtual DbSet<Contribuinte> Contribuintes { get; set; }

    public virtual DbSet<ContribuinteFiliacao> ContribuinteFiliacaos { get; set; }

    public virtual DbSet<ContribuintesEnviadosTce> ContribuintesEnviadosTces { get; set; }

    public virtual DbSet<ContribuintesLogIntegraSircof> ContribuintesLogIntegraSircofs { get; set; }

    public virtual DbSet<ContribuintesServidore> ContribuintesServidores { get; set; }

    public virtual DbSet<ControleVtAnttViewMotorista> ControleVtAnttViewMotoristas { get; set; }

    public virtual DbSet<ControleVtAnttViewOperador> ControleVtAnttViewOperadors { get; set; }

    public virtual DbSet<ControleVtAnttViewOperadorEmpresa> ControleVtAnttViewOperadorEmpresas { get; set; }

    public virtual DbSet<ControleVtAnttViewVeiculo> ControleVtAnttViewVeiculos { get; set; }

    public virtual DbSet<ConvSmtrCepsContribuinte> ConvSmtrCepsContribuintes { get; set; }

    public virtual DbSet<ConvSmtrCepsImovei> ConvSmtrCepsImoveis { get; set; }

    public virtual DbSet<ConvenioBanco> ConvenioBancos { get; set; }

    public virtual DbSet<ConvenioRegistrado> ConvenioRegistrados { get; set; }

    public virtual DbSet<ConverterParaExcel> ConverterParaExcels { get; set; }

    public virtual DbSet<Cub> Cubs { get; set; }

    public virtual DbSet<Cvdivimo> Cvdivimos { get; set; }

    public virtual DbSet<DadosSanepar> DadosSanepars { get; set; }

    public virtual DbSet<DadosSanepar11> DadosSanepar11s { get; set; }

    public virtual DbSet<DadosSaneparTemp> DadosSaneparTemps { get; set; }

    public virtual DbSet<Dadossaneparinsc> Dadossaneparinscs { get; set; }

    public virtual DbSet<DbDefrag> DbDefrags { get; set; }

    public virtual DbSet<DbDefragComplete> DbDefragCompletes { get; set; }

    public virtual DbSet<DePuAditivosContr> DePuAditivosContrs { get; set; }

    public virtual DbSet<DependeRisco> DependeRiscos { get; set; }

    public virtual DbSet<DepuContrato> DepuContratos { get; set; }

    public virtual DbSet<DetalhesManutencao> DetalhesManutencaos { get; set; }

    public virtual DbSet<DetalhesManutencaoMovEq> DetalhesManutencaoMovEqs { get; set; }

    public virtual DbSet<DiaSemana> DiaSemanas { get; set; }

    public virtual DbSet<DiarioArrecadacao> DiarioArrecadacaos { get; set; }

    public virtual DbSet<DividasContribuinte> DividasContribuintes { get; set; }

    public virtual DbSet<Dividum> Divida { get; set; }

    public virtual DbSet<Diviso> Divisoes { get; set; }

    public virtual DbSet<Documento> Documentos { get; set; }

    public virtual DbSet<EduacoEstagioProbatorio> EduacoEstagioProbatorios { get; set; }

    public virtual DbSet<Edudisciplina> Edudisciplinas { get; set; }

    public virtual DbSet<EdudisciplinasTurma> EdudisciplinasTurmas { get; set; }

    public virtual DbSet<EdufaixaEtarium> EdufaixaEtaria { get; set; }

    public virtual DbSet<Eduformacao> Eduformacaos { get; set; }

    public virtual DbSet<EduformacaoContribuinte> EduformacaoContribuintes { get; set; }

    public virtual DbSet<Edufrequencium> Edufrequencia { get; set; }

    public virtual DbSet<EdumovimentoLotacao> EdumovimentoLotacaos { get; set; }

    public virtual DbSet<Edurecurso> Edurecursos { get; set; }

    public virtual DbSet<Eduserie> Eduseries { get; set; }

    public virtual DbSet<Edusubstituico> Edusubstituicoes { get; set; }

    public virtual DbSet<EdutipoFormacao> EdutipoFormacaos { get; set; }

    public virtual DbSet<EdutipoLocal> EdutipoLocals { get; set; }

    public virtual DbSet<EdutipoSerie> EdutipoSeries { get; set; }

    public virtual DbSet<Eduturma> Eduturmas { get; set; }

    public virtual DbSet<EduturmaMe> EduturmaMes { get; set; }

    public virtual DbSet<EmbargosSmtr> EmbargosSmtrs { get; set; }

    public virtual DbSet<Empresa> Empresas { get; set; }

    public virtual DbSet<Endereco> Enderecos { get; set; }

    public virtual DbSet<Especie> Especies { get; set; }

    public virtual DbSet<Fazendum> Fazenda { get; set; }

    public virtual DbSet<Feriado> Feriados { get; set; }

    public virtual DbSet<FissAliquotum> FissAliquota { get; set; }

    public virtual DbSet<FissAtividadesDocto> FissAtividadesDoctos { get; set; }

    public virtual DbSet<FissCompDividum> FissCompDivida { get; set; }

    public virtual DbSet<FissComprovante> FissComprovantes { get; set; }

    public virtual DbSet<FissComprovanteIten> FissComprovanteItens { get; set; }

    public virtual DbSet<FissContribEmpresa> FissContribEmpresas { get; set; }

    public virtual DbSet<FissCruzamento> FissCruzamentos { get; set; }

    public virtual DbSet<FissCruzamentoDetalhe> FissCruzamentoDetalhes { get; set; }

    public virtual DbSet<FissCruzamentoMaster> FissCruzamentoMasters { get; set; }

    public virtual DbSet<FissDespachosEmpresa> FissDespachosEmpresas { get; set; }

    public virtual DbSet<FissDespachosServidore> FissDespachosServidores { get; set; }

    public virtual DbSet<FissDocFiscai> FissDocFiscais { get; set; }

    public virtual DbSet<FissDocFiscaisDividum> FissDocFiscaisDivida { get; set; }

    public virtual DbSet<FissDocFiscaisLog> FissDocFiscaisLogs { get; set; }

    public virtual DbSet<FissDocFiscaisOcorrencia> FissDocFiscaisOcorrencias { get; set; }

    public virtual DbSet<FissDoctosAnexosEmpresa> FissDoctosAnexosEmpresas { get; set; }

    public virtual DbSet<FissLivroTemp> FissLivroTemps { get; set; }

    public virtual DbSet<FissLivroTempMe> FissLivroTempMes { get; set; }

    public virtual DbSet<FissModeloNotum> FissModeloNota { get; set; }

    public virtual DbSet<FissMovim> FissMovims { get; set; }

    public virtual DbSet<FissMovimImg> FissMovimImgs { get; set; }

    public virtual DbSet<FissNaturezaOperacao> FissNaturezaOperacaos { get; set; }

    public virtual DbSet<FissSemMovimento> FissSemMovimentos { get; set; }

    public virtual DbSet<FissSerieNotasFiscai> FissSerieNotasFiscais { get; set; }

    public virtual DbSet<FissServico> FissServicos { get; set; }

    public virtual DbSet<FissServicoTipoServico> FissServicoTipoServicos { get; set; }

    public virtual DbSet<FissServicoTributo> FissServicoTributos { get; set; }

    public virtual DbSet<FissServicosAnexo> FissServicosAnexos { get; set; }

    public virtual DbSet<FissSituacaoRec> FissSituacaoRecs { get; set; }

    public virtual DbSet<FissTipoDocumento> FissTipoDocumentos { get; set; }

    public virtual DbSet<FissTipoOperacao> FissTipoOperacaos { get; set; }

    public virtual DbSet<FissTipoServico> FissTipoServicos { get; set; }

    public virtual DbSet<FissTipoServicoTributo> FissTipoServicoTributos { get; set; }

    public virtual DbSet<FissTiposDespacho> FissTiposDespachos { get; set; }

    public virtual DbSet<FissTomadorPrestador> FissTomadorPrestadors { get; set; }

    public virtual DbSet<FissTributosDespachosEmpresa> FissTributosDespachosEmpresas { get; set; }

    public virtual DbSet<FluxoProcesso> FluxoProcessos { get; set; }

    public virtual DbSet<Fone> Fones { get; set; }

    public virtual DbSet<FoneTipo> FoneTipos { get; set; }

    public virtual DbSet<Formulario> Formularios { get; set; }

    public virtual DbSet<FormularioInstrucoesTce> FormularioInstrucoesTces { get; set; }

    public virtual DbSet<Foz> Fozs { get; set; }

    public virtual DbSet<FzacessoOperadorEmpresa> FzacessoOperadorEmpresas { get; set; }

    public virtual DbSet<FzacessoOperadorMotoristum> FzacessoOperadorMotorista { get; set; }

    public virtual DbSet<FzacessoOperadorVeiculo> FzacessoOperadorVeiculos { get; set; }

    public virtual DbSet<Fzalvara> Fzalvaras { get; set; }

    public virtual DbSet<Fzanttcontrato> Fzanttcontratos { get; set; }

    public virtual DbSet<Fzanttoperador> Fzanttoperadors { get; set; }

    public virtual DbSet<FzarqMortoBoleto> FzarqMortoBoletos { get; set; }

    public virtual DbSet<FzautoInfraco> FzautoInfracoes { get; set; }

    public virtual DbSet<FzautoInfracoesIten> FzautoInfracoesItens { get; set; }

    public virtual DbSet<Fzbaixa> Fzbaixas { get; set; }

    public virtual DbSet<Fzboleto> Fzboletos { get; set; }

    public virtual DbSet<FzboletosErro> FzboletosErros { get; set; }

    public virtual DbSet<Fzclassificacao> Fzclassificacaos { get; set; }

    public virtual DbSet<FzcondutoresVeicDocto> FzcondutoresVeicDoctos { get; set; }

    public virtual DbSet<FzcondutoresVeiculo> FzcondutoresVeiculos { get; set; }

    public virtual DbSet<Fzcredencial> Fzcredencials { get; set; }

    public virtual DbSet<FzcredencialAncient> FzcredencialAncients { get; set; }

    public virtual DbSet<FzcredencialLogAuditorium> FzcredencialLogAuditoria { get; set; }

    public virtual DbSet<FzcredenciamentoAte201103> FzcredenciamentoAte201103s { get; set; }

    public virtual DbSet<Fzdivida> Fzdividas { get; set; }

    public virtual DbSet<FzdividasBoleto> FzdividasBoletos { get; set; }

    public virtual DbSet<Fzfiscai> Fzfiscais { get; set; }

    public virtual DbSet<Fzinfraco> Fzinfracoes { get; set; }

    public virtual DbSet<FzitensDeVistorium> FzitensDeVistoria { get; set; }

    public virtual DbSet<FzitensVistoriado> FzitensVistoriados { get; set; }

    public virtual DbSet<FzitensVistoriadosTwoPk> FzitensVistoriadosTwoPks { get; set; }

    public virtual DbSet<Fzlei> Fzleis { get; set; }

    public virtual DbSet<Fzmotorista> Fzmotoristas { get; set; }

    public virtual DbSet<Fzobjeto> Fzobjetos { get; set; }

    public virtual DbSet<Fzobjetos250313> Fzobjetos250313s { get; set; }

    public virtual DbSet<FzobjetosBackup> FzobjetosBackups { get; set; }

    public virtual DbSet<FzobjetosTeste> FzobjetosTestes { get; set; }

    public virtual DbSet<Fzparametro> Fzparametros { get; set; }

    public virtual DbSet<FzparametrosVistoria> FzparametrosVistorias { get; set; }

    public virtual DbSet<Fzponto> Fzpontos { get; set; }

    public virtual DbSet<FzpontosMov> FzpontosMovs { get; set; }

    public virtual DbSet<Fzreferencia> Fzreferencias { get; set; }

    public virtual DbSet<FzresumoBaixa> FzresumoBaixas { get; set; }

    public virtual DbSet<Fztaxa> Fztaxas { get; set; }

    public virtual DbSet<Fztbcidade> Fztbcidades { get; set; }

    public virtual DbSet<FztermoCredenciamento> FztermoCredenciamentos { get; set; }

    public virtual DbSet<FztermoVistorium> FztermoVistoria { get; set; }

    public virtual DbSet<FztipoCredencial> FztipoCredencials { get; set; }

    public virtual DbSet<FztipoCredenciamento> FztipoCredenciamentos { get; set; }

    public virtual DbSet<FztipoPonto> FztipoPontos { get; set; }

    public virtual DbSet<FztipoVeiculo> FztipoVeiculos { get; set; }

    public virtual DbSet<FztipoVistorium> FztipoVistoria { get; set; }

    public virtual DbSet<Fzveiculo> Fzveiculos { get; set; }

    public virtual DbSet<FzveiculoPorPonto> FzveiculoPorPontos { get; set; }

    public virtual DbSet<FzveiculosEstrangeiro> FzveiculosEstrangeiros { get; set; }

    public virtual DbSet<FzveiculosFoto> FzveiculosFotos { get; set; }

    public virtual DbSet<FzveiculosMov> FzveiculosMovs { get; set; }

    public virtual DbSet<FzveiculosParticulare> FzveiculosParticulares { get; set; }

    public virtual DbSet<FzvistoriaVeiculo> FzvistoriaVeiculos { get; set; }

    public virtual DbSet<GccCompFamiliar> GccCompFamiliars { get; set; }

    public virtual DbSet<GccCreFase> GccCreFases { get; set; }

    public virtual DbSet<GccCreche> GccCreches { get; set; }

    public virtual DbSet<GccCriCreche> GccCriCreches { get; set; }

    public virtual DbSet<GccCrianca> GccCriancas { get; set; }

    public virtual DbSet<GccFalta> GccFaltas { get; set; }

    public virtual DbSet<GccFase> GccFases { get; set; }

    public virtual DbSet<GccFuncCreche> GccFuncCreches { get; set; }

    public virtual DbSet<GccFuncionario> GccFuncionarios { get; set; }

    public virtual DbSet<GccGruposFase> GccGruposFases { get; set; }

    public virtual DbSet<GccMovtoOcor> GccMovtoOcors { get; set; }

    public virtual DbSet<GccMovtoQuest> GccMovtoQuests { get; set; }

    public virtual DbSet<GccPergunta> GccPerguntas { get; set; }

    public virtual DbSet<GccPermisso> GccPermissoes { get; set; }

    public virtual DbSet<GccQuestionario> GccQuestionarios { get; set; }

    public virtual DbSet<GccResposta> GccRespostas { get; set; }

    public virtual DbSet<GccTipoCreche> GccTipoCreches { get; set; }

    public virtual DbSet<GccTipoOcor> GccTipoOcors { get; set; }

    public virtual DbSet<Genero> Generos { get; set; }

    public virtual DbSet<GeralLembrete> GeralLembretes { get; set; }

    public virtual DbSet<GrupoBem> GrupoBems { get; set; }

    public virtual DbSet<GrupoBem1402> GrupoBem1402s { get; set; }

    public virtual DbSet<GrupoContribuinteConcessaoImovei> GrupoContribuinteConcessaoImoveis { get; set; }

    public virtual DbSet<GrupoFrotasDepuDespesa> GrupoFrotasDepuDespesas { get; set; }

    public virtual DbSet<GrupoImobensDepuDespesa> GrupoImobensDepuDespesas { get; set; }

    public virtual DbSet<GrupoImobensMovimento> GrupoImobensMovimentos { get; set; }

    public virtual DbSet<GrupoImoveisContribuinte> GrupoImoveisContribuintes { get; set; }

    public virtual DbSet<GrupoMoveisDepuDespesa> GrupoMoveisDepuDespesas { get; set; }

    public virtual DbSet<GruposServico> GruposServicos { get; set; }

    public virtual DbSet<HabAtendimento> HabAtendimentos { get; set; }

    public virtual DbSet<HabCruzamentoLogr> HabCruzamentoLogrs { get; set; }

    public virtual DbSet<HabDocApresentado> HabDocApresentados { get; set; }

    public virtual DbSet<HabDocumento> HabDocumentos { get; set; }

    public virtual DbSet<HabFeriado> HabFeriados { get; set; }

    public virtual DbSet<HabFoneticoLogr> HabFoneticoLogrs { get; set; }

    public virtual DbSet<HabLotesAtendimento> HabLotesAtendimentos { get; set; }

    public virtual DbSet<HabLotesAtendimentoSc> HabLotesAtendimentoScs { get; set; }

    public virtual DbSet<HabOpcaoMoradium> HabOpcaoMoradia { get; set; }

    public virtual DbSet<HabProblema> HabProblemas { get; set; }

    public virtual DbSet<HabProblemasAtendimento> HabProblemasAtendimentos { get; set; }

    public virtual DbSet<HabProgrAtendimento> HabProgrAtendimentos { get; set; }

    public virtual DbSet<HabTipoAtendimento> HabTipoAtendimentos { get; set; }

    public virtual DbSet<HorariosMaisUtilizado> HorariosMaisUtilizados { get; set; }

    public virtual DbSet<ImobensImovei> ImobensImoveis { get; set; }

    public virtual DbSet<ImobensLoteamento> ImobensLoteamentos { get; set; }

    public virtual DbSet<ImobensMovimento> ImobensMovimentos { get; set; }

    public virtual DbSet<ImobensRegio> ImobensRegioes { get; set; }

    public virtual DbSet<ImobensUsuario> ImobensUsuarios { get; set; }

    public virtual DbSet<Imovei> Imoveis { get; set; }

    public virtual DbSet<ImoveisIsentos2006> ImoveisIsentos2006s { get; set; }

    public virtual DbSet<InexistenciaDocumentoPessoa> InexistenciaDocumentoPessoas { get; set; }

    public virtual DbSet<Inscr> Inscrs { get; set; }

    public virtual DbSet<InscricaoDafoztran> InscricaoDafoztrans { get; set; }

    public virtual DbSet<InscricoesRelReginaldo> InscricoesRelReginaldos { get; set; }

    public virtual DbSet<InscricoesSuspender> InscricoesSuspenders { get; set; }

    public virtual DbSet<ItensManutencao> ItensManutencaos { get; set; }

    public virtual DbSet<ItensManutencaoMovEquip> ItensManutencaoMovEquips { get; set; }

    public virtual DbSet<LimpezaPublica> LimpezaPublicas { get; set; }

    public virtual DbSet<LocAtividade> LocAtividades { get; set; }

    public virtual DbSet<LocBaixa> LocBaixas { get; set; }

    public virtual DbSet<LocBoleto> LocBoletos { get; set; }

    public virtual DbSet<LocContribuinte> LocContribuintes { get; set; }

    public virtual DbSet<LocContribuintecrono> LocContribuintecronos { get; set; }

    public virtual DbSet<LocFilaEspera> LocFilaEsperas { get; set; }

    public virtual DbSet<LocLocal> LocLocals { get; set; }

    public virtual DbSet<LocPeriodo> LocPeriodos { get; set; }

    public virtual DbSet<LocPessoa> LocPessoas { get; set; }

    public virtual DbSet<LocReceitum> LocReceita { get; set; }

    public virtual DbSet<LocSubLocal> LocSubLocals { get; set; }

    public virtual DbSet<LocTaxa> LocTaxas { get; set; }

    public virtual DbSet<LocTipoPagto> LocTipoPagtos { get; set; }

    public virtual DbSet<LocTpSubLocal> LocTpSubLocals { get; set; }

    public virtual DbSet<Locacao> Locacaos { get; set; }

    public virtual DbSet<LocacaoFrotum> LocacaoFrota { get; set; }

    public virtual DbSet<LocacaoMoveisEquipamento> LocacaoMoveisEquipamentos { get; set; }

    public virtual DbSet<LocalFisico> LocalFisicos { get; set; }

    public virtual DbSet<Localizacao> Localizacaos { get; set; }

    public virtual DbSet<LogBairro> LogBairros { get; set; }

    public virtual DbSet<LogLocalidade> LogLocalidades { get; set; }

    public virtual DbSet<LogLogradouro> LogLogradouros { get; set; }

    public virtual DbSet<LogProcesso> LogProcessos { get; set; }

    public virtual DbSet<Logradouro> Logradouros { get; set; }

    public virtual DbSet<Logradourotipo> Logradourotipos { get; set; }

    public virtual DbSet<Loteamento> Loteamentos { get; set; }

    public virtual DbSet<LoteamentosAtena> LoteamentosAtenas { get; set; }

    public virtual DbSet<LrfInscricaoSaldoDividaAtivaAraucaria2010> LrfInscricaoSaldoDividaAtivaAraucaria2010s { get; set; }

    public virtual DbSet<LrfOcorrenciasTributosExercicio2008> LrfOcorrenciasTributosExercicio2008s { get; set; }

    public virtual DbSet<LrffiltrosTributosBimestre> LrffiltrosTributosBimestres { get; set; }

    public virtual DbSet<LrfocorrenciaExercicio2008> LrfocorrenciaExercicio2008s { get; set; }

    public virtual DbSet<ManutencaoMoveisEquipamento> ManutencaoMoveisEquipamentos { get; set; }

    public virtual DbSet<ManutencaoVeiculo> ManutencaoVeiculos { get; set; }

    public virtual DbSet<Maquina> Maquinas { get; set; }

    public virtual DbSet<MaquinasUsuario> MaquinasUsuarios { get; set; }

    public virtual DbSet<Marca> Marcas { get; set; }

    public virtual DbSet<Meioambiente> Meioambientes { get; set; }

    public virtual DbSet<Membro> Membros { get; set; }

    public virtual DbSet<MembrosUsuario> MembrosUsuarios { get; set; }

    public virtual DbSet<Modelo> Modelos { get; set; }

    public virtual DbSet<ModoAquisicao> ModoAquisicaos { get; set; }

    public virtual DbSet<Modulo> Modulos { get; set; }

    public virtual DbSet<MoeMovimentacaoConta> MoeMovimentacaoContas { get; set; }

    public virtual DbSet<Moeda> Moedas { get; set; }

    public virtual DbSet<MoedasReferencia> MoedasReferencias { get; set; }

    public virtual DbSet<MovEquipamentoRecurso> MovEquipamentoRecursos { get; set; }

    public virtual DbSet<MovImovei> MovImoveis { get; set; }

    public virtual DbSet<MovVeiculo> MovVeiculos { get; set; }

    public virtual DbSet<MoveisEquipamento> MoveisEquipamentos { get; set; }

    public virtual DbSet<MoveisIten> MoveisItens { get; set; }

    public virtual DbSet<MovimentacaoAcessoriosMovEquip> MovimentacaoAcessoriosMovEquips { get; set; }

    public virtual DbSet<MovimentacaoMoveisEquipamento> MovimentacaoMoveisEquipamentos { get; set; }

    public virtual DbSet<Natureza> Naturezas { get; set; }

    public virtual DbSet<Orgao> Orgaos { get; set; }

    public virtual DbSet<OuvidoriaOrgao> OuvidoriaOrgaos { get; set; }

    public virtual DbSet<OuvidoriaProcesso> OuvidoriaProcessos { get; set; }

    public virtual DbSet<OuvidoriaProcessosAco> OuvidoriaProcessosAcos { get; set; }

    public virtual DbSet<OuvidoriaServico> OuvidoriaServicos { get; set; }

    public virtual DbSet<Paise> Paises { get; set; }

    public virtual DbSet<Parametro> Parametros { get; set; }

    public virtual DbSet<ParametroAssinatura> ParametroAssinaturas { get; set; }

    public virtual DbSet<Partido> Partidos { get; set; }

    public virtual DbSet<Perg> Pergs { get; set; }

    public virtual DbSet<PergSmma> PergSmmas { get; set; }

    public virtual DbSet<PergVisa> PergVisas { get; set; }

    public virtual DbSet<PerguntasParaJuntum> PerguntasParaJunta { get; set; }

    public virtual DbSet<PerguntasZoneamento> PerguntasZoneamentos { get; set; }

    public virtual DbSet<PermDecretoNovo> PermDecretoNovos { get; set; }

    public virtual DbSet<Permisso> Permissoes { get; set; }

    public virtual DbSet<PermissoesBackup2012> PermissoesBackup2012s { get; set; }

    public virtual DbSet<PesqServicosSec> PesqServicosSecs { get; set; }

    public virtual DbSet<PessoaAm> PessoaAms { get; set; }

    public virtual DbSet<Plan1> Plan1s { get; set; }

    public virtual DbSet<Plaquetum> Plaqueta { get; set; }

    public virtual DbSet<PortalAgrupamentoPagina> PortalAgrupamentoPaginas { get; set; }

    public virtual DbSet<PortalAgrupamentoPrincipal> PortalAgrupamentoPrincipals { get; set; }

    public virtual DbSet<PortalIdioma> PortalIdiomas { get; set; }

    public virtual DbSet<PortalObjeto> PortalObjetos { get; set; }

    public virtual DbSet<PortalParametro> PortalParametros { get; set; }

    public virtual DbSet<PortalPermissoesPagina> PortalPermissoesPaginas { get; set; }

    public virtual DbSet<PortalPublicaco> PortalPublicacoes { get; set; }

    public virtual DbSet<PortalPublicacoesObjeto> PortalPublicacoesObjetos { get; set; }

    public virtual DbSet<PortalSecoesPagina> PortalSecoesPaginas { get; set; }

    public virtual DbSet<PortalSecoesPrincipal> PortalSecoesPrincipals { get; set; }

    public virtual DbSet<ProSigaConsultaProcesso> ProSigaConsultaProcessos { get; set; }

    public virtual DbSet<ProSigaProcessosItbi> ProSigaProcessosItbis { get; set; }

    public virtual DbSet<ProcArquivamento> ProcArquivamentos { get; set; }

    public virtual DbSet<Processo> Processos { get; set; }

    public virtual DbSet<Processos2017> Processos2017s { get; set; }

    public virtual DbSet<Processos2018> Processos2018s { get; set; }

    public virtual DbSet<Processos2019> Processos2019s { get; set; }

    public virtual DbSet<ProdRurAtividadeRural> ProdRurAtividadeRurals { get; set; }

    public virtual DbSet<ProdRurClassificacaoRecurso> ProdRurClassificacaoRecursos { get; set; }

    public virtual DbSet<ProdRurCoeficienteUnidMed> ProdRurCoeficienteUnidMeds { get; set; }

    public virtual DbSet<ProdRurImposto> ProdRurImpostos { get; set; }

    public virtual DbSet<ProdRurNaturezaOperacao> ProdRurNaturezaOperacaos { get; set; }

    public virtual DbSet<ProdRurNotaFiscaisCancelada> ProdRurNotaFiscaisCanceladas { get; set; }

    public virtual DbSet<ProdRurNotaFiscal> ProdRurNotaFiscals { get; set; }

    public virtual DbSet<ProdRurNotaFiscalIten> ProdRurNotaFiscalItens { get; set; }

    public virtual DbSet<ProdRurNotaFiscalOcorr> ProdRurNotaFiscalOcorrs { get; set; }

    public virtual DbSet<ProdRurProducao> ProdRurProducaos { get; set; }

    public virtual DbSet<ProdRurProdutor> ProdRurProdutors { get; set; }

    public virtual DbSet<ProdRurProdutorFamilium> ProdRurProdutorFamilia { get; set; }

    public virtual DbSet<ProdRurProdutosRurai> ProdRurProdutosRurais { get; set; }

    public virtual DbSet<ProdRurProprRurViasAcesso> ProdRurProprRurViasAcessos { get; set; }

    public virtual DbSet<ProdRurPropriedade> ProdRurPropriedades { get; set; }

    public virtual DbSet<ProdRurPropriedadesRurProdutor> ProdRurPropriedadesRurProdutors { get; set; }

    public virtual DbSet<ProdRurProtocolo> ProdRurProtocolos { get; set; }

    public virtual DbSet<ProdRurRecurPropriedade> ProdRurRecurPropriedades { get; set; }

    public virtual DbSet<ProdRurTipoRecurso> ProdRurTipoRecursos { get; set; }

    public virtual DbSet<Profissao> Profissaos { get; set; }

    public virtual DbSet<Psiaplicativo> Psiaplicativos { get; set; }

    public virtual DbSet<Psiformulario> Psiformularios { get; set; }

    public virtual DbSet<PsilogauditoriaConfig> PsilogauditoriaConfigs { get; set; }

    public virtual DbSet<Psimodulo> Psimodulos { get; set; }

    public virtual DbSet<Psiobjeto> Psiobjetos { get; set; }

    public virtual DbSet<Psitema> Psitemas { get; set; }

    public virtual DbSet<PsitipoPerfil> PsitipoPerfils { get; set; }

    public virtual DbSet<Psiusuario> Psiusuarios { get; set; }

    public virtual DbSet<PubDocumento> PubDocumentos { get; set; }

    public virtual DbSet<PubTipoDocumento> PubTipoDocumentos { get; set; }

    public virtual DbSet<Recebimento> Recebimentos { get; set; }

    public virtual DbSet<RecursoFinanceiro> RecursoFinanceiros { get; set; }

    public virtual DbSet<RedeSimLevantamento> RedeSimLevantamentos { get; set; }

    public virtual DbSet<Regio> Regioes { get; set; }

    public virtual DbSet<RelTribLivroInscrDatemp> RelTribLivroInscrDatemps { get; set; }

    public virtual DbSet<Relatoriocpf> Relatoriocpfs { get; set; }

    public virtual DbSet<Relatoriocpfcnpj> Relatoriocpfcnpjs { get; set; }

    public virtual DbSet<RhcargoFuncaoLocal> RhcargoFuncaoLocals { get; set; }

    public virtual DbSet<RhcargosFunco> RhcargosFuncoes { get; set; }

    public virtual DbSet<Rhconcurso> Rhconcursos { get; set; }

    public virtual DbSet<RhdadosFuncionai> RhdadosFuncionais { get; set; }

    public virtual DbSet<RhdadosPessoai> RhdadosPessoais { get; set; }

    public virtual DbSet<Rhlicenca> Rhlicencas { get; set; }

    public virtual DbSet<RhtipoLicenca> RhtipoLicencas { get; set; }

    public virtual DbSet<RhtipoProventosDesconto> RhtipoProventosDescontos { get; set; }

    public virtual DbSet<RhvinculoEmpregaticio> RhvinculoEmpregaticios { get; set; }

    public virtual DbSet<Sanepar> Sanepars { get; set; }

    public virtual DbSet<Sapcarga> Sapcargas { get; set; }

    public virtual DbSet<Sappront> Sappronts { get; set; }

    public virtual DbSet<Saptipo> Saptipos { get; set; }

    public virtual DbSet<SaudeAc> SaudeAcs { get; set; }

    public virtual DbSet<SaudeAcsPaciente> SaudeAcsPacientes { get; set; }

    public virtual DbSet<SaudeAgendaVaga> SaudeAgendaVagas { get; set; }

    public virtual DbSet<SaudeAgendaXxxxxx> SaudeAgendaXxxxxxes { get; set; }

    public virtual DbSet<SaudeAlmoxEntrada> SaudeAlmoxEntradas { get; set; }

    public virtual DbSet<SaudeAlmoxEntradaDevolucao> SaudeAlmoxEntradaDevolucaos { get; set; }

    public virtual DbSet<SaudeAlmoxEntradaDevolucaoItem> SaudeAlmoxEntradaDevolucaoItems { get; set; }

    public virtual DbSet<SaudeAlmoxEntradasItem> SaudeAlmoxEntradasItems { get; set; }

    public virtual DbSet<SaudeAlmoxEntradasItensExtorno> SaudeAlmoxEntradasItensExtornos { get; set; }

    public virtual DbSet<SaudeAlmoxLote> SaudeAlmoxLotes { get; set; }

    public virtual DbSet<SaudeAlmoxPerda> SaudeAlmoxPerdas { get; set; }

    public virtual DbSet<SaudeAlmoxPerdaIten> SaudeAlmoxPerdaItens { get; set; }

    public virtual DbSet<SaudeAlmoxPerdaItensExtorno> SaudeAlmoxPerdaItensExtornos { get; set; }

    public virtual DbSet<SaudeAlmoxSaida> SaudeAlmoxSaidas { get; set; }

    public virtual DbSet<SaudeAlmoxSaidaItemExtorno> SaudeAlmoxSaidaItemExtornos { get; set; }

    public virtual DbSet<SaudeAlmoxSaidasItem> SaudeAlmoxSaidasItems { get; set; }

    public virtual DbSet<SaudeAlmoxSaldoInicial> SaudeAlmoxSaldoInicials { get; set; }

    public virtual DbSet<SaudeApresentacao> SaudeApresentacaos { get; set; }

    public virtual DbSet<SaudeAtendimento> SaudeAtendimentos { get; set; }

    public virtual DbSet<SaudeAtendimentoDadosClinico> SaudeAtendimentoDadosClinicos { get; set; }

    public virtual DbSet<SaudeAtendimentoPreConsultum> SaudeAtendimentoPreConsulta { get; set; }

    public virtual DbSet<SaudeAtendimentoProcedimento> SaudeAtendimentoProcedimentos { get; set; }

    public virtual DbSet<SaudeAtendimentoReceituario> SaudeAtendimentoReceituarios { get; set; }

    public virtual DbSet<SaudeAutorizaAcesso> SaudeAutorizaAcessos { get; set; }

    public virtual DbSet<SaudeAutorizaFormulario> SaudeAutorizaFormularios { get; set; }

    public virtual DbSet<SaudeCid> SaudeCids { get; set; }

    public virtual DbSet<SaudeConfigSaldoEstoque> SaudeConfigSaldoEstoques { get; set; }

    public virtual DbSet<SaudeConfiguracaoAlmoxarifado> SaudeConfiguracaoAlmoxarifados { get; set; }

    public virtual DbSet<SaudeConfiguracaoEstoque> SaudeConfiguracaoEstoques { get; set; }

    public virtual DbSet<SaudeEmpenho> SaudeEmpenhos { get; set; }

    public virtual DbSet<SaudeEmpenhoIten> SaudeEmpenhoItens { get; set; }

    public virtual DbSet<SaudeEscala> SaudeEscalas { get; set; }

    public virtual DbSet<SaudeEscalaUnidadeSaude> SaudeEscalaUnidadeSaudes { get; set; }

    public virtual DbSet<SaudeEstoque> SaudeEstoques { get; set; }

    public virtual DbSet<SaudeExamesSolicitado> SaudeExamesSolicitados { get; set; }

    public virtual DbSet<SaudeFabricante> SaudeFabricantes { get; set; }

    public virtual DbSet<SaudeFarmaEntradasItemFormulario> SaudeFarmaEntradasItemFormularios { get; set; }

    public virtual DbSet<SaudeFarmaEntradasItemFormularioExtorno> SaudeFarmaEntradasItemFormularioExtornos { get; set; }

    public virtual DbSet<SaudeFarmaEntradasPorFormulario> SaudeFarmaEntradasPorFormularios { get; set; }

    public virtual DbSet<SaudeFarmaFormularioDevolucao> SaudeFarmaFormularioDevolucaos { get; set; }

    public virtual DbSet<SaudeFarmaFormularioDevolucaoIten> SaudeFarmaFormularioDevolucaoItens { get; set; }

    public virtual DbSet<SaudeFarmaFormularioDevolucaoItensEstorno> SaudeFarmaFormularioDevolucaoItensEstornos { get; set; }

    public virtual DbSet<SaudeFarmaLote> SaudeFarmaLotes { get; set; }

    public virtual DbSet<SaudeFarmaPerda> SaudeFarmaPerdas { get; set; }

    public virtual DbSet<SaudeFarmaPerdaIten> SaudeFarmaPerdaItens { get; set; }

    public virtual DbSet<SaudeFarmaPerdaItensEstorno> SaudeFarmaPerdaItensEstornos { get; set; }

    public virtual DbSet<SaudeFarmaRequisicaoItem> SaudeFarmaRequisicaoItems { get; set; }

    public virtual DbSet<SaudeFarmaRequisicaoMedic> SaudeFarmaRequisicaoMedics { get; set; }

    public virtual DbSet<SaudeFarmaSaidaIten> SaudeFarmaSaidaItens { get; set; }

    public virtual DbSet<SaudeFarmaSaidaItensExtorno> SaudeFarmaSaidaItensExtornos { get; set; }

    public virtual DbSet<SaudeFarmaSaldoInicial> SaudeFarmaSaldoInicials { get; set; }

    public virtual DbSet<SaudeFormularioDevolucao> SaudeFormularioDevolucaos { get; set; }

    public virtual DbSet<SaudeFormularioDevolucaoIten> SaudeFormularioDevolucaoItens { get; set; }

    public virtual DbSet<SaudeFormularioDevolucaoItensExtorno> SaudeFormularioDevolucaoItensExtornos { get; set; }

    public virtual DbSet<SaudeFornecedor> SaudeFornecedors { get; set; }

    public virtual DbSet<SaudeItemFormulario> SaudeItemFormularios { get; set; }

    public virtual DbSet<SaudeItensAgendaAusencium> SaudeItensAgendaAusencia { get; set; }

    public virtual DbSet<SaudeItensAgendum> SaudeItensAgenda { get; set; }

    public virtual DbSet<SaudeListaSubstancia> SaudeListaSubstancias { get; set; }

    public virtual DbSet<SaudeLote> SaudeLotes { get; set; }

    public virtual DbSet<SaudeMedicamentoXxxxxx> SaudeMedicamentoXxxxxxes { get; set; }

    public virtual DbSet<SaudeMedicamentosIten> SaudeMedicamentosItens { get; set; }

    public virtual DbSet<SaudePacientePrograma> SaudePacienteProgramas { get; set; }

    public virtual DbSet<SaudePacienteXxxxxx> SaudePacienteXxxxxxes { get; set; }

    public virtual DbSet<SaudePermisso> SaudePermissoes { get; set; }

    public virtual DbSet<SaudeProcedimento> SaudeProcedimentos { get; set; }

    public virtual DbSet<SaudeProgramaSaude> SaudeProgramaSaudes { get; set; }

    public virtual DbSet<SaudeProntuario> SaudeProntuarios { get; set; }

    public virtual DbSet<SaudePsf> SaudePsfs { get; set; }

    public virtual DbSet<SaudeReceitaItem> SaudeReceitaItems { get; set; }

    public virtual DbSet<SaudeReceitaMotivoSaidaIncompletum> SaudeReceitaMotivoSaidaIncompleta { get; set; }

    public virtual DbSet<SaudeReceitum> SaudeReceita { get; set; }

    public virtual DbSet<SaudeResumoSaldoMedicamentoEstoque> SaudeResumoSaldoMedicamentoEstoques { get; set; }

    public virtual DbSet<SaudeServidorCategProf> SaudeServidorCategProfs { get; set; }

    public virtual DbSet<SaudeSituacaoAgendum> SaudeSituacaoAgenda { get; set; }

    public virtual DbSet<SaudeTipoAgendamento> SaudeTipoAgendamentos { get; set; }

    public virtual DbSet<SaudeTipoConsultum> SaudeTipoConsulta { get; set; }

    public virtual DbSet<SaudeTipoExame> SaudeTipoExames { get; set; }

    public virtual DbSet<SaudeTipoMedicamento> SaudeTipoMedicamentos { get; set; }

    public virtual DbSet<SaudeTipoMovimentacao> SaudeTipoMovimentacaos { get; set; }

    public virtual DbSet<SaudeUnidadeMedidum> SaudeUnidadeMedida { get; set; }

    public virtual DbSet<SaudeUsuariosUnidade> SaudeUsuariosUnidades { get; set; }

    public virtual DbSet<Sebrae> Sebraes { get; set; }

    public virtual DbSet<Secao> Secaos { get; set; }

    public virtual DbSet<SecaoServico> SecaoServicos { get; set; }

    public virtual DbSet<Seguro> Seguros { get; set; }

    public virtual DbSet<SerIturAtrativosServicosEquipamento> SerIturAtrativosServicosEquipamentos { get; set; }

    public virtual DbSet<SerIturAtrativosTuristico> SerIturAtrativosTuristicos { get; set; }

    public virtual DbSet<SerIturContribAtrativosTuristico> SerIturContribAtrativosTuristicos { get; set; }

    public virtual DbSet<SerIturContribuintesTribEmpresa> SerIturContribuintesTribEmpresas { get; set; }

    public virtual DbSet<SerIturDatasHistorica> SerIturDatasHistoricas { get; set; }

    public virtual DbSet<SerIturDestino> SerIturDestinos { get; set; }

    public virtual DbSet<SerIturEmpresaInfraEstrutura> SerIturEmpresaInfraEstruturas { get; set; }

    public virtual DbSet<SerIturEmpresaServicosEquipamento> SerIturEmpresaServicosEquipamentos { get; set; }

    public virtual DbSet<SerIturEmpresasSemCmc> SerIturEmpresasSemCmcs { get; set; }

    public virtual DbSet<SerIturEmpresasSemCmcativ> SerIturEmpresasSemCmcativs { get; set; }

    public virtual DbSet<SerIturGrupoServEquip> SerIturGrupoServEquips { get; set; }

    public virtual DbSet<SerIturGrupoServEquipTipoEstab> SerIturGrupoServEquipTipoEstabs { get; set; }

    public virtual DbSet<SerIturObjeto> SerIturObjetos { get; set; }

    public virtual DbSet<SerIturObjetoAtrativosTuristico> SerIturObjetoAtrativosTuristicos { get; set; }

    public virtual DbSet<SerIturObjetoDadosEstatistico> SerIturObjetoDadosEstatisticos { get; set; }

    public virtual DbSet<SerIturObjetoEmpresa> SerIturObjetoEmpresas { get; set; }

    public virtual DbSet<SerIturServEquipGrupo> SerIturServEquipGrupos { get; set; }

    public virtual DbSet<SerIturServicosEquipamento> SerIturServicosEquipamentos { get; set; }

    public virtual DbSet<SerIturTipoEstabelecimento> SerIturTipoEstabelecimentos { get; set; }

    public virtual DbSet<SerIturTipoInfraEstrutura> SerIturTipoInfraEstruturas { get; set; }

    public virtual DbSet<SeriTurContinente> SeriTurContinentes { get; set; }

    public virtual DbSet<SeriTurGrupoTipoEstabelecimento> SeriTurGrupoTipoEstabelecimentos { get; set; }

    public virtual DbSet<SeriTurInformacoesPrestada> SeriTurInformacoesPrestadas { get; set; }

    public virtual DbSet<SeriTurMovAtendimento> SeriTurMovAtendimentos { get; set; }

    public virtual DbSet<SeriTurOrigemTuristaCidadao> SeriTurOrigemTuristaCidadaos { get; set; }

    public virtual DbSet<SeriTurPai> SeriTurPais { get; set; }

    public virtual DbSet<SeriTurPostosInformacao> SeriTurPostosInformacaos { get; set; }

    public virtual DbSet<SeriTurPostosInformacaoUsuario> SeriTurPostosInformacaoUsuarios { get; set; }

    public virtual DbSet<SeriTurTiposInformacao> SeriTurTiposInformacaos { get; set; }

    public virtual DbSet<SeriTurUf> SeriTurUfs { get; set; }

    public virtual DbSet<SeriturPublicaEmpresa> SeriturPublicaEmpresas { get; set; }

    public virtual DbSet<ServCalculoExceco> ServCalculoExcecoes { get; set; }

    public virtual DbSet<ServCalculoExec> ServCalculoExecs { get; set; }

    public virtual DbSet<ServCalculoLog> ServCalculoLogs { get; set; }

    public virtual DbSet<Servidore> Servidores { get; set; }

    public virtual DbSet<SimAmIrfOcorrenciasTributoDum> SimAmIrfOcorrenciasTributoDa { get; set; }

    public virtual DbSet<SimAmOcorrenciasExercicio> SimAmOcorrenciasExercicios { get; set; }

    public virtual DbSet<SimAmOcorrenciasTributoDum> SimAmOcorrenciasTributoDa { get; set; }

    public virtual DbSet<SimAmRolDaTemp> SimAmRolDaTemps { get; set; }

    public virtual DbSet<SimAmRolDaTemp2> SimAmRolDaTemp2s { get; set; }

    public virtual DbSet<SimAmRowDum> SimAmRowDa { get; set; }

    public virtual DbSet<SimaminscricaoEmDividaAtiva> SimaminscricaoEmDividaAtivas { get; set; }

    public virtual DbSet<SimamirfocorrenciasTribExerc> SimamirfocorrenciasTribExercs { get; set; }

    public virtual DbSet<SimamrolDa2008> SimamrolDa2008s { get; set; }

    public virtual DbSet<SimamrolDa2008temp> SimamrolDa2008temps { get; set; }

    public virtual DbSet<SimamrowDividaAtiva> SimamrowDividaAtivas { get; set; }

    public virtual DbSet<Simamtributo> Simamtributos { get; set; }

    public virtual DbSet<SimamtributosEquivalencium> SimamtributosEquivalencia { get; set; }

    public virtual DbSet<SimuladoIptu> SimuladoIptus { get; set; }

    public virtual DbSet<SimuladoIptu2010> SimuladoIptu2010s { get; set; }

    public virtual DbSet<SisAtalho> SisAtalhos { get; set; }

    public virtual DbSet<SisCore> SisCores { get; set; }

    public virtual DbSet<SisFaixaHorario> SisFaixaHorarios { get; set; }

    public virtual DbSet<SisFormataCampo> SisFormataCampos { get; set; }

    public virtual DbSet<SisLogDado> SisLogDados { get; set; }

    public virtual DbSet<SisLogDadosComposicao> SisLogDadosComposicaos { get; set; }

    public virtual DbSet<SisLogDadosTemp> SisLogDadosTemps { get; set; }

    public virtual DbSet<SisLogSistema> SisLogSistemas { get; set; }

    public virtual DbSet<SisOcorrencia> SisOcorrencias { get; set; }

    public virtual DbSet<SisParametro> SisParametros { get; set; }

    public virtual DbSet<SisTarefa> SisTarefas { get; set; }

    public virtual DbSet<SisTarefaAgendum> SisTarefaAgenda { get; set; }

    public virtual DbSet<SisTarefaParametro> SisTarefaParametros { get; set; }

    public virtual DbSet<SisTarefaParametrosValore> SisTarefaParametrosValores { get; set; }

    public virtual DbSet<SocComposicaoPasse> SocComposicaoPasses { get; set; }

    public virtual DbSet<SocOcorrencium> SocOcorrencia { get; set; }

    public virtual DbSet<SocPasse> SocPasses { get; set; }

    public virtual DbSet<SocTipoPasse> SocTipoPasses { get; set; }

    public virtual DbSet<SysTabela> SysTabelas { get; set; }

    public virtual DbSet<TabAtributosDinamico> TabAtributosDinamicos { get; set; }

    public virtual DbSet<Table1> Table1s { get; set; }

    public virtual DbSet<Table2> Table2s { get; set; }

    public virtual DbSet<Tb24LotesSolCad> Tb24LotesSolCads { get; set; }

    public virtual DbSet<Tb24SolicitaCadastro> Tb24SolicitaCadastros { get; set; }

    public virtual DbSet<TbCepcorreio> TbCepcorreios { get; set; }

    public virtual DbSet<TbCertidaoPrevium> TbCertidaoPrevia { get; set; }

    public virtual DbSet<TbConSolicitacaoInscricaoAtividade> TbConSolicitacaoInscricaoAtividades { get; set; }

    public virtual DbSet<TbConSolicitacaoInscricaoAtividadesLog> TbConSolicitacaoInscricaoAtividadesLogs { get; set; }

    public virtual DbSet<TbConSolicitacaoInscricaoCmc> TbConSolicitacaoInscricaoCmcs { get; set; }

    public virtual DbSet<TbConSolicitacaoInscricaoCmcTmpTrigger> TbConSolicitacaoInscricaoCmcTmpTriggers { get; set; }

    public virtual DbSet<TbConSolicitacaoInscricaoCmcdespacho> TbConSolicitacaoInscricaoCmcdespachos { get; set; }

    public virtual DbSet<TbConSolicitacaoInscricaoCmcdocumento> TbConSolicitacaoInscricaoCmcdocumentos { get; set; }

    public virtual DbSet<TbConSolicitacaoInscricaoCmcdocumentosAnalise> TbConSolicitacaoInscricaoCmcdocumentosAnalises { get; set; }

    public virtual DbSet<TbConSolicitacaoInscricaoCmceventosRedesim> TbConSolicitacaoInscricaoCmceventosRedesims { get; set; }

    public virtual DbSet<TbConSolicitacaoInscricaoCmclaudoBombeiro> TbConSolicitacaoInscricaoCmclaudoBombeiros { get; set; }

    public virtual DbSet<TbConSolicitacaoInscricaoCmcpublicidade> TbConSolicitacaoInscricaoCmcpublicidades { get; set; }

    public virtual DbSet<TbConSolicitacaoInscricaoCmcservico> TbConSolicitacaoInscricaoCmcservicos { get; set; }

    public virtual DbSet<TbConSolicitacaoInscricaoCmcvigilanciaSanitarium> TbConSolicitacaoInscricaoCmcvigilanciaSanitaria { get; set; }

    public virtual DbSet<TbConSolicitacaoInscricaoSocio> TbConSolicitacaoInscricaoSocios { get; set; }

    public virtual DbSet<TbConsultaPreviaAux> TbConsultaPreviaAuxes { get; set; }

    public virtual DbSet<TbConsultaPreviaAuxAtividade> TbConsultaPreviaAuxAtividades { get; set; }

    public virtual DbSet<TbContaContabil> TbContaContabils { get; set; }

    public virtual DbSet<TbControleExecucaoRotina> TbControleExecucaoRotinas { get; set; }

    public virtual DbSet<TbDadosDaReintegracao> TbDadosDaReintegracaos { get; set; }

    public virtual DbSet<TbDaprevium> TbDaprevia { get; set; }

    public virtual DbSet<TbDeprecicaoValorizacao> TbDeprecicaoValorizacaos { get; set; }

    public virtual DbSet<TbDivContribuintesSancao> TbDivContribuintesSancaos { get; set; }

    public virtual DbSet<TbDivDiarioArrecadacao> TbDivDiarioArrecadacaos { get; set; }

    public virtual DbSet<TbDivDiarioArrecadacaoEstorno> TbDivDiarioArrecadacaoEstornos { get; set; }

    public virtual DbSet<TbDivDividaAtivaJudicial> TbDivDividaAtivaJudicials { get; set; }

    public virtual DbSet<TbDivInscricaoSancao> TbDivInscricaoSancaos { get; set; }

    public virtual DbSet<TbDivLancamentoAtualizacaoCreditoEstorno> TbDivLancamentoAtualizacaoCreditoEstornos { get; set; }

    public virtual DbSet<TbDivLancamentoAtualizacaoMonetariaCredito> TbDivLancamentoAtualizacaoMonetariaCreditos { get; set; }

    public virtual DbSet<TbDivLancamentoCredito> TbDivLancamentoCreditos { get; set; }

    public virtual DbSet<TbDivLancamentoCreditoComposicao> TbDivLancamentoCreditoComposicaos { get; set; }

    public virtual DbSet<TbDivLancamentoCreditoEstorno> TbDivLancamentoCreditoEstornos { get; set; }

    public virtual DbSet<TbDivLancamentoDeducaoCredito> TbDivLancamentoDeducaoCreditos { get; set; }

    public virtual DbSet<TbDivLancamentoDeducaoCreditoEstorno> TbDivLancamentoDeducaoCreditoEstornos { get; set; }

    public virtual DbSet<TbDivParcelamentoCredito> TbDivParcelamentoCreditos { get; set; }

    public virtual DbSet<TbDivTabelasEvento> TbDivTabelasEventos { get; set; }

    public virtual DbSet<TbDivTipoArrecadacao> TbDivTipoArrecadacaos { get; set; }

    public virtual DbSet<TbDivTipoAtualizacaoCredito> TbDivTipoAtualizacaoCreditos { get; set; }

    public virtual DbSet<TbDivTipoCredito> TbDivTipoCreditos { get; set; }

    public virtual DbSet<TbDivTipoDeducaoCredito> TbDivTipoDeducaoCreditos { get; set; }

    public virtual DbSet<TbDivTipoNaturezaCredito> TbDivTipoNaturezaCreditos { get; set; }

    public virtual DbSet<TbDivTipoOperacaoCredito> TbDivTipoOperacaoCreditos { get; set; }

    public virtual DbSet<TbDivTipoOrigemReceitum> TbDivTipoOrigemReceita { get; set; }

    public virtual DbSet<TbDivTipoUnidadeTce> TbDivTipoUnidadeTces { get; set; }

    public virtual DbSet<TbDivTmpArrecadacaoDeduco> TbDivTmpArrecadacaoDeducoes { get; set; }

    public virtual DbSet<TbEmpAtributoDinamicoAtividade> TbEmpAtributoDinamicoAtividades { get; set; }

    public virtual DbSet<TbEmpAtributosDinamico> TbEmpAtributosDinamicos { get; set; }

    public virtual DbSet<TbEstornoCombustivelCupomFiscal> TbEstornoCombustivelCupomFiscals { get; set; }

    public virtual DbSet<TbImoInvasao> TbImoInvasaos { get; set; }

    public virtual DbSet<TbImoMovObrasDepuDesp> TbImoMovObrasDepuDesps { get; set; }

    public virtual DbSet<TbImoMovimentoObra> TbImoMovimentoObras { get; set; }

    public virtual DbSet<TbImoObra> TbImoObras { get; set; }

    public virtual DbSet<TbImoObrasDepuDesp> TbImoObrasDepuDesps { get; set; }

    public virtual DbSet<TbImoTipoArea> TbImoTipoAreas { get; set; }

    public virtual DbSet<TbImportacaoGeo> TbImportacaoGeos { get; set; }

    public virtual DbSet<TbImportacaoGeocaracteristica> TbImportacaoGeocaracteristicas { get; set; }

    public virtual DbSet<TbLicModalidade> TbLicModalidades { get; set; }

    public virtual DbSet<TbObrIntervencao> TbObrIntervencaos { get; set; }

    public virtual DbSet<TbObrTipoObrasServico> TbObrTipoObrasServicos { get; set; }

    public virtual DbSet<TbReceitasGrupoTributo> TbReceitasGrupoTributos { get; set; }

    public virtual DbSet<TbTempBoletosClassifConsistencium> TbTempBoletosClassifConsistencia { get; set; }

    public virtual DbSet<TbTempValidadorCdaprevium> TbTempValidadorCdaprevia { get; set; }

    public virtual DbSet<TbTempValidadorCdum> TbTempValidadorCda { get; set; }

    public virtual DbSet<TbTempprocessaEdital222012> TbTempprocessaEdital222012s { get; set; }

    public virtual DbSet<TbTipoBen> TbTipoBens { get; set; }

    public virtual DbSet<TbTipoOperacao> TbTipoOperacaos { get; set; }

    public virtual DbSet<TbTipoPlaqueta> TbTipoPlaquetas { get; set; }

    public virtual DbSet<TbTipoSocio> TbTipoSocios { get; set; }

    public virtual DbSet<TbTmpCreditosCosip> TbTmpCreditosCosips { get; set; }

    public virtual DbSet<TbTmpRenumeraCreditosDividaAtiva> TbTmpRenumeraCreditosDividaAtivas { get; set; }

    public virtual DbSet<TbTmpTribEdificacoes2017> TbTmpTribEdificacoes2017s { get; set; }

    public virtual DbSet<TbTmpTribEdificacoes2018> TbTmpTribEdificacoes2018s { get; set; }

    public virtual DbSet<TbTmpTribEdificacoes2020> TbTmpTribEdificacoes2020s { get; set; }

    public virtual DbSet<TbTmpTribTerreno2017> TbTmpTribTerreno2017s { get; set; }

    public virtual DbSet<TbTmpTribTerreno2018> TbTmpTribTerreno2018s { get; set; }

    public virtual DbSet<TbTmpTribTerreno2020> TbTmpTribTerreno2020s { get; set; }

    public virtual DbSet<TbTmpcmcVigilancium> TbTmpcmcVigilancia { get; set; }

    public virtual DbSet<TbTribAvaliacoesItbi> TbTribAvaliacoesItbis { get; set; }

    public virtual DbSet<TbTribAvaliacoesItbienglobamento> TbTribAvaliacoesItbienglobamentos { get; set; }

    public virtual DbSet<TbTribExclusaoCalculo> TbTribExclusaoCalculos { get; set; }

    public virtual DbSet<Tbapp156Divida> Tbapp156Dividas { get; set; }

    public virtual DbSet<Tbatendeagendamento> Tbatendeagendamentos { get; set; }

    public virtual DbSet<Tbatendedataindisponivel> Tbatendedataindisponivels { get; set; }

    public virtual DbSet<Tbatendelocal> Tbatendelocals { get; set; }

    public virtual DbSet<Tbatendemapaagendamento> Tbatendemapaagendamentos { get; set; }

    public virtual DbSet<Tbatendeservico> Tbatendeservicos { get; set; }

    public virtual DbSet<Tbatendeusuariolocal> Tbatendeusuariolocals { get; set; }

    public virtual DbSet<Tbautodeclaracao> Tbautodeclaracaos { get; set; }

    public virtual DbSet<Tbb> Tbbs { get; set; }

    public virtual DbSet<Tbbairro> Tbbairros { get; set; }

    public virtual DbSet<Tbcategorium> Tbcategoria { get; set; }

    public virtual DbSet<Tbcelepardebitosdividaativa> Tbcelepardebitosdividaativas { get; set; }

    public virtual DbSet<Tbcidade> Tbcidades { get; set; }

    public virtual DbSet<TbconsultapreviaCme> TbconsultapreviaCmes { get; set; }

    public virtual DbSet<Tbconsultapreviaautodeclaracao> Tbconsultapreviaautodeclaracaos { get; set; }

    public virtual DbSet<Tbconsultapreviadocumento> Tbconsultapreviadocumentos { get; set; }

    public virtual DbSet<Tbconsultapreviadocumentoanalise> Tbconsultapreviadocumentoanalises { get; set; }

    public virtual DbSet<Tbconsultapreviadocumentoresposta> Tbconsultapreviadocumentorespostas { get; set; }

    public virtual DbSet<Tbconsultapreviagraurisco> Tbconsultapreviagrauriscos { get; set; }

    public virtual DbSet<Tbconsultapreviagrauriscoanalise> Tbconsultapreviagrauriscoanalises { get; set; }

    public virtual DbSet<Tbconsultapreviagrauriscoresposta> Tbconsultapreviagrauriscorespostas { get; set; }

    public virtual DbSet<Tbconsultapreviazoneamentoresposta> Tbconsultapreviazoneamentorespostas { get; set; }

    public virtual DbSet<Tbconsultaprevium> Tbconsultaprevia { get; set; }

    public virtual DbSet<TbdoctosPermissionarioTaxiAto> TbdoctosPermissionarioTaxiAtos { get; set; }

    public virtual DbSet<TbdoctosReferencium> TbdoctosReferencia { get; set; }

    public virtual DbSet<TblLixo> TblLixos { get; set; }

    public virtual DbSet<TblogservicoRedesim> TblogservicoRedesims { get; set; }

    public virtual DbSet<Tbpai> Tbpais { get; set; }

    public virtual DbSet<Tbparametro> Tbparametros { get; set; }

    public virtual DbSet<Tbprocuracaoeletronica> Tbprocuracaoeletronicas { get; set; }

    public virtual DbSet<Tbrenato> Tbrenatos { get; set; }

    public virtual DbSet<Tbrevisaodivergencium> Tbrevisaodivergencia { get; set; }

    public virtual DbSet<Tbservico> Tbservicos { get; set; }

    public virtual DbSet<Tbservicousuario> Tbservicousuarios { get; set; }

    public virtual DbSet<Tbsisautonum> Tbsisautonums { get; set; }

    public virtual DbSet<Tbtemp> Tbtemps { get; set; }

    public virtual DbSet<TbtribZonaZoneamentoAtividadePergunta> TbtribZonaZoneamentoAtividadePerguntas { get; set; }

    public virtual DbSet<Tbtribativpergunta> Tbtribativperguntas { get; set; }

    public virtual DbSet<Tbtribativresposta> Tbtribativrespostas { get; set; }

    public virtual DbSet<Tbtribgraurisco> Tbtribgrauriscos { get; set; }

    public virtual DbSet<Tbtribtipoempresa> Tbtribtipoempresas { get; set; }

    public virtual DbSet<Tbtribtipoempresadocumento> Tbtribtipoempresadocumentos { get; set; }

    public virtual DbSet<Tbwhatsdestino> Tbwhatsdestinos { get; set; }

    public virtual DbSet<Tbwhatsmensagem> Tbwhatsmensagems { get; set; }

    public virtual DbSet<Tbwssolicitacaoconsultaprevium> Tbwssolicitacaoconsultaprevia { get; set; }

    public virtual DbSet<Tbwssolicitacaodadosempresa> Tbwssolicitacaodadosempresas { get; set; }

    public virtual DbSet<Telefone> Telefones { get; set; }

    public virtual DbSet<Temp> Temps { get; set; }

    public virtual DbSet<Temp2> Temp2s { get; set; }

    public virtual DbSet<TempAjuizadum> TempAjuizada { get; set; }

    public virtual DbSet<TempAlteracaoMovimento> TempAlteracaoMovimentos { get; set; }

    public virtual DbSet<TempBonificacao2015> TempBonificacao2015s { get; set; }

    public virtual DbSet<TempCadBem> TempCadBems { get; set; }

    public virtual DbSet<TempCalculaVilaBidloteamento5> TempCalculaVilaBidloteamento5s { get; set; }

    public virtual DbSet<TempCalcular> TempCalculars { get; set; }

    public virtual DbSet<TempCalcularDenovo> TempCalcularDenovos { get; set; }

    public virtual DbSet<TempCalculoEmpresa> TempCalculoEmpresas { get; set; }

    public virtual DbSet<TempCertidaoAutomatica> TempCertidaoAutomaticas { get; set; }

    public virtual DbSet<TempCnaemodificado> TempCnaemodificados { get; set; }

    public virtual DbSet<TempEndereco> TempEnderecos { get; set; }

    public virtual DbSet<TempFozhabitaImovei> TempFozhabitaImoveis { get; set; }

    public virtual DbSet<TempHorario> TempHorarios { get; set; }

    public virtual DbSet<TempHorarioSemana> TempHorarioSemanas { get; set; }

    public virtual DbSet<TempImportInscBxSanepar> TempImportInscBxSanepars { get; set; }

    public virtual DbSet<TempInscricao> TempInscricaos { get; set; }

    public virtual DbSet<TempIptu2011> TempIptu2011s { get; set; }

    public virtual DbSet<TempLancIssfixo2011> TempLancIssfixo2011s { get; set; }

    public virtual DbSet<TempLimpezaPublica> TempLimpezaPublicas { get; set; }

    public virtual DbSet<TempLivroDividaAtiva> TempLivroDividaAtivas { get; set; }

    public virtual DbSet<TempLogCdum> TempLogCda { get; set; }

    public virtual DbSet<TempLote02> TempLote02s { get; set; }

    public virtual DbSet<TempMaioresDevedoresContribuinte> TempMaioresDevedoresContribuintes { get; set; }

    public virtual DbSet<TempProcuradorium> TempProcuradoria { get; set; }

    public virtual DbSet<TempRel> TempRels { get; set; }

    public virtual DbSet<TempRelResumoUtilizaco> TempRelResumoUtilizacoes { get; set; }

    public virtual DbSet<TempResumoTributo> TempResumoTributos { get; set; }

    public virtual DbSet<TempRocada2011> TempRocada2011s { get; set; }

    public virtual DbSet<TempSerIturEmpresasSemCmcativ> TempSerIturEmpresasSemCmcativs { get; set; }

    public virtual DbSet<TempSetorBem> TempSetorBems { get; set; }

    public virtual DbSet<TempSisObra> TempSisObras { get; set; }

    public virtual DbSet<TempTaxasVigilancium> TempTaxasVigilancia { get; set; }

    public virtual DbSet<TempTempTribFiscReclamaco> TempTempTribFiscReclamacoes { get; set; }

    public virtual DbSet<TempTransRemovido> TempTransRemovidos { get; set; }

    public virtual DbSet<TempTribAtivServico> TempTribAtivServicos { get; set; }

    public virtual DbSet<TempTribAtivTributosEmpresa> TempTribAtivTributosEmpresas { get; set; }

    public virtual DbSet<TempTribEdificacoesEndereco> TempTribEdificacoesEnderecos { get; set; }

    public virtual DbSet<TempTribEmpresasAtiv> TempTribEmpresasAtivs { get; set; }

    public virtual DbSet<TempTribEmpresasMovSituacao> TempTribEmpresasMovSituacaos { get; set; }

    public virtual DbSet<TempVilmar> TempVilmars { get; set; }

    public virtual DbSet<TempVistoriasBombeiros2003> TempVistoriasBombeiros2003s { get; set; }

    public virtual DbSet<TempVistoriasRenovacaoAlvara2003> TempVistoriasRenovacaoAlvara2003s { get; set; }

    public virtual DbSet<TempVistoriasSaude2003> TempVistoriasSaude2003s { get; set; }

    public virtual DbSet<TempVoltarVencimento> TempVoltarVencimentos { get; set; }

    public virtual DbSet<TempZonaCnae> TempZonaCnaes { get; set; }

    public virtual DbSet<TempZonaCnae2> TempZonaCnae2s { get; set; }

    public virtual DbSet<TempZonaCnae20> TempZonaCnae20s { get; set; }

    public virtual DbSet<Tempalvaraempresa> Tempalvaraempresas { get; set; }

    public virtual DbSet<Tempbktbdidiarioarrecadacao> Tempbktbdidiarioarrecadacaos { get; set; }

    public virtual DbSet<TempboletoClassificacao> TempboletoClassificacaos { get; set; }

    public virtual DbSet<TempboletoConsistencium> TempboletoConsistencia { get; set; }

    public virtual DbSet<Tempcomp> Tempcomps { get; set; }

    public virtual DbSet<Tempdebug> Tempdebugs { get; set; }

    public virtual DbSet<Tempexcluir> Tempexcluirs { get; set; }

    public virtual DbSet<TempextratoRosi17122010> TempextratoRosi17122010s { get; set; }

    public virtual DbSet<TempfissAtividadesDocto> TempfissAtividadesDoctos { get; set; }

    public virtual DbSet<TempfozHabitaCadastro> TempfozHabitaCadastros { get; set; }

    public virtual DbSet<TempfozhabitaImovei1> TempfozhabitaImoveis1 { get; set; }

    public virtual DbSet<TemplogFozhabitum> TemplogFozhabita { get; set; }

    public virtual DbSet<TemptribAtividadeTipoAlvaraTributo> TemptribAtividadeTipoAlvaraTributos { get; set; }

    public virtual DbSet<TemptribZonaZoneamentoAtividade> TemptribZonaZoneamentoAtividades { get; set; }

    public virtual DbSet<Temptribdiveventosdc> Temptribdiveventosdcs { get; set; }

    public virtual DbSet<TemptribdividasimoaJuizadum> TemptribdividasimoaJuizada { get; set; }

    public virtual DbSet<Testada> Testadas { get; set; }

    public virtual DbSet<TextoPadraoDespacho> TextoPadraoDespachos { get; set; }

    public virtual DbSet<TipoBaixa> TipoBaixas { get; set; }

    public virtual DbSet<TipoConcessao> TipoConcessaos { get; set; }

    public virtual DbSet<TipoImovel> TipoImovels { get; set; }

    public virtual DbSet<TipoLicitacao> TipoLicitacaos { get; set; }

    public virtual DbSet<TipoProcesso> TipoProcessos { get; set; }

    public virtual DbSet<TipoSaidum> TipoSaida { get; set; }

    public virtual DbSet<TipologrBrasilium> TipologrBrasilia { get; set; }

    public virtual DbSet<TiposDocumento> TiposDocumentos { get; set; }

    public virtual DbSet<TiposDocumentosOficiai> TiposDocumentosOficiais { get; set; }

    public virtual DbSet<TmpBonificacao> TmpBonificacaos { get; set; }

    public virtual DbSet<TmpContrib5Uffi> TmpContrib5Uffis { get; set; }

    public virtual DbSet<TmpContribIsencao> TmpContribIsencaos { get; set; }

    public virtual DbSet<TmpContribuitesImobiliaria> TmpContribuitesImobiliarias { get; set; }

    public virtual DbSet<TmpCragiig> TmpCragiigs { get; set; }

    public virtual DbSet<TmpCruza> TmpCruzas { get; set; }

    public virtual DbSet<TmpDiviComposicaoBugadum> TmpDiviComposicaoBugada { get; set; }

    public virtual DbSet<TmpDividasCancelar5Uffi> TmpDividasCancelar5Uffis { get; set; }

    public virtual DbSet<TmpDividasCancelar5UffiNew> TmpDividasCancelar5UffiNews { get; set; }

    public virtual DbSet<TmpDividasEmpresa> TmpDividasEmpresas { get; set; }

    public virtual DbSet<TmpDividasRelReginaldo> TmpDividasRelReginaldos { get; set; }

    public virtual DbSet<TmpEmpresa> TmpEmpresas { get; set; }

    public virtual DbSet<TmpImportarVistoria> TmpImportarVistorias { get; set; }

    public virtual DbSet<TmpInscricaoFracaoIdeal> TmpInscricaoFracaoIdeals { get; set; }

    public virtual DbSet<TmpInscricaoGrafica> TmpInscricaoGraficas { get; set; }

    public virtual DbSet<TmpInscricaoSuspensao> TmpInscricaoSuspensaos { get; set; }

    public virtual DbSet<TmpIptu> TmpIptus { get; set; }

    public virtual DbSet<TmpLancamento16> TmpLancamento16s { get; set; }

    public virtual DbSet<TmpLancamento316> TmpLancamento316s { get; set; }

    public virtual DbSet<TmpLancamento6> TmpLancamento6s { get; set; }

    public virtual DbSet<TmpLogsistema> TmpLogsistemas { get; set; }

    public virtual DbSet<TmpSimuladoIptu2015> TmpSimuladoIptu2015s { get; set; }

    public virtual DbSet<TmpTestetbDivDiarioArrecadacao> TmpTestetbDivDiarioArrecadacaos { get; set; }

    public virtual DbSet<TmpTribAdvertencium> TmpTribAdvertencia { get; set; }

    public virtual DbSet<TmpTribAtivTributosEmpresa> TmpTribAtivTributosEmpresas { get; set; }

    public virtual DbSet<TmpTribConsultaPrevium> TmpTribConsultaPrevia { get; set; }

    public virtual DbSet<TmpTribEdificacoes2015> TmpTribEdificacoes2015s { get; set; }

    public virtual DbSet<TmpTribEdificacoes2021> TmpTribEdificacoes2021s { get; set; }

    public virtual DbSet<TmpTribEdificacoes2023> TmpTribEdificacoes2023s { get; set; }

    public virtual DbSet<TmpTribEmpresasAtivAtributo> TmpTribEmpresasAtivAtributos { get; set; }

    public virtual DbSet<TmpTribEmpresasTipoAlvaraTributo> TmpTribEmpresasTipoAlvaraTributos { get; set; }

    public virtual DbSet<TmpTribEmpresasTributo> TmpTribEmpresasTributos { get; set; }

    public virtual DbSet<TmpTribIntegraContabil> TmpTribIntegraContabils { get; set; }

    public virtual DbSet<TmpTribNotificacaoDivida> TmpTribNotificacaoDividas { get; set; }

    public virtual DbSet<TmpTribProtocoloAlteracao> TmpTribProtocoloAlteracaos { get; set; }

    public virtual DbSet<TmpTribTerreno2015> TmpTribTerreno2015s { get; set; }

    public virtual DbSet<TmpTribTerreno2021> TmpTribTerreno2021s { get; set; }

    public virtual DbSet<TmpTribTerreno2023> TmpTribTerreno2023s { get; set; }

    public virtual DbSet<TmpVencimentoCon> TmpVencimentoCons { get; set; }

    public virtual DbSet<TmpVencimentoEmp> TmpVencimentoEmps { get; set; }

    public virtual DbSet<TmpVencimentoImo> TmpVencimentoImos { get; set; }

    public virtual DbSet<TmpVistorias2013> TmpVistorias2013s { get; set; }

    public virtual DbSet<TmpVistoriasNr> TmpVistoriasNrs { get; set; }

    public virtual DbSet<TmpVistoriasO> TmpVistoriasOs { get; set; }

    public virtual DbSet<TmpbaixaDeducao> TmpbaixaDeducaos { get; set; }

    public virtual DbSet<Tmpcnpj1002> Tmpcnpj1002s { get; set; }

    public virtual DbSet<Tmpevento> Tmpeventos { get; set; }

    public virtual DbSet<TmplancamentoIsento16> TmplancamentoIsento16s { get; set; }

    public virtual DbSet<TmplancamentoIsento316> TmplancamentoIsento316s { get; set; }

    public virtual DbSet<TmplancamentoIsento6> TmplancamentoIsento6s { get; set; }

    public virtual DbSet<Tmprefazer> Tmprefazers { get; set; }

    public virtual DbSet<TmpsislogdadosCon> TmpsislogdadosCons { get; set; }

    public virtual DbSet<TmpsislogdadosEmp> TmpsislogdadosEmps { get; set; }

    public virtual DbSet<TmpsislogdadosImo> TmpsislogdadosImos { get; set; }

    public virtual DbSet<TmptribAtividadeTipoAlvaraTributo> TmptribAtividadeTipoAlvaraTributos { get; set; }

    public virtual DbSet<TmptribDivEvento> TmptribDivEventos { get; set; }

    public virtual DbSet<TribAcabamentoExterno> TribAcabamentoExternos { get; set; }

    public virtual DbSet<TribAcabamentoInterno> TribAcabamentoInternos { get; set; }

    public virtual DbSet<TribAcompAntTipoMotivo> TribAcompAntTipoMotivos { get; set; }

    public virtual DbSet<TribAcompAnterior> TribAcompAnteriors { get; set; }

    public virtual DbSet<TribAcrescimo> TribAcrescimos { get; set; }

    public virtual DbSet<TribAdvertencia> TribAdvertencias { get; set; }

    public virtual DbSet<TribAdvertenciaTipoOrigem> TribAdvertenciaTipoOrigems { get; set; }

    public virtual DbSet<TribAdvertenciasDiv> TribAdvertenciasDivs { get; set; }

    public virtual DbSet<TribAdvertenciasDivMov> TribAdvertenciasDivMovs { get; set; }

    public virtual DbSet<TribAgrupamento> TribAgrupamentos { get; set; }

    public virtual DbSet<TribAinfarquivo> TribAinfarquivos { get; set; }

    public virtual DbSet<TribAinfarquivoDetalhe> TribAinfarquivoDetalhes { get; set; }

    public virtual DbSet<TribAinfarquivoDividasLancada> TribAinfarquivoDividasLancadas { get; set; }

    public virtual DbSet<TribAlvArea> TribAlvAreas { get; set; }

    public virtual DbSet<TribAlvCalculo> TribAlvCalculos { get; set; }

    public virtual DbSet<TribAlvDividum> TribAlvDivida { get; set; }

    public virtual DbSet<TribAlvDocumento> TribAlvDocumentos { get; set; }

    public virtual DbSet<TribAlvDocumentoAreaConstrucao> TribAlvDocumentoAreaConstrucaos { get; set; }

    public virtual DbSet<TribAlvDocumentoAreaConstrucaoExterno> TribAlvDocumentoAreaConstrucaoExternos { get; set; }

    public virtual DbSet<TribAlvDocumentoComplemento> TribAlvDocumentoComplementos { get; set; }

    public virtual DbSet<TribAlvDocumentoExterno> TribAlvDocumentoExternos { get; set; }

    public virtual DbSet<TribAlvDocumentoLog> TribAlvDocumentoLogs { get; set; }

    public virtual DbSet<TribAlvFormula> TribAlvFormulas { get; set; }

    public virtual DbSet<TribAlvTipoCalculo> TribAlvTipoCalculos { get; set; }

    public virtual DbSet<TribAlvTipoResponsavel> TribAlvTipoResponsavels { get; set; }

    public virtual DbSet<TribAlvaraConstrucao> TribAlvaraConstrucaos { get; set; }

    public virtual DbSet<TribAlvaraConstrucaoContribuinte> TribAlvaraConstrucaoContribuintes { get; set; }

    public virtual DbSet<TribAlvaraConstrucaoDividasContrib> TribAlvaraConstrucaoDividasContribs { get; set; }

    public virtual DbSet<TribAlvaraConstrucaoDividasImovei> TribAlvaraConstrucaoDividasImoveis { get; set; }

    public virtual DbSet<TribAlvaraConstrucaoEdificaco> TribAlvaraConstrucaoEdificacoes { get; set; }

    public virtual DbSet<TribAlvaraConstrucaoParam> TribAlvaraConstrucaoParams { get; set; }

    public virtual DbSet<TribAlvaraConstrucaoProfissional> TribAlvaraConstrucaoProfissionals { get; set; }

    public virtual DbSet<TribAlvaraEmpresa> TribAlvaraEmpresas { get; set; }

    public virtual DbSet<TribAlvaraEmpresaslog> TribAlvaraEmpresaslogs { get; set; }

    public virtual DbSet<TribAlvaraRenovacao> TribAlvaraRenovacaos { get; set; }

    public virtual DbSet<TribAlvaraRenovacaoDivida> TribAlvaraRenovacaoDividas { get; set; }

    public virtual DbSet<TribAlvaraTermoDispenca> TribAlvaraTermoDispencas { get; set; }

    public virtual DbSet<TribAmostraMercado> TribAmostraMercados { get; set; }

    public virtual DbSet<TribAmostraMercadoItbi> TribAmostraMercadoItbis { get; set; }

    public virtual DbSet<TribArqMortoBoleto> TribArqMortoBoletos { get; set; }

    public virtual DbSet<TribArquivoEmpresaPendenciasSn> TribArquivoEmpresaPendenciasSns { get; set; }

    public virtual DbSet<TribArquivoPendenciasSn> TribArquivoPendenciasSns { get; set; }

    public virtual DbSet<TribArquivoSiafi> TribArquivoSiafis { get; set; }

    public virtual DbSet<TribAssinaturaTiposDocumento> TribAssinaturaTiposDocumentos { get; set; }

    public virtual DbSet<TribAssinaturasServidor> TribAssinaturasServidors { get; set; }

    public virtual DbSet<TribAtivAtividade> TribAtivAtividades { get; set; }

    public virtual DbSet<TribAtivAtividadeDocumento> TribAtivAtividadeDocumentos { get; set; }

    public virtual DbSet<TribAtivAtividadeGrauRisco> TribAtivAtividadeGrauRiscos { get; set; }

    public virtual DbSet<TribAtivAtividadeGrauRiscoOld> TribAtivAtividadeGrauRiscoOlds { get; set; }

    public virtual DbSet<TribAtivAtividadeGrauRiscoPergunta> TribAtivAtividadeGrauRiscoPerguntas { get; set; }

    public virtual DbSet<TribAtivAtividadePergunta> TribAtivAtividadePerguntas { get; set; }

    public virtual DbSet<TribAtivClasse> TribAtivClasses { get; set; }

    public virtual DbSet<TribAtivDivisao> TribAtivDivisaos { get; set; }

    public virtual DbSet<TribAtivDocumento> TribAtivDocumentos { get; set; }

    public virtual DbSet<TribAtivDocumentosDispensado> TribAtivDocumentosDispensados { get; set; }

    public virtual DbSet<TribAtivGrupo> TribAtivGrupos { get; set; }

    public virtual DbSet<TribAtivPergunta> TribAtivPerguntas { get; set; }

    public virtual DbSet<TribAtivSecao> TribAtivSecaos { get; set; }

    public virtual DbSet<TribAtivSetor> TribAtivSetors { get; set; }

    public virtual DbSet<TribAtivSetorLicenciamento> TribAtivSetorLicenciamentos { get; set; }

    public virtual DbSet<TribAtivSetorLicenciamentousuario> TribAtivSetorLicenciamentousuarios { get; set; }

    public virtual DbSet<TribAtivSetorTributo> TribAtivSetorTributos { get; set; }

    public virtual DbSet<TribAtivTributosEmpresa> TribAtivTributosEmpresas { get; set; }

    public virtual DbSet<TribAtividadeTipoAlvaraTributo> TribAtividadeTipoAlvaraTributos { get; set; }

    public virtual DbSet<TribAutorizacaoBlocosNf> TribAutorizacaoBlocosNfs { get; set; }

    public virtual DbSet<TribAutosInfracao> TribAutosInfracaos { get; set; }

    public virtual DbSet<TribBaixaArquivoSuperSimple> TribBaixaArquivoSuperSimples { get; set; }

    public virtual DbSet<TribBaixaConteudoArquivo> TribBaixaConteudoArquivos { get; set; }

    public virtual DbSet<TribBaixaDetalhesArquivoSuperSimple> TribBaixaDetalhesArquivoSuperSimples { get; set; }

    public virtual DbSet<TribBaixaDevolucao> TribBaixaDevolucaos { get; set; }

    public virtual DbSet<TribBaixaDevolucaoCompensacao> TribBaixaDevolucaoCompensacaos { get; set; }

    public virtual DbSet<TribBaixaDevolucaoDivida> TribBaixaDevolucaoDividas { get; set; }

    public virtual DbSet<TribBaixaDevolucaoDividasComp> TribBaixaDevolucaoDividasComps { get; set; }

    public virtual DbSet<TribBaixaMovimento> TribBaixaMovimentos { get; set; }

    public virtual DbSet<TribBoleto> TribBoletos { get; set; }

    public virtual DbSet<TribBoletosBarra> TribBoletosBarras { get; set; }

    public virtual DbSet<TribBoletosDivida> TribBoletosDividas { get; set; }

    public virtual DbSet<TribBoletosErro> TribBoletosErros { get; set; }

    public virtual DbSet<TribBoletosErrosbk> TribBoletosErrosbks { get; set; }

    public virtual DbSet<TribBoletosParaArquivo> TribBoletosParaArquivos { get; set; }

    public virtual DbSet<TribBoletosQrcode> TribBoletosQrcodes { get; set; }

    public virtual DbSet<TribBonificacao> TribBonificacaos { get; set; }

    public virtual DbSet<TribCalcInf> TribCalcInfs { get; set; }

    public virtual DbSet<TribCalcInfTributo> TribCalcInfTributos { get; set; }

    public virtual DbSet<TribCalcadum> TribCalcada { get; set; }

    public virtual DbSet<TribCalculoSimulado> TribCalculoSimulados { get; set; }

    public virtual DbSet<TribCalculoSimuladoLanc> TribCalculoSimuladoLancs { get; set; }

    public virtual DbSet<TribCartaHabitacao> TribCartaHabitacaos { get; set; }

    public virtual DbSet<TribCartaHabitacaoAlvaraConstr> TribCartaHabitacaoAlvaraConstrs { get; set; }

    public virtual DbSet<TribCategProfissional> TribCategProfissionals { get; set; }

    public virtual DbSet<TribCategoriaEdificacao> TribCategoriaEdificacaos { get; set; }

    public virtual DbSet<TribCausasMorte> TribCausasMortes { get; set; }

    public virtual DbSet<TribCbo> TribCbos { get; set; }

    public virtual DbSet<TribCertidao> TribCertidaos { get; set; }

    public virtual DbSet<TribCertidaoDacontribuinte> TribCertidaoDacontribuintes { get; set; }

    public virtual DbSet<TribCertidaoDadivida> TribCertidaoDadividas { get; set; }

    public virtual DbSet<TribCertidaoDaempresa> TribCertidaoDaempresas { get; set; }

    public virtual DbSet<TribCertidaoDaimovel> TribCertidaoDaimovels { get; set; }

    public virtual DbSet<TribCertidaoDaimportacao> TribCertidaoDaimportacaos { get; set; }

    public virtual DbSet<TribCertidaoDalivro> TribCertidaoDalivros { get; set; }

    public virtual DbSet<TribCertidaoDaversao> TribCertidaoDaversaos { get; set; }

    public virtual DbSet<TribCertidaoDum> TribCertidaoDa { get; set; }

    public virtual DbSet<TribCertidaoItbi> TribCertidaoItbis { get; set; }

    public virtual DbSet<TribCertidaoValorMenorUffi> TribCertidaoValorMenorUffis { get; set; }

    public virtual DbSet<TribCertidoesNegativa> TribCertidoesNegativas { get; set; }

    public virtual DbSet<TribClassificaReceita2013> TribClassificaReceita2013s { get; set; }

    public virtual DbSet<TribClassificaReceitaIntegra> TribClassificaReceitaIntegras { get; set; }

    public virtual DbSet<TribClassificaReceitum> TribClassificaReceita { get; set; }

    public virtual DbSet<TribClassificaoReceitaDetalhadum> TribClassificaoReceitaDetalhada { get; set; }

    public virtual DbSet<TribCmedificacaoProcesso> TribCmedificacaoProcessos { get; set; }

    public virtual DbSet<TribCmoficio> TribCmoficios { get; set; }

    public virtual DbSet<TribCmprocesso> TribCmprocessos { get; set; }

    public virtual DbSet<TribCmprocessoLagrad> TribCmprocessoLagrads { get; set; }

    public virtual DbSet<TribCmtipoConstrucao> TribCmtipoConstrucaos { get; set; }

    public virtual DbSet<TribCmtipoPavimentacao> TribCmtipoPavimentacaos { get; set; }

    public virtual DbSet<TribCobertura> TribCoberturas { get; set; }

    public virtual DbSet<TribCoeficienteTaxasIptu> TribCoeficienteTaxasIptus { get; set; }

    public virtual DbSet<TribComposicaoDivContribuinte> TribComposicaoDivContribuintes { get; set; }

    public virtual DbSet<TribComposicaoDivEmpresa> TribComposicaoDivEmpresas { get; set; }

    public virtual DbSet<TribComposicaoDivImo> TribComposicaoDivImos { get; set; }

    public virtual DbSet<TribComprovanteSitEmpresa> TribComprovanteSitEmpresas { get; set; }

    public virtual DbSet<TribCondJuridica> TribCondJuridicas { get; set; }

    public virtual DbSet<TribConfigLancHonorario> TribConfigLancHonorarios { get; set; }

    public virtual DbSet<TribContador> TribContadors { get; set; }

    public virtual DbSet<TribContribCategProf> TribContribCategProfs { get; set; }

    public virtual DbSet<TribContribuintesBloqJuridico> TribContribuintesBloqJuridicos { get; set; }

    public virtual DbSet<TribConversaoerrosCadEconomico> TribConversaoerrosCadEconomicos { get; set; }

    public virtual DbSet<TribCub> TribCubs { get; set; }

    public virtual DbSet<TribDenominacao> TribDenominacaos { get; set; }

    public virtual DbSet<TribDepositoJudicial> TribDepositoJudicials { get; set; }

    public virtual DbSet<TribDepositoJudicialBaixa> TribDepositoJudicialBaixas { get; set; }

    public virtual DbSet<TribDepreciacaoIdade> TribDepreciacaoIdades { get; set; }

    public virtual DbSet<TribDiarioArrecadacao> TribDiarioArrecadacaos { get; set; }

    public virtual DbSet<TribDiarioArrecadacaoTemp> TribDiarioArrecadacaoTemps { get; set; }

    public virtual DbSet<TribDiarioArrecadacaoTemp2> TribDiarioArrecadacaoTemp2s { get; set; }

    public virtual DbSet<TribDivEvento> TribDivEventos { get; set; }

    public virtual DbSet<TribDivEventosDcfozHabitum> TribDivEventosDcfozHabita { get; set; }

    public virtual DbSet<TribDividasBaixa> TribDividasBaixas { get; set; }

    public virtual DbSet<TribDividasBaixaBoleto> TribDividasBaixaBoletos { get; set; }

    public virtual DbSet<TribDividasBkp> TribDividasBkps { get; set; }

    public virtual DbSet<TribDividasBloqueio> TribDividasBloqueios { get; set; }

    public virtual DbSet<TribDividasContribuinte> TribDividasContribuintes { get; set; }

    public virtual DbSet<TribDividasContribuinteProcesso> TribDividasContribuinteProcessos { get; set; }

    public virtual DbSet<TribDividasEmpresa> TribDividasEmpresas { get; set; }

    public virtual DbSet<TribDividasImo> TribDividasImos { get; set; }

    public virtual DbSet<TribDividasImoEdital> TribDividasImoEditals { get; set; }

    public virtual DbSet<TribDividasInscricaoDum> TribDividasInscricaoDa { get; set; }

    public virtual DbSet<TribDividasLogAlteracao> TribDividasLogAlteracaos { get; set; }

    public virtual DbSet<TribDividasVinculoAnuencia> TribDividasVinculoAnuencias { get; set; }

    public virtual DbSet<TribDocumento> TribDocumentos { get; set; }

    public virtual DbSet<TribDocumentosContribuinte> TribDocumentosContribuintes { get; set; }

    public virtual DbSet<TribDocumentosIptu> TribDocumentosIptus { get; set; }

    public virtual DbSet<TribDocumentosTipo> TribDocumentosTipos { get; set; }

    public virtual DbSet<TribDucBloqueioInscricao> TribDucBloqueioInscricaos { get; set; }

    public virtual DbSet<TribDucHistoricoBloqueio> TribDucHistoricoBloqueios { get; set; }

    public virtual DbSet<TribEdifAtributosDinamico> TribEdifAtributosDinamicos { get; set; }

    public virtual DbSet<TribEdifCartorio> TribEdifCartorios { get; set; }

    public virtual DbSet<TribEdifCartoriosCompradore> TribEdifCartoriosCompradores { get; set; }

    public virtual DbSet<TribEdifCartoriosVendedore> TribEdifCartoriosVendedores { get; set; }

    public virtual DbSet<TribEdifInstSanitarium> TribEdifInstSanitaria { get; set; }

    public virtual DbSet<TribEdifNumPredial> TribEdifNumPredials { get; set; }

    public virtual DbSet<TribEdifParamCalculo> TribEdifParamCalculos { get; set; }

    public virtual DbSet<TribEdificaco> TribEdificacoes { get; set; }

    public virtual DbSet<TribEdificacoesAnexo> TribEdificacoesAnexos { get; set; }

    public virtual DbSet<TribEdificacoesBloqueada> TribEdificacoesBloqueadas { get; set; }

    public virtual DbSet<TribEdificacoesCancelada> TribEdificacoesCanceladas { get; set; }

    public virtual DbSet<TribEdificacoesCertidaoPredial> TribEdificacoesCertidaoPredials { get; set; }

    public virtual DbSet<TribEdificacoesContrib> TribEdificacoesContribs { get; set; }

    public virtual DbSet<TribEdificacoesContribAnteriore> TribEdificacoesContribAnteriores { get; set; }

    public virtual DbSet<TribEdificacoesEndereco> TribEdificacoesEnderecos { get; set; }

    public virtual DbSet<TribEdificacoesEnderecoTemp> TribEdificacoesEnderecoTemps { get; set; }

    public virtual DbSet<TribEdificacoesImagen> TribEdificacoesImagens { get; set; }

    public virtual DbSet<TribEdificacoesImagensTipo> TribEdificacoesImagensTipos { get; set; }

    public virtual DbSet<TribEdificacoesImportacao> TribEdificacoesImportacaos { get; set; }

    public virtual DbSet<TribEdificacoesImune> TribEdificacoesImunes { get; set; }

    public virtual DbSet<TribEdificacoesInsencoesMinhaCasa> TribEdificacoesInsencoesMinhaCasas { get; set; }

    public virtual DbSet<TribEdificacoesIsencao> TribEdificacoesIsencaos { get; set; }

    public virtual DbSet<TribEdificacoesIsencaoTrib> TribEdificacoesIsencaoTribs { get; set; }

    public virtual DbSet<TribEdificacoesLancamentosAnteriore> TribEdificacoesLancamentosAnteriores { get; set; }

    public virtual DbSet<TribEdificacoesLancamentosDeducao> TribEdificacoesLancamentosDeducaos { get; set; }

    public virtual DbSet<TribEdificacoesValorVenalTemp> TribEdificacoesValorVenalTemps { get; set; }

    public virtual DbSet<TribEditalCompra> TribEditalCompras { get; set; }

    public virtual DbSet<TribEditalComprasContribuinte> TribEditalComprasContribuintes { get; set; }

    public virtual DbSet<TribEditalInscrico> TribEditalInscricoes { get; set; }

    public virtual DbSet<TribEditalLanc> TribEditalLancs { get; set; }

    public virtual DbSet<TribEditalLancDivida> TribEditalLancDividas { get; set; }

    public virtual DbSet<TribEditalLancVenc> TribEditalLancVencs { get; set; }

    public virtual DbSet<TribEmprAtivVedada> TribEmprAtivVedadas { get; set; }

    public virtual DbSet<TribEmpresa> TribEmpresas { get; set; }

    public virtual DbSet<TribEmpresaAnexo> TribEmpresaAnexos { get; set; }

    public virtual DbSet<TribEmpresasAtiv> TribEmpresasAtivs { get; set; }

    public virtual DbSet<TribEmpresasAtivAtributo> TribEmpresasAtivAtributos { get; set; }

    public virtual DbSet<TribEmpresasEdificaco> TribEmpresasEdificacoes { get; set; }

    public virtual DbSet<TribEmpresasEnquadramento> TribEmpresasEnquadramentos { get; set; }

    public virtual DbSet<TribEmpresasFatorAreaAbertum> TribEmpresasFatorAreaAberta { get; set; }

    public virtual DbSet<TribEmpresasFatorAreaConstruidum> TribEmpresasFatorAreaConstruida { get; set; }

    public virtual DbSet<TribEmpresasGrupoRisco> TribEmpresasGrupoRiscos { get; set; }

    public virtual DbSet<TribEmpresasLaudoBombeiro> TribEmpresasLaudoBombeiros { get; set; }

    public virtual DbSet<TribEmpresasLimitesSocio> TribEmpresasLimitesSocios { get; set; }

    public virtual DbSet<TribEmpresasLimitesTaxa> TribEmpresasLimitesTaxas { get; set; }

    public virtual DbSet<TribEmpresasMovRegime> TribEmpresasMovRegimes { get; set; }

    public virtual DbSet<TribEmpresasMovSituacao> TribEmpresasMovSituacaos { get; set; }

    public virtual DbSet<TribEmpresasMovSituacaotemp> TribEmpresasMovSituacaotemps { get; set; }

    public virtual DbSet<TribEmpresasParamCalc> TribEmpresasParamCalcs { get; set; }

    public virtual DbSet<TribEmpresasPublicidade> TribEmpresasPublicidades { get; set; }

    public virtual DbSet<TribEmpresasQuestionario> TribEmpresasQuestionarios { get; set; }

    public virtual DbSet<TribEmpresasQuestionarioConsultaPrevium> TribEmpresasQuestionarioConsultaPrevia { get; set; }

    public virtual DbSet<TribEmpresasReativaSituacao> TribEmpresasReativaSituacaos { get; set; }

    public virtual DbSet<TribEmpresasRecadastroAutonomo> TribEmpresasRecadastroAutonomos { get; set; }

    public virtual DbSet<TribEmpresasRisco> TribEmpresasRiscos { get; set; }

    public virtual DbSet<TribEmpresasServico> TribEmpresasServicos { get; set; }

    public virtual DbSet<TribEmpresasServicosVelha> TribEmpresasServicosVelhas { get; set; }

    public virtual DbSet<TribEmpresasSimplesMov> TribEmpresasSimplesMovs { get; set; }

    public virtual DbSet<TribEmpresasSociosProfissionai> TribEmpresasSociosProfissionais { get; set; }

    public virtual DbSet<TribEmpresasTabela> TribEmpresasTabelas { get; set; }

    public virtual DbSet<TribEmpresasTabelaValorCalc> TribEmpresasTabelaValorCalcs { get; set; }

    public virtual DbSet<TribEmpresasTempsimple> TribEmpresasTempsimples { get; set; }

    public virtual DbSet<TribEmpresasTipo> TribEmpresasTipos { get; set; }

    public virtual DbSet<TribEmpresasTipoAlvaraTributo> TribEmpresasTipoAlvaraTributos { get; set; }

    public virtual DbSet<TribEmpresasTipoCaracteristica> TribEmpresasTipoCaracteristicas { get; set; }

    public virtual DbSet<TribEmpresasTipoConstituicao> TribEmpresasTipoConstituicaos { get; set; }

    public virtual DbSet<TribEmpresasTipoEntidade> TribEmpresasTipoEntidades { get; set; }

    public virtual DbSet<TribEmpresasTipoRegime> TribEmpresasTipoRegimes { get; set; }

    public virtual DbSet<TribEmpresasTipoSituacao> TribEmpresasTipoSituacaos { get; set; }

    public virtual DbSet<TribEmpresasTiposAlvara> TribEmpresasTiposAlvaras { get; set; }

    public virtual DbSet<TribEmpresasTributo> TribEmpresasTributos { get; set; }

    public virtual DbSet<TribEmpresasTributosBkp2013> TribEmpresasTributosBkp2013s { get; set; }

    public virtual DbSet<TribEmpresasValorLeito> TribEmpresasValorLeitos { get; set; }

    public virtual DbSet<TribEmpresasVigilanciaSanitarium> TribEmpresasVigilanciaSanitaria { get; set; }

    public virtual DbSet<TribEnquadramentoNotificacao> TribEnquadramentoNotificacaos { get; set; }

    public virtual DbSet<TribEnquadramentoNotificacaoEmpresa> TribEnquadramentoNotificacaoEmpresas { get; set; }

    public virtual DbSet<TribEquipamento> TribEquipamentos { get; set; }

    public virtual DbSet<TribErrosArquivoIptu> TribErrosArquivoIptus { get; set; }

    public virtual DbSet<TribErrosCalculoEmpresa> TribErrosCalculoEmpresas { get; set; }

    public virtual DbSet<TribErrosCalculoImob> TribErrosCalculoImobs { get; set; }

    public virtual DbSet<TribErrosFunco> TribErrosFuncoes { get; set; }

    public virtual DbSet<TribEsquadria> TribEsquadrias { get; set; }

    public virtual DbSet<TribEstadoConservacao> TribEstadoConservacaos { get; set; }

    public virtual DbSet<TribEstornoPagamento> TribEstornoPagamentos { get; set; }

    public virtual DbSet<TribEstruturaParede> TribEstruturaParedes { get; set; }

    public virtual DbSet<TribExtratoUnificadoDetalhe> TribExtratoUnificadoDetalhes { get; set; }

    public virtual DbSet<TribExtratoUnificadoDevolucaoDivida> TribExtratoUnificadoDevolucaoDividas { get; set; }

    public virtual DbSet<TribExtratoUnificadoHeader> TribExtratoUnificadoHeaders { get; set; }

    public virtual DbSet<TribExtratoUnificadoTap> TribExtratoUnificadoTaps { get; set; }

    public virtual DbSet<TribFaixaEnquadramento> TribFaixaEnquadramentos { get; set; }

    public virtual DbSet<TribFatorCorArea> TribFatorCorAreas { get; set; }

    public virtual DbSet<TribFatorK> TribFatorKs { get; set; }

    public virtual DbSet<TribFiscApreenso> TribFiscApreensoes { get; set; }

    public virtual DbSet<TribFiscAssunto> TribFiscAssuntos { get; set; }

    public virtual DbSet<TribFiscAtributo> TribFiscAtributos { get; set; }

    public virtual DbSet<TribFiscAutoInfracaoPaf> TribFiscAutoInfracaoPafs { get; set; }

    public virtual DbSet<TribFiscAutoInfracaoPafobjeto> TribFiscAutoInfracaoPafobjetos { get; set; }

    public virtual DbSet<TribFiscAutoInfraco> TribFiscAutoInfracoes { get; set; }

    public virtual DbSet<TribFiscAutoInfracoesAnexo> TribFiscAutoInfracoesAnexos { get; set; }

    public virtual DbSet<TribFiscAutoInfracoesDivida> TribFiscAutoInfracoesDividas { get; set; }

    public virtual DbSet<TribFiscAutoInfracoesDividasOrigem> TribFiscAutoInfracoesDividasOrigems { get; set; }

    public virtual DbSet<TribFiscAutoInfracoesItensVistorium> TribFiscAutoInfracoesItensVistoria { get; set; }

    public virtual DbSet<TribFiscAutoLancamento> TribFiscAutoLancamentos { get; set; }

    public virtual DbSet<TribFiscAutoLancamentosDivida> TribFiscAutoLancamentosDividas { get; set; }

    public virtual DbSet<TribFiscAutoLancamentosDividasOrigem> TribFiscAutoLancamentosDividasOrigems { get; set; }

    public virtual DbSet<TribFiscCategoriaEstabelecimento> TribFiscCategoriaEstabelecimentos { get; set; }

    public virtual DbSet<TribFiscCategoriaEstabelecimentoCnae> TribFiscCategoriaEstabelecimentoCnaes { get; set; }

    public virtual DbSet<TribFiscDevoluco> TribFiscDevolucoes { get; set; }

    public virtual DbSet<TribFiscDocumento> TribFiscDocumentos { get; set; }

    public virtual DbSet<TribFiscEmbargo> TribFiscEmbargos { get; set; }

    public virtual DbSet<TribFiscFiscai> TribFiscFiscais { get; set; }

    public virtual DbSet<TribFiscGrupoSetor> TribFiscGrupoSetors { get; set; }

    public virtual DbSet<TribFiscInterdico> TribFiscInterdicoes { get; set; }

    public virtual DbSet<TribFiscItensVistoriaRelatorio> TribFiscItensVistoriaRelatorios { get; set; }

    public virtual DbSet<TribFiscItensVistoriaTributo> TribFiscItensVistoriaTributos { get; set; }

    public virtual DbSet<TribFiscItensVistorium> TribFiscItensVistoria { get; set; }

    public virtual DbSet<TribFiscMedicamento> TribFiscMedicamentos { get; set; }

    public virtual DbSet<TribFiscNotaFiscaFarmacium> TribFiscNotaFiscaFarmacia { get; set; }

    public virtual DbSet<TribFiscNotaFiscal> TribFiscNotaFiscals { get; set; }

    public virtual DbSet<TribFiscNotaFiscalFarmaciaItem> TribFiscNotaFiscalFarmaciaItems { get; set; }

    public virtual DbSet<TribFiscNotificaco> TribFiscNotificacoes { get; set; }

    public virtual DbSet<TribFiscNotificacoesAnexo> TribFiscNotificacoesAnexos { get; set; }

    public virtual DbSet<TribFiscOrdemFiscalizacao> TribFiscOrdemFiscalizacaos { get; set; }

    public virtual DbSet<TribFiscOrdemFiscalizacaoAnexo> TribFiscOrdemFiscalizacaoAnexos { get; set; }

    public virtual DbSet<TribFiscOrdemFiscalizacaoFiscal> TribFiscOrdemFiscalizacaoFiscals { get; set; }

    public virtual DbSet<TribFiscOrdemServico> TribFiscOrdemServicos { get; set; }

    public virtual DbSet<TribFiscOrdemServicoAssunto> TribFiscOrdemServicoAssuntos { get; set; }

    public virtual DbSet<TribFiscOrdemServicoFiscai> TribFiscOrdemServicoFiscais { get; set; }

    public virtual DbSet<TribFiscOrdemServicoOcorrencia> TribFiscOrdemServicoOcorrencias { get; set; }

    public virtual DbSet<TribFiscOrdemServicosAnexo> TribFiscOrdemServicosAnexos { get; set; }

    public virtual DbSet<TribFiscOrdemServicosLog> TribFiscOrdemServicosLogs { get; set; }

    public virtual DbSet<TribFiscOsreclamaco> TribFiscOsreclamacoes { get; set; }

    public virtual DbSet<TribFiscProcedimento> TribFiscProcedimentos { get; set; }

    public virtual DbSet<TribFiscProtocolo> TribFiscProtocolos { get; set; }

    public virtual DbSet<TribFiscReceitaItem> TribFiscReceitaItems { get; set; }

    public virtual DbSet<TribFiscReceitum> TribFiscReceita { get; set; }

    public virtual DbSet<TribFiscReclamacaoTpReclamacao> TribFiscReclamacaoTpReclamacaos { get; set; }

    public virtual DbSet<TribFiscReclamaco> TribFiscReclamacoes { get; set; }

    public virtual DbSet<TribFiscRelatorio> TribFiscRelatorios { get; set; }

    public virtual DbSet<TribFiscResponsavelTecnico> TribFiscResponsavelTecnicos { get; set; }

    public virtual DbSet<TribFiscSetor> TribFiscSetors { get; set; }

    public virtual DbSet<TribFiscTermoDeDevolucao> TribFiscTermoDeDevolucaos { get; set; }

    public virtual DbSet<TribFiscTermoDeDevolucaoDocumento> TribFiscTermoDeDevolucaoDocumentos { get; set; }

    public virtual DbSet<TribFiscTermoDeRetencao> TribFiscTermoDeRetencaos { get; set; }

    public virtual DbSet<TribFiscTermoDeRetencaoDocumento> TribFiscTermoDeRetencaoDocumentos { get; set; }

    public virtual DbSet<TribFiscTipoFiscal> TribFiscTipoFiscals { get; set; }

    public virtual DbSet<TribFiscTipoFiscalOutrosDepartamento> TribFiscTipoFiscalOutrosDepartamentos { get; set; }

    public virtual DbSet<TribFiscTipoLancamento> TribFiscTipoLancamentos { get; set; }

    public virtual DbSet<TribFiscTipoNotaFiscal> TribFiscTipoNotaFiscals { get; set; }

    public virtual DbSet<TribFiscTipoOcorrencium> TribFiscTipoOcorrencia { get; set; }

    public virtual DbSet<TribFiscTipoProcedimento> TribFiscTipoProcedimentos { get; set; }

    public virtual DbSet<TribFiscTipoReclamacao> TribFiscTipoReclamacaos { get; set; }

    public virtual DbSet<TribFiscTiposVistorium> TribFiscTiposVistoria { get; set; }

    public virtual DbSet<TribFiscVistoria> TribFiscVistorias { get; set; }

    public virtual DbSet<TribFiscVistoriaItensFiscalizacao> TribFiscVistoriaItensFiscalizacaos { get; set; }

    public virtual DbSet<TribFiscVistoriaItensVistoriado> TribFiscVistoriaItensVistoriados { get; set; }

    public virtual DbSet<TribFiscVistoriaItensVistoriadosDivida> TribFiscVistoriaItensVistoriadosDividas { get; set; }

    public virtual DbSet<TribFiscVistoriaItensVistoriadosNota> TribFiscVistoriaItensVistoriadosNotas { get; set; }

    public virtual DbSet<TribFiscVistoriaItensVistoriadosNotasDivida> TribFiscVistoriaItensVistoriadosNotasDividas { get; set; }

    public virtual DbSet<TribFiscVistoriaItensVistoriadosPrevisao> TribFiscVistoriaItensVistoriadosPrevisaos { get; set; }

    public virtual DbSet<TribFiscVistoriasAtributo> TribFiscVistoriasAtributos { get; set; }

    public virtual DbSet<TribFiscVistoriasFiscalizacao> TribFiscVistoriasFiscalizacaos { get; set; }

    public virtual DbSet<TribFiscVistoriasFiscalizacaoNota> TribFiscVistoriasFiscalizacaoNotas { get; set; }

    public virtual DbSet<TribForro> TribForros { get; set; }

    public virtual DbSet<TribFunCriancaDividaContrib> TribFunCriancaDividaContribs { get; set; }

    public virtual DbSet<TribFundoVale> TribFundoVales { get; set; }

    public virtual DbSet<TribGruposEstabelecimento> TribGruposEstabelecimentos { get; set; }

    public virtual DbSet<TribHonorario> TribHonorarios { get; set; }

    public virtual DbSet<TribHonorariosCdum> TribHonorariosCda { get; set; }

    public virtual DbSet<TribHonorariosDivida> TribHonorariosDividas { get; set; }

    public virtual DbSet<TribHonorariosSemCdum> TribHonorariosSemCda { get; set; }

    public virtual DbSet<TribIncidencium> TribIncidencia { get; set; }

    public virtual DbSet<TribIndiceCorrecao> TribIndiceCorrecaos { get; set; }

    public virtual DbSet<TribInscricaoNotificacao> TribInscricaoNotificacaos { get; set; }

    public virtual DbSet<TribInstalacaoEletrica> TribInstalacaoEletricas { get; set; }

    public virtual DbSet<TribInstalacaoSanitarium> TribInstalacaoSanitaria { get; set; }

    public virtual DbSet<TribIsencaoIncidencium> TribIsencaoIncidencia { get; set; }

    public virtual DbSet<TribIssqnestimado> TribIssqnestimados { get; set; }

    public virtual DbSet<TribItbi> TribItbis { get; set; }

    public virtual DbSet<TribItbicompradore> TribItbicompradores { get; set; }

    public virtual DbSet<TribItbidocumentoTipo> TribItbidocumentoTipos { get; set; }

    public virtual DbSet<TribItbiedif> TribItbiedifs { get; set; }

    public virtual DbSet<TribItbiex> TribItbiexes { get; set; }

    public virtual DbSet<TribItbiexAnexo> TribItbiexAnexos { get; set; }

    public virtual DbSet<TribItbiexAvaliacao> TribItbiexAvaliacaos { get; set; }

    public virtual DbSet<TribItbiexCompradore> TribItbiexCompradores { get; set; }

    public virtual DbSet<TribItbiexEdif> TribItbiexEdifs { get; set; }

    public virtual DbSet<TribItbiexVendedore> TribItbiexVendedores { get; set; }

    public virtual DbSet<TribItbitipo> TribItbitipos { get; set; }

    public virtual DbSet<TribItbivendedore> TribItbivendedores { get; set; }

    public virtual DbSet<TribLancImpostoImo> TribLancImpostoImos { get; set; }

    public virtual DbSet<TribLancImpostoImoComposicao> TribLancImpostoImoComposicaos { get; set; }

    public virtual DbSet<TribLegislacao> TribLegislacaos { get; set; }

    public virtual DbSet<TribLegislacaoComponente> TribLegislacaoComponentes { get; set; }

    public virtual DbSet<TribLeisDesc> TribLeisDescs { get; set; }

    public virtual DbSet<TribLeisDescParcela> TribLeisDescParcelas { get; set; }

    public virtual DbSet<TribLeisDescTributo> TribLeisDescTributos { get; set; }

    public virtual DbSet<TribLimiteTestadum> TribLimiteTestada { get; set; }

    public virtual DbSet<TribLivroDividaAtiva> TribLivroDividaAtivas { get; set; }

    public virtual DbSet<TribLocalizacaoQuadra> TribLocalizacaoQuadras { get; set; }

    public virtual DbSet<TribLogSistema> TribLogSistemas { get; set; }

    public virtual DbSet<TribLogTransfereCadastro> TribLogTransfereCadastros { get; set; }

    public virtual DbSet<TribLogTransfereCadastrosRegistro> TribLogTransfereCadastrosRegistros { get; set; }

    public virtual DbSet<TribMovAnaliseAlvaraConstrucao> TribMovAnaliseAlvaraConstrucaos { get; set; }

    public virtual DbSet<TribNotifEdital> TribNotifEditals { get; set; }

    public virtual DbSet<TribNotificacaoDivida> TribNotificacaoDividas { get; set; }

    public virtual DbSet<TribNotificacaoDividasBkp> TribNotificacaoDividasBkps { get; set; }

    public virtual DbSet<TribNotificacaoDum> TribNotificacaoDa { get; set; }

    public virtual DbSet<TribNotificacaoLog> TribNotificacaoLogs { get; set; }

    public virtual DbSet<TribNotificacaoProcesso> TribNotificacaoProcessos { get; set; }

    public virtual DbSet<TribObito> TribObitos { get; set; }

    public virtual DbSet<TribObjeto> TribObjetos { get; set; }

    public virtual DbSet<TribOcupacao> TribOcupacaos { get; set; }

    public virtual DbSet<TribOrgaosClasse> TribOrgaosClasses { get; set; }

    public virtual DbSet<TribOrigemDividum> TribOrigemDivida { get; set; }

    public virtual DbSet<TribParamCalculo> TribParamCalculos { get; set; }

    public virtual DbSet<TribParamClassificacaoReceitum> TribParamClassificacaoReceita { get; set; }

    public virtual DbSet<TribParamCoeficTaxa> TribParamCoeficTaxas { get; set; }

    public virtual DbSet<TribParametro> TribParametros { get; set; }

    public virtual DbSet<TribParcelamentoSn> TribParcelamentoSns { get; set; }

    public virtual DbSet<TribParcelamentoSndestino> TribParcelamentoSndestinos { get; set; }

    public virtual DbSet<TribParcelamentoSnorigem> TribParcelamentoSnorigems { get; set; }

    public virtual DbSet<TribParede> TribParedes { get; set; }

    public virtual DbSet<TribPatrimonio> TribPatrimonios { get; set; }

    public virtual DbSet<TribPedologium> TribPedologia { get; set; }

    public virtual DbSet<TribPiso> TribPisos { get; set; }

    public virtual DbSet<TribPlantaValore> TribPlantaValores { get; set; }

    public virtual DbSet<TribPortalCaixaEntradum> TribPortalCaixaEntrada { get; set; }

    public virtual DbSet<TribPortalMensagem> TribPortalMensagems { get; set; }

    public virtual DbSet<TribPosicaoEdificacao> TribPosicaoEdificacaos { get; set; }

    public virtual DbSet<TribProcAdvExecutado> TribProcAdvExecutados { get; set; }

    public virtual DbSet<TribProcAdvogado> TribProcAdvogados { get; set; }

    public virtual DbSet<TribProcArrestoPenhora> TribProcArrestoPenhoras { get; set; }

    public virtual DbSet<TribProcArrestoPenhoraDetalhe> TribProcArrestoPenhoraDetalhes { get; set; }

    public virtual DbSet<TribProcArrestoPenhoraExecutado> TribProcArrestoPenhoraExecutados { get; set; }

    public virtual DbSet<TribProcArrestoPenhoraIntimacao> TribProcArrestoPenhoraIntimacaos { get; set; }

    public virtual DbSet<TribProcAutor> TribProcAutors { get; set; }

    public virtual DbSet<TribProcCdum> TribProcCda { get; set; }

    public virtual DbSet<TribProcCitacao> TribProcCitacaos { get; set; }

    public virtual DbSet<TribProcEmbargo> TribProcEmbargos { get; set; }

    public virtual DbSet<TribProcEmbargoTipo> TribProcEmbargoTipos { get; set; }

    public virtual DbSet<TribProcExecSentenca> TribProcExecSentencas { get; set; }

    public virtual DbSet<TribProcExecutado> TribProcExecutados { get; set; }

    public virtual DbSet<TribProcInfoComplementar> TribProcInfoComplementars { get; set; }

    public virtual DbSet<TribProcMotivo> TribProcMotivos { get; set; }

    public virtual DbSet<TribProcObjeto> TribProcObjetos { get; set; }

    public virtual DbSet<TribProcOrgaoJurisdicional> TribProcOrgaoJurisdicionals { get; set; }

    public virtual DbSet<TribProcPermissaoTipoProcesso> TribProcPermissaoTipoProcessos { get; set; }

    public virtual DbSet<TribProcPeticao> TribProcPeticaos { get; set; }

    public virtual DbSet<TribProcPeticaoCertidao> TribProcPeticaoCertidaos { get; set; }

    public virtual DbSet<TribProcPeticaoObjeto> TribProcPeticaoObjetos { get; set; }

    public virtual DbSet<TribProcProcesso> TribProcProcessos { get; set; }

    public virtual DbSet<TribProcProcurador> TribProcProcuradors { get; set; }

    public virtual DbSet<TribProcRecurso> TribProcRecursos { get; set; }

    public virtual DbSet<TribProcRecursosOrigem> TribProcRecursosOrigems { get; set; }

    public virtual DbSet<TribProcRecursosOrigemDet> TribProcRecursosOrigemDets { get; set; }

    public virtual DbSet<TribProcSuspensao> TribProcSuspensaos { get; set; }

    public virtual DbSet<TribProcSuspensaoMotivo> TribProcSuspensaoMotivos { get; set; }

    public virtual DbSet<TribProcTemplate> TribProcTemplates { get; set; }

    public virtual DbSet<TribProcTestemunha> TribProcTestemunhas { get; set; }

    public virtual DbSet<TribProcTipoEmbargo> TribProcTipoEmbargoes { get; set; }

    public virtual DbSet<TribProcTipoInformacao> TribProcTipoInformacaos { get; set; }

    public virtual DbSet<TribProcTipoObjeto> TribProcTipoObjetos { get; set; }

    public virtual DbSet<TribProcTipoProcesso> TribProcTipoProcessos { get; set; }

    public virtual DbSet<TribProgressTributo> TribProgressTributos { get; set; }

    public virtual DbSet<TribProgressaoBonificacao> TribProgressaoBonificacaos { get; set; }

    public virtual DbSet<TribProgressaoTerritorial> TribProgressaoTerritorials { get; set; }

    public virtual DbSet<TribProtestoIrregularidade> TribProtestoIrregularidades { get; set; }

    public virtual DbSet<TribProtestoLote> TribProtestoLotes { get; set; }

    public virtual DbSet<TribProtestoLoteCdacontrib> TribProtestoLoteCdacontribs { get; set; }

    public virtual DbSet<TribProtestoLoteCdahistoricoSituacaoDividum> TribProtestoLoteCdahistoricoSituacaoDivida { get; set; }

    public virtual DbSet<TribProtestoLoteCdum> TribProtestoLoteCda { get; set; }

    public virtual DbSet<TribProtestoMovimento> TribProtestoMovimentos { get; set; }

    public virtual DbSet<TribProtestoOcorrencium> TribProtestoOcorrencia { get; set; }

    public virtual DbSet<TribProtocoloAlteracao> TribProtocoloAlteracaos { get; set; }

    public virtual DbSet<TribQuadra> TribQuadras { get; set; }

    public virtual DbSet<TribQuadraLograd> TribQuadraLograds { get; set; }

    public virtual DbSet<TribQuadraLogradParamCalculo> TribQuadraLogradParamCalculos { get; set; }

    public virtual DbSet<TribQuadraLogradTributo> TribQuadraLogradTributos { get; set; }

    public virtual DbSet<TribReceita> TribReceitas { get; set; }

    public virtual DbSet<TribRecolhimentoBlocosNf> TribRecolhimentoBlocosNfs { get; set; }

    public virtual DbSet<TribReducaoTributo> TribReducaoTributos { get; set; }

    public virtual DbSet<TribReducaoTributosIten> TribReducaoTributosItens { get; set; }

    public virtual DbSet<TribReducaoTributosItensDivida> TribReducaoTributosItensDividas { get; set; }

    public virtual DbSet<TribRegistrosGrafica2018> TribRegistrosGrafica2018s { get; set; }

    public virtual DbSet<TribRegistrosGrafica2018DemaisParc> TribRegistrosGrafica2018DemaisParcs { get; set; }

    public virtual DbSet<TribRegistrosGrafica2019> TribRegistrosGrafica2019s { get; set; }

    public virtual DbSet<TribRegistrosGrafica2020> TribRegistrosGrafica2020s { get; set; }

    public virtual DbSet<TribRelParametro> TribRelParametros { get; set; }

    public virtual DbSet<TribReportD> TribReportDs { get; set; }

    public virtual DbSet<TribReportPar> TribReportPars { get; set; }

    public virtual DbSet<TribReportSql> TribReportSqls { get; set; }

    public virtual DbSet<TribRequerimento> TribRequerimentos { get; set; }

    public virtual DbSet<TribRequerimentoDivDesmembradum> TribRequerimentoDivDesmembrada { get; set; }

    public virtual DbSet<TribRequerimentoDivOrigem> TribRequerimentoDivOrigems { get; set; }

    public virtual DbSet<TribRequerimentoRevisaoImovei> TribRequerimentoRevisaoImoveis { get; set; }

    public virtual DbSet<TribRequerimentosRevisao> TribRequerimentosRevisaos { get; set; }

    public virtual DbSet<TribResumoBaixa> TribResumoBaixas { get; set; }

    public virtual DbSet<TribRevisaoDesconto> TribRevisaoDescontos { get; set; }

    public virtual DbSet<TribRgFiltro> TribRgFiltros { get; set; }

    public virtual DbSet<TribRgParametro> TribRgParametros { get; set; }

    public virtual DbSet<TribRgRegra> TribRgRegras { get; set; }

    public virtual DbSet<TribRgRotina> TribRgRotinas { get; set; }

    public virtual DbSet<TribRolTipo> TribRolTipos { get; set; }

    public virtual DbSet<TribSaneparArquivoBaixa> TribSaneparArquivoBaixas { get; set; }

    public virtual DbSet<TribSaneparArquivoBaixaDetalhe> TribSaneparArquivoBaixaDetalhes { get; set; }

    public virtual DbSet<TribSaneparCategoria> TribSaneparCategorias { get; set; }

    public virtual DbSet<TribSaneparCobrados2008> TribSaneparCobrados2008s { get; set; }

    public virtual DbSet<TribSaneparCruzamento2009> TribSaneparCruzamento2009s { get; set; }

    public virtual DbSet<TribSaneparDivida> TribSaneparDividas { get; set; }

    public virtual DbSet<TribSaneparExport2009> TribSaneparExport2009s { get; set; }

    public virtual DbSet<TribSaneparExport2009Atual> TribSaneparExport2009Atuals { get; set; }

    public virtual DbSet<TribSaneparExport2009AtualSemMatricula> TribSaneparExport2009AtualSemMatriculas { get; set; }

    public virtual DbSet<TribSaneparImport2009> TribSaneparImport2009s { get; set; }

    public virtual DbSet<TribSaneparLanc2009> TribSaneparLanc2009s { get; set; }

    public virtual DbSet<TribSaneparLancComp2009> TribSaneparLancComp2009s { get; set; }

    public virtual DbSet<TribSaneparMatric> TribSaneparMatrics { get; set; }

    public virtual DbSet<TribSaneparMatricInsc> TribSaneparMatricInscs { get; set; }

    public virtual DbSet<TribSaneparValores2009> TribSaneparValores2009s { get; set; }

    public virtual DbSet<TribSecao> TribSecaos { get; set; }

    public virtual DbSet<TribSecaoVlrM2pAno> TribSecaoVlrM2pAnos { get; set; }

    public virtual DbSet<TribSimplesNacionalEvento> TribSimplesNacionalEventos { get; set; }

    public virtual DbSet<TribSimplesNacionalOcorrEvento> TribSimplesNacionalOcorrEventos { get; set; }

    public virtual DbSet<TribSimuladoIptuoperaco> TribSimuladoIptuoperacoes { get; set; }

    public virtual DbSet<TribSimuladosEmpresa> TribSimuladosEmpresas { get; set; }

    public virtual DbSet<TribSimuladosEmpresaDiv> TribSimuladosEmpresaDivs { get; set; }

    public virtual DbSet<TribSimuladosIptu> TribSimuladosIptus { get; set; }

    public virtual DbSet<TribSimuladosIptuedifCarac> TribSimuladosIptuedifCaracs { get; set; }

    public virtual DbSet<TribSimuladosIptuimovei> TribSimuladosIptuimoveis { get; set; }

    public virtual DbSet<TribSimuladosIptutestada> TribSimuladosIptutestadas { get; set; }

    public virtual DbSet<TribSisObraLoteAlvara> TribSisObraLoteAlvaras { get; set; }

    public virtual DbSet<TribSisObraLoteAlvaraAlvDocumento> TribSisObraLoteAlvaraAlvDocumentos { get; set; }

    public virtual DbSet<TribSisObraLoteAlvaraMovimento> TribSisObraLoteAlvaraMovimentos { get; set; }

    public virtual DbSet<TribSisObraLoteAlvaraMovimentoXml> TribSisObraLoteAlvaraMovimentoXmls { get; set; }

    public virtual DbSet<TribSisObraTabelaMensagem> TribSisObraTabelaMensagems { get; set; }

    public virtual DbSet<TribSisObraTipoLogradouro> TribSisObraTipoLogradouros { get; set; }

    public virtual DbSet<TribSituacaoEdificacao> TribSituacaoEdificacaos { get; set; }

    public virtual DbSet<TribSnarquivo> TribSnarquivos { get; set; }

    public virtual DbSet<TribSnarquivoDetalhe> TribSnarquivoDetalhes { get; set; }

    public virtual DbSet<TribSndivida> TribSndividas { get; set; }

    public virtual DbSet<TribTap> TribTaps { get; set; }

    public virtual DbSet<TribTapDestino> TribTapDestinos { get; set; }

    public virtual DbSet<TribTapInscrOrigem> TribTapInscrOrigems { get; set; }

    public virtual DbSet<TribTapMapa> TribTapMapas { get; set; }

    public virtual DbSet<TribTapMapaDiferenca> TribTapMapaDiferencas { get; set; }

    public virtual DbSet<TribTapMapaOld> TribTapMapaOlds { get; set; }

    public virtual DbSet<TribTapMapaPagamento> TribTapMapaPagamentos { get; set; }

    public virtual DbSet<TribTapOrigem> TribTapOrigems { get; set; }

    public virtual DbSet<TribTapRescisao> TribTapRescisaos { get; set; }

    public virtual DbSet<TribTapRescisaoDiv> TribTapRescisaoDivs { get; set; }

    public virtual DbSet<TribTapRescisaoMapa> TribTapRescisaoMapas { get; set; }

    public virtual DbSet<TribTapRescisaoReceitum> TribTapRescisaoReceita { get; set; }

    public virtual DbSet<TribTempDam> TribTempDams { get; set; }

    public virtual DbSet<TribTempFormulasValorVenal> TribTempFormulasValorVenals { get; set; }

    public virtual DbSet<TribTempParcelamento> TribTempParcelamentos { get; set; }

    public virtual DbSet<TribTerreno> TribTerrenos { get; set; }

    public virtual DbSet<TribTerrenoDimensao> TribTerrenoDimensaos { get; set; }

    public virtual DbSet<TribTerrenoFace> TribTerrenoFaces { get; set; }

    public virtual DbSet<TribTestadasTerreno> TribTestadasTerrenos { get; set; }

    public virtual DbSet<TribTexto> TribTextos { get; set; }

    public virtual DbSet<TribTipoAlvaraConstrucao> TribTipoAlvaraConstrucaos { get; set; }

    public virtual DbSet<TribTipoAlvaraTributo> TribTipoAlvaraTributos { get; set; }

    public virtual DbSet<TribTipoBaixa> TribTipoBaixas { get; set; }

    public virtual DbSet<TribTipoBaixaGrupo> TribTipoBaixaGrupos { get; set; }

    public virtual DbSet<TribTipoBaixaTexto> TribTipoBaixaTextos { get; set; }

    public virtual DbSet<TribTipoDividum> TribTipoDivida { get; set; }

    public virtual DbSet<TribTipoIsencao> TribTipoIsencaos { get; set; }

    public virtual DbSet<TribTipoOrigemDividum> TribTipoOrigemDivida { get; set; }

    public virtual DbSet<TribTipoParamCalculo> TribTipoParamCalculos { get; set; }

    public virtual DbSet<TribTipoPlantasValore> TribTipoPlantasValores { get; set; }

    public virtual DbSet<TribTipoProcesso> TribTipoProcessos { get; set; }

    public virtual DbSet<TribTipoProcessoTributo> TribTipoProcessoTributos { get; set; }

    public virtual DbSet<TribTipoPublicidade> TribTipoPublicidades { get; set; }

    public virtual DbSet<TribTipoTributo> TribTipoTributos { get; set; }

    public virtual DbSet<TribTipoTributoLei> TribTipoTributoLeis { get; set; }

    public virtual DbSet<TribTipoTributoOrigem> TribTipoTributoOrigems { get; set; }

    public virtual DbSet<TribTipoTributosConf> TribTipoTributosConfs { get; set; }

    public virtual DbSet<TribTipoTributosGrupo> TribTipoTributosGrupos { get; set; }

    public virtual DbSet<TribTipoTributosTipoProcesso> TribTipoTributosTipoProcessos { get; set; }

    public virtual DbSet<TribTipoTributosVenc> TribTipoTributosVencs { get; set; }

    public virtual DbSet<TribTiposBaseCalculo> TribTiposBaseCalculos { get; set; }

    public virtual DbSet<TribTiposBaseCalculoTributo> TribTiposBaseCalculoTributos { get; set; }

    public virtual DbSet<TribTiposComponenteLegislacao> TribTiposComponenteLegislacaos { get; set; }

    public virtual DbSet<TribTiposConstrucao> TribTiposConstrucaos { get; set; }

    public virtual DbSet<TribTiposOperacoesReceitum> TribTiposOperacoesReceita { get; set; }

    public virtual DbSet<TribTiposServico> TribTiposServicos { get; set; }

    public virtual DbSet<TribTiposServicosVelha> TribTiposServicosVelhas { get; set; }

    public virtual DbSet<TribTopografium> TribTopografia { get; set; }

    public virtual DbSet<TribTransfDivida> TribTransfDividas { get; set; }

    public virtual DbSet<TribTransfDividasContribuinte> TribTransfDividasContribuintes { get; set; }

    public virtual DbSet<TribTransfDividasDestino> TribTransfDividasDestinos { get; set; }

    public virtual DbSet<TribTransfDividasOrigem> TribTransfDividasOrigems { get; set; }

    public virtual DbSet<TribTransferencia> TribTransferencias { get; set; }

    public virtual DbSet<TribUnificacao> TribUnificacaos { get; set; }

    public virtual DbSet<TribUso> TribUsos { get; set; }

    public virtual DbSet<TribUtilizTributo> TribUtilizTributos { get; set; }

    public virtual DbSet<TribUtilizacao> TribUtilizacaos { get; set; }

    public virtual DbSet<TribUvciluminacao> TribUvciluminacaos { get; set; }

    public virtual DbSet<TribVariosProprietariosDaEdificacao> TribVariosProprietariosDaEdificacaos { get; set; }

    public virtual DbSet<TribVegetacao> TribVegetacaos { get; set; }

    public virtual DbSet<TribVencimento> TribVencimentos { get; set; }

    public virtual DbSet<TribVisaoQuadraLogradFk> TribVisaoQuadraLogradFks { get; set; }

    public virtual DbSet<TribVisaoTipoConstrucao> TribVisaoTipoConstrucaos { get; set; }

    public virtual DbSet<TribVisaoUtilizacao> TribVisaoUtilizacaos { get; set; }

    public virtual DbSet<TribZona> TribZonas { get; set; }

    public virtual DbSet<TribZonaAlertum> TribZonaAlerta { get; set; }

    public virtual DbSet<TribZonaClassificacaoVium> TribZonaClassificacaoVia { get; set; }

    public virtual DbSet<TribZonaLimite> TribZonaLimites { get; set; }

    public virtual DbSet<TribZonaMensagem> TribZonaMensagems { get; set; }

    public virtual DbSet<TribZonaTabCalcadum> TribZonaTabCalcada { get; set; }

    public virtual DbSet<TribZonaTipoCalcadum> TribZonaTipoCalcada { get; set; }

    public virtual DbSet<TribZonaTipoFaixaCalcadum> TribZonaTipoFaixaCalcada { get; set; }

    public virtual DbSet<TribZonaTipoLiberacao> TribZonaTipoLiberacaos { get; set; }

    public virtual DbSet<TribZonaTipoLimite> TribZonaTipoLimites { get; set; }

    public virtual DbSet<TribZonaTipoMaterialCalcadum> TribZonaTipoMaterialCalcada { get; set; }

    public virtual DbSet<TribZonaTipoUso> TribZonaTipoUsos { get; set; }

    public virtual DbSet<TribZonaTipoViaUrbana> TribZonaTipoViaUrbanas { get; set; }

    public virtual DbSet<TribZonaTipoViaUrbanaTipoFaixaCalcadum> TribZonaTipoViaUrbanaTipoFaixaCalcada { get; set; }

    public virtual DbSet<TribZonaUso> TribZonaUsos { get; set; }

    public virtual DbSet<TribZonaUsoAtividade> TribZonaUsoAtividades { get; set; }

    public virtual DbSet<TribZonaZoneamento> TribZonaZoneamentos { get; set; }

    public virtual DbSet<TribZonaZoneamentoAtividade> TribZonaZoneamentoAtividades { get; set; }

    public virtual DbSet<TribZonaZoneamentoAtividadeLog> TribZonaZoneamentoAtividadeLogs { get; set; }

    public virtual DbSet<TribZonaZoneamentoQuadraLograd> TribZonaZoneamentoQuadraLograds { get; set; }

    public virtual DbSet<TribZonaZoneamentoQuadraLogradLog> TribZonaZoneamentoQuadraLogradLogs { get; set; }

    public virtual DbSet<TribZonaZoneamentoTerreno> TribZonaZoneamentoTerrenos { get; set; }

    public virtual DbSet<TribZonaZoneamentoUso> TribZonaZoneamentoUsos { get; set; }

    public virtual DbSet<Tribedificacoesdivergencium> Tribedificacoesdivergencia { get; set; }

    public virtual DbSet<Tribquadradivergencium> Tribquadradivergencia { get; set; }

    public virtual DbSet<TridArqMortoBoleto> TridArqMortoBoletos { get; set; }

    public virtual DbSet<Txvisa> Txvisas { get; set; }

    public virtual DbSet<Uffi> Uffis { get; set; }

    public virtual DbSet<Unidade> Unidades { get; set; }

    public virtual DbSet<UnidadeSaude> UnidadeSaudes { get; set; }

    public virtual DbSet<Usuario> Usuarios { get; set; }

    public virtual DbSet<UsuarioPermisso> UsuarioPermissoes { get; set; }

    public virtual DbSet<VeicSolicitacao> VeicSolicitacaos { get; set; }

    public virtual DbSet<Veiculo> Veiculos { get; set; }

    public virtual DbSet<VeiculosBaixado> VeiculosBaixados { get; set; }

    public virtual DbSet<VeiculosIten> VeiculosItens { get; set; }

    public virtual DbSet<VeiculosSeguro> VeiculosSeguros { get; set; }

    public virtual DbSet<ViagemVeiculo> ViagemVeiculos { get; set; }

    public virtual DbSet<VisaAltorisco> VisaAltoriscos { get; set; }

    public virtual DbSet<VisaBaixob> VisaBaixobs { get; set; }

    public virtual DbSet<VisaDepende> VisaDependes { get; set; }

    public virtual DbSet<VisaoAnexosProcesso> VisaoAnexosProcessos { get; set; }

    public virtual DbSet<VisaoBoletimCadImobiliario> VisaoBoletimCadImobiliarios { get; set; }

    public virtual DbSet<VisaoBoleto> VisaoBoletos { get; set; }

    public virtual DbSet<VisaoComprovanteProcesso> VisaoComprovanteProcessos { get; set; }

    public virtual DbSet<VisaoConsultaProcesso> VisaoConsultaProcessos { get; set; }

    public virtual DbSet<VisaoDividasCanceladasCtv> VisaoDividasCanceladasCtvs { get; set; }

    public virtual DbSet<VisaoDividassemDtultcorr> VisaoDividassemDtultcorrs { get; set; }

    public virtual DbSet<VisaoEdifeinscricao> VisaoEdifeinscricaos { get; set; }

    public virtual DbSet<VisaoEmpresasComDividasDobrada> VisaoEmpresasComDividasDobradas { get; set; }

    public virtual DbSet<VisaoFeriado> VisaoFeriados { get; set; }

    public virtual DbSet<VisaoFormulario> VisaoFormularios { get; set; }

    public virtual DbSet<VisaoGruposServico> VisaoGruposServicos { get; set; }

    public virtual DbSet<VisaoLocarRelTaxa> VisaoLocarRelTaxas { get; set; }

    public virtual DbSet<VisaoOrgao> VisaoOrgaos { get; set; }

    public virtual DbSet<VisaoPermissaodeFormulariosPorFormId> VisaoPermissaodeFormulariosPorFormIds { get; set; }

    public virtual DbSet<VisaoProcessoRl> VisaoProcessoRls { get; set; }

    public virtual DbSet<VisaoProcessosArquivado> VisaoProcessosArquivados { get; set; }

    public virtual DbSet<VisaoProcessosDivisao> VisaoProcessosDivisaos { get; set; }

    public virtual DbSet<VisaoRecebimento> VisaoRecebimentos { get; set; }

    public virtual DbSet<VisaoRelatorioServiçosEquipamento> VisaoRelatorioServiçosEquipamentos { get; set; }

    public virtual DbSet<VisaoRlstacogrfoPorVeiculo> VisaoRlstacogrfoPorVeiculos { get; set; }

    public virtual DbSet<VisaoSimulado4> VisaoSimulado4s { get; set; }

    public virtual DbSet<VisaoTiposProcesso> VisaoTiposProcessos { get; set; }

    public virtual DbSet<VisaoTramiteProcesso> VisaoTramiteProcessos { get; set; }

    public virtual DbSet<VisaoUnidade> VisaoUnidades { get; set; }

    public virtual DbSet<VisaoUsuario> VisaoUsuarios { get; set; }

    public virtual DbSet<Visaolocacaobaixa> Visaolocacaobaixas { get; set; }

    public virtual DbSet<VwAgendamento> VwAgendamentos { get; set; }

    public virtual DbSet<VwAnalisesPendente> VwAnalisesPendentes { get; set; }

    public virtual DbSet<VwAnalisesPendentesDocumento> VwAnalisesPendentesDocumentos { get; set; }

    public virtual DbSet<VwAtividadesPergunta> VwAtividadesPerguntas { get; set; }

    public virtual DbSet<VwCelioSimple> VwCelioSimples { get; set; }

    public virtual DbSet<VwCepcorreio> VwCepcorreios { get; set; }

    public virtual DbSet<VwConferenciaIssqnhoteisSimilare> VwConferenciaIssqnhoteisSimilares { get; set; }

    public virtual DbSet<VwConferenciaIssqnhoteisSimilaresPorCompetencium> VwConferenciaIssqnhoteisSimilaresPorCompetencia { get; set; }

    public virtual DbSet<VwConsultapreviaAtividadesinserida> VwConsultapreviaAtividadesinseridas { get; set; }

    public virtual DbSet<VwConsultapreviaAtividadesinserir> VwConsultapreviaAtividadesinserirs { get; set; }

    public virtual DbSet<VwConsultapreviaListadocumento> VwConsultapreviaListadocumentos { get; set; }

    public virtual DbSet<VwConsultapreviaListagraurisco> VwConsultapreviaListagrauriscos { get; set; }

    public virtual DbSet<VwConsultapreviaListaimovel> VwConsultapreviaListaimovels { get; set; }

    public virtual DbSet<VwConsultapreviaListazoneamento> VwConsultapreviaListazoneamentos { get; set; }

    public virtual DbSet<VwConsultapreviaPerguntar> VwConsultapreviaPerguntars { get; set; }

    public virtual DbSet<VwContribuintesIdSmsp> VwContribuintesIdSmsps { get; set; }

    public virtual DbSet<VwDeducoesTributosExercicio> VwDeducoesTributosExercicios { get; set; }

    public virtual DbSet<VwDividasPagasServicos901> VwDividasPagasServicos901s { get; set; }

    public virtual DbSet<VwEmpresa> VwEmpresas { get; set; }

    public virtual DbSet<VwEmpresasAbertasAutomatica> VwEmpresasAbertasAutomaticas { get; set; }

    public virtual DbSet<VwEmpresasPorAtividadeQuadrimestral> VwEmpresasPorAtividadeQuadrimestrals { get; set; }

    public virtual DbSet<VwFatoSimplesNacionalProsiga> VwFatoSimplesNacionalProsigas { get; set; }

    public virtual DbSet<VwGeomais01Terreno> VwGeomais01Terrenos { get; set; }

    public virtual DbSet<VwGeomais02Unidade> VwGeomais02Unidades { get; set; }

    public virtual DbSet<VwGeomais03CadastroTerreno> VwGeomais03CadastroTerrenos { get; set; }

    public virtual DbSet<VwGeomais04CadastroUnidade> VwGeomais04CadastroUnidades { get; set; }

    public virtual DbSet<VwGeomais05Testada> VwGeomais05Testadas { get; set; }

    public virtual DbSet<VwGeomais06ItemCadastro> VwGeomais06ItemCadastros { get; set; }

    public virtual DbSet<VwGeomais07SubItemCadastro> VwGeomais07SubItemCadastros { get; set; }

    public virtual DbSet<VwGeomais08TipoLogradouro> VwGeomais08TipoLogradouros { get; set; }

    public virtual DbSet<VwGeomais09Logradouro> VwGeomais09Logradouros { get; set; }

    public virtual DbSet<VwGeomais10LogradouroSecao> VwGeomais10LogradouroSecaos { get; set; }

    public virtual DbSet<VwGeomais11Bairro> VwGeomais11Bairros { get; set; }

    public virtual DbSet<VwGeomais12Edificio> VwGeomais12Edificios { get; set; }

    public virtual DbSet<VwGeomais13Loteamento> VwGeomais13Loteamentos { get; set; }

    public virtual DbSet<VwGeomais14Pessoa> VwGeomais14Pessoas { get; set; }

    public virtual DbSet<VwGeomaisCadastroImovelRemover> VwGeomaisCadastroImovelRemovers { get; set; }

    public virtual DbSet<VwGeomaisImovel> VwGeomaisImovels { get; set; }

    public virtual DbSet<VwGeomaisItemCadastroImovel> VwGeomaisItemCadastroImovels { get; set; }

    public virtual DbSet<VwGeomaisTestadum> VwGeomaisTestada { get; set; }

    public virtual DbSet<VwGetdate> VwGetdates { get; set; }

    public virtual DbSet<VwImovei> VwImoveis { get; set; }

    public virtual DbSet<VwImoveisVilaA> VwImoveisVilaAs { get; set; }

    public virtual DbSet<VwMapaBaixaParcelamento> VwMapaBaixaParcelamentos { get; set; }

    public virtual DbSet<WflowAnexo> WflowAnexos { get; set; }

    public virtual DbSet<WflowDespachoFluxo> WflowDespachoFluxos { get; set; }

    public virtual DbSet<WflowDespachoPadrao> WflowDespachoPadraos { get; set; }

    public virtual DbSet<WflowFluxoTramitacao> WflowFluxoTramitacaos { get; set; }

    public virtual DbSet<WflowItem> WflowItems { get; set; }

    public virtual DbSet<WflowRececimento> WflowRececimentos { get; set; }

    public virtual DbSet<WflowRemessa> WflowRemessas { get; set; }

    public virtual DbSet<WflowRequisicao> WflowRequisicaos { get; set; }

    public virtual DbSet<WflowRequisicaoIten> WflowRequisicaoItens { get; set; }

    public virtual DbSet<WflowTipoProcesso> WflowTipoProcessos { get; set; }

    public virtual DbSet<WflowTiposFluxo> WflowTiposFluxos { get; set; }

    public virtual DbSet<XFrotaMovOrdensServico> XFrotaMovOrdensServicos { get; set; }

    public virtual DbSet<XFrotaOrdensServico> XFrotaOrdensServicos { get; set; }

    public virtual DbSet<XMovLogMovEquipamento> XMovLogMovEquipamentos { get; set; }

    public virtual DbSet<XTbTmpDeParaReceita> XTbTmpDeParaReceitas { get; set; }

    public virtual DbSet<XtbTempRelDividas20072011> XtbTempRelDividas20072011s { get; set; }

    public virtual DbSet<Zoneamento> Zoneamentos { get; set; }

    public virtual DbSet<_24hrsAcesso> _24hrsAcessos { get; set; }

    public virtual DbSet<_24hrsGuia> _24hrsGuias { get; set; }

    public virtual DbSet<_24hrsImpCarne> _24hrsImpCarnes { get; set; }

    public virtual DbSet<_24hrsMenu> _24hrsMenus { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=172.27.84.102;Initial Catalog=DBProsiga;Persist Security Info=false;Integrated Security=False;Encrypt=False;TrustServerCertificate=False;User ID=rpdesenv;Password=visual");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<ATemp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("aTemp");

            entity.Property(e => e.Cmc).HasColumnName("CMC");
            entity.Property(e => e.Cpf)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CPF");
            entity.Property(e => e.Inscricao)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("inscricao");
        });

        modelBuilder.Entity<Aaaplan1>(entity =>
        {
            entity.HasKey(e => e.Cnpjempresa);

            entity.ToTable("AAAPlan1");

            entity.Property(e => e.Cnpjempresa)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CNPJEmpresa");
            entity.Property(e => e.DataFinal).HasColumnType("datetime");
            entity.Property(e => e.DataInicial).HasColumnType("datetime");
        });

        modelBuilder.Entity<Aaplan2008>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AAPLAN2008");

            entity.Property(e => e.Bonificacao).HasColumnType("money");
            entity.Property(e => e.ColetaLixo).HasColumnType("money");
            entity.Property(e => e.EmissaoGuias).HasColumnType("money");
            entity.Property(e => e.IluminacaoPublica).HasColumnType("money");
            entity.Property(e => e.ImpostoPredial).HasColumnType("money");
            entity.Property(e => e.ImpostoTerritorial).HasColumnType("money");
            entity.Property(e => e.InscricoesImobiliarias).HasMaxLength(255);
            entity.Property(e => e.LimpezaPublica).HasColumnType("money");
            entity.Property(e => e.ProprietarioResponsavel).HasMaxLength(255);
            entity.Property(e => e.ServicoBombeiros).HasColumnType("money");
            entity.Property(e => e.Total).HasColumnType("money");
            entity.Property(e => e.TotalAtual).HasColumnType("money");
            entity.Property(e => e.ValorVenal).HasColumnType("money");
        });

        modelBuilder.Entity<Aaplan2009>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AAPLAN2009");

            entity.Property(e => e.Bonificacao).HasColumnType("money");
            entity.Property(e => e.ColetaLixo).HasColumnType("money");
            entity.Property(e => e.EmissaoGuias).HasMaxLength(255);
            entity.Property(e => e.IluminacaoPublica).HasColumnType("money");
            entity.Property(e => e.ImpostoPredial).HasColumnType("money");
            entity.Property(e => e.ImpostoTerritorial).HasColumnType("money");
            entity.Property(e => e.InscricoesImobiliarias).HasMaxLength(255);
            entity.Property(e => e.LimpezaPublica).HasColumnType("money");
            entity.Property(e => e.ProprietarioResponsavel).HasMaxLength(255);
            entity.Property(e => e.ServicoBombeiros).HasColumnType("money");
            entity.Property(e => e.Total).HasColumnType("money");
            entity.Property(e => e.TotalAtual).HasColumnType("money");
            entity.Property(e => e.ValorVenal).HasColumnType("money");
        });

        modelBuilder.Entity<Aaplan2010>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AAPLAN2010");

            entity.Property(e => e.Bonificacao).HasColumnType("money");
            entity.Property(e => e.ColetaLixo).HasColumnType("money");
            entity.Property(e => e.EmissaoGuias).HasColumnType("money");
            entity.Property(e => e.IluminacaoPublica).HasColumnType("money");
            entity.Property(e => e.ImpostoPredial).HasColumnType("money");
            entity.Property(e => e.ImpostoTerritorial).HasColumnType("money");
            entity.Property(e => e.InscricoesImobiliarias).HasMaxLength(255);
            entity.Property(e => e.LimpezaPublica).HasColumnType("money");
            entity.Property(e => e.ProprietarioResponsavel).HasMaxLength(255);
            entity.Property(e => e.ServicoBombeiros).HasColumnType("money");
            entity.Property(e => e.Total).HasColumnType("money");
            entity.Property(e => e.TotalAtual).HasColumnType("money");
            entity.Property(e => e.ValorVenal).HasColumnType("money");
        });

        modelBuilder.Entity<Aaplan2011>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AAPLAN2011");

            entity.Property(e => e.Bonificacao).HasColumnType("money");
            entity.Property(e => e.ColetaLixo).HasColumnType("money");
            entity.Property(e => e.EmissaoGuias).HasColumnType("money");
            entity.Property(e => e.IluminacaoPublica).HasColumnType("money");
            entity.Property(e => e.ImpostoPredial).HasColumnType("money");
            entity.Property(e => e.ImpostoTerritorial).HasColumnType("money");
            entity.Property(e => e.InscricoesImobiliarias).HasMaxLength(255);
            entity.Property(e => e.LimpezaPublica).HasColumnType("money");
            entity.Property(e => e.ProprietarioResponsavel).HasMaxLength(255);
            entity.Property(e => e.ServicoBombeiros).HasColumnType("money");
            entity.Property(e => e.Total).HasColumnType("money");
            entity.Property(e => e.TotalAtual).HasColumnType("money");
            entity.Property(e => e.ValorVenal).HasColumnType("money");
        });

        modelBuilder.Entity<Aaplan2012>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AAPLAN2012");

            entity.Property(e => e.Bonificacao).HasColumnType("money");
            entity.Property(e => e.ColetaLixo).HasColumnType("money");
            entity.Property(e => e.EmissaoGuias).HasColumnType("money");
            entity.Property(e => e.IluminacaoPublica).HasColumnType("money");
            entity.Property(e => e.ImpostoPredial).HasColumnType("money");
            entity.Property(e => e.ImpostoTerritorial).HasMaxLength(255);
            entity.Property(e => e.InscricoesImobiliarias).HasMaxLength(255);
            entity.Property(e => e.LimpezaPublica).HasColumnType("money");
            entity.Property(e => e.ProprietarioResponsavel).HasMaxLength(255);
            entity.Property(e => e.ServicoBombeiros).HasColumnType("money");
            entity.Property(e => e.Total).HasColumnType("money");
            entity.Property(e => e.TotalAtual).HasColumnType("money");
            entity.Property(e => e.ValorVenal).HasColumnType("money");
        });

        modelBuilder.Entity<Aaplan2013>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AAPLAN2013");

            entity.Property(e => e.Bonificacao).HasColumnType("money");
            entity.Property(e => e.ColetaLixo).HasColumnType("money");
            entity.Property(e => e.EmissaoGuias).HasColumnType("money");
            entity.Property(e => e.IluminacaoPublica).HasColumnType("money");
            entity.Property(e => e.ImpostoPredial).HasColumnType("money");
            entity.Property(e => e.ImpostoTerritorial).HasColumnType("money");
            entity.Property(e => e.InscricoesImobiliarias).HasMaxLength(255);
            entity.Property(e => e.LimpezaPublica).HasColumnType("money");
            entity.Property(e => e.ProprietarioResponsavel).HasMaxLength(255);
            entity.Property(e => e.ServicoBombeiros).HasColumnType("money");
            entity.Property(e => e.Total).HasColumnType("money");
            entity.Property(e => e.TotalAtual).HasColumnType("money");
            entity.Property(e => e.ValorVenal).HasColumnType("money");
        });

        modelBuilder.Entity<Abastecimento>(entity =>
        {
            entity.ToTable("Abastecimento");

            entity.Property(e => e.AbastecimentoId).ValueGeneratedNever();
            entity.Property(e => e.AbData).HasColumnType("datetime");
            entity.Property(e => e.AbQtdeLitros).HasColumnType("money");
            entity.Property(e => e.AbQuilometragem).HasColumnType("money");
            entity.Property(e => e.AbVlrAbastec).HasColumnType("money");

            entity.HasOne(d => d.AbVeiculo).WithMany(p => p.Abastecimentos)
                .HasForeignKey(d => d.AbVeiculoId)
                .HasConstraintName("FK_Abastecimento_Veiculos");
        });

        modelBuilder.Entity<Acessorio>(entity =>
        {
            entity.HasKey(e => new { e.AcvVeiculoId, e.AcvCompServId });

            entity.Property(e => e.AcvCorPredominante)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.AcvDataAquis).HasColumnType("datetime");
            entity.Property(e => e.AcvDescricao)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.AcvImgComp).HasColumnType("image");
            entity.Property(e => e.AcvNumNotaFiscal)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.AcvSerie)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.AcvVenctoGarantia).HasColumnType("datetime");
            entity.Property(e => e.AcvVlrTotal).HasColumnType("money");

            entity.HasOne(d => d.AcvCompServ).WithMany(p => p.Acessorios)
                .HasForeignKey(d => d.AcvCompServId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Acessorios_ComponentesServicos");

            entity.HasOne(d => d.AcvEspecie).WithMany(p => p.Acessorios)
                .HasForeignKey(d => d.AcvEspecieId)
                .HasConstraintName("FK_Acessorios_Especie");

            entity.HasOne(d => d.AcvFornecedor).WithMany(p => p.Acessorios)
                .HasForeignKey(d => d.AcvFornecedorId)
                .HasConstraintName("FK_Acessorios_Contribuintes");

            entity.HasOne(d => d.AcvMarca).WithMany(p => p.Acessorios)
                .HasForeignKey(d => d.AcvMarcaId)
                .HasConstraintName("FK_Acessorios_Marca");

            entity.HasOne(d => d.AcvModelo).WithMany(p => p.Acessorios)
                .HasForeignKey(d => d.AcvModeloId)
                .HasConstraintName("FK_Acessorios_Modelo");

            entity.HasOne(d => d.AcvModoAquis).WithMany(p => p.Acessorios)
                .HasForeignKey(d => d.AcvModoAquisId)
                .HasConstraintName("FK_Acessorios_ModoAquisicao");

            entity.HasOne(d => d.AcvRecursoFin).WithMany(p => p.Acessorios)
                .HasForeignKey(d => d.AcvRecursoFinId)
                .HasConstraintName("FK_Acessorios_RecursoFinanceiro");

            entity.HasOne(d => d.AcvVeiculo).WithMany(p => p.Acessorios)
                .HasForeignKey(d => d.AcvVeiculoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Acessorios_Veiculos");
        });

        modelBuilder.Entity<AcessoriosMoveisEquipamento>(entity =>
        {
            entity.HasKey(e => e.AcesMovEquipId);

            entity.Property(e => e.AcesMovEquipId)
                .ValueGeneratedNever()
                .HasColumnName("AcesMovEquipID");
            entity.Property(e => e.AcesCnpjmembro)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AcesCNPJMembro");
            entity.Property(e => e.AcesDataAquis).HasColumnType("datetime");
            entity.Property(e => e.AcesDescricao)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.AcesDtGarantia).HasColumnType("datetime");
            entity.Property(e => e.AcesNumNotaFiscal)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.AcesSerie)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.AcesVlrTotal).HasColumnType("money");

            entity.HasOne(d => d.AcesFornecedor).WithMany(p => p.AcessoriosMoveisEquipamentos)
                .HasForeignKey(d => d.AcesFornecedorId)
                .HasConstraintName("FK_AcessoriosMoveisEquipamentos_Contribuintes");

            entity.HasOne(d => d.Item).WithMany(p => p.AcessoriosMoveisEquipamentos)
                .HasForeignKey(d => d.ItemId)
                .HasConstraintName("FK_AcessoriosMoveisEquipamentos_MoveisItens");
        });

        modelBuilder.Entity<AgeAgendaIntervalo>(entity =>
        {
            entity.HasKey(e => new { e.AgendaId, e.IntAgdiaSemana }).HasName("PK_AgeIntervalos");

            entity.ToTable("AgeAgendaIntervalo");

            entity.Property(e => e.AgendaId).HasColumnName("AgendaID");
            entity.Property(e => e.IntAgdiaSemana)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("IntAGDiaSemana");
            entity.Property(e => e.InterId).HasColumnName("InterID");

            entity.HasOne(d => d.Agenda).WithMany(p => p.AgeAgendaIntervalos)
                .HasForeignKey(d => d.AgendaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AgeAgendaIntevalo_AgeAgenda");

            entity.HasOne(d => d.Inter).WithMany(p => p.AgeAgendaIntervalos)
                .HasForeignKey(d => d.InterId)
                .HasConstraintName("FK_AgeAgendaIntevalo_AgeIntervalo");
        });

        modelBuilder.Entity<AgeAgendaTipoAgendamento>(entity =>
        {
            entity.HasKey(e => new { e.AgendaId, e.TipoAgeId });

            entity.ToTable("AgeAgendaTipoAgendamento");

            entity.Property(e => e.AgendaId).HasColumnName("AgendaID");
            entity.Property(e => e.TipoAgeId).HasColumnName("TipoAgeID");
            entity.Property(e => e.Cor)
                .HasMaxLength(30)
                .IsUnicode(false);

            entity.HasOne(d => d.Agenda).WithMany(p => p.AgeAgendaTipoAgendamentos)
                .HasForeignKey(d => d.AgendaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AgeAgendaTipoAgendamento_AgeAgenda");

            entity.HasOne(d => d.TipoAge).WithMany(p => p.AgeAgendaTipoAgendamentos)
                .HasForeignKey(d => d.TipoAgeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AgeAgendaTipoAgendamento_AgeTipoAgendamento");
        });

        modelBuilder.Entity<AgeAgendamento>(entity =>
        {
            entity.HasKey(e => e.AgendamId);

            entity.ToTable("AgeAgendamento");

            entity.Property(e => e.AgendamId)
                .ValueGeneratedNever()
                .HasColumnName("AgendamID");
            entity.Property(e => e.AgendaId).HasColumnName("AgendaID");
            entity.Property(e => e.AgendamComplem)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.AgendamData).HasColumnType("datetime");
            entity.Property(e => e.AgendamHora).HasColumnType("datetime");
            entity.Property(e => e.AgendamIdanterior).HasColumnName("AgendamIDAnterior");
            entity.Property(e => e.AgendamSitAtend)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.AgendamSituacao)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.AssunId)
                .HasComment("Assunto")
                .HasColumnName("AssunID");
            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.ServId).HasColumnName("ServID");
            entity.Property(e => e.TipoAgeId).HasColumnName("TipoAgeID");

            entity.HasOne(d => d.Agenda).WithMany(p => p.AgeAgendamentos)
                .HasForeignKey(d => d.AgendaId)
                .HasConstraintName("FK_AgeAgendamento_AgeAgenda");

            entity.HasOne(d => d.Assun).WithMany(p => p.AgeAgendamentos)
                .HasForeignKey(d => d.AssunId)
                .HasConstraintName("FK_AgeAgendamento_AgeAssunto");

            entity.HasOne(d => d.Con).WithMany(p => p.AgeAgendamentos)
                .HasForeignKey(d => d.ConId)
                .HasConstraintName("FK_AgeAgendamento_Contribuintes");

            entity.HasOne(d => d.Serv).WithMany(p => p.AgeAgendamentos)
                .HasForeignKey(d => d.ServId)
                .HasConstraintName("FK_AgeAgendamento_Servidores");

            entity.HasOne(d => d.TipoAge).WithMany(p => p.AgeAgendamentos)
                .HasForeignKey(d => d.TipoAgeId)
                .HasConstraintName("FK_AgeAgendamento_AgeTipoAgendamento1");
        });

        modelBuilder.Entity<AgeAgendum>(entity =>
        {
            entity.HasKey(e => e.AgendaId);

            entity.Property(e => e.AgendaId)
                .ValueGeneratedNever()
                .HasColumnName("AgendaID");
            entity.Property(e => e.AgendaDataCad)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AgendaMensagem)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.AgendaSituacao)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ServId).HasColumnName("ServID");

            entity.HasOne(d => d.Serv).WithMany(p => p.AgeAgenda)
                .HasForeignKey(d => d.ServId)
                .HasConstraintName("FK_AgeAgenda_Servidores");
        });

        modelBuilder.Entity<AgeAnotacao>(entity =>
        {
            entity.HasKey(e => e.AnotId);

            entity.ToTable("AgeAnotacao");

            entity.Property(e => e.AnotId)
                .ValueGeneratedNever()
                .HasColumnName("AnotID");
            entity.Property(e => e.AgendamId).HasColumnName("AgendamID");
            entity.Property(e => e.AnotData).HasColumnType("datetime");
            entity.Property(e => e.AnotDescricao)
                .HasMaxLength(255)
                .IsUnicode(false);

            entity.HasOne(d => d.Agendam).WithMany(p => p.AgeAnotacaos)
                .HasForeignKey(d => d.AgendamId)
                .HasConstraintName("FK_AgeAnotacao_AgeAgendamento");
        });

        modelBuilder.Entity<AgeAssunto>(entity =>
        {
            entity.HasKey(e => e.AssunId);

            entity.ToTable("AgeAssunto");

            entity.Property(e => e.AssunId)
                .ValueGeneratedNever()
                .HasColumnName("AssunID");
            entity.Property(e => e.AssunDescricao)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AgeIntervalo>(entity =>
        {
            entity.HasKey(e => e.InterId);

            entity.ToTable("AgeIntervalo");

            entity.Property(e => e.InterId)
                .ValueGeneratedNever()
                .HasColumnName("InterID");
            entity.Property(e => e.InterHoraDesc).HasColumnType("datetime");
            entity.Property(e => e.InterHoraFin).HasColumnType("datetime");
            entity.Property(e => e.InterHoraIni).HasColumnType("datetime");
        });

        modelBuilder.Entity<AgeNotAviso>(entity =>
        {
            entity.HasKey(e => e.AvisId);

            entity.Property(e => e.AvisId)
                .ValueGeneratedNever()
                .HasColumnName("avisID");
            entity.Property(e => e.AvisDataFinal)
                .HasColumnType("datetime")
                .HasColumnName("avisDataFinal");
            entity.Property(e => e.AvisDataInicio)
                .HasColumnType("datetime")
                .HasColumnName("avisDataInicio");
            entity.Property(e => e.AvisLink)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("avisLink");
            entity.Property(e => e.AvisTexto)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("avisTexto");
            entity.Property(e => e.AvisTitulo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("avisTitulo");
            entity.Property(e => e.DataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");
        });

        modelBuilder.Entity<AgeNotNoticia>(entity =>
        {
            entity.HasKey(e => e.Idnoticia);

            entity.Property(e => e.Idnoticia)
                .ValueGeneratedNever()
                .HasColumnName("IDNoticia");
            entity.Property(e => e.Acessos).HasDefaultValue(0);
            entity.Property(e => e.DataHora)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DataPublicacao).HasColumnType("datetime");
            entity.Property(e => e.Descricao).HasColumnType("text");
            entity.Property(e => e.Link)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Situacao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("Aguardando Revisão");
            entity.Property(e => e.TemaId).HasColumnName("TemaID");
            entity.Property(e => e.Titulo)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.Tema).WithMany(p => p.AgeNotNoticia)
                .HasForeignKey(d => d.TemaId)
                .HasConstraintName("FK_AgeNotNoticias_AgeNotTema");
        });

        modelBuilder.Entity<AgeNotNoticiaAnexo>(entity =>
        {
            entity.HasKey(e => e.IdanexoNoticia);

            entity.Property(e => e.IdanexoNoticia)
                .ValueGeneratedNever()
                .HasColumnName("IDAnexoNoticia");
            entity.Property(e => e.Extensao)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Idnoticia).HasColumnName("IDNoticia");
            entity.Property(e => e.Objeto).HasColumnType("image");
            entity.Property(e => e.Padrao)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Texto)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.TipoAnexo)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.IdnoticiaNavigation).WithMany(p => p.AgeNotNoticiaAnexos)
                .HasForeignKey(d => d.Idnoticia)
                .HasConstraintName("FK_AgeNotNoticiaAnexos_AgeNotNoticias");
        });

        modelBuilder.Entity<AgeNotTema>(entity =>
        {
            entity.HasKey(e => e.TemaId);

            entity.ToTable("AgeNotTema");

            entity.Property(e => e.TemaId)
                .ValueGeneratedNever()
                .HasColumnName("TemaID");
            entity.Property(e => e.TemaDescricao)
                .HasMaxLength(60)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AgePermissao>(entity =>
        {
            entity.HasKey(e => new { e.ServId, e.AgendaId });

            entity.ToTable("AgePermissao");

            entity.Property(e => e.ServId).HasColumnName("ServID");
            entity.Property(e => e.AgendaId).HasColumnName("AgendaID");
            entity.Property(e => e.PermAgenda)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PermConsulta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PermDataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Agenda).WithMany(p => p.AgePermissaos)
                .HasForeignKey(d => d.AgendaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AgePermissao_AgeAgenda");

            entity.HasOne(d => d.Serv).WithMany(p => p.AgePermissaos)
                .HasForeignKey(d => d.ServId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AgePermissao_Servidores");
        });

        modelBuilder.Entity<AgeTipoAgendamento>(entity =>
        {
            entity.HasKey(e => e.TipoAgeId);

            entity.ToTable("AgeTipoAgendamento");

            entity.Property(e => e.TipoAgeId)
                .ValueGeneratedNever()
                .HasColumnName("TipoAgeID");
            entity.Property(e => e.TipoAgeNome)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Agencium>(entity =>
        {
            entity.HasKey(e => new { e.AgenciaId, e.AgBancoId }).HasName("PK_ScgAgencia");

            entity.Property(e => e.AgenciaId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AgBancoId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AgCredenciamento)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AgDtUltAlt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AgDv)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("AgDV");
            entity.Property(e => e.AgNome)
                .HasMaxLength(40)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AgTecUltAlt)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");

            entity.HasOne(d => d.AgBanco).WithMany(p => p.Agencia)
                .HasForeignKey(d => d.AgBancoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ScgAgencia_ScgBanco");
        });

        modelBuilder.Entity<Agendum>(entity =>
        {
            entity.HasKey(e => new { e.AgeUsuario, e.AgeData, e.AgeHora });

            entity.Property(e => e.AgeUsuario)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("");
            entity.Property(e => e.AgeData)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime");
            entity.Property(e => e.AgeHora)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.AgeAssunto)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("");

            entity.HasOne(d => d.AgeUsuarioNavigation).WithMany(p => p.Agenda)
                .HasForeignKey(d => d.AgeUsuario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Agenda_Usuarios");
        });

        modelBuilder.Entity<AguaCaderno>(entity =>
        {
            entity.HasKey(e => e.CadernoId).HasName("PK_HidroCaderno");

            entity.ToTable("AguaCaderno");

            entity.Property(e => e.CadernoId)
                .ValueGeneratedNever()
                .HasColumnName("CadernoID");
            entity.Property(e => e.Nome)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AguaCategoria>(entity =>
        {
            entity.HasKey(e => e.CategId);

            entity.Property(e => e.CategId)
                .ValueGeneratedNever()
                .HasComment("Código de identificação da categoria de cobrança da água.")
                .HasColumnName("CategID");
            entity.Property(e => e.CategNome)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Nome da categoria de cobrança da água.");
        });

        modelBuilder.Entity<AguaCategoriaTributo>(entity =>
        {
            entity.HasKey(e => e.CategTributoId);

            entity.Property(e => e.CategTributoId)
                .ValueGeneratedNever()
                .HasColumnName("CategTributoID");
            entity.Property(e => e.CategId).HasColumnName("CategID");
            entity.Property(e => e.CategTributoOrigemValor)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CategTributoTaxaPrinc)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");

            entity.HasOne(d => d.Categ).WithMany(p => p.AguaCategoriaTributos)
                .HasForeignKey(d => d.CategId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AguaCategoriaTributos_AguaCategorias");

            entity.HasOne(d => d.TipoTrib).WithMany(p => p.AguaCategoriaTributos)
                .HasForeignKey(d => d.TipoTribId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AguaCategoriaTributos_TribTipoTributos");
        });

        modelBuilder.Entity<AguaCobrancaBanco>(entity =>
        {
            entity.HasKey(e => e.CobrancaBancoId);

            entity.ToTable("AguaCobrancaBanco");

            entity.Property(e => e.CobrancaBancoId)
                .ValueGeneratedNever()
                .HasColumnName("CobrancaBancoID");
            entity.Property(e => e.AgBancoId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AgenciaId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CobBancoAtivo)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CobBancoContaCorr)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.HidroId).HasColumnName("HidroID");

            entity.HasOne(d => d.Hidro).WithMany(p => p.AguaCobrancaBancos)
                .HasForeignKey(d => d.HidroId)
                .HasConstraintName("FK_AguaCobrancaBanco_AguaHidrometro");

            entity.HasOne(d => d.Agencium).WithMany(p => p.AguaCobrancaBancos)
                .HasForeignKey(d => new { d.AgenciaId, d.AgBancoId })
                .HasConstraintName("FK_AguaCobrancaBanco_Agencia");
        });

        modelBuilder.Entity<AguaCompoServTrib>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AguaCompoServTrib");

            entity.Property(e => e.CompoServId).HasColumnName("CompoServID");
            entity.Property(e => e.CompoServTaxaPrinc)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TipoServId).HasColumnName("TipoServID");
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
        });

        modelBuilder.Entity<AguaCqparam>(entity =>
        {
            entity.HasKey(e => e.CqparamId);

            entity.ToTable("AguaCQParam");

            entity.Property(e => e.CqparamId)
                .ValueGeneratedNever()
                .HasColumnName("CQParamID");
            entity.Property(e => e.CqparamNome)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CQParamNome");
            entity.Property(e => e.CqparamUnidade)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CQParamUnidade");
            entity.Property(e => e.CqparamVmp)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CQParamVMP");
        });

        modelBuilder.Entity<AguaCqvalorParam>(entity =>
        {
            entity.HasKey(e => e.CqvlrId);

            entity.ToTable("AguaCQValorParam");

            entity.Property(e => e.CqvlrId)
                .ValueGeneratedNever()
                .HasColumnName("CQVlrID");
            entity.Property(e => e.CqparamId).HasColumnName("CQParamID");
            entity.Property(e => e.CqvlrAno).HasColumnName("CQVlrAno");
            entity.Property(e => e.CqvlrMes).HasColumnName("CQVlrMes");
            entity.Property(e => e.CqvlrSede)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CQVlrSede");
            entity.Property(e => e.CqvlrValor)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CQVlrValor");
        });

        modelBuilder.Entity<AguaDividasLeitura>(entity =>
        {
            entity.HasKey(e => e.DividasLeitAguaId);

            entity.ToTable("AguaDividasLeitura");

            entity.Property(e => e.DividasLeitAguaId)
                .ValueGeneratedNever()
                .HasColumnName("DividasLeitAguaID");
            entity.Property(e => e.ConIddivida).HasColumnName("ConIDDivida");
            entity.Property(e => e.LeituraId).HasColumnName("LeituraID");

            entity.HasOne(d => d.ConIddividaNavigation).WithMany(p => p.AguaDividasLeituras)
                .HasForeignKey(d => d.ConIddivida)
                .HasConstraintName("FK_AguaDividasLeitura_TribDividasContribuinte");

            entity.HasOne(d => d.Leitura).WithMany(p => p.AguaDividasLeituras)
                .HasForeignKey(d => d.LeituraId)
                .HasConstraintName("FK_AguaDividasLeitura_AguaLeituraHidrometro");
        });

        modelBuilder.Entity<AguaDividasServAgua>(entity =>
        {
            entity.HasKey(e => e.DividasServAguaId);

            entity.ToTable("AguaDividasServAgua");

            entity.Property(e => e.DividasServAguaId)
                .ValueGeneratedNever()
                .HasColumnName("DividasServAguaID");
            entity.Property(e => e.LeituraId).HasColumnName("LeituraID");
            entity.Property(e => e.SolicServParcId).HasColumnName("SolicServParcID");

            entity.HasOne(d => d.Leitura).WithMany(p => p.AguaDividasServAguas)
                .HasForeignKey(d => d.LeituraId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AguaDividasServAgua_AguaLeituraHidrometro");

            entity.HasOne(d => d.SolicServParc).WithMany(p => p.AguaDividasServAguas)
                .HasForeignKey(d => d.SolicServParcId)
                .HasConstraintName("FK_AguaDividasServAgua_AguaReqSolicServParc");
        });

        modelBuilder.Entity<AguaEdificacoesHidrometro>(entity =>
        {
            entity.HasKey(e => e.EdifHidroId);

            entity.ToTable("AguaEdificacoesHidrometro");

            entity.Property(e => e.EdifHidroId)
                .ValueGeneratedNever()
                .HasColumnName("EdifHidroID");
            entity.Property(e => e.EdifHidroDataFinal).HasColumnType("datetime");
            entity.Property(e => e.EdifHidroDataInicio).HasColumnType("datetime");
            entity.Property(e => e.EdifHidroEndHidrometro)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EdifHidroHistorico)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.HidroId).HasColumnName("HidroID");

            entity.HasOne(d => d.Edificacao).WithMany(p => p.AguaEdificacoesHidrometros)
                .HasForeignKey(d => d.EdificacaoId)
                .HasConstraintName("FK_AguaEdificacoesHidrometro_TribEdificacoes");

            entity.HasOne(d => d.Hidro).WithMany(p => p.AguaEdificacoesHidrometros)
                .HasForeignKey(d => d.HidroId)
                .HasConstraintName("FK_AguaEdificacoesHidrometro_AguaHidrometro");
        });

        modelBuilder.Entity<AguaHidrometro>(entity =>
        {
            entity.HasKey(e => e.HidroId);

            entity.ToTable("AguaHidrometro");

            entity.Property(e => e.HidroId)
                .ValueGeneratedNever()
                .HasColumnName("HidroID");
            entity.Property(e => e.BancoId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CadernoId).HasColumnName("CadernoID");
            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.HidroCodAnterior)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.HidroComplemento)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.HidroConIdresponsavel).HasColumnName("HidroConIDResponsavel");
            entity.Property(e => e.HidroContaCorrente)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.HidroData).HasColumnType("datetime");
            entity.Property(e => e.HidroDistrito)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.HidroIdentAnterior)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HidroLogradNum)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.HidroLote)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.HidroNumReferencia)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HidroQuadra)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.HidroSetor)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.HidroSituacao)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LogradId).HasColumnName("LogradID");
        });

        modelBuilder.Entity<AguaLeituraHidrometro>(entity =>
        {
            entity.HasKey(e => e.LeituraId);

            entity.ToTable("AguaLeituraHidrometro", tb => tb.HasComment("Leitura dos Hidrometros"));

            entity.Property(e => e.LeituraId)
                .ValueGeneratedNever()
                .HasComment("Identificação exclusiva da leitura\r\n")
                .HasColumnName("LeituraID");
            entity.Property(e => e.HidroId)
                .HasComment("Código de Identificação do Hidrômetro")
                .HasColumnName("HidroID");
            entity.Property(e => e.LeituraAnterior)
                .HasComment("Valor da ultima leitura")
                .HasColumnType("decimal(18, 0)");
            entity.Property(e => e.LeituraAtual)
                .HasComment("Valor lido na atualidade\r\n")
                .HasColumnType("decimal(18, 0)");
            entity.Property(e => e.LeituraData)
                .HasComment("Data da leitura\r\n")
                .HasColumnType("datetime");
            entity.Property(e => e.LeituraDataCancel)
                .HasComment("Data do cancelamento, quando a situação for cancelada\r\n")
                .HasColumnType("datetime");
            entity.Property(e => e.LeituraHistorico)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasComment("Histórico do lançamento\r\n");
            entity.Property(e => e.LeituraSituacao)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("ATIVA ou CANCELADA");
            entity.Property(e => e.LeituraUsuarioCancel)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Usuário que executou o lançamento de cancelamento\r\n");
            entity.Property(e => e.LeituraUsuarioLancamento)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Usuário que realizou lançamento da leitura\r\n");
            entity.Property(e => e.LeituraUsuarioLeitura)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Usuário/técnico responsável pela leitura\r\n");

            entity.HasOne(d => d.Hidro).WithMany(p => p.AguaLeituraHidrometros)
                .HasForeignKey(d => d.HidroId)
                .HasConstraintName("FK_AguaLeituraHidrometro_AguaHidrometro");
        });

        modelBuilder.Entity<AguaRateio>(entity =>
        {
            entity.HasKey(e => e.RateioId);

            entity.ToTable("AguaRateio");

            entity.Property(e => e.RateioId)
                .ValueGeneratedNever()
                .HasComment("Identificação exclusiva do rateio.\r\nIdentificação exclusiva do rateio.\r\n")
                .HasColumnName("RateioID");
            entity.Property(e => e.CategId)
                .HasComment("Código de Identificação da Categoria.")
                .HasColumnName("CategID");
            entity.Property(e => e.HidroId)
                .HasComment("Código de Identificação do Rateio.")
                .HasColumnName("HidroID");
            entity.Property(e => e.RateioDataFim)
                .HasComment("Data final da validade do registro.\r\n")
                .HasColumnType("datetime");
            entity.Property(e => e.RateioDataIni)
                .HasComment("Data inicio da validade.\r\nData inicio da validade.\r\n")
                .HasColumnType("datetime");
            entity.Property(e => e.RateioHistorico)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasComment("Histórico do lançamento.\r\n");

            entity.HasOne(d => d.Hidro).WithMany(p => p.AguaRateios)
                .HasForeignKey(d => d.HidroId)
                .HasConstraintName("FK_AguaRateio_AguaHidrometro");
        });

        modelBuilder.Entity<AguaReqSolicServParc>(entity =>
        {
            entity.HasKey(e => e.SolicServParcId);

            entity.ToTable("AguaReqSolicServParc");

            entity.Property(e => e.SolicServParcId)
                .ValueGeneratedNever()
                .HasColumnName("SolicServParcID");
            entity.Property(e => e.SolicServId)
                .HasComment("Identificação da solicitação de serviço.")
                .HasColumnName("SolicServID");
            entity.Property(e => e.SolicServParcAno).HasComment("Ano da parcela.");
            entity.Property(e => e.SolicServParcMes).HasComment("Mês da parcela.");
            entity.Property(e => e.SolicServParcParcela).HasComment("Número de parcelas.");
            entity.Property(e => e.TipoServId)
                .HasComment("Identificação do tipo de servico da agua.")
                .HasColumnName("TipoServID");

            entity.HasOne(d => d.AguaReqSolicServTipoServ).WithMany(p => p.AguaReqSolicServParcs)
                .HasForeignKey(d => new { d.TipoServId, d.SolicServId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AguaReqSolicServParc_AguaReqSolicServTipoServ");
        });

        modelBuilder.Entity<AguaReqSolicServTipoServ>(entity =>
        {
            entity.HasKey(e => new { e.TipoServId, e.SolicServId });

            entity.ToTable("AguaReqSolicServTipoServ");

            entity.Property(e => e.TipoServId)
                .HasComment("Identificação do tipo de servico da agua.")
                .HasColumnName("TipoServID");
            entity.Property(e => e.SolicServId)
                .HasComment("Identificação da solicitação de serviço.")
                .HasColumnName("SolicServID");
            entity.Property(e => e.SolicTipoServDataExec)
                .HasComment("Data da execução do serviço.\r\nData da execução do serviço.\r\n")
                .HasColumnType("datetime");
            entity.Property(e => e.SolicTipoServDataSolic)
                .HasComment("Data da solicitação do serviço.\r\nData da solicitação do serviço.\r\n")
                .HasColumnType("datetime");
            entity.Property(e => e.SolicTipoServHistorico)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasComment("Dados complementares sobre o serviço.");
            entity.Property(e => e.SolicTipoServSituacaoExec)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasComment("Situação da execução do serviço (Executado ou Não Executado).\r\nSituação da execução do serviço (Executado ou Não Executado)\r\n");
            entity.Property(e => e.SolicTipoServSituacaoSolic)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasComment("Situação da solicitação do serviço (Em Análise, Deferido ou Indeferido).");

            entity.HasOne(d => d.SolicServ).WithMany(p => p.AguaReqSolicServTipoServs)
                .HasForeignKey(d => d.SolicServId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AguaReqSolicServTipoServ_AguaReqSolicitacaoServicos");

            entity.HasOne(d => d.TipoServ).WithMany(p => p.AguaReqSolicServTipoServs)
                .HasForeignKey(d => d.TipoServId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AguaReqSolicServTipoServ_AguaTiposServAgua");
        });

        modelBuilder.Entity<AguaReqSolicitacaoServico>(entity =>
        {
            entity.HasKey(e => e.SolicServId);

            entity.Property(e => e.SolicServId)
                .ValueGeneratedNever()
                .HasComment("Código de identificação exclusiva.\r\nIdentificação do texto para o corpo do documento.")
                .HasColumnName("SolicServID");
            entity.Property(e => e.ConId)
                .HasComment("Identificação do contribuinte que esta solicitando o serviço.")
                .HasColumnName("ConID");
            entity.Property(e => e.HidroId)
                .HasComment("Identificação do hidrometro que ira receber o serviço.")
                .HasColumnName("HidroID");
            entity.Property(e => e.ProtocoloId)
                .HasComment("Identificação do numero do protocolo (a princípio não esta integrado com protocolo geral).\r\n")
                .HasColumnName("ProtocoloID");
            entity.Property(e => e.SolicServDataSolicit)
                .HasComment("Data da solicitação.\r\n")
                .HasColumnType("datetime");
            entity.Property(e => e.SolicServHistorico)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasComment("Dados complementares da solicitação.");
            entity.Property(e => e.TextoId)
                .HasComment("Identificação do texto para o corpo do documento.")
                .HasColumnName("TextoID");

            entity.HasOne(d => d.Con).WithMany(p => p.AguaReqSolicitacaoServicos)
                .HasForeignKey(d => d.ConId)
                .HasConstraintName("FK_AguaReqSolicitacaoServicos_Contribuintes");

            entity.HasOne(d => d.Hidro).WithMany(p => p.AguaReqSolicitacaoServicos)
                .HasForeignKey(d => d.HidroId)
                .HasConstraintName("FK_AguaReqSolicitacaoServicos_AguaHidrometro");

            entity.HasOne(d => d.Texto).WithMany(p => p.AguaReqSolicitacaoServicos)
                .HasForeignKey(d => d.TextoId)
                .HasConstraintName("FK_AguaReqSolicitacaoServicos_TribTextos");
        });

        modelBuilder.Entity<AguaRuraisHidrometro>(entity =>
        {
            entity.HasKey(e => e.RuralHidroId);

            entity.ToTable("AguaRuraisHidrometro");

            entity.Property(e => e.RuralHidroId)
                .ValueGeneratedNever()
                .HasColumnName("RuralHidroID");
            entity.Property(e => e.HidroId).HasColumnName("HidroID");
            entity.Property(e => e.Idpropriedade).HasColumnName("IDPropriedade");
            entity.Property(e => e.RuralHidroDataFinal).HasColumnType("datetime");
            entity.Property(e => e.RuralHidroDataInicio).HasColumnType("datetime");
            entity.Property(e => e.RuralHidroEndHidro)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.RuralHidroHistorico)
                .HasMaxLength(255)
                .IsUnicode(false);

            entity.HasOne(d => d.Hidro).WithMany(p => p.AguaRuraisHidrometros)
                .HasForeignKey(d => d.HidroId)
                .HasConstraintName("FK_AguaRuraisHidrometro_AguaHidrometro");

            entity.HasOne(d => d.IdpropriedadeNavigation).WithMany(p => p.AguaRuraisHidrometros)
                .HasForeignKey(d => d.Idpropriedade)
                .HasConstraintName("FK_AguaRuraisHidrometro_ProdRurPropriedades");
        });

        modelBuilder.Entity<AguaTarifasAgua>(entity =>
        {
            entity.HasKey(e => e.TarifAgId);

            entity.ToTable("AguaTarifasAgua");

            entity.Property(e => e.TarifAgId)
                .ValueGeneratedNever()
                .HasColumnName("TarifAgID");
            entity.Property(e => e.CategId).HasColumnName("CategID");
            entity.Property(e => e.TarifAgAte).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.TarifAgDe).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.TarifAgMetroCubico)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TarifAgTaxaMinima)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TarifAgValor).HasColumnType("money");

            entity.HasOne(d => d.Categ).WithMany(p => p.AguaTarifasAguas)
                .HasForeignKey(d => d.CategId)
                .HasConstraintName("FK_AguaTarifasAgua_AguaCategorias");
        });

        modelBuilder.Entity<AguaTiposServAgua>(entity =>
        {
            entity.HasKey(e => e.TipoServId);

            entity.ToTable("AguaTiposServAgua");

            entity.Property(e => e.TipoServId)
                .ValueGeneratedNever()
                .HasColumnName("TipoServID");
            entity.Property(e => e.TipoServLegislacao)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.TipoServNome)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AjustEdif>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ajustEdif");

            entity.Property(e => e.Edificacaoid).HasColumnName("edificacaoid");
        });

        modelBuilder.Entity<AjustEdifBoa>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AjustEdif_Boa");

            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.InscricaoImobiliaria)
                .HasMaxLength(14)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AlmEntrada>(entity =>
        {
            entity.HasKey(e => e.EntradaId).HasName("PK_Entradas");

            entity.Property(e => e.EntradaId).ValueGeneratedNever();
            entity.Property(e => e.EntrData).HasColumnType("datetime");
            entity.Property(e => e.EntrDataDoc).HasColumnType("datetime");
            entity.Property(e => e.EntrNumDoc)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.EntrObserv)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Almox).WithMany(p => p.AlmEntradaAlmoxes)
                .HasForeignKey(d => d.AlmoxId)
                .HasConstraintName("FK_AlmEntradas_Almoxarifados2");

            entity.HasOne(d => d.EntrAlmoxOrigem).WithMany(p => p.AlmEntradaEntrAlmoxOrigems)
                .HasForeignKey(d => d.EntrAlmoxOrigemId)
                .HasConstraintName("FK_AlmEntradas_Almoxarifados");

            entity.HasOne(d => d.EntrFornecedor).WithMany(p => p.AlmEntrada)
                .HasForeignKey(d => d.EntrFornecedorId)
                .HasConstraintName("FK_AlmEntradas_Contribuintes");

            entity.HasOne(d => d.EntrModoAquis).WithMany(p => p.AlmEntrada)
                .HasForeignKey(d => d.EntrModoAquisId)
                .HasConstraintName("FK_AlmEntradas_ModoAquisicao");

            entity.HasOne(d => d.EntrTipoDocNavigation).WithMany(p => p.AlmEntrada)
                .HasForeignKey(d => d.EntrTipoDoc)
                .HasConstraintName("FK_AlmEntradas_Documentos");
        });

        modelBuilder.Entity<AlmEntradaIten>(entity =>
        {
            entity.HasKey(e => e.EntrItemId);

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("TgAlmEntradaItensDELETE");
                    tb.HasTrigger("TgAlmEntradaItensINSERT");
                    tb.HasTrigger("TgAlmEntradaItensUPDATE");
                });

            entity.Property(e => e.EntrItemId).ValueGeneratedNever();
            entity.Property(e => e.EntrItQtde).HasColumnType("money");
            entity.Property(e => e.EntrItVlrTotal).HasColumnType("money");

            entity.HasOne(d => d.Entr).WithMany(p => p.AlmEntradaItens)
                .HasForeignKey(d => d.EntrId)
                .HasConstraintName("FK_AlmEntradaItens_AlmEntradas");

            entity.HasOne(d => d.Item).WithMany(p => p.AlmEntradaItens)
                .HasForeignKey(d => d.ItemId)
                .HasConstraintName("FK_AlmEntradaItens_AlmItens");

            entity.HasOne(d => d.Lote).WithMany(p => p.AlmEntradaItens)
                .HasForeignKey(d => d.LoteId)
                .HasConstraintName("FK_AlmEntradaItens_AlmLotes");

            entity.HasOne(d => d.AlmoxarifIten).WithMany(p => p.AlmEntradaItens)
                .HasForeignKey(d => new { d.AlmoxId, d.ItemId })
                .HasConstraintName("FK_AlmEntradaItens_AlmoxarifItens");

            entity.HasOne(d => d.AlmoxarifLote).WithMany(p => p.AlmEntradaItens)
                .HasForeignKey(d => new { d.AlmoxId, d.ItemId, d.LoteId })
                .HasConstraintName("FK_AlmEntradaItens_AlmoxarifLotes");
        });

        modelBuilder.Entity<AlmEntradaNovoGiiG>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("almEntradaNovoGiiG");

            entity.Property(e => e.AlmIdEmpenho).HasColumnName("almIdEmpenho");
            entity.Property(e => e.AlmIdItemAlmox).HasColumnName("almIdItemAlmox");
            entity.Property(e => e.AlmIdItemContabil).HasColumnName("almIdItemContabil");
            entity.Property(e => e.AlmQtdEntrada)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("almQtdEntrada");
        });

        modelBuilder.Entity<AlmIten>(entity =>
        {
            entity.HasKey(e => e.ItemId);

            entity.Property(e => e.ItemId).ValueGeneratedNever();
            entity.Property(e => e.ItemCodBarra)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ItemNome)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.ItemObserv)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ItemVlrUnitario)
                .HasDefaultValue(0m)
                .HasColumnType("money");

            entity.HasOne(d => d.ItemEspecie).WithMany(p => p.AlmItens)
                .HasForeignKey(d => d.ItemEspecieId)
                .HasConstraintName("FK_AlmItens_Especie");

            entity.HasOne(d => d.ItemMarca).WithMany(p => p.AlmItens)
                .HasForeignKey(d => d.ItemMarcaId)
                .HasConstraintName("FK_AlmItens_Marca");

            entity.HasOne(d => d.ItemModelo).WithMany(p => p.AlmItens)
                .HasForeignKey(d => d.ItemModeloId)
                .HasConstraintName("FK_AlmItens_Modelo");

            entity.HasOne(d => d.ItemUnMed).WithMany(p => p.AlmItens)
                .HasForeignKey(d => d.ItemUnMedId)
                .HasConstraintName("FK_AlmItens_AlmUnMed");
        });

        modelBuilder.Entity<AlmItensBkp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AlmItensBKP");

            entity.Property(e => e.ItemCodBarra)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ItemNome)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.ItemObserv)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ItemVlrUnitario).HasColumnType("money");
        });

        modelBuilder.Entity<AlmLote>(entity =>
        {
            entity.HasKey(e => e.LoteId);

            entity.Property(e => e.LoteId).ValueGeneratedNever();
            entity.Property(e => e.LotDtFabric).HasColumnType("datetime");
            entity.Property(e => e.LotDtVenc).HasColumnType("datetime");
            entity.Property(e => e.LotObserv)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LoteNum)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AlmRequisico>(entity =>
        {
            entity.HasKey(e => e.RequisicaoId);

            entity.Property(e => e.RequisicaoId).ValueGeneratedNever();
            entity.Property(e => e.DivId)
                .HasDefaultValue(0L)
                .HasComment("Divisão destino da requisicao.");
            entity.Property(e => e.ReqComReserva)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("Sim")
                .IsFixedLength();
            entity.Property(e => e.ReqData).HasColumnType("datetime");
            entity.Property(e => e.ReqSituacaoEnvio)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UsuId)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("UsuID");

            entity.HasOne(d => d.Almox).WithMany(p => p.AlmRequisicos)
                .HasForeignKey(d => d.AlmoxId)
                .HasConstraintName("FK_AlmRequisicoes_Almoxarifados");
        });

        modelBuilder.Entity<AlmRequisicoesIten>(entity =>
        {
            entity.HasKey(e => e.RequisicaoItemId);

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("TgAlmRequisicoesItensDELETE");
                    tb.HasTrigger("TgAlmRequisicoesItensINSERT");
                    tb.HasTrigger("TgAlmRequisicoesItensUPDATE");
                });

            entity.Property(e => e.RequisicaoItemId).ValueGeneratedNever();
            entity.Property(e => e.ReqIobservacao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ReqIObservacao");
            entity.Property(e => e.ReqIsituacao)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ReqISituacao");
            entity.Property(e => e.ReqItQtde).HasColumnType("money");
            entity.Property(e => e.ReqItQtdeAtendida).HasColumnType("money");

            entity.HasOne(d => d.Almox).WithMany(p => p.AlmRequisicoesItens)
                .HasForeignKey(d => d.AlmoxId)
                .HasConstraintName("FK_AlmRequisicoesItens_Almoxarifados");

            entity.HasOne(d => d.Item).WithMany(p => p.AlmRequisicoesItens)
                .HasForeignKey(d => d.ItemId)
                .HasConstraintName("FK_AlmRequisicoesItens_AlmItens1");

            entity.HasOne(d => d.Requisicao).WithMany(p => p.AlmRequisicoesItens)
                .HasForeignKey(d => d.RequisicaoId)
                .HasConstraintName("FK_AlmRequisicoesItens_AlmRequisicoes");

            entity.HasOne(d => d.AlmoxarifIten).WithMany(p => p.AlmRequisicoesItens)
                .HasForeignKey(d => new { d.AlmoxId, d.ItemId })
                .HasConstraintName("FK_AlmRequisicoesItens_AlmoxarifItens");
        });

        modelBuilder.Entity<AlmSaida>(entity =>
        {
            entity.HasKey(e => e.SaidaId);

            entity.Property(e => e.SaidaId).ValueGeneratedNever();
            entity.Property(e => e.DivId)
                .HasDefaultValue(0L)
                .HasComment("Divisão destino da requisicao");
            entity.Property(e => e.SaiData).HasColumnType("datetime");
            entity.Property(e => e.SaiObserv)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ServidorId).HasComment("Servidor requisitante");
            entity.Property(e => e.UsuId)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasComment("Usuario que esta atendendo a Requisitante")
                .HasColumnName("UsuID");

            entity.HasOne(d => d.SaiTipoSaida).WithMany(p => p.AlmSaida)
                .HasForeignKey(d => d.SaiTipoSaidaId)
                .HasConstraintName("FK_AlmSaidas_AlmTipoSaida");
        });

        modelBuilder.Entity<AlmSaidasIten>(entity =>
        {
            entity.HasKey(e => e.SaidaItemId);

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("TgAlmSaidasItensDELETE");
                    tb.HasTrigger("TgAlmSaidasItensINSERT");
                    tb.HasTrigger("TgAlmSaidasItensUPDATE");
                });

            entity.Property(e => e.SaidaItemId).ValueGeneratedNever();
            entity.Property(e => e.SaIobs)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SaIObs");
            entity.Property(e => e.SaIqtde)
                .HasColumnType("money")
                .HasColumnName("SaIQtde");

            entity.HasOne(d => d.ReqItem).WithMany(p => p.AlmSaidasItens)
                .HasForeignKey(d => d.ReqItemId)
                .HasConstraintName("FK_AlmSaidasItens_AlmRequisicoesItens");

            entity.HasOne(d => d.Saida).WithMany(p => p.AlmSaidasItens)
                .HasForeignKey(d => d.SaidaId)
                .HasConstraintName("FK_AlmSaidasItens_AlmSaidas");

            entity.HasOne(d => d.AlmoxarifIten).WithMany(p => p.AlmSaidasItens)
                .HasForeignKey(d => new { d.AlmoxId, d.ItemId })
                .HasConstraintName("FK_AlmSaidasItens_AlmoxarifItens");

            entity.HasOne(d => d.AlmoxarifLote).WithMany(p => p.AlmSaidasItens)
                .HasForeignKey(d => new { d.AlmoxId, d.ItemId, d.LoteId })
                .HasConstraintName("FK_AlmSaidasItens_AlmoxarifLotes");
        });

        modelBuilder.Entity<AlmTipoSaidum>(entity =>
        {
            entity.HasKey(e => e.TipoSaidaId);

            entity.Property(e => e.TipoSaidaId).ValueGeneratedNever();
            entity.Property(e => e.Tsfuncao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TSFuncao");
            entity.Property(e => e.Tsnome)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TSNome");
            entity.Property(e => e.Tsobservacao)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("TSObservacao");
        });

        modelBuilder.Entity<AlmUnMed>(entity =>
        {
            entity.HasKey(e => e.UnMedId);

            entity.ToTable("AlmUnMed");

            entity.Property(e => e.UnMedId).ValueGeneratedNever();
            entity.Property(e => e.UnMedNome)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.UnMedSigla)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AlmUsuarioIten>(entity =>
        {
            entity.HasKey(e => new { e.ItemId, e.ServidorId, e.AlmoxId }).HasName("PK_almItemUsuario");
        });

        modelBuilder.Entity<AlmoxRequisicoesPendente>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Almox-RequisicoesPendentes");

            entity.Property(e => e.AlmoxNome)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.ReqIobservacao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ReqIObservacao");
            entity.Property(e => e.ReqIsituacao)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ReqISituacao");
            entity.Property(e => e.ReqItQtde).HasColumnType("money");
            entity.Property(e => e.ReqItQtdeAtendida).HasColumnType("money");
        });

        modelBuilder.Entity<AlmoxReserva>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Almox-Reservas");

            entity.Property(e => e.AlmoxFone)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AlmoxNmResp)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.AlmoxNome)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.EmprCnpj)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("EmprCNPJ");
            entity.Property(e => e.ItemNome)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.QtdeEntrada).HasColumnType("money");
            entity.Property(e => e.QtdeReservada).HasColumnType("money");
            entity.Property(e => e.QtdeSaida).HasColumnType("money");
            entity.Property(e => e.SaldoEstoque).HasColumnType("money");
        });

        modelBuilder.Entity<AlmoxReservasPendente>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Almox - Reservas Pendentes");

            entity.Property(e => e.EstoqueMax).HasColumnType("money");
            entity.Property(e => e.EstoqueMin).HasColumnType("money");
            entity.Property(e => e.QtdeEntrada).HasColumnType("money");
            entity.Property(e => e.QtdeReservada).HasColumnType("money");
            entity.Property(e => e.QtdeSaida).HasColumnType("money");
        });

        modelBuilder.Entity<AlmoxarifEquivalenciaIten>(entity =>
        {
            entity.HasKey(e => new { e.AeiAlmoxItensId, e.AeiContabItensId });

            entity.Property(e => e.AeiAlmoxItensId).HasColumnName("AeiAlmoxItensID");
            entity.Property(e => e.AeiContabItensId).HasColumnName("AeiContabItensID");
        });

        modelBuilder.Entity<AlmoxarifEquivalenciaItensNovoGiig>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AlmoxarifEquivalenciaItensNovoGIIG");

            entity.Property(e => e.AeiAlmoxItensId).HasColumnName("AeiAlmoxItensID");
            entity.Property(e => e.AeiContabItensId).HasColumnName("AeiContabItensID");
        });

        modelBuilder.Entity<AlmoxarifIten>(entity =>
        {
            entity.HasKey(e => new { e.AlmoxId, e.ItemId });

            entity.Property(e => e.EstoqueMax)
                .HasDefaultValue(0m)
                .HasColumnType("money");
            entity.Property(e => e.EstoqueMin)
                .HasDefaultValue(0m)
                .HasColumnType("money");
            entity.Property(e => e.QtdeEntrada)
                .HasDefaultValue(0m)
                .HasColumnType("money");
            entity.Property(e => e.QtdeReservada)
                .HasDefaultValue(0m)
                .HasColumnType("money");
            entity.Property(e => e.QtdeSaida)
                .HasDefaultValue(0m)
                .HasColumnType("money");

            entity.HasOne(d => d.Almox).WithMany(p => p.AlmoxarifItens)
                .HasForeignKey(d => d.AlmoxId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AlmoxarifItens_Almoxarifados");

            entity.HasOne(d => d.Item).WithMany(p => p.AlmoxarifItens)
                .HasForeignKey(d => d.ItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AlmoxarifItens_AlmItens");
        });

        modelBuilder.Entity<AlmoxarifLote>(entity =>
        {
            entity.HasKey(e => new { e.AlmoxId, e.ItemId, e.LoteId });

            entity.Property(e => e.AlmLotQtdeEntrada)
                .HasDefaultValue(0m)
                .HasColumnType("money");
            entity.Property(e => e.AlmLotQtdeSaida)
                .HasDefaultValue(0m)
                .HasColumnType("money");

            entity.HasOne(d => d.Almox).WithMany(p => p.AlmoxarifLotes)
                .HasForeignKey(d => d.AlmoxId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AlmoxarifLotes_Almoxarifados");

            entity.HasOne(d => d.Item).WithMany(p => p.AlmoxarifLotes)
                .HasForeignKey(d => d.ItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AlmoxarifLotes_AlmItens");

            entity.HasOne(d => d.Lote).WithMany(p => p.AlmoxarifLotes)
                .HasForeignKey(d => d.LoteId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AlmoxarifLotes_AlmLotes");
        });

        modelBuilder.Entity<Almoxarifado>(entity =>
        {
            entity.HasKey(e => e.AlmoxId);

            entity.Property(e => e.AlmoxId).ValueGeneratedNever();
            entity.Property(e => e.AlmoxCargoResp)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.AlmoxFone)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AlmoxNmResp)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.AlmoxNome)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.EmprCnpj)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("EmprCNPJ");

            entity.HasOne(d => d.LocalFisico).WithMany(p => p.Almoxarifados)
                .HasForeignKey(d => d.LocalFisicoId)
                .HasConstraintName("FK_Almoxarifados_LocalFisico");
        });

        modelBuilder.Entity<AlmoxarifadosUsuario>(entity =>
        {
            entity.HasKey(e => new { e.AlmoxId, e.ServidorId });

            entity.Property(e => e.AlmPadrao)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AlmoxUsuCategoria)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.AlmoxValidadeFim).HasColumnType("datetime");
            entity.Property(e => e.AlmoxValidadeIni).HasColumnType("datetime");

            entity.HasOne(d => d.Almox).WithMany(p => p.AlmoxarifadosUsuarios)
                .HasForeignKey(d => d.AlmoxId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AlmoxarifadosUsuarios_Almoxarifados");
        });

        modelBuilder.Entity<AltoRisco>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AltoRisco");

            entity.Property(e => e.Cnae)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CNAE");
        });

        modelBuilder.Entity<AltoRiscoAgri>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AltoRiscoAgri");

            entity.Property(e => e.Cnae)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CNAE");
            entity.Property(e => e.Coluna1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Coluna 1");
            entity.Property(e => e.Coluna2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Coluna 2");
        });

        modelBuilder.Entity<AltoRiscoMeioAmb>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AltoRiscoMeioAmb");

            entity.Property(e => e.Cnae)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CNAE");
        });

        modelBuilder.Entity<AltoRiscoSmfa>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AltoRiscoSMFA");

            entity.Property(e => e.Cnae)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CNAE");
        });

        modelBuilder.Entity<AlvaraConstrucaoProcesso>(entity =>
        {
            entity.HasKey(e => new { e.ProcId, e.Numero });

            entity.Property(e => e.ProcId).HasColumnName("ProcID");

            entity.HasOne(d => d.Proc).WithMany(p => p.AlvaraConstrucaoProcessos)
                .HasForeignKey(d => d.ProcId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AlvaraConstrucaoProcessos_Processos");
        });

        modelBuilder.Entity<AnexosProcesso>(entity =>
        {
            entity.HasKey(e => e.AnexoId);

            entity.ToTable("AnexosProcesso");

            entity.Property(e => e.AnexoId)
                .ValueGeneratedNever()
                .HasColumnName("AnexoID");
            entity.Property(e => e.AnexoComplemento)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.AnexoData)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime");
            entity.Property(e => e.AnexoDocId)
                .HasDefaultValue(0)
                .HasColumnName("AnexoDocID");
            entity.Property(e => e.AnexoExtensao)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("Extensao do Arquivo anexado ao processo");
            entity.Property(e => e.AnexoImagem).HasColumnType("image");
            entity.Property(e => e.AnexoNumero)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.AnexoOriginal)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength();
            entity.Property(e => e.AnexoPorUsuario)
                .HasMaxLength(80)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("''");
            entity.Property(e => e.AnexoProcId)
                .HasDefaultValue(0L)
                .HasColumnName("AnexoProcID");
            entity.Property(e => e.AnexoPublicaInternet)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Sim")
                .IsFixedLength()
                .HasComment("Informa se o anexo vai ser publicado na Web");
        });

        modelBuilder.Entity<AssinaturasComposicao>(entity =>
        {
            entity.HasKey(e => e.Sequencia);

            entity.ToTable("AssinaturasComposicao");

            entity.Property(e => e.Sequencia).ValueGeneratedNever();
            entity.Property(e => e.Cargo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IdparamAssinatura).HasColumnName("IDParamAssinatura");
            entity.Property(e => e.Nome)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.IdparamAssinaturaNavigation).WithMany(p => p.AssinaturasComposicaos)
                .HasForeignKey(d => d.IdparamAssinatura)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssinaturasComposicao_ParametroAssinaturas");
        });

        modelBuilder.Entity<AtoBaixa>(entity =>
        {
            entity.HasKey(e => e.AtoId);

            entity.ToTable("AtoBaixa");

            entity.Property(e => e.AtoId)
                .ValueGeneratedNever()
                .HasColumnName("AtoID");
            entity.Property(e => e.AtoData).HasColumnType("datetime");
            entity.Property(e => e.AtoNumero)
                .HasMaxLength(14)
                .IsUnicode(false);
            entity.Property(e => e.AtoTipo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.AtoTipoBaixaId).HasDefaultValue(0);

            entity.HasOne(d => d.AtoTipoBaixa).WithMany(p => p.AtoBaixas)
                .HasForeignKey(d => d.AtoTipoBaixaId)
                .HasConstraintName("FK_AtoBaixa_TipoBaixa");
        });

        modelBuilder.Entity<AutoNumAnoNumero>(entity =>
        {
            entity.HasKey(e => new { e.AutTipo, e.AutAno });

            entity.ToTable("AutoNumAnoNumero");

            entity.Property(e => e.AutTipo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasComment("Pode ser o nome da tabela ou algo que queira controlar.");
        });

        modelBuilder.Entity<AutoNumEntidade>(entity =>
        {
            entity.HasKey(e => e.AutNumEntidade);

            entity.Property(e => e.AutNumEntidade)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Nome da entidade que utiliza o auto numeração.");
            entity.Property(e => e.AutNumId)
                .HasComment("Auto numeração da entidade.")
                .HasColumnName("AutNumID");
        });

        modelBuilder.Entity<Autoidenty>(entity =>
        {
            entity.ToTable("autoidenty");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Teste)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("teste");
        });

        modelBuilder.Entity<Autonomo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AUTONOMO");

            entity.Property(e => e.Atividade)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Autonomo1)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("Autonomo");
            entity.Property(e => e.Destino)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Origem)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Setor)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Bairro>(entity =>
        {
            entity.ToTable("Bairro");

            entity.HasIndex(e => e.BaiNome, "IX_Bairro_BaiNome_inc_BairroId");

            entity.Property(e => e.BairroId).ValueGeneratedNever();
            entity.Property(e => e.BaiNome)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.DataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Host)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValueSql("(host_name())");
            entity.Property(e => e.Idregiao).HasColumnName("IDRegiao");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");
        });

        modelBuilder.Entity<BaixaImoveisImoben>(entity =>
        {
            entity.HasKey(e => e.IdbaixaImoBens);

            entity.Property(e => e.IdbaixaImoBens)
                .ValueGeneratedNever()
                .HasColumnName("IDBaixaImoBens");
            entity.Property(e => e.ImoCnpjFilial)
                .HasMaxLength(14)
                .IsUnicode(false);
            entity.Property(e => e.ImoDataBaixa).HasColumnType("datetime");
            entity.Property(e => e.ImoIdatoBaixa).HasColumnName("ImoIDAtoBaixa");
            entity.Property(e => e.ImoIdcontribuinte).HasColumnName("ImoIDContribuinte");
            entity.Property(e => e.ImoInscricao)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ImoValorBaixa).HasColumnType("money");

            entity.HasOne(d => d.ImoIdatoBaixaNavigation).WithMany(p => p.BaixaImoveisImobens)
                .HasForeignKey(d => d.ImoIdatoBaixa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BaixaImoveisImobens_AtoBaixa");

            entity.HasOne(d => d.ImoIdcontribuinteNavigation).WithMany(p => p.BaixaImoveisImobens)
                .HasForeignKey(d => d.ImoIdcontribuinte)
                .HasConstraintName("FK_BaixaImoveisImobens_Contribuintes");

            entity.HasOne(d => d.ImobensImovei).WithMany(p => p.BaixaImoveisImobens)
                .HasForeignKey(d => new { d.ImoCnpjFilial, d.ImoInscricao })
                .HasConstraintName("FK_BaixaImoveisImobens_ImobensImoveis");
        });

        modelBuilder.Entity<BaixaMoveisEquipamento>(entity =>
        {
            entity.HasKey(e => e.IdbaixaMovEquip);

            entity.Property(e => e.IdbaixaMovEquip)
                .ValueGeneratedNever()
                .HasColumnName("IDBaixaMovEquip");
            entity.Property(e => e.AcesMovEquipId).HasColumnName("AcesMovEquipID");
            entity.Property(e => e.MebContribuinteId).HasDefaultValueSql("('')");
            entity.Property(e => e.MebDataBaixa).HasColumnType("datetime");
            entity.Property(e => e.MebDeParcelas).HasDefaultValue(0);
            entity.Property(e => e.MebIdatoBaixa)
                .HasDefaultValue(0)
                .HasColumnName("MebIDAtoBaixa");
            entity.Property(e => e.MebIdmovEquip).HasColumnName("MebIDMovEquip");
            entity.Property(e => e.MebValorBaixa)
                .HasDefaultValue(0m)
                .HasColumnType("money");

            entity.HasOne(d => d.MebContribuinte).WithMany(p => p.BaixaMoveisEquipamentos)
                .HasForeignKey(d => d.MebContribuinteId)
                .HasConstraintName("FK_BaixaMoveisEquipamentos_Contribuintes1");

            entity.HasOne(d => d.MebIdatoBaixaNavigation).WithMany(p => p.BaixaMoveisEquipamentos)
                .HasForeignKey(d => d.MebIdatoBaixa)
                .HasConstraintName("FK_BaixaMoveisEquipamentos_AtoBaixa");

            entity.HasOne(d => d.MebIdmovEquipNavigation).WithMany(p => p.BaixaMoveisEquipamentos)
                .HasForeignKey(d => d.MebIdmovEquip)
                .HasConstraintName("FK_BaixaMoveisEquipamentos_MoveisEquipamentos");
        });

        modelBuilder.Entity<BaixoRisco>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BaixoRisco");

            entity.Property(e => e.Cnae)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CNAE ");
        });

        modelBuilder.Entity<Banco>(entity =>
        {
            entity.HasKey(e => e.BancoId).HasName("PK_ScgBanco");

            entity.ToTable("Banco");

            entity.Property(e => e.BancoId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BcoDtUltAlt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.BcoDv)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BcoDV");
            entity.Property(e => e.BcoLogo).HasColumnType("image");
            entity.Property(e => e.BcoNome)
                .HasMaxLength(40)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BcoRede)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BcoTecUltAlt)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");
        });

        modelBuilder.Entity<BckAlvEmpresa>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("bckAlvEmpresas");

            entity.Property(e => e.AlvAreaAberta).HasColumnType("money");
            entity.Property(e => e.AlvAreaConstruida).HasColumnType("money");
            entity.Property(e => e.AlvAtivContratoSoc)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.AlvBairro)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.AlvCargoAss)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AlvCnpjcpf)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AlvCNPJCPF");
            entity.Property(e => e.AlvComplemento)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.AlvData).HasColumnType("datetime");
            entity.Property(e => e.AlvDataFinal).HasColumnType("datetime");
            entity.Property(e => e.AlvDataInicial).HasColumnType("datetime");
            entity.Property(e => e.AlvDepartamento)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.AlvEndereco)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.AlvMsgRodape)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.AlvNomeAss)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AlvNomeFantasia)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.AlvNomeRespTecnico)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.AlvNumRegRespTecnico)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.AlvNumeroLograd)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.AlvProtocolo)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.AlvRazaoSocial)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.AlvRecalcular)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AlvRestricoes).HasColumnType("text");
            entity.Property(e => e.AlvSecretaria)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.AlvTexto).HasColumnType("text");
            entity.Property(e => e.AlvTipoAlvara)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AlvTitulo)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.AlvaraId).HasColumnName("AlvaraID");
            entity.Property(e => e.DataInclusao).HasColumnType("datetime");
            entity.Property(e => e.Idmoeda).HasColumnName("IDMoeda");
            entity.Property(e => e.ServId).HasColumnName("ServID");
            entity.Property(e => e.TalvId).HasColumnName("TAlvID");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Bkmapapgto>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("bkmapapgto");

            entity.Property(e => e.BaiId).HasColumnName("BaiID");
            entity.Property(e => e.BoleDivId).HasColumnName("boleDivID");
            entity.Property(e => e.ConIddivida).HasColumnName("ConIDDivida");
            entity.Property(e => e.DataBaixa).HasColumnType("datetime");
            entity.Property(e => e.EmpIddivida).HasColumnName("EmpIDDivida");
            entity.Property(e => e.ImoIddivida).HasColumnName("ImoIDDivida");
            entity.Property(e => e.TapMapaId).HasColumnName("TapMapaID");
            entity.Property(e => e.TapVlAcrescimosAtraso).HasColumnType("money");
            entity.Property(e => e.TapVlCorrecao).HasColumnType("money");
            entity.Property(e => e.TapVlDesconto).HasColumnType("money");
            entity.Property(e => e.TapVlJuros).HasColumnType("money");
            entity.Property(e => e.TapVlJurosParcelas).HasColumnType("money");
            entity.Property(e => e.TapVlMulta).HasColumnType("money");
            entity.Property(e => e.TapVlMultaDa)
                .HasColumnType("money")
                .HasColumnName("TapVlMultaDA");
            entity.Property(e => e.TapVlPago).HasColumnType("money");
            entity.Property(e => e.TapVlPrincipal).HasColumnType("money");
            entity.Property(e => e.TribMapaPagtoId).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<CadEquipamento>(entity =>
        {
            entity.ToTable("CadEquipamento");

            entity.Property(e => e.CadEquipamentoId)
                .ValueGeneratedNever()
                .HasColumnName("CadEquipamentoID");
            entity.Property(e => e.CadEquiSetor)
                .HasMaxLength(155)
                .IsUnicode(false);
            entity.Property(e => e.CadEquipDesc).HasColumnType("text");
            entity.Property(e => e.CadEquipIp)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("CadEquipIP");
            entity.Property(e => e.CadEquipLocal)
                .HasMaxLength(155)
                .IsUnicode(false);
            entity.Property(e => e.CadEquipOrigem)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CadEquipSerie)
                .HasMaxLength(155)
                .IsUnicode(false);
            entity.Property(e => e.CadEquipTel)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DtCadastro).HasColumnType("datetime");
            entity.Property(e => e.TipoEquipNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TipoEquipamento)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Cadperg>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("cadperg");

            entity.Property(e => e.DsPergunta)
                .HasMaxLength(5000)
                .IsUnicode(false)
                .HasColumnName("ds_pergunta");
            entity.Property(e => e.NuSeqOrgao).HasColumnName("nu_seq_orgao");
            entity.Property(e => e.NuSeqPergunta).HasColumnName("nu_seq_pergunta");
        });

        modelBuilder.Entity<Cadunico>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("cadunico");

            entity.Property(e => e.CdIbge)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cd_ibge");
            entity.Property(e => e.CodAbasteAguaDomicFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_abaste_agua_domic_fam");
            entity.Property(e => e.CodAfastadoTrabMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_afastado_trab_memb");
            entity.Property(e => e.CodAgriculturaTrabMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_agricultura_trab_memb");
            entity.Property(e => e.CodAguaCanalizadaFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_agua_canalizada_fam");
            entity.Property(e => e.CodAnoSerieFrequentaMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_ano_serie_frequenta_memb");
            entity.Property(e => e.CodAnoSerieFrequentouMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_ano_serie_frequentou_memb");
            entity.Property(e => e.CodBanheiroDomicFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_banheiro_domic_fam");
            entity.Property(e => e.CodCalcamentoDomicFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_calcamento_domic_fam");
            entity.Property(e => e.CodCartAssinadaMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_cart_assinada_memb");
            entity.Property(e => e.CodCartorioCertidPessoa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_cartorio_certid_pessoa");
            entity.Property(e => e.CodCensoInepMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_censo_inep_memb");
            entity.Property(e => e.CodCentroAssistFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_centro_assist_fam");
            entity.Property(e => e.CodCertidaoCivilPessoa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_certidao_civil_pessoa");
            entity.Property(e => e.CodCertidaoRegistradaPessoa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_certidao_registrada_pessoa");
            entity.Property(e => e.CodComplementoPessoa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_complemento_pessoa");
            entity.Property(e => e.CodComunidadeQuilombolaFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_comunidade_quilombola_fam");
            entity.Property(e => e.CodConcluiuFrequentouMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_concluiu_frequentou_memb");
            entity.Property(e => e.CodContatoParenteMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_contato_parente_memb");
            entity.Property(e => e.CodCtaEnergUnidConsumFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_cta_energ_unid_consum_fam");
            entity.Property(e => e.CodCursoFrequentaMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_curso_frequenta_memb");
            entity.Property(e => e.CodCursoFrequentouPessoaMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_curso_frequentou_pessoa_memb");
            entity.Property(e => e.CodDeficienciaMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_deficiencia_memb");
            entity.Property(e => e.CodDestinoLixoDomicFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_destino_lixo_domic_fam");
            entity.Property(e => e.CodEasFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_eas_fam");
            entity.Property(e => e.CodEscoaSanitarioDomicFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_escoa_sanitario_domic_fam");
            entity.Property(e => e.CodEscolaLocalMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_escola_local_memb");
            entity.Property(e => e.CodEspecieDomicFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_especie_domic_fam");
            entity.Property(e => e.CodEstCadastralFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_est_cadastral_fam");
            entity.Property(e => e.CodEstCadastralMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_est_cadastral_memb");
            entity.Property(e => e.CodFamiliaIndigenaFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_familia_indigena_fam");
            entity.Property(e => e.CodFolhaTermoCertidPessoa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_folha_termo_certid_pessoa");
            entity.Property(e => e.CodFormaColetaFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_forma_coleta_fam");
            entity.Property(e => e.CodIbgeMunicCertidPessoa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_ibge_munic_certid_pessoa");
            entity.Property(e => e.CodIbgeMunicEscolaMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_ibge_munic_escola_memb");
            entity.Property(e => e.CodIbgeMunicNascPessoa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_ibge_munic_nasc_pessoa");
            entity.Property(e => e.CodIluminacaoDomicFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_iluminacao_domic_fam");
            entity.Property(e => e.CodIndigenaResideFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_indigena_reside_fam");
            entity.Property(e => e.CodLivroTermoCertidPessoa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_livro_termo_certid_pessoa");
            entity.Property(e => e.CodLocalDomicFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_local_domic_fam");
            entity.Property(e => e.CodLocalNascimentoPessoa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_local_nascimento_pessoa");
            entity.Property(e => e.CodMaterialDomicFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_material_domic_fam");
            entity.Property(e => e.CodMaterialPisoFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_material_piso_fam");
            entity.Property(e => e.CodPaisOrigemPessoa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_pais_origem_pessoa");
            entity.Property(e => e.CodParentescoRfPessoa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_parentesco_rf_pessoa");
            entity.Property(e => e.CodPovoIndigenaFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_povo_indigena_fam");
            entity.Property(e => e.CodPrincipalTrabMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_principal_trab_memb");
            entity.Property(e => e.CodRacaCorPessoa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_raca_cor_pessoa");
            entity.Property(e => e.CodReservaIndigenaFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_reserva_indigena_fam");
            entity.Property(e => e.CodSabeLerEscreverMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_sabe_ler_escrever_memb");
            entity.Property(e => e.CodSexoPessoa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_sexo_pessoa");
            entity.Property(e => e.CodTempoCidadeMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_tempo_cidade_memb");
            entity.Property(e => e.CodTempoRuaMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_tempo_rua_memb");
            entity.Property(e => e.CodTermoMatriculaCertidPessoa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_termo_matricula_certid_pessoa");
            entity.Property(e => e.CodTrabalho12MesesMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_trabalho_12_meses_memb");
            entity.Property(e => e.CodTrabalhouMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_trabalhou_memb");
            entity.Property(e => e.CodUnidadeTerritorialFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_unidade_territorial_fam");
            entity.Property(e => e.CodViveFamRuaMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_vive_fam_rua_memb");
            entity.Property(e => e.DCodFamiliarFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("d cod_familiar_fam");
            entity.Property(e => e.DFxRfpc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("d fx_rfpc");
            entity.Property(e => e.DMarcPbf)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("d marc_pbf");
            entity.Property(e => e.DRefCad)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("d ref_cad");
            entity.Property(e => e.DRefPbf)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("d ref_pbf");
            entity.Property(e => e.DatAtualFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dat_atual_fam");
            entity.Property(e => e.DatCadastramentoFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dat_cadastramento_fam");
            entity.Property(e => e.DesComplementoAdicFam)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("des_complemento_adic_fam");
            entity.Property(e => e.DesComplementoFam)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("des_complemento_fam");
            entity.Property(e => e.DtaEmissaoCartTrabPessoa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dta_emissao_cart_trab_pessoa");
            entity.Property(e => e.DtaEmissaoIdentPessoa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dta_emissao_ident_pessoa");
            entity.Property(e => e.DtaEntrevistaFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dta_entrevista_fam");
            entity.Property(e => e.DtaNascPessoa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dta_nasc_pessoa");
            entity.Property(e => e.FxIdade)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("fx_idade");
            entity.Property(e => e.GrauInstrucao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("grau_instrucao");
            entity.Property(e => e.IcEnvoSmsContato1Fam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ic_envo_sms_contato_1_fam");
            entity.Property(e => e.IcEnvoSmsContato2Fam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ic_envo_sms_contato_2_fam");
            entity.Property(e => e.IcTipoContato1Fam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ic_tipo_contato_1_fam");
            entity.Property(e => e.IcTipoContato2Fam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ic_tipo_contato_2_fam");
            entity.Property(e => e.IndAjudaEspecializadoMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_ajuda_especializado_memb");
            entity.Property(e => e.IndAjudaFamiliaMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_ajuda_familia_memb");
            entity.Property(e => e.IndAjudaInstituicaoMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_ajuda_instituicao_memb");
            entity.Property(e => e.IndAjudaNaoMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_ajuda_nao_memb");
            entity.Property(e => e.IndAjudaOutraMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_ajuda_outra_memb");
            entity.Property(e => e.IndAjudaVizinhoMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_ajuda_vizinho_memb");
            entity.Property(e => e.IndAtendCentroRefRuaMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_atend_centro_ref_rua_memb");
            entity.Property(e => e.IndAtendCrasMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_atend_cras_memb");
            entity.Property(e => e.IndAtendCreasMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_atend_creas_memb");
            entity.Property(e => e.IndAtendHospitalGeralMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_atend_hospital_geral_memb");
            entity.Property(e => e.IndAtendInstGovMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_atend_inst_gov_memb");
            entity.Property(e => e.IndAtendInstNaoGovMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_atend_inst_nao_gov_memb");
            entity.Property(e => e.IndAtendNenhumMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_atend_nenhum_memb");
            entity.Property(e => e.IndAtivComCoopMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_ativ_com_coop_memb");
            entity.Property(e => e.IndAtivComEscolaMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_ativ_com_escola_memb");
            entity.Property(e => e.IndAtivComMovSocMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_ativ_com_mov_soc_memb");
            entity.Property(e => e.IndAtivComNaoRespMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_ativ_com_nao_resp_memb");
            entity.Property(e => e.IndAtivComNaoSabeMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_ativ_com_nao_sabe_memb");
            entity.Property(e => e.IndDefBaixaVisaoMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_def_baixa_visao_memb");
            entity.Property(e => e.IndDefCegueiraMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_def_cegueira_memb");
            entity.Property(e => e.IndDefFisicaMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_def_fisica_memb");
            entity.Property(e => e.IndDefMentalMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_def_mental_memb");
            entity.Property(e => e.IndDefSindromeDownMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_def_sindrome_down_memb");
            entity.Property(e => e.IndDefSurdezLeveMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_def_surdez_leve_memb");
            entity.Property(e => e.IndDefSurdezProfundaMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_def_surdez_profunda_memb");
            entity.Property(e => e.IndDefTranstornoMentalMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_def_transtorno_mental_memb");
            entity.Property(e => e.IndDinhCarregadorMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_dinh_carregador_memb");
            entity.Property(e => e.IndDinhCatadorMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_dinh_catador_memb");
            entity.Property(e => e.IndDinhConstMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_dinh_const_memb");
            entity.Property(e => e.IndDinhFlanelhinhaMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_dinh_flanelhinha_memb");
            entity.Property(e => e.IndDinhNaoRespMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_dinh_nao_resp_memb");
            entity.Property(e => e.IndDinhOutroMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_dinh_outro_memb");
            entity.Property(e => e.IndDinhPedeMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_dinh_pede_memb");
            entity.Property(e => e.IndDinhServsGeraisMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_dinh_servs_gerais_memb");
            entity.Property(e => e.IndDinhVendasMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_dinh_vendas_memb");
            entity.Property(e => e.IndDormirAlbergueMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_dormir_albergue_memb");
            entity.Property(e => e.IndDormirDomPartMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_dormir_dom_part_memb");
            entity.Property(e => e.IndDormirRuaMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_dormir_rua_memb");
            entity.Property(e => e.IndFamiliaQuilombolaFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_familia_quilombola_fam");
            entity.Property(e => e.IndFrequentaEscolaMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_frequenta_escola_memb");
            entity.Property(e => e.IndMotivoAlcoolMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_motivo_alcool_memb");
            entity.Property(e => e.IndMotivoAmeacaMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_motivo_ameaca_memb");
            entity.Property(e => e.IndMotivoDesempregoMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_motivo_desemprego_memb");
            entity.Property(e => e.IndMotivoNaoRespMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_motivo_nao_resp_memb");
            entity.Property(e => e.IndMotivoNaoSabeMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_motivo_nao_sabe_memb");
            entity.Property(e => e.IndMotivoOutroMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_motivo_outro_memb");
            entity.Property(e => e.IndMotivoPerdaMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_motivo_perda_memb");
            entity.Property(e => e.IndMotivoPrefMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_motivo_pref_memb");
            entity.Property(e => e.IndMotivoProbsFamMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_motivo_probs_fam_memb");
            entity.Property(e => e.IndMotivoSaudeMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_motivo_saude_memb");
            entity.Property(e => e.IndMotivoTrabalhoMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_motivo_trabalho_memb");
            entity.Property(e => e.IndOutroMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_outro_memb");
            entity.Property(e => e.IndParcMdsFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_parc_mds_fam");
            entity.Property(e => e.IndTrabalhoInfantilPessoa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_trabalho_infantil_pessoa");
            entity.Property(e => e.MarcSitRua)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("marc_sit_rua");
            entity.Property(e => e.NomApelidoPessoa)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("nom_apelido_pessoa");
            entity.Property(e => e.NomCentroAssistFam)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("nom_centro_assist_fam");
            entity.Property(e => e.NomCompletoMaePessoa)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("nom_completo_mae_pessoa");
            entity.Property(e => e.NomCompletoPaiPessoa)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("nom_completo_pai_pessoa");
            entity.Property(e => e.NomComunidadeQuilombolaFam)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("nom_comunidade_quilombola_fam");
            entity.Property(e => e.NomEntrevistadorFam)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("nom_entrevistador_fam");
            entity.Property(e => e.NomEscolaMemb)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("nom_escola_memb");
            entity.Property(e => e.NomEstabAssistSaudeFam)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("nom_estab_assist_saude_fam");
            entity.Property(e => e.NomIbgeMunicNascPessoa)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("nom_ibge_munic_nasc_pessoa");
            entity.Property(e => e.NomLocalidadeFam)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("nom_localidade_fam");
            entity.Property(e => e.NomLogradouroFam)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("nom_logradouro_fam");
            entity.Property(e => e.NomMunicCertidPessoa)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("nom_munic_certid_pessoa");
            entity.Property(e => e.NomMunicEscolaMemb)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("nom_munic_escola_memb");
            entity.Property(e => e.NomPaisOrigemPessoa)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("nom_pais_origem_pessoa");
            entity.Property(e => e.NomPessoa)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("nom_pessoa");
            entity.Property(e => e.NomPovoIndigenaFam)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("nom_povo_indigena_fam");
            entity.Property(e => e.NomReservaIndigenaFam)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("nom_reserva_indigena_fam");
            entity.Property(e => e.NomTipLogradouroFam)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("nom_tip_logradouro_fam");
            entity.Property(e => e.NomTituloLogradouroFam)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("nom_titulo_logradouro_fam");
            entity.Property(e => e.NomUnidadeTerritorialFam)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("nom_unidade_territorial_fam");
            entity.Property(e => e.NumCartTrabPrevSocPessoa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("num_cart_trab_prev_soc_pessoa");
            entity.Property(e => e.NumCepLogradouroFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("num_cep_logradouro_fam");
            entity.Property(e => e.NumCpfEntrevistadorFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("num_cpf_entrevistador_fam");
            entity.Property(e => e.NumCpfPessoa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("num_cpf_pessoa");
            entity.Property(e => e.NumDddContato1Fam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("num_ddd_contato_1_fam");
            entity.Property(e => e.NumDddContato2Fam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("num_ddd_contato_2_fam");
            entity.Property(e => e.NumIdentidadePessoa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("num_identidade_pessoa");
            entity.Property(e => e.NumLogradouroFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("num_logradouro_fam");
            entity.Property(e => e.NumNisPessoaAtual)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("num_nis_pessoa_atual");
            entity.Property(e => e.NumSecaoTitEleitorPessoa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("num_secao_tit_eleitor_pessoa");
            entity.Property(e => e.NumSerieTrabPrevSocPessoa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("num_serie_trab_prev_soc_pessoa");
            entity.Property(e => e.NumTelContato1Fam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("num_tel_contato_1_fam");
            entity.Property(e => e.NumTelContato2Fam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("num_tel_contato_2_fam");
            entity.Property(e => e.NumTituloEleitorPessoa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("num_titulo_eleitor_pessoa");
            entity.Property(e => e.NumZonaTitEleitorPessoa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("num_zona_tit_eleitor_pessoa");
            entity.Property(e => e.QtdComodosDomicFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("qtd_comodos_domic_fam");
            entity.Property(e => e.QtdComodosDormitorioFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("qtd_comodos_dormitorio_fam");
            entity.Property(e => e.QtdDormirFreqAlbergueMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("qtd_dormir_freq_albergue_memb");
            entity.Property(e => e.QtdDormirFreqDomPartMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("qtd_dormir_freq_dom_part_memb");
            entity.Property(e => e.QtdDormirFreqRuaMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("qtd_dormir_freq_rua_memb");
            entity.Property(e => e.QtdFamiliasDomicFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("qtd_familias_domic_fam");
            entity.Property(e => e.QtdFreqOutroMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("qtd_freq_outro_memb");
            entity.Property(e => e.QtdMeses12MesesMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("qtd_meses_12_meses_memb");
            entity.Property(e => e.QtdPessoaInter017AnosFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("qtd_pessoa_inter_0_17_anos_fam");
            entity.Property(e => e.QtdPessoaInter1864AnosFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("qtd_pessoa_inter_18_64_anos_fam");
            entity.Property(e => e.QtdPessoaInter65AnosFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("qtd_pessoa_inter_65_anos_fam");
            entity.Property(e => e.QtdPessoasDomicFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("qtd_pessoas_domic_fam");
            entity.Property(e => e.QtdeMesesDesatCat)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("qtde_meses_desat_cat");
            entity.Property(e => e.SigOrgaoEmissorPessoa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sig_orgao_emissor_pessoa");
            entity.Property(e => e.SigUfCartTrabPessoa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sig_uf_cart_trab_pessoa");
            entity.Property(e => e.SigUfEscolaMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sig_uf_escola_memb");
            entity.Property(e => e.SigUfIdentPessoa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sig_uf_ident_pessoa");
            entity.Property(e => e.SigUfMunicNascPessoa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sig_uf_munic_nasc_pessoa");
            entity.Property(e => e.TxtReferenciaLocalFam)
                .HasMaxLength(5000)
                .IsUnicode(false)
                .HasColumnName("txt_referencia_local_fam");
            entity.Property(e => e.ValDespAguaEsgotoFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("val_desp_agua_esgoto_fam");
            entity.Property(e => e.ValDespAlimentacaoFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("val_desp_alimentacao_fam");
            entity.Property(e => e.ValDespAluguelFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("val_desp_aluguel_fam");
            entity.Property(e => e.ValDespEnergiaFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("val_desp_energia_fam");
            entity.Property(e => e.ValDespGasFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("val_desp_gas_fam");
            entity.Property(e => e.ValDespMedicamentosFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("val_desp_medicamentos_fam");
            entity.Property(e => e.ValDespTransporFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("val_desp_transpor_fam");
            entity.Property(e => e.ValOutrasRendasMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("val_outras_rendas_memb");
            entity.Property(e => e.ValRemunerEmpregoMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("val_remuner_emprego_memb");
            entity.Property(e => e.ValRendaAposentMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("val_renda_aposent_memb");
            entity.Property(e => e.ValRendaBruta12MesesMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("val_renda_bruta_12_meses_memb");
            entity.Property(e => e.ValRendaDoacaoMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("val_renda_doacao_memb");
            entity.Property(e => e.ValRendaPensaoAlimenMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("val_renda_pensao_alimen_memb");
            entity.Property(e => e.ValRendaSeguroDesempMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("val_renda_seguro_desemp_memb");
            entity.Property(e => e.VlrRendaMediaFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vlr_renda_media_fam");
            entity.Property(e => e.VlrRendaTotalFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vlr_renda_total_fam");
        });

        modelBuilder.Entity<CadunicoV1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("cadunicoV1");

            entity.Property(e => e.CdIbge)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cd_ibge");
            entity.Property(e => e.CodAbasteAguaDomicFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_abaste_agua_domic_fam");
            entity.Property(e => e.CodAfastadoTrabMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_afastado_trab_memb");
            entity.Property(e => e.CodAgriculturaTrabMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_agricultura_trab_memb");
            entity.Property(e => e.CodAguaCanalizadaFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_agua_canalizada_fam");
            entity.Property(e => e.CodAnoSerieFrequentaMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_ano_serie_frequenta_memb");
            entity.Property(e => e.CodAnoSerieFrequentouMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_ano_serie_frequentou_memb");
            entity.Property(e => e.CodBanheiroDomicFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_banheiro_domic_fam");
            entity.Property(e => e.CodCalcamentoDomicFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_calcamento_domic_fam");
            entity.Property(e => e.CodCartAssinadaMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_cart_assinada_memb");
            entity.Property(e => e.CodCartorioCertidPessoa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_cartorio_certid_pessoa");
            entity.Property(e => e.CodCensoInepMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_censo_inep_memb");
            entity.Property(e => e.CodCentroAssistFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_centro_assist_fam");
            entity.Property(e => e.CodCertidaoCivilPessoa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_certidao_civil_pessoa");
            entity.Property(e => e.CodCertidaoRegistradaPessoa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_certidao_registrada_pessoa");
            entity.Property(e => e.CodComplementoPessoa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_complemento_pessoa");
            entity.Property(e => e.CodComunidadeQuilombolaFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_comunidade_quilombola_fam");
            entity.Property(e => e.CodConcluiuFrequentouMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_concluiu_frequentou_memb");
            entity.Property(e => e.CodContatoParenteMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_contato_parente_memb");
            entity.Property(e => e.CodCtaEnergUnidConsumFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_cta_energ_unid_consum_fam");
            entity.Property(e => e.CodCursoFrequentaMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_curso_frequenta_memb");
            entity.Property(e => e.CodCursoFrequentouPessoaMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_curso_frequentou_pessoa_memb");
            entity.Property(e => e.CodDeficienciaMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_deficiencia_memb");
            entity.Property(e => e.CodDestinoLixoDomicFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_destino_lixo_domic_fam");
            entity.Property(e => e.CodEasFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_eas_fam");
            entity.Property(e => e.CodEscoaSanitarioDomicFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_escoa_sanitario_domic_fam");
            entity.Property(e => e.CodEscolaLocalMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_escola_local_memb");
            entity.Property(e => e.CodEspecieDomicFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_especie_domic_fam");
            entity.Property(e => e.CodEstCadastralFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_est_cadastral_fam");
            entity.Property(e => e.CodEstCadastralMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_est_cadastral_memb");
            entity.Property(e => e.CodFamiliaIndigenaFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_familia_indigena_fam");
            entity.Property(e => e.CodFolhaTermoCertidPessoa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_folha_termo_certid_pessoa");
            entity.Property(e => e.CodFormaColetaFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_forma_coleta_fam");
            entity.Property(e => e.CodIbgeMunicCertidPessoa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_ibge_munic_certid_pessoa");
            entity.Property(e => e.CodIbgeMunicEscolaMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_ibge_munic_escola_memb");
            entity.Property(e => e.CodIbgeMunicNascPessoa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_ibge_munic_nasc_pessoa");
            entity.Property(e => e.CodIluminacaoDomicFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_iluminacao_domic_fam");
            entity.Property(e => e.CodIndigenaResideFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_indigena_reside_fam");
            entity.Property(e => e.CodLivroTermoCertidPessoa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_livro_termo_certid_pessoa");
            entity.Property(e => e.CodLocalDomicFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_local_domic_fam");
            entity.Property(e => e.CodLocalNascimentoPessoa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_local_nascimento_pessoa");
            entity.Property(e => e.CodMaterialDomicFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_material_domic_fam");
            entity.Property(e => e.CodMaterialPisoFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_material_piso_fam");
            entity.Property(e => e.CodPaisOrigemPessoa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_pais_origem_pessoa");
            entity.Property(e => e.CodParentescoRfPessoa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_parentesco_rf_pessoa");
            entity.Property(e => e.CodPovoIndigenaFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_povo_indigena_fam");
            entity.Property(e => e.CodPrincipalTrabMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_principal_trab_memb");
            entity.Property(e => e.CodRacaCorPessoa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_raca_cor_pessoa");
            entity.Property(e => e.CodReservaIndigenaFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_reserva_indigena_fam");
            entity.Property(e => e.CodSabeLerEscreverMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_sabe_ler_escrever_memb");
            entity.Property(e => e.CodSexoPessoa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_sexo_pessoa");
            entity.Property(e => e.CodTempoCidadeMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_tempo_cidade_memb");
            entity.Property(e => e.CodTempoRuaMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_tempo_rua_memb");
            entity.Property(e => e.CodTermoMatriculaCertidPessoa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_termo_matricula_certid_pessoa");
            entity.Property(e => e.CodTrabalho12MesesMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_trabalho_12_meses_memb");
            entity.Property(e => e.CodTrabalhouMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_trabalhou_memb");
            entity.Property(e => e.CodUnidadeTerritorialFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_unidade_territorial_fam");
            entity.Property(e => e.CodViveFamRuaMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cod_vive_fam_rua_memb");
            entity.Property(e => e.DCodFamiliarFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("d cod_familiar_fam");
            entity.Property(e => e.DFxRfpc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("d fx_rfpc");
            entity.Property(e => e.DMarcPbf)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("d marc_pbf");
            entity.Property(e => e.DRefCad)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("d ref_cad");
            entity.Property(e => e.DRefPbf)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("d ref_pbf");
            entity.Property(e => e.DatAtualFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dat_atual_fam");
            entity.Property(e => e.DatCadastramentoFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dat_cadastramento_fam");
            entity.Property(e => e.DesComplementoAdicFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("des_complemento_adic_fam");
            entity.Property(e => e.DesComplementoFam)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("des_complemento_fam");
            entity.Property(e => e.DtaEmissaoCartTrabPessoa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dta_emissao_cart_trab_pessoa");
            entity.Property(e => e.DtaEmissaoIdentPessoa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dta_emissao_ident_pessoa");
            entity.Property(e => e.DtaEntrevistaFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dta_entrevista_fam");
            entity.Property(e => e.DtaNascPessoa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dta_nasc_pessoa");
            entity.Property(e => e.FxIdade)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("fx_idade");
            entity.Property(e => e.GrauInstrucao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("grau_instrucao");
            entity.Property(e => e.IcEnvoSmsContato1Fam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ic_envo_sms_contato_1_fam");
            entity.Property(e => e.IcEnvoSmsContato2Fam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ic_envo_sms_contato_2_fam");
            entity.Property(e => e.IcTipoContato1Fam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ic_tipo_contato_1_fam");
            entity.Property(e => e.IcTipoContato2Fam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ic_tipo_contato_2_fam");
            entity.Property(e => e.IndAjudaEspecializadoMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_ajuda_especializado_memb");
            entity.Property(e => e.IndAjudaFamiliaMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_ajuda_familia_memb");
            entity.Property(e => e.IndAjudaInstituicaoMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_ajuda_instituicao_memb");
            entity.Property(e => e.IndAjudaNaoMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_ajuda_nao_memb");
            entity.Property(e => e.IndAjudaOutraMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_ajuda_outra_memb");
            entity.Property(e => e.IndAjudaVizinhoMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_ajuda_vizinho_memb");
            entity.Property(e => e.IndAtendCentroRefRuaMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_atend_centro_ref_rua_memb");
            entity.Property(e => e.IndAtendCrasMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_atend_cras_memb");
            entity.Property(e => e.IndAtendCreasMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_atend_creas_memb");
            entity.Property(e => e.IndAtendHospitalGeralMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_atend_hospital_geral_memb");
            entity.Property(e => e.IndAtendInstGovMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_atend_inst_gov_memb");
            entity.Property(e => e.IndAtendInstNaoGovMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_atend_inst_nao_gov_memb");
            entity.Property(e => e.IndAtendNenhumMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_atend_nenhum_memb");
            entity.Property(e => e.IndAtivComCoopMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_ativ_com_coop_memb");
            entity.Property(e => e.IndAtivComEscolaMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_ativ_com_escola_memb");
            entity.Property(e => e.IndAtivComMovSocMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_ativ_com_mov_soc_memb");
            entity.Property(e => e.IndAtivComNaoRespMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_ativ_com_nao_resp_memb");
            entity.Property(e => e.IndAtivComNaoSabeMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_ativ_com_nao_sabe_memb");
            entity.Property(e => e.IndDefBaixaVisaoMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_def_baixa_visao_memb");
            entity.Property(e => e.IndDefCegueiraMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_def_cegueira_memb");
            entity.Property(e => e.IndDefFisicaMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_def_fisica_memb");
            entity.Property(e => e.IndDefMentalMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_def_mental_memb");
            entity.Property(e => e.IndDefSindromeDownMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_def_sindrome_down_memb");
            entity.Property(e => e.IndDefSurdezLeveMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_def_surdez_leve_memb");
            entity.Property(e => e.IndDefSurdezProfundaMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_def_surdez_profunda_memb");
            entity.Property(e => e.IndDefTranstornoMentalMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_def_transtorno_mental_memb");
            entity.Property(e => e.IndDinhCarregadorMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_dinh_carregador_memb");
            entity.Property(e => e.IndDinhCatadorMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_dinh_catador_memb");
            entity.Property(e => e.IndDinhConstMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_dinh_const_memb");
            entity.Property(e => e.IndDinhFlanelhinhaMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_dinh_flanelhinha_memb");
            entity.Property(e => e.IndDinhNaoRespMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_dinh_nao_resp_memb");
            entity.Property(e => e.IndDinhOutroMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_dinh_outro_memb");
            entity.Property(e => e.IndDinhPedeMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_dinh_pede_memb");
            entity.Property(e => e.IndDinhServsGeraisMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_dinh_servs_gerais_memb");
            entity.Property(e => e.IndDinhVendasMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_dinh_vendas_memb");
            entity.Property(e => e.IndDormirAlbergueMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_dormir_albergue_memb");
            entity.Property(e => e.IndDormirDomPartMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_dormir_dom_part_memb");
            entity.Property(e => e.IndDormirRuaMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_dormir_rua_memb");
            entity.Property(e => e.IndFamiliaQuilombolaFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_familia_quilombola_fam");
            entity.Property(e => e.IndFrequentaEscolaMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_frequenta_escola_memb");
            entity.Property(e => e.IndMotivoAlcoolMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_motivo_alcool_memb");
            entity.Property(e => e.IndMotivoAmeacaMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_motivo_ameaca_memb");
            entity.Property(e => e.IndMotivoDesempregoMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_motivo_desemprego_memb");
            entity.Property(e => e.IndMotivoNaoRespMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_motivo_nao_resp_memb");
            entity.Property(e => e.IndMotivoNaoSabeMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_motivo_nao_sabe_memb");
            entity.Property(e => e.IndMotivoOutroMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_motivo_outro_memb");
            entity.Property(e => e.IndMotivoPerdaMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_motivo_perda_memb");
            entity.Property(e => e.IndMotivoPrefMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_motivo_pref_memb");
            entity.Property(e => e.IndMotivoProbsFamMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_motivo_probs_fam_memb");
            entity.Property(e => e.IndMotivoSaudeMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_motivo_saude_memb");
            entity.Property(e => e.IndMotivoTrabalhoMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_motivo_trabalho_memb");
            entity.Property(e => e.IndOutroMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_outro_memb");
            entity.Property(e => e.IndParcMdsFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_parc_mds_fam");
            entity.Property(e => e.IndTrabalhoInfantilPessoa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ind_trabalho_infantil_pessoa");
            entity.Property(e => e.MarcSitRua)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("marc_sit_rua");
            entity.Property(e => e.NomApelidoPessoa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nom_apelido_pessoa");
            entity.Property(e => e.NomCentroAssistFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nom_centro_assist_fam");
            entity.Property(e => e.NomCompletoMaePessoa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nom_completo_mae_pessoa");
            entity.Property(e => e.NomCompletoPaiPessoa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nom_completo_pai_pessoa");
            entity.Property(e => e.NomComunidadeQuilombolaFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nom_comunidade_quilombola_fam");
            entity.Property(e => e.NomEntrevistadorFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nom_entrevistador_fam");
            entity.Property(e => e.NomEscolaMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nom_escola_memb");
            entity.Property(e => e.NomEstabAssistSaudeFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nom_estab_assist_saude_fam");
            entity.Property(e => e.NomIbgeMunicNascPessoa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nom_ibge_munic_nasc_pessoa");
            entity.Property(e => e.NomLocalidadeFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nom_localidade_fam");
            entity.Property(e => e.NomLogradouroFam)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("nom_logradouro_fam");
            entity.Property(e => e.NomMunicCertidPessoa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nom_munic_certid_pessoa");
            entity.Property(e => e.NomMunicEscolaMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nom_munic_escola_memb");
            entity.Property(e => e.NomPaisOrigemPessoa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nom_pais_origem_pessoa");
            entity.Property(e => e.NomPessoa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nom_pessoa");
            entity.Property(e => e.NomPovoIndigenaFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nom_povo_indigena_fam");
            entity.Property(e => e.NomReservaIndigenaFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nom_reserva_indigena_fam");
            entity.Property(e => e.NomTipLogradouroFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nom_tip_logradouro_fam");
            entity.Property(e => e.NomTituloLogradouroFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nom_titulo_logradouro_fam");
            entity.Property(e => e.NomUnidadeTerritorialFam)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("nom_unidade_territorial_fam");
            entity.Property(e => e.NumCartTrabPrevSocPessoa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("num_cart_trab_prev_soc_pessoa");
            entity.Property(e => e.NumCepLogradouroFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("num_cep_logradouro_fam");
            entity.Property(e => e.NumCpfEntrevistadorFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("num_cpf_entrevistador_fam");
            entity.Property(e => e.NumCpfPessoa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("num_cpf_pessoa");
            entity.Property(e => e.NumDddContato1Fam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("num_ddd_contato_1_fam");
            entity.Property(e => e.NumDddContato2Fam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("num_ddd_contato_2_fam");
            entity.Property(e => e.NumIdentidadePessoa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("num_identidade_pessoa");
            entity.Property(e => e.NumLogradouroFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("num_logradouro_fam");
            entity.Property(e => e.NumNisPessoaAtual)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("num_nis_pessoa_atual");
            entity.Property(e => e.NumSecaoTitEleitorPessoa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("num_secao_tit_eleitor_pessoa");
            entity.Property(e => e.NumSerieTrabPrevSocPessoa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("num_serie_trab_prev_soc_pessoa");
            entity.Property(e => e.NumTelContato1Fam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("num_tel_contato_1_fam");
            entity.Property(e => e.NumTelContato2Fam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("num_tel_contato_2_fam");
            entity.Property(e => e.NumTituloEleitorPessoa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("num_titulo_eleitor_pessoa");
            entity.Property(e => e.NumZonaTitEleitorPessoa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("num_zona_tit_eleitor_pessoa");
            entity.Property(e => e.QtdComodosDomicFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("qtd_comodos_domic_fam");
            entity.Property(e => e.QtdComodosDormitorioFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("qtd_comodos_dormitorio_fam");
            entity.Property(e => e.QtdDormirFreqAlbergueMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("qtd_dormir_freq_albergue_memb");
            entity.Property(e => e.QtdDormirFreqDomPartMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("qtd_dormir_freq_dom_part_memb");
            entity.Property(e => e.QtdDormirFreqRuaMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("qtd_dormir_freq_rua_memb");
            entity.Property(e => e.QtdFamiliasDomicFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("qtd_familias_domic_fam");
            entity.Property(e => e.QtdFreqOutroMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("qtd_freq_outro_memb");
            entity.Property(e => e.QtdMeses12MesesMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("qtd_meses_12_meses_memb");
            entity.Property(e => e.QtdPessoaInter017AnosFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("qtd_pessoa_inter_0_17_anos_fam");
            entity.Property(e => e.QtdPessoaInter1864AnosFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("qtd_pessoa_inter_18_64_anos_fam");
            entity.Property(e => e.QtdPessoaInter65AnosFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("qtd_pessoa_inter_65_anos_fam");
            entity.Property(e => e.QtdPessoasDomicFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("qtd_pessoas_domic_fam");
            entity.Property(e => e.QtdeMesesDesatCat)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("qtde_meses_desat_cat");
            entity.Property(e => e.SigOrgaoEmissorPessoa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sig_orgao_emissor_pessoa");
            entity.Property(e => e.SigUfCartTrabPessoa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sig_uf_cart_trab_pessoa");
            entity.Property(e => e.SigUfEscolaMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sig_uf_escola_memb");
            entity.Property(e => e.SigUfIdentPessoa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sig_uf_ident_pessoa");
            entity.Property(e => e.SigUfMunicNascPessoa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sig_uf_munic_nasc_pessoa");
            entity.Property(e => e.TxtReferenciaLocalFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("txt_referencia_local_fam");
            entity.Property(e => e.ValDespAguaEsgotoFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("val_desp_agua_esgoto_fam");
            entity.Property(e => e.ValDespAlimentacaoFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("val_desp_alimentacao_fam");
            entity.Property(e => e.ValDespAluguelFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("val_desp_aluguel_fam");
            entity.Property(e => e.ValDespEnergiaFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("val_desp_energia_fam");
            entity.Property(e => e.ValDespGasFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("val_desp_gas_fam");
            entity.Property(e => e.ValDespMedicamentosFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("val_desp_medicamentos_fam");
            entity.Property(e => e.ValDespTransporFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("val_desp_transpor_fam");
            entity.Property(e => e.ValOutrasRendasMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("val_outras_rendas_memb");
            entity.Property(e => e.ValRemunerEmpregoMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("val_remuner_emprego_memb");
            entity.Property(e => e.ValRendaAposentMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("val_renda_aposent_memb");
            entity.Property(e => e.ValRendaBruta12MesesMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("val_renda_bruta_12_meses_memb");
            entity.Property(e => e.ValRendaDoacaoMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("val_renda_doacao_memb");
            entity.Property(e => e.ValRendaPensaoAlimenMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("val_renda_pensao_alimen_memb");
            entity.Property(e => e.ValRendaSeguroDesempMemb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("val_renda_seguro_desemp_memb");
            entity.Property(e => e.VlrRendaMediaFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vlr_renda_media_fam");
            entity.Property(e => e.VlrRendaTotalFam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vlr_renda_total_fam");
        });

        modelBuilder.Entity<CargasProcesso>(entity =>
        {
            entity.HasKey(e => e.CargaId);

            entity.ToTable("CargasProcesso");

            entity.HasIndex(e => e.CargaProcId, "IX_CargaProcID").HasFillFactor(90);

            entity.HasIndex(e => e.CargaServDestino, "IX_CargasProcesso_CargaServDestino").HasFillFactor(90);

            entity.HasIndex(e => new { e.CargaProcId, e.CargaServDestino, e.CargaPublicoDivisao, e.CargaId, e.CargaDivisaoIdorigem }, "ix_CargasProcesso_CargaProcID_CargaServDestino_CargaPublicoDivisao_CargaID_CargaDivisaoIDOrigem").HasFillFactor(90);

            entity.Property(e => e.CargaId)
                .ValueGeneratedNever()
                .HasColumnName("CargaID");
            entity.Property(e => e.CargaData)
                .HasDefaultValueSql("('')")
                .HasComment("Data da carga do processo")
                .HasColumnType("datetime");
            entity.Property(e => e.CargaDespacho)
                .HasDefaultValue("")
                .HasComment("Texto com as providencias que devem ser tomadas")
                .HasColumnType("text");
            entity.Property(e => e.CargaDivisaoId)
                .HasDefaultValue(0)
                .HasComment("Identificação da divisão destino")
                .HasColumnName("CargaDivisaoID");
            entity.Property(e => e.CargaDivisaoIdorigem)
                .HasDefaultValue(0)
                .HasComment("Identificação da divisão de origem")
                .HasColumnName("CargaDivisaoIDOrigem");
            entity.Property(e => e.CargaProcId)
                .HasDefaultValue(0L)
                .HasComment("Identificação do processo")
                .HasColumnName("CargaProcID");
            entity.Property(e => e.CargaPublicoDivisao)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.CargaDivisao).WithMany(p => p.CargasProcessoCargaDivisaos)
                .HasForeignKey(d => d.CargaDivisaoId)
                .HasConstraintName("FK_CargasProcesso_Divisoes1");

            entity.HasOne(d => d.CargaDivisaoIdorigemNavigation).WithMany(p => p.CargasProcessoCargaDivisaoIdorigemNavigations)
                .HasForeignKey(d => d.CargaDivisaoIdorigem)
                .HasConstraintName("FK_CargasProcesso_Divisoes");

            entity.HasOne(d => d.CargaProc).WithMany(p => p.CargasProcessos)
                .HasForeignKey(d => d.CargaProcId)
                .HasConstraintName("FK_CargasProcesso_Processos");
        });

        modelBuilder.Entity<Cep>(entity =>
        {
            entity.HasKey(e => e.IdEndereco);

            entity.ToTable("CEPS");

            entity.HasIndex(e => e.Cep1, "IX_CEPS").HasFillFactor(90);

            entity.HasIndex(e => new { e.Cep1, e.FlExcluido }, "IX_CEPS_CEP_flExcluido");

            entity.Property(e => e.IdEndereco).ValueGeneratedNever();
            entity.Property(e => e.Cep1)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CEP");
            entity.Property(e => e.FlExcluido).HasColumnName("flExcluido");
        });

        modelBuilder.Entity<CepPr>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("CEP_PR");

            entity.Property(e => e.BaiFim)
                .HasMaxLength(72)
                .HasColumnName("BAI_FIM");
            entity.Property(e => e.BaiFimSemAcento)
                .HasMaxLength(72)
                .HasColumnName("Bai_FimSemAcento");
            entity.Property(e => e.BaiIni)
                .HasMaxLength(72)
                .HasColumnName("BAI_INI");
            entity.Property(e => e.BaiIniSemAcento)
                .HasMaxLength(72)
                .HasColumnName("Bai_IniSemAcento");
            entity.Property(e => e.Cep)
                .HasMaxLength(9)
                .HasColumnName("CEP");
            entity.Property(e => e.Complemento)
                .HasMaxLength(100)
                .HasColumnName("COMPLEMENTO");
            entity.Property(e => e.Localidade).HasMaxLength(50);
            entity.Property(e => e.LocalidadeSemAcento).HasMaxLength(50);
            entity.Property(e => e.Logradouro)
                .HasMaxLength(20)
                .HasColumnName("LOGRADOURO");
            entity.Property(e => e.Nome).HasMaxLength(70);
            entity.Property(e => e.SemAcento).HasMaxLength(70);
        });

        modelBuilder.Entity<Cepcorreio>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("CEPCORREIOS");

            entity.Property(e => e.Abreviado)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.BairroAntigo)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.BairroNovo)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Cep)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CEP");
            entity.Property(e => e.CepAntigo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Tem casos na REDESIM de empresas que estão vindo com o CEP antigo. Neste campo vai estar o CEP antigo de um CEP novo.")
                .HasColumnName("CEP_ANTIGO");
            entity.Property(e => e.ColunaLista)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.Flexistenosite)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("S")
                .IsFixedLength()
                .HasComment("Campo para indicar se o CEP existe na busca online dos correios. Tem casos de CEP que está em CNPJ que nao existe no BuscaCEP.")
                .HasColumnName("flexistenosite");
            entity.Property(e => e.IdbairroNovo).HasColumnName("IDBairroNovo");
            entity.Property(e => e.Idlogradouro).HasColumnName("IDLogradouro");
            entity.Property(e => e.Logradouro)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.TipoLogradouro)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Chat>(entity =>
        {
            entity.HasKey(e => e.ChatNumLanc);

            entity.ToTable("Chat");

            entity.Property(e => e.ChatData)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime");
            entity.Property(e => e.ChatHorario)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength();
            entity.Property(e => e.ChatMensagem)
                .HasMaxLength(255)
                .HasDefaultValue("");
            entity.Property(e => e.ChatRemetente)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength();
            entity.Property(e => e.ChatUsuId)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ChatUsuID");

            entity.HasOne(d => d.ChatUsu).WithMany(p => p.Chats)
                .HasForeignKey(d => d.ChatUsuId)
                .HasConstraintName("FK_Chat_Usuarios");
        });

        modelBuilder.Entity<Cidade>(entity =>
        {
            entity.ToTable("Cidade");

            entity.HasIndex(e => e.CidNome, "IX_Cidade_CidNome");

            entity.Property(e => e.CidadeId).ValueGeneratedNever();
            entity.Property(e => e.CdIbge).HasColumnName("cdIBGE");
            entity.Property(e => e.CidFmp)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength()
                .HasComment("Código Estadual do Fundo Municipal de Participação")
                .HasColumnName("CidFMP");
            entity.Property(e => e.CidNome)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.CidUf)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CidUF");

            entity.HasOne(d => d.Pais).WithMany(p => p.Cidades)
                .HasForeignKey(d => d.PaisId)
                .HasConstraintName("FK_Cidade_Paises");
        });

        modelBuilder.Entity<Cnae>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("CNAE");

            entity.Property(e => e.Classe)
                .HasMaxLength(255)
                .HasColumnName("CLASSE");
            entity.Property(e => e.Denominação)
                .HasMaxLength(255)
                .HasColumnName("DENOMINAÇÃO");
            entity.Property(e => e.Divisão)
                .HasMaxLength(255)
                .HasColumnName("DIVISÃO");
            entity.Property(e => e.Grupo)
                .HasMaxLength(255)
                .HasColumnName("GRUPO");
            entity.Property(e => e.Seção)
                .HasMaxLength(255)
                .HasColumnName("SEÇÃO");
            entity.Property(e => e.Subclasse)
                .HasMaxLength(255)
                .HasColumnName("SUBCLASSE");
        });

        modelBuilder.Entity<Cnae10to20>(entity =>
        {
            entity.HasKey(e => new { e.Cnae10, e.Cnae20 });

            entity.ToTable("CNAE10to20");

            entity.Property(e => e.Cnae10)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("cnae10");
            entity.Property(e => e.Cnae20)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("cnae20");
        });

        modelBuilder.Entity<Cnae20>(entity =>
        {
            entity.HasKey(e => e.Codigo);

            entity.ToTable("CNAE20");

            entity.Property(e => e.Codigo).HasColumnName("codigo");
            entity.Property(e => e.Atividade)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("atividade");
            entity.Property(e => e.Classe)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("classe");
            entity.Property(e => e.Denominacao)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("denominacao");
            entity.Property(e => e.Divisao)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("divisao");
            entity.Property(e => e.Grupo)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("grupo");
            entity.Property(e => e.Secao)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("secao");
        });

        modelBuilder.Entity<CnaetribAtivAtividade>(entity =>
        {
            entity.HasKey(e => e.Atividade);

            entity.ToTable("CNAETribAtivAtividade");

            entity.Property(e => e.Atividade)
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.AtCnae)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Sim")
                .IsFixedLength()
                .HasColumnName("AtCNAE");
            entity.Property(e => e.AtRequisitos).HasColumnType("text");
            entity.Property(e => e.AtSetId).HasColumnName("AtSetID");
            entity.Property(e => e.AtivClasse)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AtividadeAutonomo)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength();
            entity.Property(e => e.AtividadeCodAntigo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.AtividadeDenom)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.AtividadeEnquadrMicroEmpr)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength();
            entity.Property(e => e.AtividadeUffiacresc)
                .HasColumnType("money")
                .HasColumnName("AtividadeUFFIAcresc");

            entity.HasOne(d => d.AtivClasseNavigation).WithMany(p => p.CnaetribAtivAtividades)
                .HasForeignKey(d => d.AtivClasse)
                .HasConstraintName("FK_CNAETribAtivAtividade_CNAETribAtivClasse");
        });

        modelBuilder.Entity<CnaetribAtivClasse>(entity =>
        {
            entity.HasKey(e => e.AtivClasse);

            entity.ToTable("CNAETribAtivClasse");

            entity.Property(e => e.AtivClasse)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AtivClasseDenom)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.AtivGrupo)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.AtivGrupoNavigation).WithMany(p => p.CnaetribAtivClasses)
                .HasForeignKey(d => d.AtivGrupo)
                .HasConstraintName("FK_CNAETribAtivClasse_CNAETribAtivGrupo");
        });

        modelBuilder.Entity<CnaetribAtivDivisao>(entity =>
        {
            entity.HasKey(e => e.AtivDiv);

            entity.ToTable("CNAETribAtivDivisao");

            entity.Property(e => e.AtivDiv)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AtivDivDenom)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.AtivSecao)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.AtivSecaoNavigation).WithMany(p => p.CnaetribAtivDivisaos)
                .HasForeignKey(d => d.AtivSecao)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CNAETribAtivDivisao_CNAETribAtivSecao");
        });

        modelBuilder.Entity<CnaetribAtivGrupo>(entity =>
        {
            entity.HasKey(e => e.AtivGrupo);

            entity.ToTable("CNAETribAtivGrupo");

            entity.Property(e => e.AtivGrupo)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AtivDiv)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AtivGrupoDenom)
                .HasMaxLength(255)
                .IsUnicode(false);

            entity.HasOne(d => d.AtivDivNavigation).WithMany(p => p.CnaetribAtivGrupos)
                .HasForeignKey(d => d.AtivDiv)
                .HasConstraintName("FK_CNAETribAtivGrupo_CNAETribAtivDivisao");
        });

        modelBuilder.Entity<CnaetribAtivSecao>(entity =>
        {
            entity.HasKey(e => e.AtivSecao);

            entity.ToTable("CNAETribAtivSecao");

            entity.Property(e => e.AtivSecao)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AtivSecaoDenom)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CnpjSimple>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("cnpj_simples");

            entity.Property(e => e.Cnpj)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("cnpj");
        });

        modelBuilder.Entity<CnpjSimple1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("cnpjSimples");

            entity.Property(e => e.Cnpj)
                .HasMaxLength(50)
                .HasColumnName("cnpj");
        });

        modelBuilder.Entity<ColetaLixoCancelamento>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ColetaLixo_Cancelamento");

            entity.Property(e => e.ProcAtendido)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ProcDataEnc).HasColumnType("datetime");
            entity.Property(e => e.ProcDataEntrada).HasColumnType("datetime");
            entity.Property(e => e.ProcDataPrevResp).HasColumnType("datetime");
            entity.Property(e => e.ProcDeferido)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ProcDescricao)
                .HasMaxLength(1024)
                .IsUnicode(false);
            entity.Property(e => e.ProcDtArquivo).HasColumnType("datetime");
            entity.Property(e => e.ProcDtIncineracao).HasColumnType("datetime");
            entity.Property(e => e.ProcId).HasColumnName("ProcID");
            entity.Property(e => e.ProcPublicaWeb)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProcSituacao)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ProcTipoProcId).HasColumnName("ProcTipoProcID");
        });

        modelBuilder.Entity<Combustivel>(entity =>
        {
            entity.ToTable("Combustivel");

            entity.Property(e => e.CombNome)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("");

            entity.HasMany(d => d.Veiculos).WithMany(p => p.Combustivels)
                .UsingEntity<Dictionary<string, object>>(
                    "VeiculoCombustivelGroup",
                    r => r.HasOne<Veiculo>().WithMany()
                        .HasForeignKey("VeiculoId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_VeiculoCombustivelGroup_Veiculos"),
                    l => l.HasOne<Combustivel>().WithMany()
                        .HasForeignKey("CombustivelId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_VeiculoCombustivelGroup_Combustivel"),
                    j =>
                    {
                        j.HasKey("CombustivelId", "VeiculoId");
                        j.ToTable("VeiculoCombustivelGroup");
                    });
        });

        modelBuilder.Entity<CombustivelDeposito>(entity =>
        {
            entity.HasKey(e => e.CodDeposito);

            entity.ToTable("CombustivelDeposito");

            entity.Property(e => e.CodDeposito).ValueGeneratedNever();
            entity.Property(e => e.Bairro)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("bairro");
            entity.Property(e => e.CapacidadeLitros).HasColumnType("money");
            entity.Property(e => e.Cep)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("cep");
            entity.Property(e => e.Complemento)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("complemento");
            entity.Property(e => e.ConId)
                .HasComment("Responsável pelo Depósito")
                .HasColumnName("ConID");
            entity.Property(e => e.Descricao)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.EstoqueMinimo).HasColumnType("money");
            entity.Property(e => e.Logradouro)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.NumLogradouro).HasColumnName("numLogradouro");
            entity.Property(e => e.QtdeLitrosEntrada).HasColumnType("money");
            entity.Property(e => e.QtdeLitrosReserva).HasColumnType("money");
            entity.Property(e => e.TipoDeposito)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Bomba Própria ou Crédito Terceiro");

            entity.HasOne(d => d.Combustivel).WithMany(p => p.CombustivelDepositos)
                .HasForeignKey(d => d.CombustivelId)
                .HasConstraintName("FK_CombustivelDeposito_Combustivel");

            entity.HasOne(d => d.Con).WithMany(p => p.CombustivelDepositos)
                .HasForeignKey(d => d.ConId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CombustivelDeposito_Contribuintes");
        });

        modelBuilder.Entity<CombustivelEntradum>(entity =>
        {
            entity.HasKey(e => e.NumLancEntrada);

            entity.Property(e => e.NumLancEntrada).ValueGeneratedNever();
            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.DtLancEntrada).HasColumnType("datetime");
            entity.Property(e => e.Nfnum).HasColumnName("NFNum");
            entity.Property(e => e.QtdeLitros).HasColumnType("money");
            entity.Property(e => e.ValorTotal).HasColumnType("money");

            entity.HasOne(d => d.CodDepositoNavigation).WithMany(p => p.CombustivelEntrada)
                .HasForeignKey(d => d.CodDeposito)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CombustivelEntrada_CombustivelDeposito");

            entity.HasOne(d => d.Con).WithMany(p => p.CombustivelEntrada)
                .HasForeignKey(d => d.ConId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CombustivelEntrada_Contribuintes");
        });

        modelBuilder.Entity<CombustivelSaidaCupomFiscal>(entity =>
        {
            entity.HasKey(e => e.NumLanc);

            entity.ToTable("CombustivelSaidaCupomFiscal");

            entity.Property(e => e.NumLanc).ValueGeneratedNever();
            entity.Property(e => e.DataDocFiscal).HasColumnType("datetime");
            entity.Property(e => e.Datalanc).HasColumnType("datetime");
            entity.Property(e => e.KmAnterior).HasColumnType("money");
            entity.Property(e => e.KmAtual).HasColumnType("money");
            entity.Property(e => e.QtdeLitrosAbast).HasColumnType("money");
            entity.Property(e => e.ValorCupom).HasColumnType("money");

            entity.HasOne(d => d.ReqnumNavigation).WithMany(p => p.CombustivelSaidaCupomFiscals)
                .HasForeignKey(d => d.Reqnum)
                .HasConstraintName("FK_CombustivelSaidaCupomFiscal_CombustivelSaida");
        });

        modelBuilder.Entity<CombustivelSaidaMovimento>(entity =>
        {
            entity.HasKey(e => e.CodCombMovSaida);

            entity.ToTable("CombustivelSaidaMovimento");

            entity.Property(e => e.CodCombMovSaida).ValueGeneratedNever();
            entity.Property(e => e.Data).HasColumnType("datetime");
            entity.Property(e => e.Motivo)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Situacao)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UsuId)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("UsuID");

            entity.HasOne(d => d.ReqNumNavigation).WithMany(p => p.CombustivelSaidaMovimentos)
                .HasForeignKey(d => d.ReqNum)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CombustivelSaidaMovimento_CombustivelSaida");

            entity.HasOne(d => d.Usu).WithMany(p => p.CombustivelSaidaMovimentos)
                .HasForeignKey(d => d.UsuId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CombustivelSaidaMovimento_Usuarios");
        });

        modelBuilder.Entity<CombustivelSaidum>(entity =>
        {
            entity.HasKey(e => e.ReqNum);

            entity.Property(e => e.ReqNum).ValueGeneratedNever();
            entity.Property(e => e.DtEmissao).HasColumnType("datetime");
            entity.Property(e => e.KmVeiculo)
                .HasColumnType("money")
                .HasColumnName("kmVeiculo");
            entity.Property(e => e.MovEquipId).HasColumnName("MovEquipID");
            entity.Property(e => e.NumReqlocal)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.QtdeLitros).HasColumnType("money");
            entity.Property(e => e.Situacao)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("situacao");

            entity.HasOne(d => d.CodDepositoNavigation).WithMany(p => p.CombustivelSaida)
                .HasForeignKey(d => d.CodDeposito)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CombustivelSaida_CombustivelDeposito");

            entity.HasOne(d => d.CombSaidaIdCondutNavigation).WithMany(p => p.CombustivelSaida)
                .HasForeignKey(d => d.CombSaidaIdCondut)
                .HasConstraintName("FK_CombustivelSaida_Condutores1");

            entity.HasOne(d => d.Div).WithMany(p => p.CombustivelSaida)
                .HasForeignKey(d => d.DivId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CombustivelSaida_Divisoes");

            entity.HasOne(d => d.MovEquip).WithMany(p => p.CombustivelSaida)
                .HasForeignKey(d => d.MovEquipId)
                .HasConstraintName("FK_CombustivelSaida_MoveisEquipamentos");

            entity.HasOne(d => d.Serv).WithMany(p => p.CombustivelSaidumServs)
                .HasForeignKey(d => d.ServId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CombustivelSaida_Servidores");

            entity.HasOne(d => d.ServIdOperarioNavigation).WithMany(p => p.CombustivelSaidumServIdOperarioNavigations)
                .HasForeignKey(d => d.ServIdOperario)
                .HasConstraintName("FK_CombustivelSaida_Servidores1");

            entity.HasOne(d => d.Veiculo).WithMany(p => p.CombustivelSaida)
                .HasForeignKey(d => d.VeiculoId)
                .HasConstraintName("FK_CombustivelSaida_Veiculos");
        });

        modelBuilder.Entity<ComponentesServico>(entity =>
        {
            entity.HasKey(e => e.CompServicosId);

            entity.Property(e => e.CompServicosId).ValueGeneratedNever();
            entity.Property(e => e.CompServNome)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Condutores1registro>(entity =>
        {
            entity.HasKey(e => e.IdCondutor).HasName("PK_Condutores");

            entity.ToTable("Condutores_1Registro");

            entity.Property(e => e.IdCondutor).HasColumnName("idCondutor");
            entity.Property(e => e.Categoria)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CidadeEmitente)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ComFoto)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Dtexpedicao)
                .HasColumnType("datetime")
                .HasColumnName("DTExpedicao");
            entity.Property(e => e.Dtnascimento)
                .HasColumnType("datetime")
                .HasColumnName("DTNascimento");
            entity.Property(e => e.DtprimHabilitacao)
                .HasColumnType("datetime")
                .HasColumnName("DTPrimHabilitacao");
            entity.Property(e => e.DtvalidadeCnh)
                .HasColumnType("datetime")
                .HasColumnName("DTValidadeCNH");
            entity.Property(e => e.Nome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NumRegistro)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Obs)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Ufemitente)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("UFEmitente");
        });

        modelBuilder.Entity<ContratoConcessao>(entity =>
        {
            entity.HasKey(e => e.IdContratoConcessao).HasName("PK_ContratoLocacao");

            entity.ToTable("ContratoConcessao");

            entity.Property(e => e.IdContratoConcessao)
                .ValueGeneratedNever()
                .HasColumnName("idContratoConcessao");
            entity.Property(e => e.DataBaixaContrato)
                .HasColumnType("datetime")
                .HasColumnName("dataBaixaContrato");
            entity.Property(e => e.DataFimContrat).HasColumnType("datetime");
            entity.Property(e => e.DataIniContrat).HasColumnType("datetime");
            entity.Property(e => e.DescricaoContrat)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("descricaoContrat");
            entity.Property(e => e.IdTipoConcessao).HasColumnName("idTipoConcessao");
            entity.Property(e => e.IdTipoLicitacao).HasColumnName("idTipoLicitacao");
            entity.Property(e => e.ImoCnpjfilial)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("imoCNPJFilial");
            entity.Property(e => e.ImoInscricao)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.MotivoBaixa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("motivoBaixa");
            entity.Property(e => e.NumContrato).HasColumnName("numContrato");
            entity.Property(e => e.NumLicitacao).HasColumnName("numLicitacao");
            entity.Property(e => e.NumParcela).HasColumnName("numParcela");
            entity.Property(e => e.ObsBaixa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("obsBaixa");
            entity.Property(e => e.Valor)
                .HasColumnType("money")
                .HasColumnName("valor");
            entity.Property(e => e.ValorBaixaContrato)
                .HasColumnType("money")
                .HasColumnName("valorBaixaContrato");

            entity.HasOne(d => d.IdTipoConcessaoNavigation).WithMany(p => p.ContratoConcessaos)
                .HasForeignKey(d => d.IdTipoConcessao)
                .HasConstraintName("FK_ContratoLocacao_TipoConcessao");

            entity.HasOne(d => d.IdTipoLicitacaoNavigation).WithMany(p => p.ContratoConcessaos)
                .HasForeignKey(d => d.IdTipoLicitacao)
                .HasConstraintName("FK_ContratoLocacao_TipoLicitacao");

            entity.HasOne(d => d.ImobensImovei).WithMany(p => p.ContratoConcessaos)
                .HasForeignKey(d => new { d.ImoCnpjfilial, d.ImoInscricao })
                .HasConstraintName("FK_ContratoLocacao_ImobensImoveis");
        });

        modelBuilder.Entity<Contribuinte>(entity =>
        {
            entity.HasKey(e => e.ConId);

            entity.HasIndex(e => new { e.ConBairroId, e.ConId }, "IX_ConBairroId_ConID").HasFillFactor(90);

            entity.HasIndex(e => e.ConCnpjcpf, "IX_ConCNPJCPF").HasFillFactor(90);

            entity.HasIndex(e => new { e.ConCidadeId, e.ConId }, "IX_ConCidadeId_ConID").HasFillFactor(90);

            entity.HasIndex(e => e.ConIdconjuge, "IX_ConIDConjuge").HasFillFactor(90);

            entity.HasIndex(e => new { e.ConId, e.ConNome, e.ConCnpjcpf }, "IX_ConID_ConNome_ConCNPJCPF").HasFillFactor(90);

            entity.HasIndex(e => e.ConNome, "IX_ConNome").HasFillFactor(90);

            entity.HasIndex(e => e.ConRg, "IX_ConRG").HasFillFactor(90);

            entity.HasIndex(e => e.ConCep, "IX_Contribuinte_ConCEP").HasFillFactor(90);

            entity.HasIndex(e => e.ConCep, "IX_Contribuintes_ConCEP");

            entity.HasIndex(e => new { e.ConId, e.ConCnpjcpf }, "IX_Contribuintes_ConId_ConCNPJCPF").HasFillFactor(90);

            entity.HasIndex(e => e.ConId, "IX_Contribuintes_ConId_inc_ConNome_ConNomeFantasia_ConCNPJCPF").HasFillFactor(90);

            entity.HasIndex(e => e.ConTipoPessoa, "IX_Contribuintes_ConTipoPessoa_inc_ConId_ConNome_ConCNPJCPF");

            entity.Property(e => e.ConId).HasComment("Código de Identificação da Pessoa (Contribuinte).");
            entity.Property(e => e.ConBairroId).HasComment("Código de Identificação do Bairro de Residencia(Moradia).");
            entity.Property(e => e.ConCargo)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.ConCatHabilitacao)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ConCep)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength()
                .HasColumnName("ConCEP");
            entity.Property(e => e.ConCidadeId).HasComment("Código de Identificação da Cidade de Residencia(Moradia).");
            entity.Property(e => e.ConCmc)
                .HasDefaultValue(0L)
                .HasComment("Cadastro Municipal de Contribuintes")
                .HasColumnName("ConCMC");
            entity.Property(e => e.ConCnpjcpf)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength()
                .HasColumnName("ConCNPJCPF");
            entity.Property(e => e.ConComplemento)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ConDtBaseTce)
                .HasColumnType("datetime")
                .HasColumnName("ConDtBaseTCE");
            entity.Property(e => e.ConDtCriaSenha).HasColumnType("datetime");
            entity.Property(e => e.ConDtNasc).HasColumnType("datetime");
            entity.Property(e => e.ConDtUltAlt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ConDtValidadeSenha).HasColumnType("datetime");
            entity.Property(e => e.ConEmail)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ConEMail");
            entity.Property(e => e.ConEndereco)
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("Nome do Logradouro de residencia da pessoa");
            entity.Property(e => e.ConEstadoCivil)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ConFalecido)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.ConFonetizado)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("conFonetizado");
            entity.Property(e => e.ConFoto).HasColumnType("image");
            entity.Property(e => e.ConFuncao)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.ConGrafica)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.ConIdanterior)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ConIDAnterior");
            entity.Property(e => e.ConIdcbo).HasColumnName("ConIDCBO");
            entity.Property(e => e.ConIdconjuge)
                .HasComment("Código de identificação do conjuge. Utiliza o ID da mesma entidade \"Contribuintes\" para gravar, sendo que existe uma trigger sicronizando os conjuges. Marido X Esposa e Esposa X Marido.")
                .HasColumnName("ConIDConjuge");
            entity.Property(e => e.ConIdnacionalidade).HasColumnName("ConIDNacionalidade");
            entity.Property(e => e.ConIdtipoDocumento).HasColumnName("ConIDTipoDocumento");
            entity.Property(e => e.ConInscrEstadual)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ConNacCorrigida)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ConNacionalidade)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ConNome)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("Razao Social ou Nome Completo do Contribuinte. ");
            entity.Property(e => e.ConNomeFantasia)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ConNomeMae)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ConNrDocumento)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ConNumTitulo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ConNumero)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ConProfissao)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ConRendaMensal).HasColumnType("money");
            entity.Property(e => e.ConRespNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ConRespRg)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ConRespRG");
            entity.Property(e => e.ConRg)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ConRG");
            entity.Property(e => e.ConRgdtEmissao)
                .HasColumnType("datetime")
                .HasColumnName("ConRGDtEmissao");
            entity.Property(e => e.ConRgorgaoExp)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ConRGOrgaoExp");
            entity.Property(e => e.ConRgufexp)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ConRGUFExp");
            entity.Property(e => e.ConSenha).HasMaxLength(50);
            entity.Property(e => e.ConSexo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ConSite)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ConTecUltAlt)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");
            entity.Property(e => e.ConTelefoneCelular)
                .HasMaxLength(11)
                .IsUnicode(false);
            entity.Property(e => e.ConTelefoneComercial)
                .HasMaxLength(11)
                .IsUnicode(false);
            entity.Property(e => e.ConTelefoneResidencial)
                .HasMaxLength(11)
                .IsUnicode(false);
            entity.Property(e => e.ConTelefones)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ConTipoLograd)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ConTipoPessoa)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("NENHUM")
                .HasComment("FISICA, JURIDICA, NENHUM, ESTRANGEIRO");
            entity.Property(e => e.ConUfdocumento)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ConUFDocumento");
            entity.Property(e => e.TmpConFoneAuxiliar)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("tmpConFoneAuxiliar");
            entity.Property(e => e.TmpTipoPessoa)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("NENHUM")
                .HasComment("FISICA, JURIDICA, NENHUM, ESTRANGEIRO")
                .HasColumnName("tmpTipoPessoa");

            entity.HasOne(d => d.ConBairro).WithMany(p => p.Contribuintes)
                .HasForeignKey(d => d.ConBairroId)
                .HasConstraintName("FK_Contribuintes_Bairro");

            entity.HasOne(d => d.ConCidade).WithMany(p => p.Contribuintes)
                .HasForeignKey(d => d.ConCidadeId)
                .HasConstraintName("FK_Contribuintes_Cidade");
        });

        modelBuilder.Entity<ContribuinteFiliacao>(entity =>
        {
            entity.HasKey(e => e.ConFilId);

            entity.ToTable("ContribuinteFiliacao");

            entity.Property(e => e.ConFilId)
                .ValueGeneratedNever()
                .HasColumnName("ConFilID");
            entity.Property(e => e.ConFilDtFim).HasColumnType("datetime");
            entity.Property(e => e.ConFilDtInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ConFilNome)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.ConFilTipo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ConFilUsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.ConIdfiliacao).HasColumnName("ConIDFiliacao");

            entity.HasOne(d => d.Con).WithMany(p => p.ContribuinteFiliacaoCons)
                .HasForeignKey(d => d.ConId)
                .HasConstraintName("FK_ContribuinteFiliacao_Contribuintes");

            entity.HasOne(d => d.ConIdfiliacaoNavigation).WithMany(p => p.ContribuinteFiliacaoConIdfiliacaoNavigations)
                .HasForeignKey(d => d.ConIdfiliacao)
                .HasConstraintName("FK_ContribuinteFiliacao_Contribuintes1");
        });

        modelBuilder.Entity<ContribuintesEnviadosTce>(entity =>
        {
            entity.HasKey(e => e.IdEnvio);

            entity.ToTable("ContribuintesEnviadosTCE");

            entity.HasIndex(e => new { e.IdEmpresa, e.ConId }, "IX_ContribuintesEnviadosTCE_idEmpresa_ConID");

            entity.Property(e => e.IdEnvio).HasColumnName("idEnvio");
            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.DsObservacao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsObservacao");
            entity.Property(e => e.IdEmpresa).HasColumnName("idEmpresa");
        });

        modelBuilder.Entity<ContribuintesLogIntegraSircof>(entity =>
        {
            entity.HasKey(e => e.LogId);

            entity.ToTable("ContribuintesLogIntegraSircof");

            entity.Property(e => e.LogId).HasColumnName("LogID");
            entity.Property(e => e.ConCnpjcpf)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ConCNPJCPF");
            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.DataLog)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.FunId).HasColumnName("FunID");
            entity.Property(e => e.NomeSircof)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.NomeTribuno)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ContribuintesServidore>(entity =>
        {
            entity.HasKey(e => e.CoSeId);

            entity.Property(e => e.CoSeId)
                .ValueGeneratedNever()
                .HasColumnName("CoSeID");
            entity.Property(e => e.CoSeCargo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CoSeComportamento)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CoSeCursos).HasColumnType("text");
            entity.Property(e => e.CoSeDataAdmissao).HasColumnType("datetime");
            entity.Property(e => e.CoSeEscolaridade)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CoSeFormacao)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CoSeMatricula)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CoSeTipoSanguineo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ConId).HasColumnName("ConID");

            entity.HasOne(d => d.Con).WithMany(p => p.ContribuintesServidores)
                .HasForeignKey(d => d.ConId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ContribuintesServidores_Contribuintes");
        });

        modelBuilder.Entity<ControleVtAnttViewMotorista>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ControleVT_ANTT_ViewMotoristas");

            entity.Property(e => e.AcessoOperadorCpf)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("AcessoOperadorCPF");
            entity.Property(e => e.ConCnpjcpf)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ConCNPJCPF");
            entity.Property(e => e.Fzcpf)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("FZCPF");
            entity.Property(e => e.FzdtAdmissao)
                .HasColumnType("datetime")
                .HasColumnName("FZDtAdmissao");
            entity.Property(e => e.FzdtDemissao)
                .HasColumnType("datetime")
                .HasColumnName("FZDtDemissao");
            entity.Property(e => e.FzmotoristaId).HasColumnName("FZMotoristaId");
            entity.Property(e => e.FzmotoristaNome)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("FZMotoristaNome");
            entity.Property(e => e.RazaoSocial)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ControleVtAnttViewOperador>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ControleVT_ANTT_ViewOperador");

            entity.Property(e => e.OperadorCpf)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("OperadorCPF");
            entity.Property(e => e.OperadorDataCadastro).HasColumnType("datetime");
            entity.Property(e => e.OperadorDataValidade).HasColumnType("datetime");
            entity.Property(e => e.OperadorNome)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.OperadorSenha).HasMaxLength(50);
        });

        modelBuilder.Entity<ControleVtAnttViewOperadorEmpresa>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ControleVT_ANTT_ViewOperadorEmpresa");

            entity.Property(e => e.AcessoOperadorCpf)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("AcessoOperadorCPF");
            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.Cpfcnpjempresa)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CPFCNPJEmpresa");
            entity.Property(e => e.NomeFantasia)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.RazaoSocial)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ControleVtAnttViewVeiculo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ControleVT_ANTT_ViewVeiculos");

            entity.Property(e => e.AcessoOperadorCpf)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("AcessoOperadorCPF");
            entity.Property(e => e.ConCnpjcpf)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ConCNPJCPF");
            entity.Property(e => e.FzveiId).HasColumnName("FZVeiId");
            entity.Property(e => e.Placa)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RazaoSocial)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ConvSmtrCepsContribuinte>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("CONV_SMTR_CEPS_CONTRIBUINTES");

            entity.Property(e => e.Col001)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Col002)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ConvSmtrCepsImovei>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("CONV_SMTR_CEPS_IMOVEIS");

            entity.Property(e => e.Cep)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("cep");
            entity.Property(e => e.Inscricao)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("inscricao");
        });

        modelBuilder.Entity<ConvenioBanco>(entity =>
        {
            entity.HasKey(e => e.ConvenioId).HasName("PK_Contacor");

            entity.ToTable("ConvenioBanco");

            entity.HasIndex(e => e.ConvBancoId, "IX_ConvBancoId").HasFillFactor(90);

            entity.Property(e => e.ConvenioId).ValueGeneratedNever();
            entity.Property(e => e.ConvAgenciaId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ConvBancoId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ConvCarteira)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ConvCedente)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.ConvCodCedente)
                .HasMaxLength(12)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Código bancário para o cedente");
            entity.Property(e => e.ConvContaContabil)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("convContaContabil");
            entity.Property(e => e.ConvContaCorId)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ConvDestinoArqComErros)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasComment("Endereço do arquivo de baixa com erros");
            entity.Property(e => e.ConvDestinoArqSemErros)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasComment("Endereço do arquivo de baixa sem erros");
            entity.Property(e => e.ConvDtUltAlt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ConvFuncaoConvenio)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.ConvIdentifOrgao)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ConvInstJuros)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ConvInstMulta)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ConvJuntarNncarteira)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength()
                .HasComment("Informa se deve concatenar a Carteira como prefixo do Nosso Numero")
                .HasColumnName("ConvJuntarNNCarteira");
            entity.Property(e => e.ConvLocalPgto)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.ConvNmConvenio)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.ConvNumConvenio)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.ConvOrigemArq)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ConvTecUltAlt)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");
            entity.Property(e => e.ConvTipoBloqueto)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Tipo do Bloqueto Bancário, para geração dos boletos.");
        });

        modelBuilder.Entity<ConvenioRegistrado>(entity =>
        {
            entity.HasKey(e => e.ConvRegId);

            entity.ToTable("ConvenioRegistrado");

            entity.Property(e => e.ConvRegId).HasColumnName("ConvRegID");
            entity.Property(e => e.BancoId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ConvAgenciaId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ConvContaContabil)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ConvContaCorId)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ConvRegDataFinal).HasColumnType("datetime");
            entity.Property(e => e.ConvRegDataInicial).HasColumnType("datetime");
            entity.Property(e => e.ConvRegIdentificacao)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.Banco).WithMany(p => p.ConvenioRegistrados)
                .HasForeignKey(d => d.BancoId)
                .HasConstraintName("FK_ConvenioRegistrado_Banco");

            entity.HasOne(d => d.Convenio).WithMany(p => p.ConvenioRegistrados)
                .HasForeignKey(d => d.ConvenioId)
                .HasConstraintName("FK_ConvenioRegistrado_ConvenioBanco");
        });

        modelBuilder.Entity<ConverterParaExcel>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ConverterParaExcel$");

            entity.Property(e => e.Cnpjempresa)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CNPJEmpresa");
            entity.Property(e => e.DataFinal).HasColumnType("datetime");
            entity.Property(e => e.DataInicial).HasColumnType("datetime");
        });

        modelBuilder.Entity<Cub>(entity =>
        {
            entity.ToTable("cub");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Ano).HasColumnName("ano");
            entity.Property(e => e.AnoPg).HasColumnName("ano_pg");
            entity.Property(e => e.Cpf)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("cpf");
            entity.Property(e => e.DiaPg).HasColumnName("dia_pg");
            entity.Property(e => e.Estado)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("estado");
            entity.Property(e => e.Estrutura)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("estrutura");
            entity.Property(e => e.Inscricao)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("inscricao");
            entity.Property(e => e.Logradouro)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("logradouro");
            entity.Property(e => e.Loteamento)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("loteamento");
            entity.Property(e => e.MesPg).HasColumnName("mes_pg");
            entity.Property(e => e.Nome)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nome");
            entity.Property(e => e.Situacao)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("situacao");
            entity.Property(e => e.TipoPg)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("tipo_pg");
            entity.Property(e => e.Tipoconstrucao)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("tipoconstrucao");
            entity.Property(e => e.Tipodivida)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("tipodivida");
            entity.Property(e => e.Tipodocumento)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("tipodocumento");
            entity.Property(e => e.Tipoimovel)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("tipoimovel");
            entity.Property(e => e.Tributo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tributo");
            entity.Property(e => e.Valor)
                .HasColumnType("money")
                .HasColumnName("valor");
            entity.Property(e => e.Vencimento).HasColumnName("vencimento");
        });

        modelBuilder.Entity<Cvdivimo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("CVDIVIMO");

            entity.HasIndex(e => e.ImoIddivida, "IX_ImoIDDivida").HasFillFactor(90);

            entity.HasIndex(e => e.InscricaoImobiliaria, "IX_InscricaoImobiliaria").HasFillFactor(90);

            entity.Property(e => e.Col003)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.Col004)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.Col005)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.Col006)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.Col007)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.Col008)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.Col009)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.Col010)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.Col011)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.Col012)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.Col013)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.Col014)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.Col015)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.Col016)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.Col017)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.Col018)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.Col019)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.Col020)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.Col021)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.Col022)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.Col023)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.Col024)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.Col025)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.Col026)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.Col027)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.Col028)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.Col029)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.ImoIddivida).HasColumnName("ImoIDDivida");
            entity.Property(e => e.InscricaoImobiliaria)
                .HasMaxLength(14)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DadosSanepar>(entity =>
        {
            entity.ToTable("DadosSanepar");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Ac).HasColumnName("AC");
            entity.Property(e => e.Ar).HasColumnName("AR");
            entity.Property(e => e.Classe)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompEndereco)
                .HasMaxLength(255)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Endereco)
                .HasMaxLength(255)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Inscricao)
                .HasMaxLength(14)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("inscricao");
            entity.Property(e => e.Inscricaosemeco)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("inscricaosemeco");
            entity.Property(e => e.Matricula)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Num)
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Obs1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Obs2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Obs3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Roteiro)
                .HasMaxLength(15)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Terreno)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<DadosSanepar11>(entity =>
        {
            entity.ToTable("DadosSanepar11");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Ac).HasColumnName("AC");
            entity.Property(e => e.Ar).HasColumnName("AR");
            entity.Property(e => e.CompEndereco)
                .HasMaxLength(255)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Endereco)
                .HasMaxLength(255)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Inscricao)
                .HasMaxLength(14)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("inscricao");
            entity.Property(e => e.Matricula)
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Num)
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Obs1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Obs2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Obs3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Roteiro)
                .HasMaxLength(15)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AI");
        });

        modelBuilder.Entity<DadosSaneparTemp>(entity =>
        {
            entity.ToTable("DadosSaneparTemp");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Inscricaosemeco)
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("inscricaosemeco");
            entity.Property(e => e.Matricula)
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("matricula");
        });

        modelBuilder.Entity<Dadossaneparinsc>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("dadossaneparinsc");

            entity.Property(e => e.Inscricao)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("inscricao");
        });

        modelBuilder.Entity<DbDefrag>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("db_defrag");

            entity.Property(e => e.AvgFragmentationInPercent).HasColumnName("avg_fragmentation_in_percent");
            entity.Property(e => e.Rows).HasColumnName("ROWS");
            entity.Property(e => e.TableIndexName).HasMaxLength(128);
            entity.Property(e => e.TableName).HasMaxLength(500);
            entity.Property(e => e.TableOwner).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("TIMESTAMP");
        });

        modelBuilder.Entity<DbDefragComplete>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("db_defrag_complete");

            entity.Property(e => e.AvgFragmentationInPercent).HasColumnName("avg_fragmentation_in_percent");
            entity.Property(e => e.Rows).HasColumnName("ROWS");
            entity.Property(e => e.TableIndexName).HasMaxLength(128);
            entity.Property(e => e.TableName).HasMaxLength(500);
            entity.Property(e => e.TableOwner).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("TIMESTAMP");
        });

        modelBuilder.Entity<DePuAditivosContr>(entity =>
        {
            entity.HasKey(e => e.AditIdaditivo);

            entity.ToTable("DePuAditivosContr");

            entity.Property(e => e.AditIdaditivo).HasColumnName("AditIDAditivo");
            entity.Property(e => e.AditData).HasColumnType("datetime");
            entity.Property(e => e.AditHistDescr)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.AditIdContrato).HasDefaultValue(0L);
            entity.Property(e => e.AditNumero)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AditValor).HasColumnType("money");
            entity.Property(e => e.AditVencimento).HasColumnType("datetime");

            entity.HasOne(d => d.AditIdContratoNavigation).WithMany(p => p.DePuAditivosContrs)
                .HasForeignKey(d => d.AditIdContrato)
                .HasConstraintName("FK_DePuAditivosContr_DepuContratos");
        });

        modelBuilder.Entity<DependeRisco>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DependeRisco");

            entity.Property(e => e.Cnae)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CNAE ");
        });

        modelBuilder.Entity<DepuContrato>(entity =>
        {
            entity.HasKey(e => e.CntIdcontrato);

            entity.Property(e => e.CntIdcontrato).HasColumnName("CntIDContrato");
            entity.Property(e => e.CntCnpjfilial)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CntCNPJFilial");
            entity.Property(e => e.CntData).HasColumnType("datetime");
            entity.Property(e => e.CntHistDescr)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.CntNumero)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CntValor).HasColumnType("money");
            entity.Property(e => e.CntVencimento).HasColumnType("datetime");

            entity.HasOne(d => d.CntIdFornecNavigation).WithMany(p => p.DepuContratos)
                .HasForeignKey(d => d.CntIdFornec)
                .HasConstraintName("FK_DepuContratos_Contribuintes1");
        });

        modelBuilder.Entity<DetalhesManutencao>(entity =>
        {
            entity.HasKey(e => e.DetMvid);

            entity.ToTable("DetalhesManutencao");

            entity.Property(e => e.DetMvid).HasColumnName("DetMVID");
            entity.Property(e => e.DetMvcompServId)
                .HasDefaultValue(0)
                .HasColumnName("DetMVCompServId");
            entity.Property(e => e.DetMvdescricao)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DetMVDescricao");
            entity.Property(e => e.DetMvmanId)
                .HasDefaultValue(0L)
                .HasColumnName("DetMVManID");
            entity.Property(e => e.DetMvqtde)
                .HasDefaultValue(0)
                .HasColumnName("DetMVQtde");
            entity.Property(e => e.DetMvvlrTotal)
                .HasColumnType("money")
                .HasColumnName("DetMVVlrTotal");

            entity.HasOne(d => d.DetMvcompServ).WithMany(p => p.DetalhesManutencaos)
                .HasForeignKey(d => d.DetMvcompServId)
                .HasConstraintName("FK_DetalhesManutencao_ComponentesServicos");

            entity.HasOne(d => d.DetMvman).WithMany(p => p.DetalhesManutencaos)
                .HasForeignKey(d => d.DetMvmanId)
                .HasConstraintName("FK_DetalhesManutencao_ManutencaoVeiculos");
        });

        modelBuilder.Entity<DetalhesManutencaoMovEq>(entity =>
        {
            entity.HasKey(e => e.DetId);

            entity.ToTable("DetalhesManutencaoMovEq");

            entity.Property(e => e.DetId).HasColumnName("DetID");
            entity.Property(e => e.DetCompServId).HasDefaultValue(0);
            entity.Property(e => e.DetDescricao)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.DetManId)
                .HasDefaultValue(0L)
                .HasColumnName("DetManID");
            entity.Property(e => e.DetQtde).HasDefaultValue(0);
            entity.Property(e => e.DetVlrTotal).HasColumnType("money");

            entity.HasOne(d => d.DetCompServ).WithMany(p => p.DetalhesManutencaoMovEqs)
                .HasForeignKey(d => d.DetCompServId)
                .HasConstraintName("FK_DetalhesManutencaoMovEq_ComponentesServicos");

            entity.HasOne(d => d.DetMan).WithMany(p => p.DetalhesManutencaoMovEqs)
                .HasForeignKey(d => d.DetManId)
                .HasConstraintName("FK_DetalhesManutencaoMovEq_ManutencaoMoveisEquipamentos");
        });

        modelBuilder.Entity<DiaSemana>(entity =>
        {
            entity.HasKey(e => e.IdDiaSemana);

            entity.ToTable("DiaSemana");

            entity.Property(e => e.IdDiaSemana).ValueGeneratedNever();
            entity.Property(e => e.DiaSemana1)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("DiaSemana");

            entity.HasMany(d => d.IdEscalas).WithMany(p => p.IdDiaSemanas)
                .UsingEntity<Dictionary<string, object>>(
                    "DiaSemanaEscala",
                    r => r.HasOne<SaudeEscala>().WithMany()
                        .HasForeignKey("IdEscala")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_DiaSemana_Escala_SaudeEscala"),
                    l => l.HasOne<DiaSemana>().WithMany()
                        .HasForeignKey("IdDiaSemana")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_DiaSemana_Escala_DiaSemana"),
                    j =>
                    {
                        j.HasKey("IdDiaSemana", "IdEscala");
                        j.ToTable("DiaSemana_Escala");
                    });
        });

        modelBuilder.Entity<DiarioArrecadacao>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DiarioArrecadacao");

            entity.HasIndex(e => e.Column1, "IX_DiarioArrecadacao").HasFillFactor(90);

            entity.Property(e => e.Column0)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 0");
            entity.Property(e => e.Column1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 1");
            entity.Property(e => e.Column10)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 10");
            entity.Property(e => e.Column11)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 11");
            entity.Property(e => e.Column12)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 12");
            entity.Property(e => e.Column13)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 13");
            entity.Property(e => e.Column14)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 14");
            entity.Property(e => e.Column15)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 15");
            entity.Property(e => e.Column16)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 16");
            entity.Property(e => e.Column17)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 17");
            entity.Property(e => e.Column18)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 18");
            entity.Property(e => e.Column19)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 19");
            entity.Property(e => e.Column2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 2");
            entity.Property(e => e.Column20)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 20");
            entity.Property(e => e.Column3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 3");
            entity.Property(e => e.Column4)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 4");
            entity.Property(e => e.Column5)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 5");
            entity.Property(e => e.Column6)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 6");
            entity.Property(e => e.Column7)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 7");
            entity.Property(e => e.Column8)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 8");
            entity.Property(e => e.Column9)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 9");
        });

        modelBuilder.Entity<DividasContribuinte>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Dividas Contribuintes");

            entity.Property(e => e.ConCnpjcpf)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ConCNPJCPF");
            entity.Property(e => e.ConNome)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Dividum>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.Cadastro)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Correcao).HasColumnType("money");
            entity.Property(e => e.Juros).HasColumnType("money");
            entity.Property(e => e.Mda)
                .HasColumnType("money")
                .HasColumnName("MDA");
            entity.Property(e => e.Multa).HasColumnType("money");
            entity.Property(e => e.Principal).HasColumnType("money");
            entity.Property(e => e.TipoBxId).HasColumnName("TipoBxID");
            entity.Property(e => e.TipoBxNome)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.TipoTribNome)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Diviso>(entity =>
        {
            entity.HasKey(e => e.DivId);

            entity.HasIndex(e => new { e.DivUnidadeId, e.DivId }, "IX_Divisoes_DivUnidadeID_DivID_inc_DivNome");

            entity.HasIndex(e => new { e.DivId, e.DivLocalId, e.DivNome }, "ix_Divisoes_DivID_DivLocalID_DivNome").HasFillFactor(90);

            entity.Property(e => e.DivId).HasColumnName("DivID");
            entity.Property(e => e.DivAtribuicao)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.DivCargoResp)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.DivDtExtincao)
                .HasComment("Data em que foi extinta a divisão.")
                .HasColumnType("datetime");
            entity.Property(e => e.DivEmail)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DivExtincao)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Sim ou Branco - Indica se a divisão foi extinta.");
            entity.Property(e => e.DivFone)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.DivIntegrProsiga)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DivLocalId)
                .HasDefaultValue(0)
                .HasColumnName("DivLocalID");
            entity.Property(e => e.DivNome)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.DivNomeResp)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.DivUnidadeId)
                .HasDefaultValue(0)
                .HasColumnName("DivUnidadeID");

            entity.HasOne(d => d.DivLocal).WithMany(p => p.Divisos)
                .HasForeignKey(d => d.DivLocalId)
                .HasConstraintName("FK_Divisoes_Localizacao");

            entity.HasOne(d => d.DivUnidade).WithMany(p => p.Divisos)
                .HasForeignKey(d => d.DivUnidadeId)
                .HasConstraintName("FK_Divisoes_Unidades");
        });

        modelBuilder.Entity<Documento>(entity =>
        {
            entity.HasKey(e => e.DocId);

            entity.Property(e => e.DocId)
                .ValueGeneratedNever()
                .HasColumnName("DocID");
            entity.Property(e => e.DocNome)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.DocObservacao)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Observações gerais sobre o documento tal como se é recomendado se a cópia deve ser autenticada ou não.");
            entity.Property(e => e.DocOriginal)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength();
        });

        modelBuilder.Entity<EduacoEstagioProbatorio>(entity =>
        {
            entity.HasKey(e => e.AcoEstagId);

            entity.ToTable("EDUAcoEstagioProbatorio");

            entity.Property(e => e.AcoEstagId)
                .ValueGeneratedNever()
                .HasColumnName("AcoEstagID");
            entity.Property(e => e.AcoEstagAvaliacao)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AcoEstagData).HasColumnType("datetime");
            entity.Property(e => e.AcoEstagNumProc)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DadFid).HasColumnName("DadFID");

            entity.HasOne(d => d.DadF).WithMany(p => p.EduacoEstagioProbatorios)
                .HasForeignKey(d => d.DadFid)
                .HasConstraintName("FK_EDUAcoEstagioProbatorio_RHDadosFuncionais");
        });

        modelBuilder.Entity<Edudisciplina>(entity =>
        {
            entity.HasKey(e => e.DiscId);

            entity.ToTable("EDUDisciplina");

            entity.Property(e => e.DiscId)
                .ValueGeneratedNever()
                .HasColumnName("DiscID");
            entity.Property(e => e.DiscNome)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasMany(d => d.Cons).WithMany(p => p.Discs)
                .UsingEntity<Dictionary<string, object>>(
                    "EduformacaoDisciplina",
                    r => r.HasOne<Contribuinte>().WithMany()
                        .HasForeignKey("ConId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_EDUFormacaoDisciplina_Contribuintes"),
                    l => l.HasOne<Edudisciplina>().WithMany()
                        .HasForeignKey("DiscId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_EDUFormacaoDisciplina_EDUDisciplina"),
                    j =>
                    {
                        j.HasKey("DiscId", "ConId");
                        j.ToTable("EDUFormacaoDisciplina");
                        j.IndexerProperty<long>("DiscId").HasColumnName("DiscID");
                        j.IndexerProperty<long>("ConId").HasColumnName("ConID");
                    });
        });

        modelBuilder.Entity<EdudisciplinasTurma>(entity =>
        {
            entity.HasKey(e => new { e.TurmaId, e.DiscId }).HasName("PK_EDUDisciplinas");

            entity.ToTable("EDUDisciplinasTurma");

            entity.Property(e => e.TurmaId).HasColumnName("TurmaID");
            entity.Property(e => e.DiscId).HasColumnName("DiscID");
            entity.Property(e => e.DadFidsubstituto).HasColumnName("DadFIDSubstituto");
            entity.Property(e => e.DadFidtitular).HasColumnName("DadFIDTitular");

            entity.HasOne(d => d.DadFidsubstitutoNavigation).WithMany(p => p.EdudisciplinasTurmaDadFidsubstitutoNavigations)
                .HasForeignKey(d => d.DadFidsubstituto)
                .HasConstraintName("FK_EDUDisciplinasTurma_RHDadosFuncionais");

            entity.HasOne(d => d.DadFidtitularNavigation).WithMany(p => p.EdudisciplinasTurmaDadFidtitularNavigations)
                .HasForeignKey(d => d.DadFidtitular)
                .HasConstraintName("FK_EDUDisciplinasTurma_RHDadosFuncionais1");

            entity.HasOne(d => d.Disc).WithMany(p => p.EdudisciplinasTurmas)
                .HasForeignKey(d => d.DiscId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EDUDisciplinasTurma_EDUDisciplina");

            entity.HasOne(d => d.Turma).WithMany(p => p.EdudisciplinasTurmas)
                .HasForeignKey(d => d.TurmaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EDUDisciplinasTurma_EDUTurma");
        });

        modelBuilder.Entity<EdufaixaEtarium>(entity =>
        {
            entity.HasKey(e => e.FxEtId);

            entity.ToTable("EDUFaixaEtaria");

            entity.Property(e => e.FxEtId)
                .ValueGeneratedNever()
                .HasColumnName("FxEtID");
        });

        modelBuilder.Entity<Eduformacao>(entity =>
        {
            entity.HasKey(e => e.FormId);

            entity.ToTable("EDUFormacao");

            entity.Property(e => e.FormId)
                .ValueGeneratedNever()
                .HasColumnName("FormID");
            entity.Property(e => e.FormNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TipoFormId).HasColumnName("TipoFormID");

            entity.HasOne(d => d.TipoForm).WithMany(p => p.Eduformacaos)
                .HasForeignKey(d => d.TipoFormId)
                .HasConstraintName("FK_EDUFormacao_EDUTipoFormacao");
        });

        modelBuilder.Entity<EduformacaoContribuinte>(entity =>
        {
            entity.HasKey(e => new { e.ConId, e.FormId });

            entity.ToTable("EDUFormacaoContribuinte");

            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.FormId).HasColumnName("FormID");
            entity.Property(e => e.FormContData)
                .HasComment("Data da Formação")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Con).WithMany(p => p.EduformacaoContribuintes)
                .HasForeignKey(d => d.ConId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EDUFormacaoContribuinte_Contribuintes");

            entity.HasOne(d => d.Form).WithMany(p => p.EduformacaoContribuintes)
                .HasForeignKey(d => d.FormId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EDUFormacaoContribuinte_EDUFormacao");
        });

        modelBuilder.Entity<Edufrequencium>(entity =>
        {
            entity.HasKey(e => e.FreqId);

            entity.ToTable("EDUFrequencia");

            entity.Property(e => e.FreqId)
                .ValueGeneratedNever()
                .HasColumnName("FreqID");
            entity.Property(e => e.DadFid).HasColumnName("DadFID");
            entity.Property(e => e.FreqValor).HasColumnType("money");
            entity.Property(e => e.TipoPdid).HasColumnName("TipoPDID");

            entity.HasOne(d => d.DadF).WithMany(p => p.Edufrequencia)
                .HasForeignKey(d => d.DadFid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EDUFrequencia_RHDadosFuncionais");

            entity.HasOne(d => d.TipoPd).WithMany(p => p.Edufrequencia)
                .HasForeignKey(d => d.TipoPdid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EDUFrequencia_RHTipoProventosDescontos");
        });

        modelBuilder.Entity<EdumovimentoLotacao>(entity =>
        {
            entity.HasKey(e => e.MovLotId);

            entity.ToTable("EDUMovimentoLotacao");

            entity.Property(e => e.MovLotId)
                .ValueGeneratedNever()
                .HasColumnName("MovLotID");
            entity.Property(e => e.CargoFuncId).HasColumnName("CargoFuncID");
            entity.Property(e => e.DadFid).HasColumnName("DadFID");
            entity.Property(e => e.LocId).HasColumnName("LocID");
            entity.Property(e => e.MovLotDataMov).HasColumnType("datetime");
            entity.Property(e => e.MovLotMotivo)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.MovLotTipo)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MovLotTipoMovimento)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.CargoFunc).WithMany(p => p.EdumovimentoLotacaos)
                .HasForeignKey(d => d.CargoFuncId)
                .HasConstraintName("FK_EDUMovimentoLotacao_RHCargosFuncoes");

            entity.HasOne(d => d.DadF).WithMany(p => p.EdumovimentoLotacaos)
                .HasForeignKey(d => d.DadFid)
                .HasConstraintName("FK_EDUMovimentoLotacao_RHDadosFuncionais");

            entity.HasOne(d => d.Loc).WithMany(p => p.EdumovimentoLotacaos)
                .HasForeignKey(d => d.LocId)
                .HasConstraintName("FK_EDUMovimentoLotacao_Localizacao");
        });

        modelBuilder.Entity<Edurecurso>(entity =>
        {
            entity.HasKey(e => e.RecId);

            entity.ToTable("EDURecurso");

            entity.Property(e => e.RecId)
                .ValueGeneratedNever()
                .HasColumnName("RecID");
            entity.Property(e => e.RecNome)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Eduserie>(entity =>
        {
            entity.HasKey(e => e.SerieId);

            entity.ToTable("EDUSerie");

            entity.Property(e => e.SerieId)
                .ValueGeneratedNever()
                .HasColumnName("SerieID");
            entity.Property(e => e.SerieSerie)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TipoSerId).HasColumnName("TipoSerID");

            entity.HasOne(d => d.TipoSer).WithMany(p => p.Eduseries)
                .HasForeignKey(d => d.TipoSerId)
                .HasConstraintName("FK_EDUSerie_EDUTipoSerie");

            entity.HasMany(d => d.Discs).WithMany(p => p.Series)
                .UsingEntity<Dictionary<string, object>>(
                    "EdudisciplinaPadrao",
                    r => r.HasOne<Edudisciplina>().WithMany()
                        .HasForeignKey("DiscId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_EDUDisciplinaPadrao_EDUDisciplina"),
                    l => l.HasOne<Eduserie>().WithMany()
                        .HasForeignKey("SerieId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_EDUDisciplinaPadrao_EDUSerie"),
                    j =>
                    {
                        j.HasKey("SerieId", "DiscId");
                        j.ToTable("EDUDisciplinaPadrao");
                        j.IndexerProperty<long>("SerieId").HasColumnName("SerieID");
                        j.IndexerProperty<long>("DiscId").HasColumnName("DiscID");
                    });
        });

        modelBuilder.Entity<Edusubstituico>(entity =>
        {
            entity.HasKey(e => e.SubsId);

            entity.ToTable("EDUSubstituicoes");

            entity.Property(e => e.SubsId)
                .ValueGeneratedNever()
                .HasColumnName("SubsID");
            entity.Property(e => e.DadFid).HasColumnName("DadFID");
            entity.Property(e => e.DiscId).HasColumnName("DiscID");
            entity.Property(e => e.SubsData).HasColumnType("datetime");
            entity.Property(e => e.SubsDataFim).HasColumnType("datetime");
            entity.Property(e => e.SubsDataIni).HasColumnType("datetime");
            entity.Property(e => e.SubsMotivo)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.SubsTipo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TurmaId).HasColumnName("TurmaID");

            entity.HasOne(d => d.DadF).WithMany(p => p.Edusubstituicos)
                .HasForeignKey(d => d.DadFid)
                .HasConstraintName("FK_EDUSubstituicoes_RHDadosFuncionais");

            entity.HasOne(d => d.Disc).WithMany(p => p.Edusubstituicos)
                .HasForeignKey(d => d.DiscId)
                .HasConstraintName("FK_EDUSubstituicoes_EDUDisciplina");

            entity.HasOne(d => d.EdudisciplinasTurma).WithMany(p => p.Edusubstituicos)
                .HasForeignKey(d => new { d.TurmaId, d.DiscId })
                .HasConstraintName("FK_EDUSubstituicoes_EDUDisciplinasTurma");
        });

        modelBuilder.Entity<EdutipoFormacao>(entity =>
        {
            entity.HasKey(e => e.TipoFormId);

            entity.ToTable("EDUTipoFormacao");

            entity.Property(e => e.TipoFormId)
                .ValueGeneratedNever()
                .HasColumnName("TipoFormID");
            entity.Property(e => e.TipoFormNome)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EdutipoLocal>(entity =>
        {
            entity.HasKey(e => e.TipoLocId);

            entity.ToTable("EDUTipoLocal");

            entity.Property(e => e.TipoLocId)
                .ValueGeneratedNever()
                .HasColumnName("TipoLocID");
            entity.Property(e => e.TipoLocNome)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EdutipoSerie>(entity =>
        {
            entity.HasKey(e => e.TipoSerId);

            entity.ToTable("EDUTipoSerie");

            entity.Property(e => e.TipoSerId)
                .ValueGeneratedNever()
                .HasColumnName("TipoSerID");
            entity.Property(e => e.TipoSerNome)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Eduturma>(entity =>
        {
            entity.HasKey(e => e.TurmaId);

            entity.ToTable("EDUTurma");

            entity.Property(e => e.TurmaId)
                .ValueGeneratedNever()
                .HasColumnName("TurmaID");
            entity.Property(e => e.LocId).HasColumnName("LocID");
            entity.Property(e => e.RecId).HasColumnName("RecID");
            entity.Property(e => e.SerieId).HasColumnName("SerieID");
            entity.Property(e => e.TurmaNome)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TurmaTurno)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.Loc).WithMany(p => p.Eduturmas)
                .HasForeignKey(d => d.LocId)
                .HasConstraintName("FK_EDUTurma_Localizacao");

            entity.HasOne(d => d.Rec).WithMany(p => p.Eduturmas)
                .HasForeignKey(d => d.RecId)
                .HasConstraintName("FK_EDUTurma_EDURecurso");

            entity.HasOne(d => d.Serie).WithMany(p => p.Eduturmas)
                .HasForeignKey(d => d.SerieId)
                .HasConstraintName("FK_EDUTurma_EDUSerie");
        });

        modelBuilder.Entity<EduturmaMe>(entity =>
        {
            entity.HasKey(e => new { e.TurmaId, e.TurmaMes, e.FxEtId });

            entity.ToTable("EDUTurmaMes");

            entity.Property(e => e.TurmaId).HasColumnName("TurmaID");
            entity.Property(e => e.FxEtId).HasColumnName("FxEtID");
            entity.Property(e => e.TurmaMqtdeFeminino).HasColumnName("TurmaMQtdeFeminino");
            entity.Property(e => e.TurmaMqtdeMasculino).HasColumnName("TurmaMQtdeMasculino");

            entity.HasOne(d => d.FxEt).WithMany(p => p.EduturmaMes)
                .HasForeignKey(d => d.FxEtId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EDUTurmaMes_EDUFaixaEtaria");

            entity.HasOne(d => d.Turma).WithMany(p => p.EduturmaMes)
                .HasForeignKey(d => d.TurmaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EDUTurmaMes_EDUTurma");
        });

        modelBuilder.Entity<EmbargosSmtr>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EMBARGOS_SMTR");

            entity.Property(e => e.AnoAuto)
                .HasMaxLength(255)
                .HasColumnName("ANO_AUTO");
            entity.Property(e => e.AnoEmbargo)
                .HasMaxLength(255)
                .HasColumnName("ANO_EMBARGO");
            entity.Property(e => e.DataEmbargo)
                .HasMaxLength(255)
                .HasColumnName("DATA EMBARGO");
            entity.Property(e => e.Inscricao)
                .HasMaxLength(255)
                .HasColumnName("INSCRICAO");
            entity.Property(e => e.Motivo)
                .HasMaxLength(255)
                .HasColumnName("MOTIVO");
            entity.Property(e => e.NumAuto)
                .HasMaxLength(255)
                .HasColumnName("NUM_AUTO");
            entity.Property(e => e.NumEmbargo)
                .HasMaxLength(255)
                .HasColumnName("NUM_EMBARGO");
        });

        modelBuilder.Entity<Empresa>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("empresas");

            entity.Property(e => e.Atividade)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Bairro)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Cme).HasColumnName("CME");
            entity.Property(e => e.Cnae)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CNAE");
            entity.Property(e => e.Cnpj)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CNPJ");
            entity.Property(e => e.Cnpjmask)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CNPJMask");
            entity.Property(e => e.Empresa1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Empresa");
            entity.Property(e => e.Logradouro)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Nire)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NIRE");
            entity.Property(e => e.NomeEmpresarial)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Numero)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Endereco>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Endereco");

            entity.Property(e => e.Cep)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CEP");
            entity.Property(e => e.Complemento)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NmLogradouro)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.NumLogradouro)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TipoLogradouro)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<Especie>(entity =>
        {
            entity.ToTable("Especie");

            entity.Property(e => e.EspecieId).HasColumnName("EspecieID");
            entity.Property(e => e.EspecieNome)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.EspeciePermanente)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Sim")
                .IsFixedLength();

            entity.HasOne(d => d.Genero).WithMany(p => p.Especies)
                .HasForeignKey(d => d.GeneroId)
                .HasConstraintName("FK_Especie_Genero");
        });

        modelBuilder.Entity<Fazendum>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("fazenda");

            entity.Property(e => e.Codigo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("codigo");
            entity.Property(e => e.Descricao)
                .HasMaxLength(5000)
                .IsUnicode(false)
                .HasColumnName("descricao");
            entity.Property(e => e.Risco)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("risco");
        });

        modelBuilder.Entity<Feriado>(entity =>
        {
            entity.HasKey(e => e.FerId);

            entity.Property(e => e.FerId).HasColumnName("ferID");
            entity.Property(e => e.FerData)
                .HasColumnType("datetime")
                .HasColumnName("ferData");
            entity.Property(e => e.FerDescricao)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ferDescricao");
            entity.Property(e => e.FerStatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("Automático")
                .IsFixedLength()
                .HasColumnName("ferStatus");
            entity.Property(e => e.FerTipo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength()
                .HasColumnName("ferTipo");
        });

        modelBuilder.Entity<FissAliquotum>(entity =>
        {
            entity.HasKey(e => e.AliqId);

            entity.ToTable("fissAliquota");

            entity.Property(e => e.AliqId)
                .ValueGeneratedNever()
                .HasColumnName("AliqID");
            entity.Property(e => e.AliqAliquota).HasColumnType("money");
            entity.Property(e => e.AliqDescricao)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<FissAtividadesDocto>(entity =>
        {
            entity.HasKey(e => new { e.Atividade, e.DocId });

            entity.ToTable("fissAtividadesDoctos");

            entity.Property(e => e.Atividade)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DocId).HasColumnName("DocID");
            entity.Property(e => e.AtDoObs).HasColumnType("text");

            entity.HasOne(d => d.AtividadeNavigation).WithMany(p => p.FissAtividadesDoctos)
                .HasForeignKey(d => d.Atividade)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_fissAtividadesDoctos_TribAtivAtividade");

            entity.HasOne(d => d.Doc).WithMany(p => p.FissAtividadesDoctos)
                .HasForeignKey(d => d.DocId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_fissAtividadesDoctos_Documentos");
        });

        modelBuilder.Entity<FissCompDividum>(entity =>
        {
            entity.HasKey(e => e.CompDivId);

            entity.ToTable("fissCompDivida");

            entity.HasIndex(e => e.CompId, "IX_CompID").HasFillFactor(90);

            entity.HasIndex(e => e.DivEmpId, "IX_DivEmpID").HasFillFactor(90);

            entity.Property(e => e.CompDivId)
                .ValueGeneratedNever()
                .HasColumnName("CompDivID");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.DivEmpId).HasColumnName("DivEmpID");

            entity.HasOne(d => d.Comp).WithMany(p => p.FissCompDivida)
                .HasForeignKey(d => d.CompId)
                .HasConstraintName("FK_fissCompDivida_fissComprovante");

            entity.HasOne(d => d.DivEmp).WithMany(p => p.FissCompDivida)
                .HasForeignKey(d => d.DivEmpId)
                .HasConstraintName("FK_fissCompDivida_TribDividasEmpresas");
        });

        modelBuilder.Entity<FissComprovante>(entity =>
        {
            entity.HasKey(e => e.CompId);

            entity.ToTable("fissComprovante");

            entity.HasIndex(e => new { e.CompData, e.CompSituacao }, "IX_CompData").HasFillFactor(90);

            entity.HasIndex(e => e.CompSituacao, "IX_CompSituacao").HasFillFactor(90);

            entity.HasIndex(e => e.EmprCmc, "IX_EmprCMC").HasFillFactor(90);

            entity.HasIndex(e => e.CompId, "_dta_index_fissComprovante_9_1034694984__K1").HasFillFactor(90);

            entity.HasIndex(e => new { e.CompSituacao, e.EmprCmc, e.CompId }, "_dta_index_fissComprovante_9_1034694984__K6_K3_K1").HasFillFactor(90);

            entity.Property(e => e.CompId)
                .ValueGeneratedNever()
                .HasColumnName("CompID");
            entity.Property(e => e.CompData).HasColumnType("datetime");
            entity.Property(e => e.CompSituacao)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("Normal")
                .IsFixedLength();
            entity.Property(e => e.CompSituacaoCanc)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.ContadorId).HasColumnName("ContadorID");
            entity.Property(e => e.EmprCmc).HasColumnName("EmprCMC");
        });

        modelBuilder.Entity<FissComprovanteIten>(entity =>
        {
            entity.HasKey(e => e.CoItId);

            entity.ToTable("fissComprovanteItens");

            entity.HasIndex(e => e.CompId, "IX_CompID").HasFillFactor(90);

            entity.HasIndex(e => e.DocFisId, "IX_DocFisID").HasFillFactor(90);

            entity.HasIndex(e => new { e.DocFisId, e.CompId }, "IX_DocFisID_CompID").HasFillFactor(90);

            entity.HasIndex(e => new { e.CompId, e.DocFisId }, "_dta_index_fissComprovanteItens_9_74691564__K2_K3").HasFillFactor(90);

            entity.HasIndex(e => new { e.CompId, e.SemMovId, e.DocFisId }, "_dta_index_fissComprovanteItens_9_74691564__K2_K4_K3").HasFillFactor(90);

            entity.HasIndex(e => new { e.SemMovId, e.CompId }, "_dta_index_fissComprovanteItens_9_74691564__K4_K2").HasFillFactor(90);

            entity.Property(e => e.CoItId)
                .ValueGeneratedNever()
                .HasColumnName("CoItID");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.DocFisId).HasColumnName("DocFisID");
            entity.Property(e => e.SemMovId).HasColumnName("SemMovID");

            entity.HasOne(d => d.Comp).WithMany(p => p.FissComprovanteItens)
                .HasForeignKey(d => d.CompId)
                .HasConstraintName("FK_fissComprovanteItens_fissComprovante");

            entity.HasOne(d => d.DocFis).WithMany(p => p.FissComprovanteItens)
                .HasForeignKey(d => d.DocFisId)
                .HasConstraintName("FK_fissComprovanteItens_FissDocFiscais");

            entity.HasOne(d => d.SemMov).WithMany(p => p.FissComprovanteItens)
                .HasForeignKey(d => d.SemMovId)
                .HasConstraintName("FK_fissComprovanteItens_fissSemMovimento");
        });

        modelBuilder.Entity<FissContribEmpresa>(entity =>
        {
            entity.HasKey(e => new { e.ConId, e.EmprCmc });

            entity.ToTable("fissContribEmpresas");

            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.ContadorId).HasColumnName("ContadorID");
            entity.Property(e => e.FissCedataCad)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("fissCEDataCad");
            entity.Property(e => e.ServId)
                .HasDefaultValue(0L)
                .HasColumnName("ServID");

            entity.HasOne(d => d.Con).WithMany(p => p.FissContribEmpresas)
                .HasForeignKey(d => d.ConId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_fissContribEmpresas_Contribuintes");

            entity.HasOne(d => d.Contador).WithMany(p => p.FissContribEmpresas)
                .HasForeignKey(d => d.ContadorId)
                .HasConstraintName("FK_fissContribEmpresas_TribContador");

            entity.HasOne(d => d.EmprCmcNavigation).WithMany(p => p.FissContribEmpresas)
                .HasForeignKey(d => d.EmprCmc)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_fissContribEmpresas_TribEmpresas");

            entity.HasOne(d => d.Serv).WithMany(p => p.FissContribEmpresas)
                .HasForeignKey(d => d.ServId)
                .HasConstraintName("FK_fissContribEmpresas_Servidores1");
        });

        modelBuilder.Entity<FissCruzamento>(entity =>
        {
            entity.HasKey(e => e.FissCruzId);

            entity.ToTable("fissCruzamento");

            entity.Property(e => e.FissCruzId)
                .ValueGeneratedNever()
                .HasColumnName("fissCruzID");
            entity.Property(e => e.FissCruzDescricao)
                .HasColumnType("text")
                .HasColumnName("fissCruzDescricao");
            entity.Property(e => e.FissCruzNome)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("fissCruzNome");
            entity.Property(e => e.TipoOpId).HasColumnName("TipoOpID");

            entity.HasOne(d => d.TipoOp).WithMany(p => p.FissCruzamentos)
                .HasForeignKey(d => d.TipoOpId)
                .HasConstraintName("FK_fissCruzamento_fissTipoOperacao");
        });

        modelBuilder.Entity<FissCruzamentoDetalhe>(entity =>
        {
            entity.HasKey(e => e.Iddet);

            entity.ToTable("fissCruzamentoDetalhe");

            entity.Property(e => e.Iddet).HasColumnName("iddet");
            entity.Property(e => e.Ano).HasColumnName("ano");
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Mes).HasColumnName("mes");
            entity.Property(e => e.Session)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("session");
            entity.Property(e => e.Total).HasColumnName("total");
        });

        modelBuilder.Entity<FissCruzamentoMaster>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.Session });

            entity.ToTable("fissCruzamentoMaster");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Session)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("session");
            entity.Property(e => e.Nome)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nome");
            entity.Property(e => e.Total).HasColumnName("total");
        });

        modelBuilder.Entity<FissDespachosEmpresa>(entity =>
        {
            entity.HasKey(e => e.IddespachoEmpresa);

            entity.ToTable("fissDespachosEmpresas");

            entity.Property(e => e.IddespachoEmpresa)
                .ValueGeneratedNever()
                .HasColumnName("IDDespachoEmpresa");
            entity.Property(e => e.DataCadDespacho)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IdtipoDespacho).HasColumnName("IDTipoDespacho");
            entity.Property(e => e.ServId)
                .HasDefaultValue(0L)
                .HasColumnName("ServID");
            entity.Property(e => e.StatusDespacho)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Atende Requisito Legais, Nao Atende Requisitos Legais, Dispensa Requisitos Conforme Legislação Vigente");
            entity.Property(e => e.Texto)
                .HasMaxLength(512)
                .IsUnicode(false);

            entity.HasOne(d => d.EmprCmcNavigation).WithMany(p => p.FissDespachosEmpresas)
                .HasForeignKey(d => d.EmprCmc)
                .HasConstraintName("FK_fissDespachosEmpresas_TribEmpresas");

            entity.HasOne(d => d.FissDespachosServidore).WithMany(p => p.FissDespachosEmpresas)
                .HasForeignKey(d => new { d.IdtipoDespacho, d.ServId })
                .HasConstraintName("FK_fissDespachosEmpresas_fissDespachosServidores");
        });

        modelBuilder.Entity<FissDespachosServidore>(entity =>
        {
            entity.HasKey(e => new { e.IdtipoDespacho, e.ServId });

            entity.ToTable("fissDespachosServidores");

            entity.Property(e => e.IdtipoDespacho).HasColumnName("IDTipoDespacho");
            entity.Property(e => e.ServId).HasColumnName("ServID");

            entity.HasOne(d => d.IdtipoDespachoNavigation).WithMany(p => p.FissDespachosServidores)
                .HasForeignKey(d => d.IdtipoDespacho)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_fissDespachosServidores_fissTiposDespachos");

            entity.HasOne(d => d.Serv).WithMany(p => p.FissDespachosServidores)
                .HasForeignKey(d => d.ServId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_fissDespachosServidores_Servidores");
        });

        modelBuilder.Entity<FissDocFiscai>(entity =>
        {
            entity.HasKey(e => e.DocFisId);

            entity.ToTable("fissDocFiscais");

            entity.HasIndex(e => new { e.DocFisData, e.ModNotaId, e.TipoDocId, e.SitRecId, e.NatOpId, e.SerieId, e.EmprCmc, e.DocFisId, e.MovId, e.DocFisDataPgto, e.DocFisNumero, e.DocFisValorTotNf, e.DocFisValorSerNf, e.DocFisValorImpNf, e.DocFisAliquotaImpNf }, "IX_ALLFIELDS").HasFillFactor(90);

            entity.HasIndex(e => new { e.DocFisData, e.EmprCmc }, "IX_DocFisData_EmprCMC").HasFillFactor(90);

            entity.HasIndex(e => e.DocFisNumero, "IX_DocFisNumero").HasFillFactor(90);

            entity.HasIndex(e => e.EmprCmc, "IX_EmprCMC").HasFillFactor(90);

            entity.HasIndex(e => new { e.EmprCmc, e.DocFisId, e.MovId, e.DocFisNumero }, "IX_EmprCMC_DocFisID_MovID_DocFisNumero").HasFillFactor(90);

            entity.HasIndex(e => new { e.EmprCmc, e.MovId, e.DocFisId, e.DocFisNumero }, "IX_EmprCMC_MovID_DocFisID_DocFisNumero").HasFillFactor(90);

            entity.HasIndex(e => new { e.EmprCmc, e.MovId, e.NatOpId }, "IX_EmprCMC_MovID_NatOpID").HasFillFactor(90);

            entity.HasIndex(e => new { e.EmprCmc, e.SitRecId }, "IX_EmprCMC_SitRecID").HasFillFactor(90);

            entity.HasIndex(e => e.MovId, "IX_MovID").HasFillFactor(90);

            entity.HasIndex(e => new { e.NatOpId, e.EmprCmc }, "IX_NatOpID_EmprCMC").HasFillFactor(90);

            entity.HasIndex(e => e.SitRecId, "IX_SitRecID").HasFillFactor(90);

            entity.HasIndex(e => e.DocFisId, "_dta_index_fissDocFiscais_5_1475744560__K1").HasFillFactor(90);

            entity.HasIndex(e => new { e.EmprCmc, e.DocFisId, e.SitRecId, e.ModNotaId, e.SerieId, e.DocFisNumero, e.DocFisData, e.DocFisValorTotNf, e.DocFisValorSerNf, e.DocFisValorImpNf, e.DocFisAliquotaImpNf, e.MovId, e.DocFisDataPgto }, "_dta_index_fissDocFiscais_9_1475744560__K12_K1_K7_K3_K2_K6_K5_K8_K9_K10_K11_K14_K4").HasFillFactor(90);

            entity.HasIndex(e => new { e.DocFisId, e.EmprCmc, e.DocFisData, e.SitRecId, e.NatOpId, e.ModNotaId, e.SerieId, e.MovId, e.DocFisNumero, e.DocFisValorTotNf, e.DocFisValorSerNf, e.DocFisValorImpNf, e.DocFisAliquotaImpNf }, "_dta_index_fissDocFiscais_9_1475744560__K1_K12_K5_K7_K15_K3_K2_K14_K6_K8_K9_K10_K11").HasFillFactor(90);

            entity.HasIndex(e => new { e.ModNotaId, e.EmprCmc, e.SerieId, e.MovId, e.DocFisId, e.DocFisNumero, e.DocFisData }, "_dta_index_fissDocFiscais_9_1475744560__K3_K12_K2_K14_K1_K6_K5").HasFillFactor(90);

            entity.Property(e => e.DocFisId)
                .ValueGeneratedNever()
                .HasColumnName("DocFisID");
            entity.Property(e => e.DocFisAliquotaImpNf)
                .HasColumnType("money")
                .HasColumnName("DocFisAliquotaImpNF");
            entity.Property(e => e.DocFisData).HasColumnType("datetime");
            entity.Property(e => e.DocFisDataPgto).HasColumnType("datetime");
            entity.Property(e => e.DocFisImport)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.DocFisValorImpNf)
                .HasColumnType("money")
                .HasColumnName("DocFisValorImpNF");
            entity.Property(e => e.DocFisValorSerNf)
                .HasColumnType("money")
                .HasColumnName("DocFisValorSerNF");
            entity.Property(e => e.DocFisValorTotNf)
                .HasColumnType("money")
                .HasColumnName("DocFisValorTotNF");
            entity.Property(e => e.EmprCmc).HasColumnName("EmprCMC");
            entity.Property(e => e.ModNotaId).HasColumnName("ModNotaID");
            entity.Property(e => e.MovId).HasColumnName("MovID");
            entity.Property(e => e.NatOpId).HasColumnName("NatOpID");
            entity.Property(e => e.SerieId).HasColumnName("SerieID");
            entity.Property(e => e.SitRecId).HasColumnName("SitRecID");
            entity.Property(e => e.TipoDocId).HasColumnName("TipoDocID");

            entity.HasOne(d => d.EmprCmcNavigation).WithMany(p => p.FissDocFiscais)
                .HasForeignKey(d => d.EmprCmc)
                .HasConstraintName("FK_FissDocFiscais_TribEmpresas");

            entity.HasOne(d => d.ModNota).WithMany(p => p.FissDocFiscais)
                .HasForeignKey(d => d.ModNotaId)
                .HasConstraintName("FK_FissDocFiscais_fissModeloNota");

            entity.HasOne(d => d.Mov).WithMany(p => p.FissDocFiscais)
                .HasForeignKey(d => d.MovId)
                .HasConstraintName("FK_FissDocFiscais_fissMovim");

            entity.HasOne(d => d.NatOp).WithMany(p => p.FissDocFiscais)
                .HasForeignKey(d => d.NatOpId)
                .HasConstraintName("FK_FissDocFiscais_fissNaturezaOperacao");

            entity.HasOne(d => d.Serie).WithMany(p => p.FissDocFiscais)
                .HasForeignKey(d => d.SerieId)
                .HasConstraintName("FK_FissDocFiscais_fissSerieNotasFiscais");

            entity.HasOne(d => d.SitRec).WithMany(p => p.FissDocFiscais)
                .HasForeignKey(d => d.SitRecId)
                .HasConstraintName("FK_FissDocFiscais_fissSituacaoRec");

            entity.HasOne(d => d.TipoDoc).WithMany(p => p.FissDocFiscais)
                .HasForeignKey(d => d.TipoDocId)
                .HasConstraintName("FK_FissDocFiscais_fissTipoDocumento");
        });

        modelBuilder.Entity<FissDocFiscaisDividum>(entity =>
        {
            entity.HasKey(e => e.DodiId);

            entity.ToTable("fissDocFiscaisDivida");

            entity.HasIndex(e => e.DivEmpId, "IX_fissDocFiscaisDivida_DivEmpID").HasFillFactor(90);

            entity.HasIndex(e => e.DocfisId, "_dta_index_fissDocFiscaisDivida_5_514413202__K2").HasFillFactor(90);

            entity.Property(e => e.DodiId)
                .ValueGeneratedNever()
                .HasColumnName("dodiID");
            entity.Property(e => e.DivEmpId).HasColumnName("DivEmpID");
            entity.Property(e => e.DocfisId).HasColumnName("docfisID");

            entity.HasOne(d => d.DivEmp).WithMany(p => p.FissDocFiscaisDivida)
                .HasForeignKey(d => d.DivEmpId)
                .HasConstraintName("FK_fissDocFiscaisDivida_TribDividasEmpresas");

            entity.HasOne(d => d.Docfis).WithMany(p => p.FissDocFiscaisDivida)
                .HasForeignKey(d => d.DocfisId)
                .HasConstraintName("FK_fissDocFiscaisDivida_fissDocFiscais");
        });

        modelBuilder.Entity<FissDocFiscaisLog>(entity =>
        {
            entity.HasKey(e => e.Idlog);

            entity.ToTable("fissDocFiscais_Log");

            entity.Property(e => e.Idlog)
                .ValueGeneratedNever()
                .HasColumnName("IDLog");
            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.DataInclusao).HasColumnType("datetime");
            entity.Property(e => e.DocFisAliquotaImpNf)
                .HasColumnType("money")
                .HasColumnName("DocFisAliquotaImpNF");
            entity.Property(e => e.DocFisData).HasColumnType("datetime");
            entity.Property(e => e.DocFisDataPgto).HasColumnType("datetime");
            entity.Property(e => e.DocFisId).HasColumnName("DocFisID");
            entity.Property(e => e.DocFisImport)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.DocFisValorImpNf)
                .HasColumnType("money")
                .HasColumnName("DocFisValorImpNF");
            entity.Property(e => e.DocFisValorSerNf)
                .HasColumnType("money")
                .HasColumnName("DocFisValorSerNF");
            entity.Property(e => e.DocFisValorTotNf)
                .HasColumnType("money")
                .HasColumnName("DocFisValorTotNF");
            entity.Property(e => e.EmprCmc).HasColumnName("EmprCMC");
            entity.Property(e => e.ModNotaId).HasColumnName("ModNotaID");
            entity.Property(e => e.MovId).HasColumnName("MovID");
            entity.Property(e => e.NatOpId).HasColumnName("NatOpID");
            entity.Property(e => e.SerieId).HasColumnName("SerieID");
            entity.Property(e => e.SitRecId).HasColumnName("SitRecID");
            entity.Property(e => e.TipoDocId).HasColumnName("TipoDocID");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<FissDocFiscaisOcorrencia>(entity =>
        {
            entity.HasKey(e => e.DocFisOcorrenciaId);

            entity.ToTable("fissDocFiscaisOcorrencias");

            entity.HasIndex(e => e.TomConId, "_dta_index_fissDocFiscaisOcorrencias_9_1603133102__K22").HasFillFactor(90);

            entity.HasIndex(e => e.PrestConId, "_dta_index_fissDocFiscaisOcorrencias_9_1603133102__K28").HasFillFactor(90);

            entity.Property(e => e.DocFisOcorrenciaId).HasColumnName("DocFisOcorrenciaID");
            entity.Property(e => e.DocFisAliquotaImpNf)
                .HasColumnType("money")
                .HasColumnName("DocFisAliquotaImpNF");
            entity.Property(e => e.DocFisData).HasColumnType("datetime");
            entity.Property(e => e.DocFisDataPgto).HasColumnType("datetime");
            entity.Property(e => e.DocFisId).HasColumnName("DocFisID");
            entity.Property(e => e.DocFisValorImpNf)
                .HasColumnType("money")
                .HasColumnName("DocFisValorImpNF");
            entity.Property(e => e.DocFisValorSerNf)
                .HasColumnType("money")
                .HasColumnName("DocFisValorSerNF");
            entity.Property(e => e.DocFisValorTotNf)
                .HasColumnType("money")
                .HasColumnName("DocFisValorTotNF");
            entity.Property(e => e.EmprCmc).HasColumnName("EmprCMC");
            entity.Property(e => e.EmprConCnpjcpf)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("EmprConCNPJCPF");
            entity.Property(e => e.EmprConId).HasColumnName("EmprConID");
            entity.Property(e => e.EmprConNome)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModNota)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MovMotivo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NatOpDescricao)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PrestConCnpjcpf)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PrestConCNPJCPF");
            entity.Property(e => e.PrestConId).HasColumnName("PrestConID");
            entity.Property(e => e.PrestConNome)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PrestEmprCmc).HasColumnName("PrestEmprCMC");
            entity.Property(e => e.PrestTipoOpNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PrestToPrId).HasColumnName("PrestToPrID");
            entity.Property(e => e.SerieNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SitRecNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TipoDocNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TomConCnpjcpf)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TomConCNPJCPF");
            entity.Property(e => e.TomConId).HasColumnName("TomConID");
            entity.Property(e => e.TomConNome)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TomEmprCmc).HasColumnName("TomEmprCMC");
            entity.Property(e => e.TomTipoOpNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TomToPrId).HasColumnName("TomToPrID");
        });

        modelBuilder.Entity<FissDoctosAnexosEmpresa>(entity =>
        {
            entity.HasKey(e => e.Idanexo);

            entity.ToTable("fissDoctosAnexosEmpresa");

            entity.Property(e => e.Idanexo)
                .ValueGeneratedNever()
                .HasColumnName("IDAnexo");
            entity.Property(e => e.DataAnexo)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DescricaoAnexo)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.DocId).HasColumnName("DocID");
            entity.Property(e => e.Extensao)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ObjetoAnexo).HasColumnType("image");
            entity.Property(e => e.TipoAnexo)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Doc).WithMany(p => p.FissDoctosAnexosEmpresas)
                .HasForeignKey(d => d.DocId)
                .HasConstraintName("FK_fissDoctosAnexosEmpresa_Documentos");

            entity.HasOne(d => d.EmprCmcNavigation).WithMany(p => p.FissDoctosAnexosEmpresas)
                .HasForeignKey(d => d.EmprCmc)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_fissDoctosAnexosEmpresa_TribEmpresas");
        });

        modelBuilder.Entity<FissLivroTemp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("FissLivroTemp");

            entity.HasIndex(e => e.SessionId, "IX_FissLivroTemp_SessionID");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.CompSituacao)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DocFisAliquotaImpNf)
                .HasColumnType("money")
                .HasColumnName("DocFisAliquotaImpNF");
            entity.Property(e => e.DocFisData).HasColumnType("datetime");
            entity.Property(e => e.DocFisId).HasColumnName("DocFisID");
            entity.Property(e => e.DocFisValorImpNf)
                .HasColumnType("money")
                .HasColumnName("DocFisValorImpNF");
            entity.Property(e => e.DocFisValorSerNf)
                .HasColumnType("money")
                .HasColumnName("DocFisValorSerNF");
            entity.Property(e => e.DocFisValorTotNf)
                .HasColumnType("money")
                .HasColumnName("DocFisValorTotNF");
            entity.Property(e => e.EmprCmc).HasColumnName("EmprCMC");
            entity.Property(e => e.ModNota)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NatOpDescricao)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NatOpId).HasColumnName("NatOpID");
            entity.Property(e => e.SemMovId).HasColumnName("SemMovID");
            entity.Property(e => e.SemMovSituacao)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SerieNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SessionId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SessionID");
            entity.Property(e => e.SitRecId).HasColumnName("SitRecID");
            entity.Property(e => e.SitRecNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TipoOpCe)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TipoOp_CE");
            entity.Property(e => e.TipoOpEr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TipoOp_ER");
            entity.Property(e => e.TipoOpId).HasColumnName("TipoOpID");
            entity.Property(e => e.TomadorPrestador)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<FissLivroTempMe>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("fissLivroTempMes");
        });

        modelBuilder.Entity<FissModeloNotum>(entity =>
        {
            entity.HasKey(e => e.ModNotaId);

            entity.ToTable("fissModeloNota");

            entity.Property(e => e.ModNotaId)
                .ValueGeneratedNever()
                .HasColumnName("ModNotaID");
            entity.Property(e => e.ModNota)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<FissMovim>(entity =>
        {
            entity.HasKey(e => e.MovId);

            entity.ToTable("fissMovim");

            entity.HasIndex(e => e.MovId, "IX_MovID").HasFillFactor(90);

            entity.Property(e => e.MovId)
                .ValueGeneratedNever()
                .HasColumnName("MovID");
            entity.Property(e => e.MovData).HasColumnType("datetime");
            entity.Property(e => e.MovMotivo)
                .HasMaxLength(512)
                .IsUnicode(false);
            entity.Property(e => e.TipoOpId).HasColumnName("TipoOpID");

            entity.HasOne(d => d.TipoOp).WithMany(p => p.FissMovims)
                .HasForeignKey(d => d.TipoOpId)
                .HasConstraintName("FK_fissMovim_fissTipoOperacao");
        });

        modelBuilder.Entity<FissMovimImg>(entity =>
        {
            entity.HasKey(e => e.MovImgId);

            entity.ToTable("fissMovimImg");

            entity.HasIndex(e => e.MovId, "IX_MovID").HasFillFactor(90);

            entity.Property(e => e.MovImgId)
                .ValueGeneratedNever()
                .HasColumnName("MovImgID");
            entity.Property(e => e.MovId).HasColumnName("MovID");
            entity.Property(e => e.MovImgImg).HasColumnType("image");

            entity.HasOne(d => d.Mov).WithMany(p => p.FissMovimImgs)
                .HasForeignKey(d => d.MovId)
                .HasConstraintName("FK_fissMovimImg_fissMovim");
        });

        modelBuilder.Entity<FissNaturezaOperacao>(entity =>
        {
            entity.HasKey(e => e.NatOpId);

            entity.ToTable("fissNaturezaOperacao");

            entity.Property(e => e.NatOpId)
                .ValueGeneratedNever()
                .HasColumnName("NatOpID");
            entity.Property(e => e.NatOpAlteraVlrServico)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Sim")
                .IsFixedLength();
            entity.Property(e => e.NatOpDescricao)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NatOpIsenta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<FissSemMovimento>(entity =>
        {
            entity.HasKey(e => e.SemMovId);

            entity.ToTable("fissSemMovimento");

            entity.HasIndex(e => new { e.SemMovAnoComp, e.SemMovMesComp, e.EmprCmc }, "IX_fissSemMovimento_SemMovAnoComp_SemMovMesComp_EmprCMC");

            entity.HasIndex(e => new { e.SemMovId, e.SemMovData, e.SemMovAnoComp, e.SemMovMesComp, e.SemMovMovTotalRetido, e.EmprCmc }, "_dta_index_fissSemMovimento_9_234692134__K1_K2_K3_K4_K8_K5").HasFillFactor(90);

            entity.HasIndex(e => new { e.SemMovId, e.SemMovAnoComp, e.SemMovMesComp, e.SemMovSituacao }, "_dta_index_fissSemMovimento_9_234692134__K1_K3_K4_K7").HasFillFactor(90);

            entity.Property(e => e.SemMovId)
                .ValueGeneratedNever()
                .HasColumnName("SemMovID");
            entity.Property(e => e.ContadorId).HasColumnName("ContadorID");
            entity.Property(e => e.EmprCmc).HasColumnName("EmprCMC");
            entity.Property(e => e.SemMovData).HasColumnType("datetime");
            entity.Property(e => e.SemMovMovTotalRetido)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Indica que o movimento foi totalmente retido na fonte ai eh outro tipo de baixa");
            entity.Property(e => e.SemMovSituacao)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<FissSerieNotasFiscai>(entity =>
        {
            entity.HasKey(e => e.SerieId);

            entity.ToTable("fissSerieNotasFiscais");

            entity.Property(e => e.SerieId)
                .ValueGeneratedNever()
                .HasColumnName("SerieID");
            entity.Property(e => e.SerieNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SerieNotaEmitida)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength();
            entity.Property(e => e.SerieNotaRecebida)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength();
        });

        modelBuilder.Entity<FissServico>(entity =>
        {
            entity.HasKey(e => e.ServId);

            entity.ToTable("fissServicos");

            entity.Property(e => e.ServId)
                .ValueGeneratedNever()
                .HasColumnName("ServID");
            entity.Property(e => e.ContadorId).HasColumnName("ContadorID");
            entity.Property(e => e.EmprCmc).HasColumnName("EmprCMC");
            entity.Property(e => e.ServData).HasColumnType("datetime");
            entity.Property(e => e.ServDespacho)
                .HasMaxLength(512)
                .IsUnicode(false);
            entity.Property(e => e.ServImgAlt)
                .HasColumnType("text")
                .HasColumnName("ServImg_Alt");
            entity.Property(e => e.ServImgAnt)
                .HasColumnType("text")
                .HasColumnName("ServImg_Ant");
            entity.Property(e => e.ServSituacao)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ServSolicitacao)
                .HasMaxLength(512)
                .IsUnicode(false);

            entity.HasOne(d => d.Contador).WithMany(p => p.FissServicos)
                .HasForeignKey(d => d.ContadorId)
                .HasConstraintName("FK_fissServicos_TribContador");

            entity.HasOne(d => d.EmprCmcNavigation).WithMany(p => p.FissServicos)
                .HasForeignKey(d => d.EmprCmc)
                .HasConstraintName("FK_fissServicos_TribEmpresas");
        });

        modelBuilder.Entity<FissServicoTipoServico>(entity =>
        {
            entity.HasKey(e => new { e.ServId, e.ServTpId });

            entity.ToTable("fissServicoTipoServico");

            entity.Property(e => e.ServId).HasColumnName("ServID");
            entity.Property(e => e.ProcId).HasColumnName("ProcID");

            entity.HasOne(d => d.Proc).WithMany(p => p.FissServicoTipoServicos)
                .HasForeignKey(d => d.ProcId)
                .HasConstraintName("FK_fissServicoTipoServico_Processos");

            entity.HasOne(d => d.Serv).WithMany(p => p.FissServicoTipoServicos)
                .HasForeignKey(d => d.ServId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_fissServicoTipoServico_fissServicos");

            entity.HasOne(d => d.ServTp).WithMany(p => p.FissServicoTipoServicos)
                .HasForeignKey(d => d.ServTpId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_fissServicoTipoServico_fissTipoServico");
        });

        modelBuilder.Entity<FissServicoTributo>(entity =>
        {
            entity.HasKey(e => new { e.ServId, e.TipoTribId, e.ServTribId });

            entity.ToTable("fissServicoTributo");

            entity.Property(e => e.ServId).HasColumnName("ServID");
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
            entity.Property(e => e.ServTribId).HasColumnName("ServTribID");

            entity.HasOne(d => d.Serv).WithMany(p => p.FissServicoTributos)
                .HasForeignKey(d => d.ServId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_fissServicoTributo_fissServicos");

            entity.HasOne(d => d.TipoTrib).WithMany(p => p.FissServicoTributos)
                .HasForeignKey(d => d.TipoTribId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_fissServicoTributo_TribTipoTributos");
        });

        modelBuilder.Entity<FissServicosAnexo>(entity =>
        {
            entity.HasKey(e => e.AnexId);

            entity.ToTable("fissServicosAnexos");

            entity.Property(e => e.AnexId)
                .ValueGeneratedNever()
                .HasColumnName("AnexID");
            entity.Property(e => e.AnexDescricao)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.AnexDocumento).HasColumnType("image");
            entity.Property(e => e.AnexExtensao)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ServId).HasColumnName("ServID");

            entity.HasOne(d => d.Serv).WithMany(p => p.FissServicosAnexos)
                .HasForeignKey(d => d.ServId)
                .HasConstraintName("FK_fissServicosAnexos_fissServicos");
        });

        modelBuilder.Entity<FissSituacaoRec>(entity =>
        {
            entity.HasKey(e => e.SitRecId);

            entity.ToTable("fissSituacaoRec");

            entity.Property(e => e.SitRecId)
                .ValueGeneratedNever()
                .HasColumnName("SitRecID");
            entity.Property(e => e.SitRecNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SitRecNotaEmitida)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength();
            entity.Property(e => e.SitRecNotaRecebida)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength();
            entity.Property(e => e.SitRecSubstituto)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength();
        });

        modelBuilder.Entity<FissTipoDocumento>(entity =>
        {
            entity.HasKey(e => e.TipoDocId);

            entity.ToTable("fissTipoDocumento");

            entity.Property(e => e.TipoDocId)
                .ValueGeneratedNever()
                .HasColumnName("TipoDocID");
            entity.Property(e => e.TipoDocNome)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<FissTipoOperacao>(entity =>
        {
            entity.HasKey(e => e.TipoOpId);

            entity.ToTable("fissTipoOperacao");

            entity.Property(e => e.TipoOpId)
                .ValueGeneratedNever()
                .HasColumnName("TipoOpID");
            entity.Property(e => e.TipoOpGravaMov)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength();
            entity.Property(e => e.TipoOpNome)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<FissTipoServico>(entity =>
        {
            entity.HasKey(e => e.ServTpId);

            entity.ToTable("fissTipoServico");

            entity.Property(e => e.ServTpId)
                .ValueGeneratedNever()
                .HasColumnName("ServTpID");
            entity.Property(e => e.DivId).HasColumnName("DivID");
            entity.Property(e => e.ServTpAltCadEmpresa)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength()
                .HasComment("");
            entity.Property(e => e.ServTpDescricao)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ServTpGeraProtocolo)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength();
            entity.Property(e => e.TipoProId).HasColumnName("TipoProID");
        });

        modelBuilder.Entity<FissTipoServicoTributo>(entity =>
        {
            entity.HasKey(e => new { e.TipoTribId, e.ServTpId });

            entity.ToTable("fissTipoServicoTributo");

            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
            entity.Property(e => e.ServTpId).HasColumnName("ServTpID");
            entity.Property(e => e.TpSerTribDiasVencimento).HasDefaultValue(0L);

            entity.HasOne(d => d.ServTp).WithMany(p => p.FissTipoServicoTributos)
                .HasForeignKey(d => d.ServTpId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_fissTipoServicoTributo_fissTipoServico");

            entity.HasOne(d => d.TipoTrib).WithMany(p => p.FissTipoServicoTributos)
                .HasForeignKey(d => d.TipoTribId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_fissTipoServicoTributo_TribTipoTributos");
        });

        modelBuilder.Entity<FissTiposDespacho>(entity =>
        {
            entity.HasKey(e => e.IdtipoDespacho);

            entity.ToTable("fissTiposDespachos");

            entity.Property(e => e.IdtipoDespacho)
                .ValueGeneratedNever()
                .HasColumnName("IDTipoDespacho");
            entity.Property(e => e.NomeDespacho)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<FissTomadorPrestador>(entity =>
        {
            entity.HasKey(e => e.ToPrId).HasName("PK_fissMovimCMC");

            entity.ToTable("fissTomadorPrestador");

            entity.HasIndex(e => new { e.ConId, e.DocFisId, e.TipoOpId }, "IX_ConID_DocFisID_TipoOpID").HasFillFactor(90);

            entity.HasIndex(e => new { e.DocFisId, e.ConId }, "IX_DocFisID_ConID").HasFillFactor(90);

            entity.HasIndex(e => new { e.EmprCmc, e.DocFisId, e.TipoOpId }, "IX_EmprCMC_DocFisID_TipoOpID").HasFillFactor(90);

            entity.HasIndex(e => new { e.EmprCmc, e.TipoOpId, e.DocFisId }, "IX_EmprCMC_TipoOpID_DocFisID").HasFillFactor(90);

            entity.HasIndex(e => new { e.TipoOpId, e.DocFisId, e.ConId, e.ToPrId, e.EmprCmc }, "IX_TipoOpID_DocFisID_ConID_ToPrID_EmprCMC").HasFillFactor(90);

            entity.Property(e => e.ToPrId)
                .ValueGeneratedNever()
                .HasColumnName("ToPrID");
            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.DocFisId).HasColumnName("DocFisID");
            entity.Property(e => e.EmprCmc).HasColumnName("EmprCMC");
            entity.Property(e => e.TipoOpId).HasColumnName("TipoOpID");

            entity.HasOne(d => d.Con).WithMany(p => p.FissTomadorPrestadors)
                .HasForeignKey(d => d.ConId)
                .HasConstraintName("FK_fissMovimCMC_Contribuintes");

            entity.HasOne(d => d.DocFis).WithMany(p => p.FissTomadorPrestadors)
                .HasForeignKey(d => d.DocFisId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_TomadorPrestador_FissDocFiscais");

            entity.HasOne(d => d.EmprCmcNavigation).WithMany(p => p.FissTomadorPrestadors)
                .HasForeignKey(d => d.EmprCmc)
                .HasConstraintName("FK_fissMovimCMC_TribEmpresas");

            entity.HasOne(d => d.TipoOp).WithMany(p => p.FissTomadorPrestadors)
                .HasForeignKey(d => d.TipoOpId)
                .HasConstraintName("FK_fissMovimCMC_fissTipoOperacao");
        });

        modelBuilder.Entity<FissTributosDespachosEmpresa>(entity =>
        {
            entity.HasKey(e => new { e.TipoTribId, e.IddespachoEmpresa });

            entity.ToTable("fissTributosDespachosEmpresas");

            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
            entity.Property(e => e.IddespachoEmpresa).HasColumnName("IDDespachoEmpresa");
            entity.Property(e => e.DataCadTaxaDespacho)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.IddespachoEmpresaNavigation).WithMany(p => p.FissTributosDespachosEmpresas)
                .HasForeignKey(d => d.IddespachoEmpresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_fissTributosDespachosEmpresas_fissDespachosEmpresas");

            entity.HasOne(d => d.TipoTrib).WithMany(p => p.FissTributosDespachosEmpresas)
                .HasForeignKey(d => d.TipoTribId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_fissTributosDespachosEmpresas_TribTipoTributos");
        });

        modelBuilder.Entity<FluxoProcesso>(entity =>
        {
            entity.Property(e => e.FluxoProcessoId)
                .ValueGeneratedNever()
                .HasComment("Identificação do Fluxo de Processos");
            entity.Property(e => e.FpacaoEtapa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasComment("Ação a ser tomada nesta etapa do fluxo")
                .HasColumnName("FPAcaoEtapa");
            entity.Property(e => e.FpdivEtapa)
                .HasComment("Setor origem daquela etapa do fluxo do processo")
                .HasColumnName("FPDivEtapa");
            entity.Property(e => e.Fpsequencia)
                .HasComment("Sequencia da etapa em relação ao fluxo do tipo de processo")
                .HasColumnName("FPSequencia");
            entity.Property(e => e.FptempoTramitacao)
                .HasComment("Dias de permanencia do processo nessa etapa.")
                .HasColumnName("FPTempoTramitacao");
            entity.Property(e => e.FptipoProcesso)
                .HasComment("Identificação do tipo de processo")
                .HasColumnName("FPTipoProcesso");

            entity.HasOne(d => d.FpdivEtapaNavigation).WithMany(p => p.FluxoProcessos)
                .HasForeignKey(d => d.FpdivEtapa)
                .HasConstraintName("FK_FluxoProcessos_Divisoes");

            entity.HasOne(d => d.FptipoProcessoNavigation).WithMany(p => p.FluxoProcessos)
                .HasForeignKey(d => d.FptipoProcesso)
                .HasConstraintName("FK_FluxoProcessos_TipoProcesso");
        });

        modelBuilder.Entity<Fone>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Fone");

            entity.Property(e => e.FoneDdd)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FoneDDD");
            entity.Property(e => e.FoneNumero)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FonePrefixo)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FoneSeparador)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<FoneTipo>(entity =>
        {
            entity.HasKey(e => e.TipoFoneId);

            entity.ToTable("FoneTipo");

            entity.Property(e => e.TipoFoneId).ValueGeneratedNever();
            entity.Property(e => e.TipoFoneDescricao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Celular;Residencial;Comercial");
        });

        modelBuilder.Entity<Formulario>(entity =>
        {
            entity.HasKey(e => e.FrmId);

            entity.HasIndex(e => new { e.FrmId, e.FrmIdGrupoServico }, "IX_Formularios_FrmId_FrmIdGrupoServico_inc_FrmTipo_FrmNome");

            entity.HasIndex(e => new { e.FrmPublicaIntranet, e.FrmIdGrupoServico, e.FrmId, e.FrmTipo, e.FrmNome }, "IX_Formularios_FrmPublicaIntranet_FrmIdGrupoServico_FrmId_FrmTipo_FrmNome").HasFillFactor(90);

            entity.Property(e => e.FrmId)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.DataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.FrmChecaPermissao)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Sim");
            entity.Property(e => e.FrmDescr)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.FrmDsClassIcone)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.FrmEmManutencao)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength()
                .HasComment("Indica se o formulário está em manutenção bloqueando o acesso a ele");
            entity.Property(e => e.FrmEnderecoForm)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.FrmIdGrupoServico).HasDefaultValue(0);
            entity.Property(e => e.FrmIntegradoAdmAcesso)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não");
            entity.Property(e => e.FrmIntegradoControleVt)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .HasColumnName("FrmIntegradoControleVT");
            entity.Property(e => e.FrmIntegradoGcc)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .HasColumnName("FrmIntegradoGCC");
            entity.Property(e => e.FrmIntegradoImobens)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não");
            entity.Property(e => e.FrmIntegradoLocar)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não");
            entity.Property(e => e.FrmIntegradoProSiga)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não");
            entity.Property(e => e.FrmIntegradoTribunoNet)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não");
            entity.Property(e => e.FrmIntegradoxFrota)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não");
            entity.Property(e => e.FrmIntegradoxMoveis)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não");
            entity.Property(e => e.FrmNome)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.FrmPublicaIntranet)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.FrmTipo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength();
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");

            entity.HasOne(d => d.FrmIdGrupoServicoNavigation).WithMany(p => p.Formularios)
                .HasForeignKey(d => d.FrmIdGrupoServico)
                .HasConstraintName("FK_Formularios_GruposServicos");

            entity.HasMany(d => d.Mods).WithMany(p => p.Frms)
                .UsingEntity<Dictionary<string, object>>(
                    "FormModulo",
                    r => r.HasOne<Modulo>().WithMany()
                        .HasForeignKey("ModId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_FormModulo_Modulo"),
                    l => l.HasOne<Formulario>().WithMany()
                        .HasForeignKey("FrmId")
                        .HasConstraintName("FK_FormModulo_Formularios"),
                    j =>
                    {
                        j.HasKey("FrmId", "ModId");
                        j.ToTable("FormModulo");
                        j.IndexerProperty<string>("FrmId")
                            .HasMaxLength(60)
                            .IsUnicode(false);
                    });
        });

        modelBuilder.Entity<FormularioInstrucoesTce>(entity =>
        {
            entity.HasKey(e => e.FrmId);

            entity.ToTable("FormularioInstrucoesTCE");

            entity.Property(e => e.FrmId)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.DsLink)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dsLink");
            entity.Property(e => e.DsTextoExplicativo)
                .IsUnicode(false)
                .HasColumnName("dsTextoExplicativo");
        });

        modelBuilder.Entity<Foz>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("foz");

            entity.Property(e => e.Cnae)
                .HasMaxLength(50)
                .HasColumnName("CNAE");
            entity.Property(e => e.Condriscosmma)
                .HasMaxLength(500)
                .HasColumnName("CONDRISCOSMMA");
            entity.Property(e => e.Condriscovisa)
                .HasMaxLength(500)
                .HasColumnName("CONDRISCOVISA");
            entity.Property(e => e.Descricao)
                .HasMaxLength(3150)
                .HasColumnName("DESCRICAO");
            entity.Property(e => e.Externo)
                .HasMaxLength(500)
                .HasColumnName("EXTERNO");
            entity.Property(e => e.Las)
                .HasMaxLength(500)
                .HasColumnName("LAS");
            entity.Property(e => e.Lplilo)
                .HasMaxLength(500)
                .HasColumnName("LPLILO");
            entity.Property(e => e.Pgrs)
                .HasMaxLength(500)
                .HasColumnName("PGRS");
            entity.Property(e => e.Pgrss)
                .HasMaxLength(500)
                .HasColumnName("PGRSS");
            entity.Property(e => e.Riscosmfa)
                .HasMaxLength(500)
                .HasColumnName("RISCOSMFA");
            entity.Property(e => e.Riscosmma)
                .HasMaxLength(500)
                .HasColumnName("RISCOSMMA");
            entity.Property(e => e.Riscovisa)
                .HasMaxLength(500)
                .HasColumnName("RISCOVISA");
        });

        modelBuilder.Entity<FzacessoOperadorEmpresa>(entity =>
        {
            entity.HasKey(e => e.AcessoOperadorEmpresaId);

            entity.ToTable("FZAcessoOperadorEmpresa", tb => tb.HasComment("Cadastro e Manutenção de Empresas Autorizadas a efetuar Viagens Internacionais pelo Operador"));

            entity.Property(e => e.AcessoOperadorEmpresaId).ValueGeneratedNever();
            entity.Property(e => e.AcessoConId)
                .HasComment("Código de Identificação da Empresa. Contribuintes.ConId.")
                .HasColumnName("AcessoConID");
            entity.Property(e => e.AcessoOperadorCpf)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Código de Identificação do Operador. Numero do CPF do Operador")
                .HasColumnName("AcessoOperadorCPF");

            entity.HasOne(d => d.AcessoCon).WithMany(p => p.FzacessoOperadorEmpresas)
                .HasForeignKey(d => d.AcessoConId)
                .HasConstraintName("FK_FZAcessoOperadorEmpresa_Contribuintes");

            entity.HasOne(d => d.AcessoOperadorCpfNavigation).WithMany(p => p.FzacessoOperadorEmpresas)
                .HasForeignKey(d => d.AcessoOperadorCpf)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FZAcessoOperadorEmpresa_FZANTTOperador");
        });

        modelBuilder.Entity<FzacessoOperadorMotoristum>(entity =>
        {
            entity.HasKey(e => e.AcessoOperadorMotoristaId);

            entity.ToTable("FZAcessoOperadorMotorista", tb => tb.HasComment("Cadastro e Manutenção de Contratos (Motoristas e Empresas ) Autorizados a Atuar no Transporte Internacional pelo Operador"));

            entity.Property(e => e.AcessoOperadorMotoristaId).ValueGeneratedNever();
            entity.Property(e => e.AcessoContratoId).HasComment("Código de Identificação do Contrato. Vinculo nao empregaticio entre Empresa e Motorista. ");
            entity.Property(e => e.AcessoOperadorCpf)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Código de Identificação do Operador. Numero do CPF do Operador")
                .HasColumnName("AcessoOperadorCPF");

            entity.HasOne(d => d.AcessoContrato).WithMany(p => p.FzacessoOperadorMotorista)
                .HasForeignKey(d => d.AcessoContratoId)
                .HasConstraintName("FK_FZAcessoOperadorMotorista_FZContratos");

            entity.HasOne(d => d.AcessoOperadorCpfNavigation).WithMany(p => p.FzacessoOperadorMotorista)
                .HasForeignKey(d => d.AcessoOperadorCpf)
                .HasConstraintName("FK_FZAcessoOperadorMotorista_FZANTTOperador");
        });

        modelBuilder.Entity<FzacessoOperadorVeiculo>(entity =>
        {
            entity.HasKey(e => e.AcessoOperadorVeiculoId);

            entity.ToTable("FZAcessoOperadorVeiculo", tb => tb.HasComment("Cadastro e Manutenção de Veiculos Autorizados a Efetuar o Transporte Internacional pelo Operador"));

            entity.Property(e => e.AcessoOperadorVeiculoId)
                .ValueGeneratedNever()
                .HasComment("Código de Identificação  da Associativa que cria o Perfil de Autorização de Veiculos pelo Operador.");
            entity.Property(e => e.AcessoFzveiId)
                .HasComment("Código de Identificação do Veiculo. Veiculo Autorizado a ser utilizado em Viagens Internacionais pelo Operador")
                .HasColumnName("AcessoFZVeiID");
            entity.Property(e => e.AcessoOperadorCpf)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Código de Identificação do Operador. Numero do CPF do Operador")
                .HasColumnName("AcessoOperadorCPF");

            entity.HasOne(d => d.AcessoFzvei).WithMany(p => p.FzacessoOperadorVeiculos)
                .HasForeignKey(d => d.AcessoFzveiId)
                .HasConstraintName("FK_FZAcessoOperadorVeiculo_FZVeiculos");

            entity.HasOne(d => d.AcessoOperadorCpfNavigation).WithMany(p => p.FzacessoOperadorVeiculos)
                .HasForeignKey(d => d.AcessoOperadorCpf)
                .HasConstraintName("FK_FZAcessoOperadorVeiculo_FZANTTOperador");
        });

        modelBuilder.Entity<Fzalvara>(entity =>
        {
            entity.HasKey(e => e.FzalvId);

            entity.ToTable("FZAlvara");

            entity.Property(e => e.FzalvId)
                .ValueGeneratedNever()
                .HasColumnName("FZAlvID");
            entity.Property(e => e.FzalvaraAno)
                .HasDefaultValue(0)
                .HasColumnName("FZAlvaraAno");
            entity.Property(e => e.FzalvaraDataEm)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("FZAlvaraDataEm");
            entity.Property(e => e.FzalvaraNum)
                .HasDefaultValue(0)
                .HasColumnName("FZAlvaraNum");
            entity.Property(e => e.FzalvaraVenc)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("FZAlvaraVenc");
            entity.Property(e => e.PropId).HasColumnName("PropID");
        });

        modelBuilder.Entity<Fzanttcontrato>(entity =>
        {
            entity.HasKey(e => e.FzcontratoId).HasName("PK_FZContrato");

            entity.ToTable("FZANTTContratos", tb => tb.HasComment("Cadastro e Manutenção de Contratos entre Motoristas de Transporte de Turismo e Empresas de Turismo."));

            entity.Property(e => e.FzcontratoId)
                .ValueGeneratedNever()
                .HasComment("Código de Identificação do Contrato. Vinculo nao empregaticio entre Empresa e Motorista. ")
                .HasColumnName("FZContratoId");
            entity.Property(e => e.FzdtAdmissao)
                .HasComment("Data de Admissão do Motorista na Empresa de Transportes.")
                .HasColumnType("datetime")
                .HasColumnName("FZDtAdmissao");
            entity.Property(e => e.FzdtDemissao)
                .HasComment("Data de Demissão do Motorista na Empresa de Transportes.")
                .HasColumnType("datetime")
                .HasColumnName("FZDtDemissao");
            entity.Property(e => e.FzdtValidade)
                .HasComment("Data da Validade da Permissão do Motorista para atuação em circuito internacional.")
                .HasColumnType("datetime")
                .HasColumnName("FZDtValidade");
            entity.Property(e => e.FzempresaId)
                .HasComment("Código de Identificação da Empresa.")
                .HasColumnName("FZEmpresaId");
            entity.Property(e => e.FzmotoristaId)
                .HasComment("Código de Identificação do Motorista.")
                .HasColumnName("FZMotoristaId");

            entity.HasOne(d => d.Fzempresa).WithMany(p => p.Fzanttcontratos)
                .HasForeignKey(d => d.FzempresaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FZContrato_Contribuintes");

            entity.HasOne(d => d.Fzmotorista).WithMany(p => p.Fzanttcontratos)
                .HasForeignKey(d => d.FzmotoristaId)
                .HasConstraintName("FK_FZContrato_FZCondutores");
        });

        modelBuilder.Entity<Fzanttoperador>(entity =>
        {
            entity.HasKey(e => e.OperadorCpf);

            entity.ToTable("FZANTTOperador", tb => tb.HasComment("Cadastro e Manutenção de Operadores dos Elementos de Viagens Internacionais(Empresas X Motoristas X Veiculos ) "));

            entity.Property(e => e.OperadorCpf)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Código de Identificação do Operador. Numero do CPF do Operador")
                .HasColumnName("OperadorCPF");
            entity.Property(e => e.OperadorDataCadastro)
                .HasComment("Data do Cadastro do Operador. Também pode ser utilizado como Data de Inicio da Validade do Operador.")
                .HasColumnType("datetime");
            entity.Property(e => e.OperadorDataValidade)
                .HasComment("Data da Validade do Cadastro do Operador.")
                .HasColumnType("datetime");
            entity.Property(e => e.OperadorNome)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasComment("Nome Completo do Operador");
            entity.Property(e => e.OperadorSenha)
                .HasMaxLength(50)
                .HasComment("Senha do Operador");
        });

        modelBuilder.Entity<FzarqMortoBoleto>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("FZArqMortoBoletos");

            entity.Property(e => e.AutiId).HasColumnName("autiID");
            entity.Property(e => e.BoleValorCorrecao)
                .HasDefaultValue(0m)
                .HasColumnType("money")
                .HasColumnName("boleValorCorrecao");
            entity.Property(e => e.BoleValorDesconto)
                .HasDefaultValue(0m)
                .HasComment("Valor do desconto do boleto bancário.")
                .HasColumnType("money")
                .HasColumnName("boleValorDesconto");
            entity.Property(e => e.BoleValorJuros)
                .HasDefaultValue(0m)
                .HasColumnType("money")
                .HasColumnName("boleValorJuros");
            entity.Property(e => e.BoleValorMulta)
                .HasDefaultValue(0m)
                .HasColumnType("money")
                .HasColumnName("boleValorMulta");
            entity.Property(e => e.BoleValorPrinc)
                .HasDefaultValue(0m)
                .HasComment("Valor do bloqueto bancário.")
                .HasColumnType("money")
                .HasColumnName("boleValorPrinc");
            entity.Property(e => e.DataBoleto)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime");
            entity.Property(e => e.DataVencBoleto)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DivDtVenc).HasColumnType("datetime");
            entity.Property(e => e.FzveiId).HasColumnName("FZVeiID");
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.InfrId).HasColumnName("infrID");
            entity.Property(e => e.NossoNumero)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.TxId).HasColumnName("TxID");
            entity.Property(e => e.VistId).HasColumnName("VistID");
        });

        modelBuilder.Entity<FzautoInfraco>(entity =>
        {
            entity.HasKey(e => e.AutiId);

            entity.ToTable("FZAutoInfracoes");

            entity.Property(e => e.AutiId)
                .ValueGeneratedNever()
                .HasComment("Número do auto de infração.")
                .HasColumnName("autiID");
            entity.Property(e => e.AutiCorInfracao)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("(VERMELHA = Infracao  AZUL=Notificacao)")
                .HasColumnName("autiCorInfracao");
            entity.Property(e => e.AutiDataAuto)
                .HasComment("Data do auto de infração.")
                .HasColumnType("datetime")
                .HasColumnName("autiDataAuto");
            entity.Property(e => e.AutiDataNotificacao)
                .HasDefaultValueSql("(0)")
                .HasComment("Data da notificação.")
                .HasColumnType("datetime")
                .HasColumnName("autiDataNotificacao");
            entity.Property(e => e.AutiHora).HasColumnName("autiHora");
            entity.Property(e => e.AutiLocal)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("autiLocal");
            entity.Property(e => e.AutiMinuto).HasColumnName("autiMinuto");
            entity.Property(e => e.AutiNumNotificacao)
                .HasDefaultValue(0L)
                .HasComment("Número da notificação.")
                .HasColumnName("autiNumNotificacao");
            entity.Property(e => e.AutiObs)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("Observações sobre o auto de infração.")
                .HasColumnName("autiObs");
            entity.Property(e => e.AutiPrazoRegularizacao)
                .HasColumnType("datetime")
                .HasColumnName("autiPrazoRegularizacao");
            entity.Property(e => e.AutiRemocao)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength()
                .HasComment("Se o termo de infração é de remoção de veículo.")
                .HasColumnName("autiRemocao");
            entity.Property(e => e.AutiRetencao)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength()
                .HasComment("Se o termo de infração é de retenção de veículo.")
                .HasColumnName("autiRetencao");
            entity.Property(e => e.ConId)
                .HasComment("Código de identificação do condutor.")
                .HasColumnName("ConID");
            entity.Property(e => e.FiscId)
                .HasComment("Código de identificação do fiscal que autuou.")
                .HasColumnName("fiscID");
            entity.Property(e => e.FzpontoId).HasColumnName("FZPontoID");
            entity.Property(e => e.FzveiId).HasColumnName("FZVeiID");

            entity.HasOne(d => d.Con).WithMany(p => p.FzautoInfracos)
                .HasForeignKey(d => d.ConId)
                .HasConstraintName("FK_FZAutoInfracoes_Contribuintes");

            entity.HasOne(d => d.Fzvei).WithMany(p => p.FzautoInfracos)
                .HasForeignKey(d => d.FzveiId)
                .HasConstraintName("FK_FZAutoInfracoes_FZVeiculos");
        });

        modelBuilder.Entity<FzautoInfracoesIten>(entity =>
        {
            entity.HasKey(e => new { e.InfrId, e.AutiId });

            entity.ToTable("FZAutoInfracoesItens", tb =>
                {
                    tb.HasTrigger("TgFZAutoInfracoesItensINSERT");
                    tb.HasTrigger("TgFZAutoInfracoesItensUPDATE");
                });

            entity.Property(e => e.InfrId)
                .HasComment("Código da infração.")
                .HasColumnName("infrID");
            entity.Property(e => e.AutiId)
                .HasComment("Número do auto de infração.")
                .HasColumnName("autiID");
            entity.Property(e => e.AuItObs)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("Observações sobre a infração.");
            entity.Property(e => e.AuItValor)
                .HasComment("Valor da taxa a ser cobrada, caso o usuário não informe, colocar o valor default da taxa.")
                .HasColumnType("money");
            entity.Property(e => e.TxId)
                .HasComment("Código de identificação da taxa.")
                .HasColumnName("TxID");

            entity.HasOne(d => d.Auti).WithMany(p => p.FzautoInfracoesItens)
                .HasForeignKey(d => d.AutiId)
                .HasConstraintName("FK_FZAutoInfracoesItens_FZAutoInfracoes");

            entity.HasOne(d => d.Infr).WithMany(p => p.FzautoInfracoesItens)
                .HasForeignKey(d => d.InfrId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FZAutoInfracoesItens_FZInfracoes");

            entity.HasOne(d => d.Tx).WithMany(p => p.FzautoInfracoesItens)
                .HasForeignKey(d => d.TxId)
                .HasConstraintName("FK_FZAutoInfracoesItens_FZTaxas");
        });

        modelBuilder.Entity<Fzbaixa>(entity =>
        {
            entity.HasKey(e => e.BxFzid);

            entity.ToTable("FZBaixas", tb =>
                {
                    tb.HasTrigger("TgFZBaixasDELETE");
                    tb.HasTrigger("TgFZBaixasInsert");
                });

            entity.Property(e => e.BxFzid)
                .ValueGeneratedNever()
                .HasColumnName("BxFZID");
            entity.Property(e => e.BoleNossoNumero)
                .HasMaxLength(13)
                .HasColumnName("boleNossoNumero");
            entity.Property(e => e.BxArquivo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.BxDataBaixa).HasColumnType("datetime");
            entity.Property(e => e.BxFzvlrPago)
                .HasColumnType("money")
                .HasColumnName("BxFZVlrPago");
            entity.Property(e => e.BxMotivoBaixa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("Motivo da baixa.");
            entity.Property(e => e.BxOrigem)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TipoBxId).HasColumnName("TipoBxID");

            entity.HasOne(d => d.BoleNossoNumeroNavigation).WithMany(p => p.Fzbaixas)
                .HasForeignKey(d => d.BoleNossoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FZBaixas_FZBoletos");

            entity.HasOne(d => d.TipoBx).WithMany(p => p.Fzbaixas)
                .HasForeignKey(d => d.TipoBxId)
                .HasConstraintName("FK_FZBaixas_TribTipoBaixa");
        });

        modelBuilder.Entity<Fzboleto>(entity =>
        {
            entity.HasKey(e => e.BoleNossoNumero);

            entity.ToTable("FZBoletos", tb => tb.HasTrigger("TgFZBoletosDELETE"));

            entity.Property(e => e.BoleNossoNumero)
                .HasMaxLength(13)
                .HasColumnName("boleNossoNumero");
            entity.Property(e => e.BoleCodBarra)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("boleCodBarra");
            entity.Property(e => e.BoleData)
                .HasColumnType("datetime")
                .HasColumnName("boleData");
            entity.Property(e => e.BoleDataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Data da inclusão do registro.")
                .HasColumnType("datetime")
                .HasColumnName("boleDataInclusao");
            entity.Property(e => e.BoleLinhaDigitavel)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("boleLinhaDigitavel");
            entity.Property(e => e.BoleMoeda)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Código da moeda que foi gerado o boleto.")
                .HasColumnName("boleMoeda");
            entity.Property(e => e.BoleOrigem)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("boleOrigem");
            entity.Property(e => e.BoleUsuarioInclusao)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())")
                .HasComment("Nome do usuário que incluiu o registro.")
                .HasColumnName("boleUsuarioInclusao");
            entity.Property(e => e.BoleValorBoleto)
                .HasComputedColumnSql("([boleValorPrinc] - [boleValorDesconto] + [boleValorJuros] + [boleValorMulta] + [boleValorCorrecao])", false)
                .HasColumnType("money")
                .HasColumnName("boleValorBoleto");
            entity.Property(e => e.BoleValorCorrecao)
                .HasColumnType("money")
                .HasColumnName("boleValorCorrecao");
            entity.Property(e => e.BoleValorDesconto)
                .HasDefaultValue(0m)
                .HasComment("Valor do desconto do boleto bancário.")
                .HasColumnType("money")
                .HasColumnName("boleValorDesconto");
            entity.Property(e => e.BoleValorJuros)
                .HasColumnType("money")
                .HasColumnName("boleValorJuros");
            entity.Property(e => e.BoleValorMulta)
                .HasColumnType("money")
                .HasColumnName("boleValorMulta");
            entity.Property(e => e.BoleValorPrinc)
                .HasComment("Valor do bloqueto bancário.")
                .HasColumnType("money")
                .HasColumnName("boleValorPrinc");
            entity.Property(e => e.BoleVencimento)
                .HasColumnType("datetime")
                .HasColumnName("boleVencimento");
        });

        modelBuilder.Entity<FzboletosErro>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("FZBoletosErros");

            entity.Property(e => e.BoleArquivo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("boleArquivo");
            entity.Property(e => e.BoleDataInclusao)
                .HasColumnType("datetime")
                .HasColumnName("boleDataInclusao");
            entity.Property(e => e.BoleErro)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("boleErro");
            entity.Property(e => e.BoleNossoNumero)
                .HasMaxLength(13)
                .HasColumnName("boleNossoNumero");
            entity.Property(e => e.BoleUsuarioInclusao)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("boleUsuarioInclusao");
            entity.Property(e => e.ConvenioId).HasColumnName("ConvenioID");
            entity.Property(e => e.DataBaixa).HasColumnType("datetime");
            entity.Property(e => e.DataVencimento).HasColumnType("datetime");
            entity.Property(e => e.ValorBoleto).HasColumnType("money");
        });

        modelBuilder.Entity<Fzclassificacao>(entity =>
        {
            entity.HasKey(e => e.FzclassifVeiId);

            entity.ToTable("FZClassificacao");

            entity.Property(e => e.FzclassifVeiId)
                .ValueGeneratedNever()
                .HasColumnName("FZClassifVeiID");
            entity.Property(e => e.FzclassifVeiNome)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("FZClassifVeiNome");
        });

        modelBuilder.Entity<FzcondutoresVeicDocto>(entity =>
        {
            entity.HasKey(e => e.ConId).HasName("PK_FZCartNacHabilitacao");

            entity.ToTable("FZCondutoresVeicDoctos");

            entity.Property(e => e.ConId).HasComment("Código de Identificação do Condutor.");
            entity.Property(e => e.CertAntecCrimEstData)
                .HasComment("Data da Emissão da Certidão de Antecedentes Criminais Estadual")
                .HasColumnType("datetime");
            entity.Property(e => e.CertAntecCrimFedData)
                .HasComment("Data da Emissão da Certidão de Antecedentes Criminais Federal")
                .HasColumnType("datetime");
            entity.Property(e => e.Cnhcategoria)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Categoria da Carteira de Habilitação. Documento oficial que no Brasil atesta a aptidão de um cidadão para conduzir veículos, sendo de porte obrigatório ao condutor do veículo.")
                .HasColumnName("CNHCategoria");
            entity.Property(e => e.CnhdtEmissao)
                .HasComment("Data da Emissão da Carteira de Habilitação.")
                .HasColumnType("datetime")
                .HasColumnName("CNHDtEmissao");
            entity.Property(e => e.CnhdtVencto)
                .HasComment("Data do Vencimento da Carteira de Habilitação.")
                .HasColumnType("datetime")
                .HasColumnName("CNHDtVencto");
            entity.Property(e => e.Cnhlocal)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("Local do registro da CNH ou Cidade Brasileira onde a CNH foi emitida.")
                .HasColumnName("CNHLocal");
            entity.Property(e => e.Cnhnumero)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Número da CNH. A CNH atual contém fotografia e os números dos principais documentos do condutor, servindo como documento de identidade em todo o território nacional.")
                .HasColumnName("CNHNumero");
            entity.Property(e => e.Cnhuf)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("Unidade federativa da CNH ou Estado Brasileiro onde a CNH foi emitida.")
                .HasColumnName("CNHUF");
            entity.Property(e => e.CondutorPendencias)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasComment("Relação das Pendencias do Condutor do Veiculo");
            entity.Property(e => e.CursoData)
                .HasComment("Data do Curso de Motorista, sendo que cada Tipo de Veículo/Atividade tem seu curso específico.")
                .HasColumnType("datetime");
            entity.Property(e => e.CursoTipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Define qual Tipo de Curso o Condutor deve fazer para exercer sua Atividade.  Está alinhado ao Tipo de Veículo que irá conduzir.");
            entity.Property(e => e.CursoValidade)
                .HasComment("Validade do Curso de Motorista.")
                .HasColumnType("datetime");
            entity.Property(e => e.ExerceAtivRemunerada)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasComment("Identifica através de SIM ou NÃO, se o condutor trabalha profissionalmente como Motorista de Veículo.");
            entity.Property(e => e.NitdtEmissao)
                .HasComment("Data da Emissão do NIT.")
                .HasColumnType("datetime")
                .HasColumnName("NITDtEmissao");
            entity.Property(e => e.NitdtVencto)
                .HasComment("Data do Vencimento do NIT.")
                .HasColumnType("datetime")
                .HasColumnName("NITDtVencto");
            entity.Property(e => e.Nitnumero)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Numero de Inscrição do Trabalhador no Regime Geral de Previdência Social. Confunde-se também com o PIS ou PASEP.")
                .HasColumnName("NITNumero");
            entity.Property(e => e.Observacao)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasComment("Inofrmações Adicionais a respeito dos Documentos do Condutor");
            entity.Property(e => e.TaxaInssdtPagto)
                .HasComment("Data de Pagto da Taxa de INSS para Exercício de Atividade.")
                .HasColumnType("datetime")
                .HasColumnName("TaxaINSSDtPagto");
            entity.Property(e => e.TipoFatorSanguineo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Tipo Sanguineo e Fator Rhesus do Condutor.");

            entity.HasOne(d => d.Con).WithOne(p => p.FzcondutoresVeicDocto)
                .HasForeignKey<FzcondutoresVeicDocto>(d => d.ConId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FZCartNacHabilitacao_Contribuintes");
        });

        modelBuilder.Entity<FzcondutoresVeiculo>(entity =>
        {
            entity.HasKey(e => new { e.PropId, e.FzveiId });

            entity.ToTable("FZCondutoresVeiculos", tb => tb.HasComment("Tabela de Proprietarios de Veiculos. "));

            entity.Property(e => e.PropId).HasComment("Código de Identificação do Proprietário do Veiculo. Condutores estarão somente na Credencial");
            entity.Property(e => e.FzveiId)
                .HasComment("Código de Identificação do Veiculo")
                .HasColumnName("FZVeiId");
            entity.Property(e => e.CondNumCartao)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("Número de identificação do cartão, geralmente usado por taxistas.")
                .HasColumnName("condNumCartao");
            entity.Property(e => e.CondTipoFatorSanguineo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Tipo Sanguineo e Fator Rhesus do Condutor.");
            entity.Property(e => e.ProcessoId).HasComment("Código de Identificação do Processo relacionado a inclusao do Condutor");

            entity.HasOne(d => d.Fzvei).WithMany(p => p.FzcondutoresVeiculos)
                .HasForeignKey(d => d.FzveiId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FZCondutoresVeiculos_FZVeiculos");

            entity.HasOne(d => d.Prop).WithMany(p => p.FzcondutoresVeiculos)
                .HasForeignKey(d => d.PropId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FZCondutoresVeiculos_Contribuintes");
        });

        modelBuilder.Entity<Fzcredencial>(entity =>
        {
            entity.HasKey(e => e.CredenciamentoId);

            entity.ToTable("FZCredencial", tb => tb.HasComment("Cadastro e Manutenção de Credenciais de Condutores. Documento que credencia um condutor para o exercício da sua atividade conforme a sua categoria de Transporte."));

            entity.HasIndex(e => e.ConId, "IX_FZCredencial_ConId");

            entity.Property(e => e.CredenciamentoId)
                .ValueGeneratedNever()
                .HasComment("Codigo de Identificacao do Credenciamento (Condutor/Empresa)");
            entity.Property(e => e.ConId)
                .HasDefaultValue(0L)
                .HasComment("Código de Identificação do Condutor do Veiculo.");
            entity.Property(e => e.CredCertAntecCriminaisEstData)
                .HasComment("Data de Emissão da Certidão de Antecedentes Criminais Estadual, na data do credenciamento.")
                .HasColumnType("datetime");
            entity.Property(e => e.CredCertAntecCriminaisFedData)
                .HasComment("Data da Emissão da Certidão de Antecedentes Criminais Federal, na data do credenciamento.")
                .HasColumnType("datetime");
            entity.Property(e => e.CredCnhcategoria)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Categoria da Carteira de Motorista do Condutor do Veículo, na data do credenciamento.")
                .HasColumnName("CredCNHCategoria");
            entity.Property(e => e.CredCnhdtEmissao)
                .HasComment("Data de Emissão da Carteira de Motorista do Condutor do Veículo, na data do credenciamento.")
                .HasColumnType("datetime")
                .HasColumnName("CredCNHDtEmissao");
            entity.Property(e => e.CredCnhdtValidade)
                .HasComment("Data de Vencimento da Carteira de Motorista do Condutor do Veículo, na data do credenciamento.")
                .HasColumnType("datetime")
                .HasColumnName("CredCNHDtValidade");
            entity.Property(e => e.CredCursoData)
                .HasComment("Data do Curso de Motorista por Tipo de Veículo Especifico, na data do credenciamento.")
                .HasColumnType("datetime");
            entity.Property(e => e.CredCursoValidade)
                .HasComment("Validade do Curso de Motorista, na data do credenciamento.")
                .HasColumnType("datetime");
            entity.Property(e => e.CredNitdtEmissao)
                .HasComment("Data de Emissão do NIT na data do credenciamento.")
                .HasColumnType("datetime")
                .HasColumnName("CredNITDtEmissao");
            entity.Property(e => e.CredNitdtValidade)
                .HasComment("Data de Validade do NIT, na data do credenciamento.")
                .HasColumnType("datetime")
                .HasColumnName("CredNITDtValidade");
            entity.Property(e => e.CredNitnumero)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Numero do NIT do Condutor na data do Credenciamento.")
                .HasColumnName("CredNITNumero");
            entity.Property(e => e.CredPontoId).HasComment("Código de Identificação do Ponto ao qual pertence o Veículo na data do Credenciamento. Extraido de VeiculosporPonto.");
            entity.Property(e => e.CredProprietarioId).HasComment("Código de Identificação do Proprietario do Veiculo na data do Credenciamento. Extraido do Veiculo.");
            entity.Property(e => e.CredSeguroApolice)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasComment("Numero da Apólice de Seguro na data do Credenciamento.");
            entity.Property(e => e.CredSeguroDtEmissao)
                .HasComment("Data de Emissão do Seguro do Veículo, na data do credenciamento.")
                .HasColumnType("datetime");
            entity.Property(e => e.CredSeguroDtValidade)
                .HasComment("Data Validade Seguro  Veículo, na data do credenciamento.")
                .HasColumnType("datetime");
            entity.Property(e => e.CredenDtEmissao)
                .HasComment("Data Emissao Credencial")
                .HasColumnType("datetime");
            entity.Property(e => e.CredenDtVencto)
                .HasComment("Data de Vencimento da Credencial")
                .HasColumnType("datetime");
            entity.Property(e => e.CredenNum).HasComment("Numero da Credencial");
            entity.Property(e => e.CredenObs)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("Informações Complementares sobre a credencial.");
            entity.Property(e => e.CredenSituacao)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Situação da Credencial,  (Ativa / Inativa / Permuta)");
            entity.Property(e => e.CredenTipoAutorizacao)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("Provisória")
                .HasComment("Tipo da Autorização, podendo ser:'Provisória  ou Definitiva.");
            entity.Property(e => e.CredenTipoId).HasComment("Codigo de Identificação do Tipo do Credenciamento.  FZTipoCredenciamento --> Permissionario / Colaborador / Turnante.");
            entity.Property(e => e.DataGravacao)
                .HasComment("Data da Inserção do Registro")
                .HasColumnType("datetime");
            entity.Property(e => e.DataUltAlt)
                .HasComment("Data da Ultima Alteração do Registro.")
                .HasColumnType("datetime");
            entity.Property(e => e.FztipoVeicId)
                .HasComment("Tipo do Veículo")
                .HasColumnName("FZTipoVeicId");
            entity.Property(e => e.FzveiId)
                .HasComment("Codigo de Identificação do Veiculo Credenciado")
                .HasColumnName("FZVeiId");
            entity.Property(e => e.RenovaId).HasComment("Código de  Identificacao da renovação do alvara no Tribuno. ");
            entity.Property(e => e.TaxaInssdtPagto)
                .HasComment("Data de Pagto da Taxa de INSS para exercício de atividades na data do Credenciamento.")
                .HasColumnType("datetime")
                .HasColumnName("TaxaINSSDtPagto");
            entity.Property(e => e.TmpCredTipoAnterior).HasColumnName("tmpCredTipoAnterior");
            entity.Property(e => e.UsuarioIdGravacao).HasComment("Código de Identificação do Usuário que Inseriu o Registro.");
            entity.Property(e => e.UsuarioIdUltAlt).HasComment("Código de Identificação do Usuário que Efetuou a Ultima Alteração do Registro.");

            entity.HasOne(d => d.Con).WithMany(p => p.FzcredencialCons)
                .HasForeignKey(d => d.ConId)
                .HasConstraintName("FK_FZCredencial_Contribuintes");

            entity.HasOne(d => d.CredPonto).WithMany(p => p.Fzcredencials)
                .HasForeignKey(d => d.CredPontoId)
                .HasConstraintName("FK_FZCredencial_FZPontos");

            entity.HasOne(d => d.CredProprietario).WithMany(p => p.FzcredencialCredProprietarios)
                .HasForeignKey(d => d.CredProprietarioId)
                .HasConstraintName("FK_FZCredencial_Contribuintes1");

            entity.HasOne(d => d.CredenTipo).WithMany(p => p.Fzcredencials)
                .HasForeignKey(d => d.CredenTipoId)
                .HasConstraintName("FK_FZCredencial_FZTipoCredenciamento");

            entity.HasOne(d => d.FztipoVeic).WithMany(p => p.Fzcredencials)
                .HasForeignKey(d => d.FztipoVeicId)
                .HasConstraintName("FK_FZCredencial_FZTipoVeiculos");

            entity.HasOne(d => d.Fzvei).WithMany(p => p.Fzcredencials)
                .HasForeignKey(d => d.FzveiId)
                .HasConstraintName("FK_FZCredencial_FZVeiculos");
        });

        modelBuilder.Entity<FzcredencialAncient>(entity =>
        {
            entity.HasKey(e => e.CacredencialAncientId);

            entity.ToTable("FZCredencialAncient", tb => tb.HasComment("Cadastro e Manutenção de Credenciais Antigas. Objetiva informatização de Credenciamento armazenados em fichas manuais. "));

            entity.Property(e => e.CacredencialAncientId)
                .ValueGeneratedNever()
                .HasComment("Código de Identificação do Credenciamento de Fichas Manuais.")
                .HasColumnName("CACredencialAncientId");
            entity.Property(e => e.CacondutorCpf)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasComment("CPF do Condutor")
                .HasColumnName("CACondutorCPF");
            entity.Property(e => e.CacondutorId)
                .HasComment("Código de Identificação do Condutor do Veículo na data do Credenciamento.")
                .HasColumnName("CACondutorId");
            entity.Property(e => e.CacondutorNome)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasComment("Nome do Condutor. Campo Obrigatório.")
                .HasColumnName("CACondutorNome");
            entity.Property(e => e.CacredencialData)
                .HasComment("Data do Credenciamento")
                .HasColumnType("datetime")
                .HasColumnName("CACredencialData");
            entity.Property(e => e.CacredencialDtValidade)
                .HasComment("Validade do Credenciamento")
                .HasColumnType("datetime")
                .HasColumnName("CACredencialDtValidade");
            entity.Property(e => e.CacredencialTipoId)
                .HasComment("Codigo de Identificação do Tipo do Credenciamento.  FZTipoCredenciamento --> 1-Permissionario / 2-Colaborador / 3-Turnante.")
                .HasColumnName("CACredencialTipoId");
            entity.Property(e => e.CadataInclusao)
                .HasComment("Data da Inclusão do Credenciamento no Sistema.")
                .HasColumnType("datetime")
                .HasColumnName("CADataInclusao");
            entity.Property(e => e.Caobservacoes)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasComment("Informações Complementares a respeito do credenciamento.")
                .HasColumnName("CAObservacoes");
            entity.Property(e => e.CapermissionarioId)
                .HasComment("Código de Identificação do Permissionário (Proprietário) do Veículo.")
                .HasColumnName("CAPermissionarioId");
            entity.Property(e => e.CapermissionarioNome)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasComment("Nome do Permissionario (Proprietário) do Veículo.")
                .HasColumnName("CAPermissionarioNome");
            entity.Property(e => e.CapontoId)
                .HasComment("Código de Identificação do Ponto ao qual pertence o Veículo na data do credenciamento.")
                .HasColumnName("CAPontoId");
            entity.Property(e => e.CapontoNome)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasComment("Nome do Ponto.")
                .HasColumnName("CAPontoNome");
            entity.Property(e => e.CausuarioInclusao)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasComment("Nome do Usuario que efetuou a inclusão de dados no sistema.")
                .HasColumnName("CAUsuarioInclusao");
            entity.Property(e => e.CaveiculoId)
                .HasComment("Código de Identificação do Veículo sendo credenciado.")
                .HasColumnName("CAVeiculoId");
            entity.Property(e => e.CaveiculoPlaca)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("Placa do Veículo. Utilizada para cadastramento no caso do veículo nao existir no cenário atual. Campo Obrigatório.")
                .HasColumnName("CAVeiculoPlaca");

            entity.HasOne(d => d.Cacondutor).WithMany(p => p.FzcredencialAncientCacondutors)
                .HasForeignKey(d => d.CacondutorId)
                .HasConstraintName("FK_FZCredencialAncient_Contribuintes");

            entity.HasOne(d => d.CacredencialTipo).WithMany(p => p.FzcredencialAncients)
                .HasForeignKey(d => d.CacredencialTipoId)
                .HasConstraintName("FK_FZCredencialAncient_FZTipoCredenciamento");

            entity.HasOne(d => d.Capermissionario).WithMany(p => p.FzcredencialAncientCapermissionarios)
                .HasForeignKey(d => d.CapermissionarioId)
                .HasConstraintName("FK_FZCredencialAncient_ContribuintesPermissionario");

            entity.HasOne(d => d.Caponto).WithMany(p => p.FzcredencialAncients)
                .HasForeignKey(d => d.CapontoId)
                .HasConstraintName("FK_FZCredencialAncient_FZPontos");

            entity.HasOne(d => d.Caveiculo).WithMany(p => p.FzcredencialAncients)
                .HasForeignKey(d => d.CaveiculoId)
                .HasConstraintName("FK_FZCredencialAncient_FZVeiculos");
        });

        modelBuilder.Entity<FzcredencialLogAuditorium>(entity =>
        {
            entity.HasKey(e => e.CredencialLogId);

            entity.ToTable("FZCredencialLogAuditoria", tb => tb.HasComment("Registro dos Valores da tabela FZCredencial quando sofre uma operação de Alteração ou  Remoção."));

            entity.Property(e => e.CredencialLogId)
                .ValueGeneratedNever()
                .HasComment("Código de Identificação do Log de Credencial para Auditoria");
            entity.Property(e => e.ConId).HasComment("Código de Identificação do Condutor do Veiculo.");
            entity.Property(e => e.CredCertAntecCriminaisEstData)
                .HasComment("Data de Emissão da Certidão de Antecedentes Criminais Estadual, na data do credenciamento.")
                .HasColumnType("datetime");
            entity.Property(e => e.CredCertAntecCriminaisFedData)
                .HasComment("Data da Emissão da Certidão de Antecedentes Criminais Federal, na data do credenciamento.")
                .HasColumnType("datetime");
            entity.Property(e => e.CredCnhcategoria)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Categoria da Carteira de Motorista do Condutor do Veículo, na data do credenciamento.")
                .HasColumnName("CredCNHCategoria");
            entity.Property(e => e.CredCnhdtEmissao)
                .HasComment("Data de Emissão da Carteira de Motorista do Condutor do Veículo, na data do credenciamento.")
                .HasColumnType("datetime")
                .HasColumnName("CredCNHDtEmissao");
            entity.Property(e => e.CredCnhdtValidade)
                .HasComment("Data de Vencimento da Carteira de Motorista do Condutor do Veículo, na data do credenciamento.")
                .HasColumnType("datetime")
                .HasColumnName("CredCNHDtValidade");
            entity.Property(e => e.CredCursoData)
                .HasComment("Data do Curso de Motorista por Tipo de Veículo Especifico, na data do credenciamento.")
                .HasColumnType("datetime");
            entity.Property(e => e.CredCursoValidade)
                .HasComment("Validade do Curso de Motorista, na data do credenciamento.")
                .HasColumnType("datetime");
            entity.Property(e => e.CredNitdtEmissao)
                .HasComment("Data de Emissão do NIT na data do credenciamento.")
                .HasColumnType("datetime")
                .HasColumnName("CredNITDtEmissao");
            entity.Property(e => e.CredNitdtValidade)
                .HasComment("Data de Validade do NIT, na data do credenciamento.")
                .HasColumnType("datetime")
                .HasColumnName("CredNITDtValidade");
            entity.Property(e => e.CredNitnumero)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Numero do NIT do Condutor na data do Credenciamento.")
                .HasColumnName("CredNITNumero");
            entity.Property(e => e.CredPontoId).HasComment("Código de Identificação do Ponto ao qual pertence o Veículo na data do Credenciamento. Extraido de VeiculosporPonto.");
            entity.Property(e => e.CredProprietarioId).HasComment("Código de Identificação do Proprietario do Veiculo na data do Credenciamento. Extraido do Veiculo.");
            entity.Property(e => e.CredSeguroApolice)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Numero da Apólice de Seguro na data do Credenciamento.");
            entity.Property(e => e.CredSeguroDtEmissao)
                .HasComment("Data de Emissão do Seguro do Veículo, na data do credenciamento.")
                .HasColumnType("datetime");
            entity.Property(e => e.CredSeguroDtValidade)
                .HasComment("Data Validade Seguro  Veículo, na data do credenciamento.")
                .HasColumnType("datetime");
            entity.Property(e => e.CredenDtEmissao)
                .HasComment("Data Emissao Credencial")
                .HasColumnType("datetime");
            entity.Property(e => e.CredenDtVencto)
                .HasComment("Data de Vencimento da Credencial")
                .HasColumnType("datetime");
            entity.Property(e => e.CredenNum).HasComment("Numero da Credencial");
            entity.Property(e => e.CredenObs)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasComment("Informações Complementares sobre a credencial.");
            entity.Property(e => e.CredenSituacao)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Situação da Credencial,  (Ativa / Inativa / Permuta).");
            entity.Property(e => e.CredenTipoAutorizacao)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Tipo da Autorização, podendo ser:'Provisória  ou Definitiva.");
            entity.Property(e => e.CredenTipoId).HasComment("Codigo de Identificação do Tipo do Credenciamento.  FZTipoCredenciamento --> Permissionario / Colaborador / Turnante.");
            entity.Property(e => e.CredencialId).HasComment("Codigo de Identificacao do Credenciamento (Condutor/Empresa)");
            entity.Property(e => e.FztipoVeicId)
                .HasComment("Tipo do Veículo sendo credenciado.")
                .HasColumnName("FZTipoVeicId");
            entity.Property(e => e.FzveiId)
                .HasComment("Codigo de Identificação do Veiculo Credenciado")
                .HasColumnName("FZVeiId");
            entity.Property(e => e.LogDataOperacao)
                .HasComment("Data da Operação de Remoção ou Alteração")
                .HasColumnType("datetime");
            entity.Property(e => e.LogHost)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasComment("Nome da Maquina origem da Operação.");
            entity.Property(e => e.LogOperacao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Operação efetuada na tabela, podendo ser Alteração, Remoção ou Inserção.");
            entity.Property(e => e.LogUsuarioId).HasComment("Código de Identificação do Usuário que efetuou a Operação.");
            entity.Property(e => e.LogUsuarioNome)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasComment("Nome do Usuario que efetuou a Operação.");
            entity.Property(e => e.RenovaId).HasComment("Código de  Identificacao da renovação do alvara no Tribuno. ");
            entity.Property(e => e.TaxaInssdtPagto)
                .HasComment("Data de Pagto da Taxa de INSS para exercício de atividades na data do Credenciamento.")
                .HasColumnType("datetime")
                .HasColumnName("TaxaINSSDtPagto");
        });

        modelBuilder.Entity<FzcredenciamentoAte201103>(entity =>
        {
            entity.HasKey(e => e.MovCredenId).HasName("PK_FZMovCredenciamento");

            entity.ToTable("FZCredenciamento_ate201103", tb => tb.HasComment("Cadastro de Credenciais Deprecated utilizado ate 10/03/2011"));

            entity.Property(e => e.MovCredenId)
                .ValueGeneratedNever()
                .HasComment("Codigo Identificacao Credencial")
                .HasColumnName("MovCredenID");
            entity.Property(e => e.CadastroDesuso)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CertAntecCriminaisData)
                .HasComment("Data da Emissão da Certidão de Antecedentes Criminais")
                .HasColumnType("datetime");
            entity.Property(e => e.ConId)
                .HasDefaultValue(0L)
                .HasComment("ID Contribuinte a Credenciar")
                .HasColumnName("ConID");
            entity.Property(e => e.CredenDtEm)
                .HasComment("Data Emissao Credencial")
                .HasColumnType("datetime");
            entity.Property(e => e.CredenDtVenc)
                .HasComment("Data de Vencimento da Credencial")
                .HasColumnType("datetime");
            entity.Property(e => e.CredenNum).HasComment("Numero da Credencial");
            entity.Property(e => e.CredenObs)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("Observações sobre a credencial.");
            entity.Property(e => e.CredenSituacao)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Situação da Credencial");
            entity.Property(e => e.CredenTipoAutorizacao)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("Provisória")
                .HasComment("Tipo do Movimento da credencial, pode ser \"PROVISÓRIA\" ou \"DEFINITIVA\".");
            entity.Property(e => e.CredenTipoId).HasColumnName("CredenTipoID");
            entity.Property(e => e.CursoData)
                .HasComment("Data do Curso de Motorista para o tipo de veículo especifico.")
                .HasColumnType("datetime");
            entity.Property(e => e.CursoValidade)
                .HasComment("Validade do Curso")
                .HasColumnType("datetime");
            entity.Property(e => e.FztipoVeicId)
                .HasComment("Tipo do Veículo")
                .HasColumnName("FZTipoVeicID");
            entity.Property(e => e.FzveiId)
                .HasComment("ID do Veiculo Credenciado")
                .HasColumnName("FZVeiID");
            entity.Property(e => e.Nitnumero)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Numero do NIT do Condutor")
                .HasColumnName("NITNumero");
            entity.Property(e => e.RenovaId)
                .HasComment("Ident. de Renovação do Alvara.")
                .HasColumnName("RenovaID");
            entity.Property(e => e.TaxaInssdtPagto)
                .HasComment("Data de Pagto da Taxa de INSS para exercício de atividades")
                .HasColumnType("datetime")
                .HasColumnName("TaxaINSSDtPagto");

            entity.HasOne(d => d.Con).WithMany(p => p.FzcredenciamentoAte201103s)
                .HasForeignKey(d => d.ConId)
                .HasConstraintName("FK_FZMovCredenciamento_Contribuintes");

            entity.HasOne(d => d.CredenTipo).WithMany(p => p.FzcredenciamentoAte201103s)
                .HasForeignKey(d => d.CredenTipoId)
                .HasConstraintName("FK_FZMovCredenciamento_FZTipoCredenciamento");

            entity.HasOne(d => d.Renova).WithMany(p => p.FzcredenciamentoAte201103s)
                .HasForeignKey(d => d.RenovaId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_FZCredenciamento_TribAlvaraRenovacao");
        });

        modelBuilder.Entity<Fzdivida>(entity =>
        {
            entity.HasKey(e => e.DivId);

            entity.ToTable("FZDividas");

            entity.HasIndex(e => e.VistId, "IX_FZDividas_VistID");

            entity.Property(e => e.DivId)
                .ValueGeneratedNever()
                .HasColumnName("DivID");
            entity.Property(e => e.AutiId).HasColumnName("autiID");
            entity.Property(e => e.ConId)
                .HasDefaultValue(0L)
                .HasComment("ID Contribuinte ")
                .HasColumnName("ConID");
            entity.Property(e => e.DivDataPagto)
                .HasColumnType("datetime")
                .HasColumnName("divDataPagto");
            entity.Property(e => e.DivDtEmissao).HasColumnType("datetime");
            entity.Property(e => e.DivDtVenc).HasColumnType("datetime");
            entity.Property(e => e.DivMotivoBaixa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("Motivo da baixa da divida.")
                .HasColumnName("divMotivoBaixa");
            entity.Property(e => e.DivObs)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.DivParcela).HasComment("Numero da Parcela (1,2,3,4,...)");
            entity.Property(e => e.DivQtdParcela).HasComment("Numero da Parcela (1,2,3,4,...)");
            entity.Property(e => e.DivQtdeBaixas)
                .HasComment("Controla a quantidade de vezes que a divida foi baixada.")
                .HasColumnName("divQtdeBaixas");
            entity.Property(e => e.DivValor).HasColumnType("money");
            entity.Property(e => e.DivValorPago)
                .HasColumnType("money")
                .HasColumnName("divValorPago");
            entity.Property(e => e.FzveiId).HasColumnName("FZVeiID");
            entity.Property(e => e.InfrId).HasColumnName("infrID");
            entity.Property(e => e.TipoBxId).HasColumnName("TipoBxID");
            entity.Property(e => e.TxId).HasColumnName("TxID");
            entity.Property(e => e.VistId).HasColumnName("VistID");

            entity.HasOne(d => d.Fzvei).WithMany(p => p.Fzdivida)
                .HasForeignKey(d => d.FzveiId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FZDividas_FZVeiculos");

            entity.HasOne(d => d.TipoBx).WithMany(p => p.Fzdivida)
                .HasForeignKey(d => d.TipoBxId)
                .HasConstraintName("FK_FZDividas_TribTipoBaixa");

            entity.HasOne(d => d.Tx).WithMany(p => p.Fzdivida)
                .HasForeignKey(d => d.TxId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FZDividas_FZTaxas");

            entity.HasOne(d => d.Vist).WithMany(p => p.Fzdivida)
                .HasForeignKey(d => d.VistId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_FZDividas_FZVistoriaVeiculos");

            entity.HasOne(d => d.FzautoInfracoesIten).WithMany(p => p.Fzdivida)
                .HasForeignKey(d => new { d.InfrId, d.AutiId })
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_FZDividas_FZAutoInfracoesItens");
        });

        modelBuilder.Entity<FzdividasBoleto>(entity =>
        {
            entity.HasKey(e => new { e.BoleNossoNumero, e.DivId });

            entity.ToTable("FZDividasBoleto", tb =>
                {
                    tb.HasTrigger("TgFZDividasBoletoINSERT");
                    tb.HasTrigger("TgFZDividasBoletoUPDATE");
                });

            entity.Property(e => e.BoleNossoNumero)
                .HasMaxLength(13)
                .HasColumnName("boleNossoNumero");
            entity.Property(e => e.DivId).HasColumnName("DivID");
            entity.Property(e => e.DiBoValorApagar)
                .HasDefaultValue(0m)
                .HasComment("Valor a pagar da divida no momento do pagamento do boleto, ou seja, calcula novamente o valor pago com base na data de pagamento.")
                .HasColumnType("money")
                .HasColumnName("DiBoValorAPagar");
            entity.Property(e => e.DiBoValorDivida)
                .HasComputedColumnSql("([DivValorPrinc] - [divValorDesconto] + [divValorJuros] + [divValorMulta] + [divValorCorrecao])", false)
                .HasColumnType("money");
            entity.Property(e => e.DiBoValorPagoDivida)
                .HasDefaultValue(0m)
                .HasComment("Valor pago da divida com boleto.")
                .HasColumnType("money");
            entity.Property(e => e.DivValorCorrecao).HasColumnType("money");
            entity.Property(e => e.DivValorDesconto)
                .HasComment("Valor do desconto do boleto bancário.")
                .HasColumnType("money");
            entity.Property(e => e.DivValorJuros).HasColumnType("money");
            entity.Property(e => e.DivValorMulta).HasColumnType("money");
            entity.Property(e => e.DivValorPrinc)
                .HasComment("Valor do bloqueto bancário.")
                .HasColumnType("money");
            entity.Property(e => e.DivVenc).HasColumnType("datetime");

            entity.HasOne(d => d.BoleNossoNumeroNavigation).WithMany(p => p.FzdividasBoletos)
                .HasForeignKey(d => d.BoleNossoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FZDividasBoleto_FZBoletos");

            entity.HasOne(d => d.Div).WithMany(p => p.FzdividasBoletos)
                .HasForeignKey(d => d.DivId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FZDividasBoleto_FZDividas");
        });

        modelBuilder.Entity<Fzfiscai>(entity =>
        {
            entity.HasKey(e => e.FiscId);

            entity.ToTable("FZFiscais");

            entity.Property(e => e.FiscId)
                .ValueGeneratedNever()
                .HasComment("Código de identificação do fiscal.")
                .HasColumnName("fiscID");
            entity.Property(e => e.FiscAtivo).HasColumnName("fiscAtivo");
            entity.Property(e => e.FiscCpf)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("fiscCPF");
            entity.Property(e => e.FiscMatricula)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("Matricula funcional do fiscal.")
                .HasColumnName("fiscMatricula");
            entity.Property(e => e.FiscNome)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("Nome do fiscal.")
                .HasColumnName("fiscNome");
            entity.Property(e => e.FiscPessoaId).HasColumnName("fiscPessoaId");
            entity.Property(e => e.FiscRg)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("Número do RG - Registro Geral do Fiscal.")
                .HasColumnName("fiscRG");
        });

        modelBuilder.Entity<Fzinfraco>(entity =>
        {
            entity.HasKey(e => e.InfrId);

            entity.ToTable("FZInfracoes");

            entity.Property(e => e.InfrId)
                .ValueGeneratedNever()
                .HasColumnName("infrID");
            entity.Property(e => e.InfrArtigo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("Artigo ")
                .HasColumnName("infrArtigo");
            entity.Property(e => e.InfrDescrArtigo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("Descrição do Artigo.")
                .HasColumnName("infrDescrArtigo");
            entity.Property(e => e.LeiNumAno)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("Número da lei de infrações.")
                .HasColumnName("leiNumAno");

            entity.HasOne(d => d.LeiNumAnoNavigation).WithMany(p => p.Fzinfracos)
                .HasForeignKey(d => d.LeiNumAno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FZInfracoes_FZLeis");
        });

        modelBuilder.Entity<FzitensDeVistorium>(entity =>
        {
            entity.HasKey(e => e.ItemVistId);

            entity.ToTable("FZItensDeVistoria");

            entity.Property(e => e.ItemVistId)
                .ValueGeneratedNever()
                .HasColumnName("ItemVistID");
            entity.Property(e => e.ItemVistNome)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<FzitensVistoriado>(entity =>
        {
            entity.HasKey(e => e.ItemVistoriadoId).HasName("PK_FZItensVistoriadosNovo");

            entity.ToTable("FZItensVistoriados");

            entity.HasIndex(e => e.VistId, "IX_FZItensVistoriados_VistId");

            entity.Property(e => e.ItemVistoriadoId)
                .ValueGeneratedNever()
                .HasComment("Código de Identificação do Item Vistoriado do Veiculo");
            entity.Property(e => e.ItemVistId).HasComment("Código de Identificação do Item ");
            entity.Property(e => e.VistId).HasComment("Código de Identificação da Vistoria do Veiculo");
            entity.Property(e => e.Vvobs)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasComment("Outras Informações a respeito do Item Vistoriado")
                .HasColumnName("VVObs");

            entity.HasOne(d => d.ItemVist).WithMany(p => p.FzitensVistoriados)
                .HasForeignKey(d => d.ItemVistId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FZItensVistoriados_FZItensDeVistoria1");

            entity.HasOne(d => d.Vist).WithMany(p => p.FzitensVistoriados)
                .HasForeignKey(d => d.VistId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FZItensVistoriados_FZVistoriaVeiculos1");
        });

        modelBuilder.Entity<FzitensVistoriadosTwoPk>(entity =>
        {
            entity.HasKey(e => new { e.VistId, e.ItemVistId }).HasName("PK_FZItensVistoriados");

            entity.ToTable("FZItensVistoriadosTwoPk");

            entity.Property(e => e.VistId).HasColumnName("VistID");
            entity.Property(e => e.ItemVistId).HasColumnName("ItemVistID");
            entity.Property(e => e.Vvobs)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("VVObs");
        });

        modelBuilder.Entity<Fzlei>(entity =>
        {
            entity.HasKey(e => e.LeiNumAno);

            entity.ToTable("FZLeis");

            entity.Property(e => e.LeiNumAno)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Número e ano que identifica a lei.")
                .HasColumnName("leiNumAno");
            entity.Property(e => e.LeiDescricao)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("Descrição da lei.")
                .HasColumnName("leiDescricao");
        });

        modelBuilder.Entity<Fzmotorista>(entity =>
        {
            entity.ToTable("FZMotoristas", tb => tb.HasComment("Cadastro e Manutenção de Motoristas de Empresas Permissionárias ou Autorizatárias. Cadastro devido a resolução 1971 de 25/047/2007 da Agencia Nacional de Transportes Terrestres, fundamentada nos termos do relatorio DFO 068 de24/04/2007. "));

            entity.Property(e => e.FzmotoristaId)
                .ValueGeneratedNever()
                .HasComment("Código de Identificação do Motorista")
                .HasColumnName("FZMotoristaId");
            entity.Property(e => e.Fzcnhcategoria)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Categoria da CNH")
                .HasColumnName("FZCNHCategoria");
            entity.Property(e => e.FzcnhdtEmissao)
                .HasComment("Data da Emissão da Carteira Nacional de Habilitação")
                .HasColumnType("datetime")
                .HasColumnName("FZCNHDtEmissao");
            entity.Property(e => e.FzcnhdtVencto)
                .HasComment("Data de Vencimento da Carteira Nacional de Habilitação")
                .HasColumnType("datetime")
                .HasColumnName("FZCNHDtVencto");
            entity.Property(e => e.Fzcnhnumero)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Número da CNH (Carteira Nacional de Habilitação)")
                .HasColumnName("FZCNHNumero");
            entity.Property(e => e.Fzcpf)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Número do Cadastro de Pessoa Física - CPF")
                .HasColumnName("FZCPF");
            entity.Property(e => e.FzdtCertCriminalEstadual)
                .HasComment("Certidão Negativa do registro de distribuição criminal estadual válida no momento do cadastramento e emitida por orgao competente da seção judiciaria do estado no qual o motorista é domiciliado e residente.")
                .HasColumnType("datetime")
                .HasColumnName("FZDtCertCriminalEstadual");
            entity.Property(e => e.FzdtCertCriminalFederal)
                .HasComment("Certidão Negativa do registro de distribuição criminal federal válida no momento do cadastramento e emitida por orgao competente da seção judiciaria do estado no qual o motorista é domiciliado e residente.")
                .HasColumnType("datetime")
                .HasColumnName("FZDtCertCriminalFederal");
            entity.Property(e => e.Fzendereco)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasComment("Endereço do motorista")
                .HasColumnName("FZEndereco");
            entity.Property(e => e.Fzfone)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Telefones do Motorista")
                .HasColumnName("FZFone");
            entity.Property(e => e.Fzfoto)
                .HasColumnType("image")
                .HasColumnName("FZFoto");
            entity.Property(e => e.FzmotoristaNome)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Nome completo do Motorista. Campo Obrigatório.")
                .HasColumnName("FZMotoristaNome");
            entity.Property(e => e.FznmMae)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Nome da Mãe do Motorista")
                .HasColumnName("FZNmMae");
            entity.Property(e => e.Fzobservacao)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasComment("Outras informações a respeito do Motorista")
                .HasColumnName("FZObservacao");
            entity.Property(e => e.Fzrg)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Número do Registro Geral - RG")
                .HasColumnName("FZRG");
            entity.Property(e => e.FztipoFatorSanguineo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Tipo Sanguineo e Fator Rhesus do Condutor.")
                .HasColumnName("FZTipoFatorSanguineo");
            entity.Property(e => e.FztipoFoto)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("FZTipoFoto");
        });

        modelBuilder.Entity<Fzobjeto>(entity =>
        {
            entity.HasKey(e => e.ObjetoId);

            entity.ToTable("FZObjetos");

            entity.Property(e => e.ObjetoId).ValueGeneratedNever();
            entity.Property(e => e.ObjDtGravacao).HasColumnType("datetime");
            entity.Property(e => e.ObjLegenda)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ObjNome)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ObjObservacoes)
                .HasMaxLength(1024)
                .IsUnicode(false);
            entity.Property(e => e.ObjOrigemTipo)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.ObjTipoImagem)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ObjUsuario)
                .HasMaxLength(80)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Fzobjetos250313>(entity =>
        {
            entity.HasKey(e => e.ObjetoId);

            entity.ToTable("FZObjetos250313", tb => tb.HasComment("Backup de FZObjetos com Conversao para Credencial"));

            entity.Property(e => e.ObjetoId).ValueGeneratedNever();
            entity.Property(e => e.ObjDtGravacao).HasColumnType("datetime");
            entity.Property(e => e.ObjLegenda)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ObjNome)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ObjObservacoes)
                .HasMaxLength(1024)
                .IsUnicode(false);
            entity.Property(e => e.ObjOrigemTipo)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.ObjTipoImagem)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ObjUsuario)
                .HasMaxLength(80)
                .IsUnicode(false);
        });

        modelBuilder.Entity<FzobjetosBackup>(entity =>
        {
            entity.HasKey(e => e.ObjetoId);

            entity.ToTable("FZObjetosBackup");

            entity.Property(e => e.ObjetoId).ValueGeneratedNever();
            entity.Property(e => e.ObjDtGravacao).HasColumnType("datetime");
            entity.Property(e => e.ObjLegenda)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ObjNome)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ObjObservacoes)
                .HasMaxLength(1024)
                .IsUnicode(false);
            entity.Property(e => e.ObjOrigemTipo)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.ObjTipoImagem)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ObjUsuario)
                .HasMaxLength(80)
                .IsUnicode(false);
        });

        modelBuilder.Entity<FzobjetosTeste>(entity =>
        {
            entity.HasKey(e => e.ObjetoId);

            entity.ToTable("FZObjetosTeste");

            entity.Property(e => e.ObjetoId).ValueGeneratedNever();
            entity.Property(e => e.ObjDtGravacao).HasColumnType("datetime");
            entity.Property(e => e.ObjLegenda)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ObjNome)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ObjObservacoes)
                .HasMaxLength(1024)
                .IsUnicode(false);
            entity.Property(e => e.ObjOrigemTipo)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.ObjTipoImagem)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ObjUsuario)
                .HasMaxLength(80)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Fzparametro>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("FZParametros");

            entity.Property(e => e.ParCargoChefeDivisao)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.ParCargoDiretor)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Descrição do Cargo do Diretor.");
            entity.Property(e => e.ParChefeDivisao)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.ParCodigoMoeda)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasComment("Código da Moeda. Utilizada em Transações Financeiras.");
            entity.Property(e => e.ParConvenioId)
                .HasComment("Código de Identificação do Convenio")
                .HasColumnName("ParConvenioID");
            entity.Property(e => e.ParDiretor)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Nome do Diretor");
            entity.Property(e => e.ParId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Código de Identificação do Parametro")
                .HasColumnName("ParID");
        });

        modelBuilder.Entity<FzparametrosVistoria>(entity =>
        {
            entity.HasKey(e => new { e.ItemVistId, e.FztipoVeicId, e.FztipoVistId });

            entity.ToTable("FZParametrosVistorias");

            entity.Property(e => e.ItemVistId).HasColumnName("ItemVistID");
            entity.Property(e => e.FztipoVeicId).HasColumnName("FZTipoVeicID");
            entity.Property(e => e.FztipoVistId).HasColumnName("FZTipoVistID");

            entity.HasOne(d => d.FztipoVeic).WithMany(p => p.FzparametrosVistoria)
                .HasForeignKey(d => d.FztipoVeicId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FZParametrosVistorias_FZTipoVeiculos");

            entity.HasOne(d => d.FztipoVist).WithMany(p => p.FzparametrosVistoria)
                .HasForeignKey(d => d.FztipoVistId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FZParametrosVistorias_FZTipoVistoria");

            entity.HasOne(d => d.ItemVist).WithMany(p => p.FzparametrosVistoria)
                .HasForeignKey(d => d.ItemVistId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FZParametrosVistorias_FZItensDeVistoria");
        });

        modelBuilder.Entity<Fzponto>(entity =>
        {
            entity.ToTable("FZPontos");

            entity.Property(e => e.FzpontoId)
                .ValueGeneratedNever()
                .HasComment("Código de Identificação do Ponto.")
                .HasColumnName("FZPontoID");
            entity.Property(e => e.FzabrevPonto)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Abreviatura do Ponto")
                .HasColumnName("FZAbrevPonto");
            entity.Property(e => e.FzconId)
                .HasComment("Código de Identificação da Empresa no Cadastro de Contribuintes.")
                .HasColumnName("FZConId");
            entity.Property(e => e.Fzendereco)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Endereço do Ponto.")
                .HasColumnName("FZEndereco");
            entity.Property(e => e.Fzfone)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("Número do Telefone do Ponto.")
                .HasColumnName("FZFone");
            entity.Property(e => e.FznumVagas)
                .HasComment("Número de Vagas do Ponto.")
                .HasColumnName("FZNumVagas");
            entity.Property(e => e.Fzobs)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("Outras informações a respeito do Ponto.")
                .HasColumnName("FZObs");
            entity.Property(e => e.FzpontoDtEncerramento)
                .HasComment("Data de Encerramento das Atividades da Empresa.")
                .HasColumnType("datetime")
                .HasColumnName("FZPontoDtEncerramento");
            entity.Property(e => e.FzpontoDtInicio)
                .HasComment("Data de Inicio das Atividades da Empresa.")
                .HasColumnType("datetime")
                .HasColumnName("FZPontoDtInicio");
            entity.Property(e => e.FzpontoNome)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Nome do Ponto.")
                .HasColumnName("FZPontoNome");
            entity.Property(e => e.FzpontoNumDec)
                .HasComment("Número do Ponto, conforme especificação  no decreto de criação do ponto.")
                .HasColumnName("FZPontoNumDec");
            entity.Property(e => e.Fzresponsavel)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Nome do Responsável pelo Ponto.")
                .HasColumnName("FZResponsavel");
            entity.Property(e => e.FztipoPontoId)
                .HasComment("Tipo do Ponto, podendo referenciar-se a  1-Escolar, 2-Turismo 3-Taxi, 4-Moto-Taxi, 5-Frete, 23-Aplicativos, 20-Moto-Frete ou Outros.")
                .HasColumnName("FZTipoPontoId");
            entity.Property(e => e.Idloteamento)
                .HasComment("Código de Identificação do Loteamento no qual o ponto está localizado.")
                .HasColumnName("IDLoteamento");

            entity.HasOne(d => d.FztipoPonto).WithMany(p => p.Fzpontos)
                .HasForeignKey(d => d.FztipoPontoId)
                .HasConstraintName("FK_FZPontos_FZTipoPonto");

            entity.HasOne(d => d.IdloteamentoNavigation).WithMany(p => p.Fzpontos)
                .HasForeignKey(d => d.Idloteamento)
                .HasConstraintName("FK_FZPontos_Loteamentos");
        });

        modelBuilder.Entity<FzpontosMov>(entity =>
        {
            entity.HasKey(e => e.PontoMovId);

            entity.ToTable("FZPontosMov", tb => tb.HasComment("Cadastro e Manutenção de Atos de Normatização de Pontos e Condutores"));

            entity.Property(e => e.PontoMovId)
                .ValueGeneratedNever()
                .HasComment("Código de Identificação da Movimentação de Pontos de Veículos.");
            entity.Property(e => e.AtoData)
                .HasComment("Data do Ato")
                .HasColumnType("datetime");
            entity.Property(e => e.AtoDtPublicacao)
                .HasComment("Data do Publicação do Ato")
                .HasColumnType("datetime");
            entity.Property(e => e.AtoNumero).HasComment("Número do Ato.");
            entity.Property(e => e.AtoOrgaoOficialNum).HasComment("Numero do Diario Oficial no qual consta a Publicação do Ato.");
            entity.Property(e => e.AtoOrgaoOficialPagina).HasComment("Numero da Pagina do Diario Oficial no qual consta a Publicação do Ato.");
            entity.Property(e => e.AtoTipo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("Tipo do Ato de Normatização. Pode ser Decreto, Portaria ou outro Ato.");
            entity.Property(e => e.DtLancto)
                .HasComment("Data do Lançamento da Movimentação ")
                .HasColumnType("datetime");
            entity.Property(e => e.FzpontoId)
                .HasComment("Código de Identificação do Ponto do Veículo")
                .HasColumnName("FZPontoId");
            entity.Property(e => e.Operacao)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("Tipo da Operação efetuada sobre o ponto, podendo ser: Permissao, Permissao Temporaria, Revogação ou Permuta.");
            entity.Property(e => e.PontoMovObs)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("Outras informações a respeito da Movimentação do Ponto.");
            entity.Property(e => e.ProprietarioId).HasComment("Código de Identificação do Permissionário do Ponto. Observar que Permissionario do Decreto pode referir-se a outra epoca que nao a atual e não coincidir com o Proprietario Atual do Ponto.");

            entity.HasOne(d => d.Fzponto).WithMany(p => p.FzpontosMovs)
                .HasForeignKey(d => d.FzpontoId)
                .HasConstraintName("FK_FZPontosMov_FZPontos");

            entity.HasOne(d => d.Proprietario).WithMany(p => p.FzpontosMovs)
                .HasForeignKey(d => d.ProprietarioId)
                .HasConstraintName("FK_FZPontosMov_Contribuintes");
        });

        modelBuilder.Entity<Fzreferencia>(entity =>
        {
            entity.HasKey(e => e.TxReferId);

            entity.ToTable("FZReferencias");

            entity.Property(e => e.TxReferId)
                .ValueGeneratedNever()
                .HasColumnName("TxReferID");
            entity.Property(e => e.TxReferNome)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("valores de referencias para as taxas");
            entity.Property(e => e.TxReferValor).HasColumnType("money");
        });

        modelBuilder.Entity<FzresumoBaixa>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("FZResumoBaixa");

            entity.Property(e => e.RebxData)
                .HasColumnType("datetime")
                .HasColumnName("rebxData");
            entity.Property(e => e.RebxNomeArquivo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("Nome do arquivo de baixa fornecido pelo banco.")
                .HasColumnName("rebxNomeArquivo");
            entity.Property(e => e.RebxQtdeBaixado).HasColumnName("rebxQtdeBaixado");
            entity.Property(e => e.RebxQtdeErro).HasColumnName("rebxQtdeErro");
            entity.Property(e => e.RebxQtdeGeral).HasColumnName("rebxQtdeGeral");
            entity.Property(e => e.RebxVlrBaixado)
                .HasComment("Valor total baixado do arquivo fornecido pelo banco.")
                .HasColumnType("money")
                .HasColumnName("rebxVlrBaixado");
            entity.Property(e => e.RebxVlrNaoBaixado)
                .HasComment("Valor que possui erros e não foi possivel realizar a baixa.")
                .HasColumnType("money")
                .HasColumnName("rebxVlrNaoBaixado");
            entity.Property(e => e.RebxVlrTotalArquivo)
                .HasComment("Valor total do arquivo de baixa, fornecido pelo banco.")
                .HasColumnType("money")
                .HasColumnName("rebxVlrTotalArquivo");
        });

        modelBuilder.Entity<Fztaxa>(entity =>
        {
            entity.HasKey(e => e.TxId);

            entity.ToTable("FZTaxas");

            entity.Property(e => e.TxId)
                .ValueGeneratedNever()
                .HasColumnName("TxID");
            entity.Property(e => e.CodReceita)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength()
                .HasComment("Código de identificação da receita contábil.");
            entity.Property(e => e.TxCoeficiente).HasColumnType("money");
            entity.Property(e => e.TxNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TxReferId).HasColumnName("TxReferID");

            entity.HasOne(d => d.TxRefer).WithMany(p => p.Fztaxas)
                .HasForeignKey(d => d.TxReferId)
                .HasConstraintName("FK_FZTaxas_FZReferencias");

            entity.HasMany(d => d.FztipoVists).WithMany(p => p.Txes)
                .UsingEntity<Dictionary<string, object>>(
                    "FztaxasVistoria",
                    r => r.HasOne<FztipoVistorium>().WithMany()
                        .HasForeignKey("FztipoVistId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_FZTaxasVistorias_FZTipoVistoria"),
                    l => l.HasOne<Fztaxa>().WithMany()
                        .HasForeignKey("TxId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_FZTaxasVistorias_FZTaxas"),
                    j =>
                    {
                        j.HasKey("TxId", "FztipoVistId");
                        j.ToTable("FZTaxasVistorias");
                        j.IndexerProperty<int>("TxId").HasColumnName("TxID");
                        j.IndexerProperty<long>("FztipoVistId").HasColumnName("FZTipoVistID");
                    });
        });

        modelBuilder.Entity<Fztbcidade>(entity =>
        {
            entity.HasKey(e => e.Idcidade).HasName("PK_tbcidade");

            entity.ToTable("FZtbcidade", tb => tb.HasComment("Cadastro de Cidades revisado no DBPROSiga em 18/01/2021"));

            entity.Property(e => e.Idcidade)
                .ValueGeneratedNever()
                .HasColumnName("idcidade");
            entity.Property(e => e.Cdibgecodigo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("cdibgecodigo");
            entity.Property(e => e.Dssiglauf)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("dssiglauf");
            entity.Property(e => e.Fzfonetizado)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("fzfonetizado");
            entity.Property(e => e.Idpais).HasColumnName("idpais");
            entity.Property(e => e.Nmcidade)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("nmcidade");
        });

        modelBuilder.Entity<FztermoCredenciamento>(entity =>
        {
            entity.HasKey(e => e.TermoCredenciamentoId);

            entity.ToTable("FZTermoCredenciamento", tb => tb.HasComment("Credenciamento de Empresas. Apos Credenciamento a empresa pode cadastrar condutores e veiculos."));

            entity.Property(e => e.TermoCredenciamentoId)
                .ValueGeneratedNever()
                .HasComment("Codigo de Identificacao do Termo de Credenciamento. Inicialmente de Moto-Frete.");
            entity.Property(e => e.TcdtEmissao)
                .HasComment("Data Emissao do Credenciamento do Ponto")
                .HasColumnType("datetime")
                .HasColumnName("TCDtEmissao");
            entity.Property(e => e.TcdtVencto)
                .HasComment("Data de Vencimento da Credencial do Ponto")
                .HasColumnType("datetime")
                .HasColumnName("TCDtVencto");
            entity.Property(e => e.Tcobservacoes)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasComment("Outras informações a respeito do Termo de Credenciamento.")
                .HasColumnName("TCObservacoes");
            entity.Property(e => e.TcpontoId)
                .HasComment("Código de Identificação do Ponto sendo credenciado.")
                .HasColumnName("TCPontoId");

            entity.HasOne(d => d.Tcponto).WithMany(p => p.FztermoCredenciamentos)
                .HasForeignKey(d => d.TcpontoId)
                .HasConstraintName("FK_FZTermoCredenciamento_FZPontos");
        });

        modelBuilder.Entity<FztermoVistorium>(entity =>
        {
            entity.HasKey(e => e.AutIid);

            entity.ToTable("FZTermoVistoria");

            entity.Property(e => e.AutIid)
                .ValueGeneratedNever()
                .HasComment("Código de Identificação do Auto de Infração.")
                .HasColumnName("AutIId");
            entity.Property(e => e.AutiDataEntrada)
                .HasComment("Data de entrada do veículo no pátio.")
                .HasColumnType("datetime")
                .HasColumnName("autiDataEntrada");
            entity.Property(e => e.AutiDataSaida)
                .HasComment("Data da saída do veículo do pátio.")
                .HasColumnType("datetime")
                .HasColumnName("autiDataSaida");
            entity.Property(e => e.AutiDataTermo)
                .HasDefaultValueSql("(0)")
                .HasComment("Data da notificação.")
                .HasColumnType("datetime")
                .HasColumnName("autiDataTermo");
            entity.Property(e => e.AutiRespPatio)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("Nome do responsável pelo pátio onde esta o veículo.")
                .HasColumnName("autiRespPatio");
            entity.Property(e => e.AutiRespRetirada)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("Responsável pela retirada do veículo do pátio.")
                .HasColumnName("autiRespRetirada");
            entity.Property(e => e.AutiRespVeiculo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("autiRespVeiculo");
            entity.Property(e => e.VistId)
                .HasComment("Código de identificação da vistoria.")
                .HasColumnName("VistID");

            entity.HasOne(d => d.AutI).WithOne(p => p.FztermoVistorium)
                .HasForeignKey<FztermoVistorium>(d => d.AutIid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FZTermoVistoria_FZAutoInfracoes");

            entity.HasOne(d => d.Vist).WithMany(p => p.FztermoVistoria)
                .HasForeignKey(d => d.VistId)
                .HasConstraintName("FK_FZTermoVistoria_FZVistoriaVeiculos");
        });

        modelBuilder.Entity<FztipoCredencial>(entity =>
        {
            entity.HasKey(e => e.CredenTipoId);

            entity.ToTable("FZTipoCredencial");

            entity.Property(e => e.CredenTipoId)
                .ValueGeneratedNever()
                .HasComment("Código de Identificação do Tipo de Credenciamento");
            entity.Property(e => e.CredenTipoNome)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Descrição do Nome do Tipo de Credenciamento. Podem ser por Empresa [SocioProprietario-Empregado-Turnante] e por Veículo[Permissionario-Colaborador-Auxiliar].");
            entity.Property(e => e.CredencialNomeAnterior)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ExigeCursoCodigo).HasComment("Define se o tipo da Credencial Exige Curso 0-Não Exige Curso para liberacao Credencial. Códigos 1a 5 de Tipo Credencial não utilizados atualmente.");
            entity.Property(e => e.TmpCredTipoAnterior).HasColumnName("tmpCredTipoAnterior");
        });

        modelBuilder.Entity<FztipoCredenciamento>(entity =>
        {
            entity.HasKey(e => e.CredenTipoId);

            entity.ToTable("FZTipoCredenciamento", tb => tb.HasComment("Cadastro e Manutenção de Tipos de Credenciamento"));

            entity.Property(e => e.CredenTipoId)
                .ValueGeneratedNever()
                .HasComment("Código de Identificação do Tipo de Credenciamento");
            entity.Property(e => e.CredenSigla)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CredenTipoNome)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Descrição do Nome do Tipo de Credenciamento. Podem ser por Empresa [SocioProprietario-Empregado-Turnante] e por Veículo[Permissionario-Colaborador-Auxiliar].");
            entity.Property(e => e.CredencialNomeAnterior)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ExigeCursoCodigo).HasComment("Define se o tipo da Credencial Exige Curso 0-Não Exige Curso para liberacao Credencial. Códigos 1a 5 de Tipo Credencial não utilizados atualmente.");
            entity.Property(e => e.Fldeprecated).HasColumnName("fldeprecated");
            entity.Property(e => e.Flexigenrveiculo).HasColumnName("flexigenrveiculo");
            entity.Property(e => e.Flexigeseguro).HasColumnName("flexigeseguro");
            entity.Property(e => e.Flexigevistoria).HasColumnName("flexigevistoria");
            entity.Property(e => e.Flsubtipo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("flsubtipo");
            entity.Property(e => e.Flvenctocredencial).HasColumnName("flvenctocredencial");
            entity.Property(e => e.Flvinculoponto).HasColumnName("flvinculoponto");
            entity.Property(e => e.Flvinculoveiculo).HasColumnName("flvinculoveiculo");
            entity.Property(e => e.Idtipocurso).HasColumnName("idtipocurso");
            entity.Property(e => e.Idtipoveiculo).HasColumnName("idtipoveiculo");
            entity.Property(e => e.TmpCredTipoAnterior).HasColumnName("tmpCredTipoAnterior");
        });

        modelBuilder.Entity<FztipoPonto>(entity =>
        {
            entity.ToTable("FZTipoPonto");

            entity.Property(e => e.FztipoPontoId)
                .ValueGeneratedNever()
                .HasComment("Código de Identificação do Tipo do Ponto")
                .HasColumnName("FZTipoPontoId");
            entity.Property(e => e.FztipoPontoNome)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("Descrição do Tipo do Ponto de Veiculo, definido normalmente pelo Tipo do Veículo como MotoTaxi, Taxi, etc. ")
                .HasColumnName("FZTipoPontoNome");
        });

        modelBuilder.Entity<FztipoVeiculo>(entity =>
        {
            entity.HasKey(e => e.FztipoVeicId);

            entity.ToTable("FZTipoVeiculos");

            entity.Property(e => e.FztipoVeicId)
                .ValueGeneratedNever()
                .HasColumnName("FZTipoVeicId");
            entity.Property(e => e.Dspermissaotipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dspermissaotipo");
            entity.Property(e => e.Dtgravacao)
                .HasColumnType("datetime")
                .HasColumnName("dtgravacao");
            entity.Property(e => e.Dtultalt)
                .HasColumnType("datetime")
                .HasColumnName("dtultalt");
            entity.Property(e => e.Flexigecondutorvistoria).HasColumnName("flexigecondutorvistoria");
            entity.Property(e => e.Flexigeemplacvistoria).HasColumnName("flexigeemplacvistoria");
            entity.Property(e => e.Flexigepermissionario).HasColumnName("flexigepermissionario");
            entity.Property(e => e.Flexigepontovistoria).HasColumnName("flexigepontovistoria");
            entity.Property(e => e.Flexigesegurovistoria).HasColumnName("flexigesegurovistoria");
            entity.Property(e => e.Flutilizanrveiculo).HasColumnName("flutilizanrveiculo");
            entity.Property(e => e.Flvistorialocal)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("flvistorialocal");
            entity.Property(e => e.FztipoVeicNome)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("FZTipoVeicNome");
            entity.Property(e => e.Idusuariogravacao).HasColumnName("idusuariogravacao");
            entity.Property(e => e.Idusuarioultalt).HasColumnName("idusuarioultalt");
            entity.Property(e => e.Nrvigenciameses).HasColumnName("nrvigenciameses");
            entity.Property(e => e.Nrvistoriaprazovencto).HasColumnName("nrvistoriaprazovencto");
        });

        modelBuilder.Entity<FztipoVistorium>(entity =>
        {
            entity.HasKey(e => e.FztipoVistId);

            entity.ToTable("FZTipoVistoria");

            entity.Property(e => e.FztipoVistId)
                .ValueGeneratedNever()
                .HasColumnName("FZTipoVistID");
            entity.Property(e => e.FztipoVistNome)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("FZTipoVistNome");
        });

        modelBuilder.Entity<Fzveiculo>(entity =>
        {
            entity.HasKey(e => e.FzveiId);

            entity.ToTable("FZVeiculos");

            entity.Property(e => e.FzveiId)
                .ValueGeneratedNever()
                .HasComment("Código de Identificação do Veiculo.")
                .HasColumnName("FZVeiID");
            entity.Property(e => e.AnoFabric)
                .HasDefaultValue(0)
                .HasComment("Ano de Fabricação do Veículo.");
            entity.Property(e => e.AnoModelo)
                .HasDefaultValue(0)
                .HasComment("Ano do Modelo do Veículo.");
            entity.Property(e => e.AutiCorInfracao)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Uso Sistema")
                .HasColumnName("autiCorInfracao");
            entity.Property(e => e.Capacidade)
                .HasDefaultValue(0)
                .HasComment("Capacidade do Veículo. Quantidade de Pessoas que o mesmo esta autorizado a transportar, cfe determinação do CONTRAN.");
            entity.Property(e => e.Chassi)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("Os números e letras que compõem a numeração do chassi possuem regras que foram implantadas na década de 80 (ISO 3779) e servem para todos os fabricantes de veículos instalados em qualquer lugar do mundo. No Brasil essa numeração passou a valer a partir de 1986/87 quando as motos começaram a ter dois números gravados iguais para dificultar fraudes. composto de 17 dígitos o VIN (vehicle identification number) é dividido em quatro partes que quando decifradas podem informar dados sobre o fabricante, o modelo e o ano de fabricação.");
            entity.Property(e => e.ChassiRemarcado).HasComment("Indica se o Chassi foi Remarcado. Desgate, Ferrugem, Batida, Roubo ou Furto podem ocasionar danos no Veículo e se esses danos forem na marcação do chassi este pode exigir remarcação.");
            entity.Property(e => e.CidadeId).HasComment("Código de Identificação da Cidade de Emplacamento do Veículo.");
            entity.Property(e => e.CorPredOriginal)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("Cor Predominante do Veículo.");
            entity.Property(e => e.CorPredominante)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("Cor Predominante do Veículo.");
            entity.Property(e => e.EmprArrendatariaId).HasComment("Código de Identificação da Empresa Arrendataria. Pessoa Juridica que por meio de contrato de arrendamento recebe um veiculo, pagando pelo seu uso.");
            entity.Property(e => e.FzclassifVeiId)
                .HasComment("Código de Identificação da Classificação do Veículo. Classificação do Veículo segundo sua atividade comercial como Turismo, Taxi ou Outros.")
                .HasColumnName("FZClassifVeiID");
            entity.Property(e => e.FzcodRenavam)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("Número sob o qual esta inscrito o Veículo no RENAVAM(Registro Nacional de Veículos Automotores).")
                .HasColumnName("FZCodRenavam");
            entity.Property(e => e.FztipoVeicId)
                .HasComment("Código de Identificação do Tipo do Veículo. Classificação do Veículo segundo sua atividade comercial como Turismo, Taxi ou Outros.")
                .HasColumnName("FZTipoVeicID");
            entity.Property(e => e.PaisEmplacamento)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("Nome do País no qual foi emplacado o Veículo.");
            entity.Property(e => e.PaisEmplacamentoCorrigido)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("Nome do País no qual foi emplacado o Veículo.");
            entity.Property(e => e.Placa)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("Número da Placa do Veículo. Placas de identificação de veículos no Brasil são emitidas pelos Departamentos Estaduais de Trânsito (DETRAN) de cada unidade da Federação, seguindo uma sequência única para todo o país.");
            entity.Property(e => e.Potencia)
                .HasDefaultValue(0)
                .HasComment("Potencia do Veículo. Normalmente traduzida em CV(Cavalos Vapor).");
            entity.Property(e => e.PropId).HasComment("Código de Identificação do Proprietario do Veiculo. ");
            entity.Property(e => e.UltimaVistId)
                .HasDefaultValue(0L)
                .HasComment("Código de Identificação da Ultima Vistoria do Veículo.")
                .HasColumnName("UltimaVistID");
            entity.Property(e => e.VeiCombustivel)
                .HasDefaultValue(0)
                .HasComment("Código de Identificação do Combustivel do Veículo.");
            entity.Property(e => e.VeiCorPlaca)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("Cor da placa do veículo. Foztrans utiliza Categorias de Veiculo: Particular, Aluguel ou Nenhuma  (Veículo ainda nao possui Placa). As cores da placa são as designadas para cada catgegoria sendo do Mercosul ou Antgeriores.")
                .HasColumnName("veiCorPlaca");
            entity.Property(e => e.VeiCorPlacaLetraOriginal)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("Cor da placa do veículo, pode ser Branca, Vermelha e etc...")
                .HasColumnName("veiCorPlacaLetraOriginal");
            entity.Property(e => e.VeiDataBaixa)
                .HasComment("Data de Baixa(Desligamento) do veículo.")
                .HasColumnType("datetime")
                .HasColumnName("veiDataBaixa");
            entity.Property(e => e.VeiDataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Data de inclusão do veículo.")
                .HasColumnType("datetime")
                .HasColumnName("veiDataInclusao");
            entity.Property(e => e.VeiDataUltAlt)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Data da Ultima Atualização do Veículo.")
                .HasColumnType("datetime")
                .HasColumnName("veiDataUltAlt");
            entity.Property(e => e.VeiDtLibVistoria)
                .HasComment("Data da Liberação do Veículo para Vistoria")
                .HasColumnType("datetime");
            entity.Property(e => e.VeiEspecie)
                .HasDefaultValue(0)
                .HasComment("Código de Identificação da Especie do Veiculo.");
            entity.Property(e => e.VeiMarca)
                .HasDefaultValue(0)
                .HasComment("Código de Identificação da Marca do Veiculo.");
            entity.Property(e => e.VeiModelo)
                .HasDefaultValue(0)
                .HasComment("Código de Identificação do Modelo do Veiculo.");
            entity.Property(e => e.VeiNumPortas)
                .HasDefaultValue(0)
                .HasComment("Quantidade de portas do carro.")
                .HasColumnName("veiNumPortas");
            entity.Property(e => e.VeiObs)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("veiObs");
            entity.Property(e => e.VeiPaisOrigem)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("País de origem do veículo.")
                .HasColumnName("veiPaisOrigem");
            entity.Property(e => e.VeiPaisOrigemCorrigido)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("País de origem do veículo.")
                .HasColumnName("veiPaisOrigemCorrigido");
            entity.Property(e => e.VeiProcessoId).HasComment("Código de Identificação do Processo ao que se refere o Veículo.");
            entity.Property(e => e.VeiSituacao)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Uso Sistema")
                .HasColumnName("veiSituacao");

            entity.HasOne(d => d.EmprArrendataria).WithMany(p => p.FzveiculoEmprArrendataria)
                .HasForeignKey(d => d.EmprArrendatariaId)
                .HasConstraintName("FK_FZVeiculos_Contribuintes1");

            entity.HasOne(d => d.FzclassifVei).WithMany(p => p.Fzveiculos)
                .HasForeignKey(d => d.FzclassifVeiId)
                .HasConstraintName("FK_FZVeiculos_FZClassificacao");

            entity.HasOne(d => d.FztipoVeic).WithMany(p => p.Fzveiculos)
                .HasForeignKey(d => d.FztipoVeicId)
                .HasConstraintName("FK_FZVeiculos_FZTipoVeiculos");

            entity.HasOne(d => d.Prop).WithMany(p => p.FzveiculoProps)
                .HasForeignKey(d => d.PropId)
                .HasConstraintName("FK_FZVeiculos_Contribuintes");

            entity.HasOne(d => d.VeiCombustivelNavigation).WithMany(p => p.Fzveiculos)
                .HasForeignKey(d => d.VeiCombustivel)
                .HasConstraintName("FK_FZVeiculos_Combustivel");

            entity.HasOne(d => d.VeiEspecieNavigation).WithMany(p => p.Fzveiculos)
                .HasForeignKey(d => d.VeiEspecie)
                .HasConstraintName("FK_FZVeiculos_Especie");

            entity.HasOne(d => d.VeiMarcaNavigation).WithMany(p => p.Fzveiculos)
                .HasForeignKey(d => d.VeiMarca)
                .HasConstraintName("FK_FZVeiculos_Marca");

            entity.HasOne(d => d.VeiModeloNavigation).WithMany(p => p.Fzveiculos)
                .HasForeignKey(d => d.VeiModelo)
                .HasConstraintName("FK_FZVeiculos_Modelo");
        });

        modelBuilder.Entity<FzveiculoPorPonto>(entity =>
        {
            entity.HasKey(e => new { e.FzveiId, e.FzpontoId });

            entity.ToTable("FZVeiculoPorPonto");

            entity.Property(e => e.FzveiId).HasColumnName("FZVeiID");
            entity.Property(e => e.FzpontoId).HasColumnName("FZPontoID");
            entity.Property(e => e.VppNumVeiculo)
                .HasComment("Número de identificação do veículo que é numerado por ponto, com ex.: ponto 1, carro 1, ponto 2, carro 2.")
                .HasColumnName("vppNumVeiculo");
            entity.Property(e => e.VppSitVeiculo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Situacao Veiculo(Proprio / Arrendado / Locado / Outros)")
                .HasColumnName("vppSitVeiculo");

            entity.HasOne(d => d.Fzponto).WithMany(p => p.FzveiculoPorPontos)
                .HasForeignKey(d => d.FzpontoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FZVeiculoPorPonto_FZPontos");

            entity.HasOne(d => d.Fzvei).WithMany(p => p.FzveiculoPorPontos)
                .HasForeignKey(d => d.FzveiId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FZVeiculoPorPonto_FZVeiculos");
        });

        modelBuilder.Entity<FzveiculosEstrangeiro>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("FZVeiculosEstrangeiros");

            entity.Property(e => e.AutiCorInfracao)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("autiCorInfracao");
            entity.Property(e => e.Chassi)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CorPredOriginal)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CorPredominante)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FzclassifVeiId).HasColumnName("FZClassifVeiID");
            entity.Property(e => e.FzcodRenavam)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("FZCodRenavam");
            entity.Property(e => e.FztipoVeicId).HasColumnName("FZTipoVeicID");
            entity.Property(e => e.FzveiId).HasColumnName("FZVeiID");
            entity.Property(e => e.PaisEmplacamento)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PaisEmplacamentoCorrigido)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Placa)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.UltimaVistId).HasColumnName("UltimaVistID");
            entity.Property(e => e.VeiCorPlaca)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("veiCorPlaca");
            entity.Property(e => e.VeiCorPlacaLetraCorrigida)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("veiCorPlacaLetraCorrigida");
            entity.Property(e => e.VeiDataBaixa)
                .HasColumnType("datetime")
                .HasColumnName("veiDataBaixa");
            entity.Property(e => e.VeiDataInclusao)
                .HasColumnType("datetime")
                .HasColumnName("veiDataInclusao");
            entity.Property(e => e.VeiDataUltAlt)
                .HasColumnType("datetime")
                .HasColumnName("veiDataUltAlt");
            entity.Property(e => e.VeiDtLibVistoria).HasColumnType("datetime");
            entity.Property(e => e.VeiNumPortas).HasColumnName("veiNumPortas");
            entity.Property(e => e.VeiPaisOrigem)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("veiPaisOrigem");
            entity.Property(e => e.VeiPaisOrigemCorrigido)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("veiPaisOrigemCorrigido");
            entity.Property(e => e.VeiSituacao)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("veiSituacao");
        });

        modelBuilder.Entity<FzveiculosFoto>(entity =>
        {
            entity.HasKey(e => new { e.VeiId, e.FoveiId });

            entity.ToTable("FZVeiculosFotos");

            entity.Property(e => e.FoveiId).HasColumnName("foveiID");
            entity.Property(e => e.FoveiFoto)
                .HasColumnType("image")
                .HasColumnName("foveiFoto");

            entity.HasOne(d => d.Vei).WithMany(p => p.FzveiculosFotos)
                .HasForeignKey(d => d.VeiId)
                .HasConstraintName("FK_FZVeiculosFotos_FZVeiculos");
        });

        modelBuilder.Entity<FzveiculosMov>(entity =>
        {
            entity.HasKey(e => e.MovVeiId);

            entity.ToTable("FZVeiculosMov");

            entity.HasIndex(e => e.FzveiId, "IX_FZVeiculosMov_FZVeiID");

            entity.HasIndex(e => new { e.FzveiId, e.FztipoMovimento }, "IX_FZVeiculosMov_FZVeiID_FZTipoMovimento");

            entity.Property(e => e.MovVeiId)
                .ValueGeneratedNever()
                .HasComment("Código de Identificação da Movimentação de Veiculos")
                .HasColumnName("MovVeiID");
            entity.Property(e => e.FzmovVeiObs)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasComment("Outras informações a respeito da movimentação do Veículo.")
                .HasColumnName("FZMovVeiObs");
            entity.Property(e => e.FzpontoId)
                .HasComment("Código de Identificação do Ponto ao qual o Veículo pertence.")
                .HasColumnName("FZPontoID");
            entity.Property(e => e.FztipoMovimento)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Tipo da Movimentação do Veículo")
                .HasColumnName("FZTipoMovimento");
            entity.Property(e => e.FzveiId)
                .HasComment("Código de Identificação do Veículo relacionado a este Movimento.")
                .HasColumnName("FZVeiID");
            entity.Property(e => e.MovVeiData)
                .HasComment("Data da Movimentação do Veículo.")
                .HasColumnType("datetime");
            entity.Property(e => e.MovVeiDataFim)
                .HasComment("Data de Termino de Eventos como Cobertura de Seguros ")
                .HasColumnType("datetime");
            entity.Property(e => e.MovVeiDocNum)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("Numero do Decreto de Permissão de funcionamento do veículo ou Número do Seguro do Veiculo.");
            entity.Property(e => e.MovVeiTipoSeguro)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Tipo do Seguro do Veiculo. Pode ser: Apólice ou Declaração.");
            entity.Property(e => e.ProcessoId).HasComment("Código de Identificação do Processo relacionado a este Movimento.");
            entity.Property(e => e.PropId)
                .HasComment("Código de Identificação do Proprietário do Veículo")
                .HasColumnName("PropID");

            entity.HasOne(d => d.Fzvei).WithMany(p => p.FzveiculosMovs)
                .HasForeignKey(d => d.FzveiId)
                .HasConstraintName("FK_FZVeiculosMov_FZVeiculos");

            entity.HasOne(d => d.Prop).WithMany(p => p.FzveiculosMovs)
                .HasForeignKey(d => d.PropId)
                .HasConstraintName("FK_FZVeiculosMov_Contribuintes");
        });

        modelBuilder.Entity<FzveiculosParticulare>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("FZVeiculosParticulares");

            entity.Property(e => e.AutiCorInfracao)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("autiCorInfracao");
            entity.Property(e => e.Chassi)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CorPredOriginal)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CorPredominante)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FzclassifVeiId).HasColumnName("FZClassifVeiID");
            entity.Property(e => e.FzcodRenavam)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("FZCodRenavam");
            entity.Property(e => e.FztipoVeicId).HasColumnName("FZTipoVeicID");
            entity.Property(e => e.FzveiId).HasColumnName("FZVeiID");
            entity.Property(e => e.PaisEmplacamento)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PaisEmplacamentoCorrigido)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Placa)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.UltimaVistId).HasColumnName("UltimaVistID");
            entity.Property(e => e.VeiCorPlaca)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("veiCorPlaca");
            entity.Property(e => e.VeiCorPlacaLetraCorrigida)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("veiCorPlacaLetraCorrigida");
            entity.Property(e => e.VeiDataBaixa)
                .HasColumnType("datetime")
                .HasColumnName("veiDataBaixa");
            entity.Property(e => e.VeiDataInclusao)
                .HasColumnType("datetime")
                .HasColumnName("veiDataInclusao");
            entity.Property(e => e.VeiDataUltAlt)
                .HasColumnType("datetime")
                .HasColumnName("veiDataUltAlt");
            entity.Property(e => e.VeiDtLibVistoria).HasColumnType("datetime");
            entity.Property(e => e.VeiNumPortas).HasColumnName("veiNumPortas");
            entity.Property(e => e.VeiPaisOrigem)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("veiPaisOrigem");
            entity.Property(e => e.VeiPaisOrigemCorrigido)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("veiPaisOrigemCorrigido");
            entity.Property(e => e.VeiSituacao)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("veiSituacao");
        });

        modelBuilder.Entity<FzvistoriaVeiculo>(entity =>
        {
            entity.HasKey(e => e.VistId);

            entity.ToTable("FZVistoriaVeiculos", tb =>
                {
                    tb.HasComment("Cadastro e Manutenção de Vistorias  Efetuadas em Veiculos no Foztrans.");
                    tb.HasTrigger("TgFZVistoriaVeiculosDelete");
                    tb.HasTrigger("TgFZVistoriaVeiculosInsert");
                    tb.HasTrigger("TgFZVistoriaVeiculosUpDate");
                });

            entity.HasIndex(e => e.FzveiId, "IX_FZVistoriaVeiculos_FZVeiID");

            entity.Property(e => e.VistId)
                .ValueGeneratedNever()
                .HasComment("Código de Identificação da Vistoria do Veiculo.")
                .HasColumnName("VistID");
            entity.Property(e => e.Citvdata)
                .HasComment("Data da Inspeção Técnica Veicular. ANTT-Campo em teste e dispensado pelo Elvis em 13/10/2021 16:15 hs")
                .HasColumnType("datetime")
                .HasColumnName("CITVData");
            entity.Property(e => e.CitvdtValidade)
                .HasComment("Data do Vencimento da Inspeção Técnica Veicular. ANTT-Campo em teste e dispensado pelo Elvis em 13/10/2021 16:15 hs")
                .HasColumnType("datetime")
                .HasColumnName("CITVDtValidade");
            entity.Property(e => e.DataGravacao)
                .HasComment("Data da Inserção do Registro")
                .HasColumnType("datetime");
            entity.Property(e => e.DataUltAlt)
                .HasComment("Data da Ultima Alteração do Registro.")
                .HasColumnType("datetime");
            entity.Property(e => e.FiscId)
                .HasComment("Código de identificação do fiscal que efetuou a Vistoria no Veículo.")
                .HasColumnName("FiscID");
            entity.Property(e => e.FzpontoId)
                .HasComment("Código de Identificação do Ponto do Veículo na data da Vistoria.")
                .HasColumnName("FZPontoId");
            entity.Property(e => e.FzproprietarioId)
                .HasComment("Código de Identificação do Proprietário do Veículo na Data da Vistoria.")
                .HasColumnName("FZProprietarioId");
            entity.Property(e => e.FztipoVeicId)
                .HasComment("Tipo do Veiculo sendo Vistoriado. ")
                .HasColumnName("FZTipoVeicId");
            entity.Property(e => e.FztipoVeicNrSeqAnual)
                .HasComment("Numero do Selo de Vistoria ou Numero de Sequencia Anual de Vistorias Emitidas por Tipo de Veículo no Ano.")
                .HasColumnName("FZTipoVeicNrSeqAnual");
            entity.Property(e => e.FztipoVistId)
                .HasComment("Codigo de Identificação do Tipo de Vistoria.")
                .HasColumnName("FZTipoVistID");
            entity.Property(e => e.FzveiId)
                .HasComment("Código de Identificação do Veiculo Vistoriado.")
                .HasColumnName("FZVeiID");
            entity.Property(e => e.SaitvdtValidade)
                .HasComment("Data da Validade do Selo de Aprovação da Inspeção Técnica Veicular. ANTT-Campo em teste e dispensado pelo Elvis em 13/10/2021 16:15 hs")
                .HasColumnType("datetime")
                .HasColumnName("SAITVDtValidade");
            entity.Property(e => e.Saitvnumero)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Numero do Selo de Aprovação da Inspeção Técnica Veicular. ANTT-Campo em teste e dispensado pelo Elvis em 13/10/2021 16:15 hs")
                .HasColumnName("SAITVNumero");
            entity.Property(e => e.UsuarioIdGravacao).HasComment("Código de Identificação do Usuário que Inseriu o Registro.");
            entity.Property(e => e.UsuarioIdUltAlt).HasComment("Código de Identificação do Usuário que Efetuou a Ultima Alteração do Registro.");
            entity.Property(e => e.VistData)
                .HasComment("Data da Vistoria no Veículo.")
                .HasColumnType("datetime");
            entity.Property(e => e.VistDataValidade)
                .HasComment("Data de Validade da Vistoria efetuada em Veiculo.")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Fisc).WithMany(p => p.FzvistoriaVeiculos)
                .HasForeignKey(d => d.FiscId)
                .HasConstraintName("FK_FZVistoriaVeiculos_FZFiscais");

            entity.HasOne(d => d.FztipoVist).WithMany(p => p.FzvistoriaVeiculos)
                .HasForeignKey(d => d.FztipoVistId)
                .HasConstraintName("FK_FZVistoriaVeiculos_FZTipoVistoria");

            entity.HasOne(d => d.Fzvei).WithMany(p => p.FzvistoriaVeiculos)
                .HasForeignKey(d => d.FzveiId)
                .HasConstraintName("FK_FZVistoriaVeiculos_FZVeiculos");
        });

        modelBuilder.Entity<GccCompFamiliar>(entity =>
        {
            entity.HasKey(e => new { e.CompCnpjmembro, e.CompCriId, e.CompSeqId });

            entity.ToTable("gccCompFamiliar");

            entity.Property(e => e.CompCnpjmembro)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CompCNPJMembro");
            entity.Property(e => e.CompCriId).HasColumnName("CompCriID");
            entity.Property(e => e.CompSeqId).HasColumnName("CompSeqID");
            entity.Property(e => e.CompBairro)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompCelular)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompCidade)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompComplemento)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompLocalTrabalho)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompParentesco)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompProfissao)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompRenda).HasColumnType("money");
            entity.Property(e => e.CompRua)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompTelLocTrab)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompUf)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CompUF");

            entity.HasOne(d => d.GccCrianca).WithMany(p => p.GccCompFamiliars)
                .HasForeignKey(d => new { d.CompCnpjmembro, d.CompCriId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_gccCompFamiliar_gccCrianca");
        });

        modelBuilder.Entity<GccCreFase>(entity =>
        {
            entity.HasKey(e => new { e.Cnpjmembro, e.CreId, e.FaseId });

            entity.ToTable("gccCreFase");

            entity.Property(e => e.Cnpjmembro)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CNPJMembro");
            entity.Property(e => e.CreId).HasColumnName("CreID");
            entity.Property(e => e.FaseId).HasColumnName("FaseID");

            entity.HasOne(d => d.GccCreche).WithMany(p => p.GccCreFases)
                .HasForeignKey(d => new { d.Cnpjmembro, d.CreId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_gccCreFase_gccCreche");

            entity.HasOne(d => d.GccFase).WithMany(p => p.GccCreFases)
                .HasForeignKey(d => new { d.Cnpjmembro, d.FaseId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_gccCreFase_gccFases");
        });

        modelBuilder.Entity<GccCreche>(entity =>
        {
            entity.HasKey(e => new { e.CreCnpjmembro, e.CreId }).HasName("PK_Creche");

            entity.ToTable("gccCreche");

            entity.Property(e => e.CreCnpjmembro)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength()
                .HasColumnName("CreCNPJMembro");
            entity.Property(e => e.CreId).HasColumnName("CreID");
            entity.Property(e => e.CreBairro)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.CreCidade)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.CreComplemento)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.CreNome)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.CreRespCargo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.CreRespNome)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.CreRua)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.CreTcreId).HasColumnName("CreTCreID");
            entity.Property(e => e.CreTel)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength();
            entity.Property(e => e.CreUf)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength()
                .HasColumnName("CreUF");

            entity.HasOne(d => d.GccTipoCreche).WithMany(p => p.GccCreches)
                .HasForeignKey(d => new { d.CreCnpjmembro, d.CreTcreId })
                .HasConstraintName("FK_gccCreche_gccTipoCreche");
        });

        modelBuilder.Entity<GccCriCreche>(entity =>
        {
            entity.HasKey(e => new { e.Cnpjmembro, e.CrecheId, e.CriId });

            entity.ToTable("gccCriCreche");

            entity.Property(e => e.Cnpjmembro)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CNPJMembro");
            entity.Property(e => e.CrecheId).HasColumnName("CrecheID");
            entity.Property(e => e.CriId).HasColumnName("CriID");
            entity.Property(e => e.DtCadastro).HasColumnType("datetime");
            entity.Property(e => e.DtDesligamento).HasColumnType("datetime");
            entity.Property(e => e.DtMatricula).HasColumnType("datetime");
            entity.Property(e => e.DtTransferencia).HasColumnType("datetime");
            entity.Property(e => e.FaseId).HasColumnName("FaseID");
            entity.Property(e => e.Situacao)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.GccCrianca).WithMany(p => p.GccCriCreches)
                .HasForeignKey(d => new { d.Cnpjmembro, d.CriId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_gccCriCreche_gccCrianca");

            entity.HasOne(d => d.GccCreFase).WithMany(p => p.GccCriCreches)
                .HasForeignKey(d => new { d.Cnpjmembro, d.CrecheId, d.FaseId })
                .HasConstraintName("FK_gccCriCreche_gccCreFase");
        });

        modelBuilder.Entity<GccCrianca>(entity =>
        {
            entity.HasKey(e => new { e.CriCnpjmembro, e.CriId }).HasName("PK_Crianca");

            entity.ToTable("gccCrianca");

            entity.Property(e => e.CriCnpjmembro)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength()
                .HasColumnName("CriCNPJMembro");
            entity.Property(e => e.CriId).HasColumnName("CriID");
            entity.Property(e => e.CriBairro)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.CriCidade)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.CriComplemento)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.CriDtNasc).HasColumnType("datetime");
            entity.Property(e => e.CriNome)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.CriRua)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.CriSexo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength();
            entity.Property(e => e.CriTelResiden)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.CriUf)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength()
                .HasColumnName("CriUF");
        });

        modelBuilder.Entity<GccFalta>(entity =>
        {
            entity.HasKey(e => new { e.FaltCnpjmembro, e.FaltCrecheId, e.FaltCriId, e.FaltData });

            entity.ToTable("gccFaltas");

            entity.Property(e => e.FaltCnpjmembro)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FaltCNPJMembro");
            entity.Property(e => e.FaltCrecheId).HasColumnName("FaltCrecheID");
            entity.Property(e => e.FaltCriId).HasColumnName("FaltCriID");
            entity.Property(e => e.FaltData).HasColumnType("datetime");
            entity.Property(e => e.FaltMotivo)
                .HasMaxLength(255)
                .IsUnicode(false);

            entity.HasOne(d => d.GccCriCreche).WithMany(p => p.GccFalta)
                .HasForeignKey(d => new { d.FaltCnpjmembro, d.FaltCrecheId, d.FaltCriId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_gccFaltas_gccCriCreche");
        });

        modelBuilder.Entity<GccFase>(entity =>
        {
            entity.HasKey(e => new { e.FaseCnpjmembro, e.FaseId });

            entity.ToTable("gccFases");

            entity.Property(e => e.FaseCnpjmembro)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FaseCNPJMembro");
            entity.Property(e => e.FaseId).HasColumnName("FaseID");
            entity.Property(e => e.FaseDescr)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FaseGrupoId).HasColumnName("FaseGrupoID");

            entity.HasOne(d => d.GccGruposFase).WithMany(p => p.GccFases)
                .HasForeignKey(d => new { d.FaseCnpjmembro, d.FaseGrupoId })
                .HasConstraintName("FK_gccFases_gccGruposFase");
        });

        modelBuilder.Entity<GccFuncCreche>(entity =>
        {
            entity.HasKey(e => new { e.Cnpjmembro, e.CrecheId, e.FuncId });

            entity.ToTable("gccFuncCreche");

            entity.Property(e => e.Cnpjmembro)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CNPJMembro");
            entity.Property(e => e.CrecheId).HasColumnName("CrecheID");
            entity.Property(e => e.FuncId).HasColumnName("FuncID");
            entity.Property(e => e.DtAdmissao).HasColumnType("datetime");
            entity.Property(e => e.DtRecisao).HasColumnType("datetime");

            entity.HasOne(d => d.GccCreche).WithMany(p => p.GccFuncCreches)
                .HasForeignKey(d => new { d.Cnpjmembro, d.CrecheId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_gccFuncCreche_gccCreche");

            entity.HasOne(d => d.GccFuncionario).WithMany(p => p.GccFuncCreches)
                .HasForeignKey(d => new { d.Cnpjmembro, d.FuncId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_gccFuncCreche_gccFuncionarios");
        });

        modelBuilder.Entity<GccFuncionario>(entity =>
        {
            entity.HasKey(e => new { e.FuncCnpjmembro, e.FuncId });

            entity.ToTable("gccFuncionarios");

            entity.Property(e => e.FuncCnpjmembro)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FuncCNPJMembro");
            entity.Property(e => e.FuncId).HasColumnName("FuncID");
            entity.Property(e => e.FuncBairro)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.FuncCargo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FuncCidade)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FuncComplemento)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FuncCpf)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FuncCPF");
            entity.Property(e => e.FuncDtNasc).HasColumnType("datetime");
            entity.Property(e => e.FuncNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FuncRg)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FuncRG");
            entity.Property(e => e.FuncRua)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FuncSexo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FuncTelRec)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.FuncTelRes)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.FuncUf)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FuncUF");
        });

        modelBuilder.Entity<GccGruposFase>(entity =>
        {
            entity.HasKey(e => new { e.GrpCnpjmembro, e.GrupoId });

            entity.ToTable("gccGruposFase");

            entity.Property(e => e.GrpCnpjmembro)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("GrpCNPJMembro");
            entity.Property(e => e.GrupoId).HasColumnName("GrupoID");
            entity.Property(e => e.GrpDescr)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<GccMovtoOcor>(entity =>
        {
            entity.HasKey(e => new { e.MovtoCnpjmembro, e.MovtoId });

            entity.ToTable("gccMovtoOcor");

            entity.Property(e => e.MovtoCnpjmembro)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MovtoCNPJMembro");
            entity.Property(e => e.MovtoId).HasColumnName("MovtoID");
            entity.Property(e => e.MovtoCreId).HasColumnName("MovtoCreID");
            entity.Property(e => e.MovtoCriId).HasColumnName("MovtoCriID");
            entity.Property(e => e.MovtoData).HasColumnType("datetime");
            entity.Property(e => e.MovtoDescr).HasColumnType("text");
            entity.Property(e => e.MovtoTocorId).HasColumnName("MovtoTOcorID");

            entity.HasOne(d => d.GccTipoOcor).WithMany(p => p.GccMovtoOcors)
                .HasForeignKey(d => new { d.MovtoCnpjmembro, d.MovtoTocorId })
                .HasConstraintName("FK_gccMovtoOcor_gccTipoOcor");

            entity.HasOne(d => d.GccCriCreche).WithMany(p => p.GccMovtoOcors)
                .HasForeignKey(d => new { d.MovtoCnpjmembro, d.MovtoCreId, d.MovtoCriId })
                .HasConstraintName("FK_gccMovtoOcor_gccCriCreche");
        });

        modelBuilder.Entity<GccMovtoQuest>(entity =>
        {
            entity.HasKey(e => new { e.MovQstCnpjmembro, e.MovQstCriId, e.MovQstId, e.MovQstPergId });

            entity.ToTable("gccMovtoQuest");

            entity.Property(e => e.MovQstCnpjmembro)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MovQstCNPJMembro");
            entity.Property(e => e.MovQstCriId).HasColumnName("MovQstCriID");
            entity.Property(e => e.MovQstId).HasColumnName("MovQstID");
            entity.Property(e => e.MovQstPergId).HasColumnName("MovQstPergID");
            entity.Property(e => e.MovQstData).HasColumnType("datetime");
            entity.Property(e => e.MovQstRespId).HasColumnName("MovQstRespID");

            entity.HasOne(d => d.GccCrianca).WithMany(p => p.GccMovtoQuests)
                .HasForeignKey(d => new { d.MovQstCnpjmembro, d.MovQstCriId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_gccMovtoQuest_gccCrianca");

            entity.HasOne(d => d.GccResposta).WithMany(p => p.GccMovtoQuests)
                .HasForeignKey(d => new { d.MovQstCnpjmembro, d.MovQstId, d.MovQstPergId, d.MovQstRespId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_gccMovtoQuest_gccRespostas");
        });

        modelBuilder.Entity<GccPergunta>(entity =>
        {
            entity.HasKey(e => new { e.PergCnpjmembro, e.PergQuestId, e.PergId });

            entity.ToTable("gccPerguntas");

            entity.Property(e => e.PergCnpjmembro)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PergCNPJMembro");
            entity.Property(e => e.PergQuestId).HasColumnName("PergQuestID");
            entity.Property(e => e.PergId).HasColumnName("PergID");
            entity.Property(e => e.PergDescricao)
                .HasMaxLength(255)
                .IsUnicode(false);

            entity.HasOne(d => d.GccQuestionario).WithMany(p => p.GccPergunta)
                .HasForeignKey(d => new { d.PergCnpjmembro, d.PergQuestId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_gccPerguntas_gccQuestionarios");
        });

        modelBuilder.Entity<GccPermisso>(entity =>
        {
            entity.HasKey(e => new { e.Cnpjmembro, e.UsuId });

            entity.ToTable("gccPermissoes");

            entity.Property(e => e.Cnpjmembro)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CNPJMembro");
            entity.Property(e => e.UsuId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("UsuID");
            entity.Property(e => e.AcessoTotal)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength();
            entity.Property(e => e.CrecheId).HasColumnName("CrecheID");
        });

        modelBuilder.Entity<GccQuestionario>(entity =>
        {
            entity.HasKey(e => new { e.QuestCnpjmembro, e.QuestId });

            entity.ToTable("gccQuestionarios");

            entity.Property(e => e.QuestCnpjmembro)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("QuestCNPJMembro");
            entity.Property(e => e.QuestId).HasColumnName("QuestID");
            entity.Property(e => e.QuestDescr)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<GccResposta>(entity =>
        {
            entity.HasKey(e => new { e.RespCnpjmembro, e.RespQuestId, e.RespPergId, e.RespId });

            entity.ToTable("gccRespostas");

            entity.Property(e => e.RespCnpjmembro)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RespCNPJMembro");
            entity.Property(e => e.RespQuestId).HasColumnName("RespQuestID");
            entity.Property(e => e.RespPergId).HasColumnName("RespPergID");
            entity.Property(e => e.RespId).HasColumnName("RespID");
            entity.Property(e => e.RespDescrResp)
                .HasMaxLength(255)
                .IsUnicode(false);

            entity.HasOne(d => d.GccPergunta).WithMany(p => p.GccResposta)
                .HasForeignKey(d => new { d.RespCnpjmembro, d.RespQuestId, d.RespPergId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_gccRespostas_gccPerguntas");
        });

        modelBuilder.Entity<GccTipoCreche>(entity =>
        {
            entity.HasKey(e => new { e.TcreCnpjmembro, e.TcreId });

            entity.ToTable("gccTipoCreche");

            entity.Property(e => e.TcreCnpjmembro)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TCreCNPJMembro");
            entity.Property(e => e.TcreId).HasColumnName("TCreID");
            entity.Property(e => e.TcreDescr)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("TCreDescr");
        });

        modelBuilder.Entity<GccTipoOcor>(entity =>
        {
            entity.HasKey(e => new { e.TocorCnpjmembro, e.TocorId });

            entity.ToTable("gccTipoOcor");

            entity.Property(e => e.TocorCnpjmembro)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TOcorCNPJMembro");
            entity.Property(e => e.TocorId).HasColumnName("TOcorID");
            entity.Property(e => e.TocorDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TOcorDescr");
        });

        modelBuilder.Entity<Genero>(entity =>
        {
            entity.ToTable("Genero");

            entity.Property(e => e.GeneroId).ValueGeneratedNever();
            entity.Property(e => e.NmGenero)
                .HasMaxLength(255)
                .IsUnicode(false);

            entity.HasOne(d => d.GrupoBem).WithMany(p => p.Generos)
                .HasForeignKey(d => d.GrupoBemId)
                .HasConstraintName("FK_Genero_GrupoBem");
        });

        modelBuilder.Entity<GeralLembrete>(entity =>
        {
            entity.HasKey(e => e.LembId);

            entity.ToTable("GeralLembrete");

            entity.Property(e => e.LembId).HasColumnName("LembID");
            entity.Property(e => e.LembAssunto)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.LembData)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime");
            entity.Property(e => e.LembLembrar)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength();
            entity.Property(e => e.LembUsuario)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("");

            entity.HasOne(d => d.LembUsuarioNavigation).WithMany(p => p.GeralLembretes)
                .HasForeignKey(d => d.LembUsuario)
                .HasConstraintName("FK_GeralLembrete_Usuarios");
        });

        modelBuilder.Entity<GrupoBem>(entity =>
        {
            entity.ToTable("GrupoBem");

            entity.Property(e => e.GrupoBemId)
                .ValueGeneratedNever()
                .HasComment("Bens Permanentes ou Material de Consumo");
            entity.Property(e => e.GrupoBemNome)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<GrupoBem1402>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("GrupoBem1402");

            entity.Property(e => e.GrupoBemNome)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<GrupoContribuinteConcessaoImovei>(entity =>
        {
            entity.HasKey(e => new { e.IdContratoConcessao, e.ConId }).HasName("PK_GrupoContribuinteLocacaoImoveis");

            entity.Property(e => e.IdContratoConcessao).HasColumnName("idContratoConcessao");
            entity.Property(e => e.ConId).HasColumnName("ConID");

            entity.HasOne(d => d.Con).WithMany(p => p.GrupoContribuinteConcessaoImoveis)
                .HasForeignKey(d => d.ConId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GrupoContribuinteLocacaoImoveis_Contribuintes");
        });

        modelBuilder.Entity<GrupoFrotasDepuDespesa>(entity =>
        {
            entity.HasKey(e => e.GfddidDespesa);

            entity.ToTable("GrupoFrotasDepuDespesa");

            entity.Property(e => e.GfddidDespesa)
                .ValueGeneratedNever()
                .HasColumnName("GFDDIdDespesa");
            entity.Property(e => e.GfddanoDespesa).HasColumnName("GFDDAnoDespesa");
            entity.Property(e => e.GfddcnpjFilial)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("GFDDCnpjFilial");
            entity.Property(e => e.GfdddataDespesa)
                .HasColumnType("datetime")
                .HasColumnName("GFDDDataDespesa");
            entity.Property(e => e.GfddnumDespesa).HasColumnName("GFDDNumDespesa");
            entity.Property(e => e.GfddtipoDespesa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("GFDDTipoDespesa");
            entity.Property(e => e.GfddvalorDespesa)
                .HasColumnType("money")
                .HasColumnName("GFDDValorDespesa");
            entity.Property(e => e.GfddveiculoId).HasColumnName("GFDDVeiculoId");
        });

        modelBuilder.Entity<GrupoImobensDepuDespesa>(entity =>
        {
            entity.HasKey(e => e.IdGrupoDespesa).HasName("PK_GrupoDepuDespesa");

            entity.ToTable("GrupoImobensDepuDespesa");

            entity.Property(e => e.IdGrupoDespesa)
                .ValueGeneratedNever()
                .HasColumnName("idGrupoDespesa");
            entity.Property(e => e.CnpjFilial)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("cnpjFilial");
            entity.Property(e => e.DePuTipoDespesa)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DepuValor).HasColumnType("money");
            entity.Property(e => e.ImoInscricao)
                .HasMaxLength(30)
                .IsUnicode(false);

            entity.HasOne(d => d.ImobensImovei).WithMany(p => p.GrupoImobensDepuDespesas)
                .HasForeignKey(d => new { d.CnpjFilial, d.ImoInscricao })
                .HasConstraintName("FK_GrupoImobensDepuDespesa_ImobensImoveis");
        });

        modelBuilder.Entity<GrupoImobensMovimento>(entity =>
        {
            entity.HasKey(e => e.IdGrupoImobensMov);

            entity.ToTable("GrupoImobensMovimento");

            entity.Property(e => e.IdGrupoImobensMov)
                .ValueGeneratedNever()
                .HasColumnName("idGrupoImobensMov");
            entity.Property(e => e.ImoCnpjFilial)
                .HasMaxLength(14)
                .IsUnicode(false);
            entity.Property(e => e.ImoInscricao)
                .HasMaxLength(30)
                .IsUnicode(false);

            entity.HasOne(d => d.MovImoNumLancNavigation).WithMany(p => p.GrupoImobensMovimentos)
                .HasForeignKey(d => d.MovImoNumLanc)
                .HasConstraintName("FK_GrupoImobensMovimento_ImobensMovimento");

            entity.HasOne(d => d.ImobensImovei).WithMany(p => p.GrupoImobensMovimentos)
                .HasForeignKey(d => new { d.ImoCnpjFilial, d.ImoInscricao })
                .HasConstraintName("FK_GrupoImobensMovimento_ImobensImoveis");
        });

        modelBuilder.Entity<GrupoImoveisContribuinte>(entity =>
        {
            entity.HasKey(e => new { e.ImoCnpjfilial, e.ImoInscricao, e.ConId });

            entity.Property(e => e.ImoCnpjfilial)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("ImoCNPJFilial");
            entity.Property(e => e.ImoInscricao)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ConId).HasColumnName("ConID");

            entity.HasOne(d => d.ImobensImovei).WithMany(p => p.GrupoImoveisContribuintes)
                .HasForeignKey(d => new { d.ImoCnpjfilial, d.ImoInscricao })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GrupoImoveisContribuintes_ImobensImoveis");
        });

        modelBuilder.Entity<GrupoMoveisDepuDespesa>(entity =>
        {
            entity.HasKey(e => e.GmddidDespesa);

            entity.ToTable("GrupoMoveisDepuDespesa");

            entity.Property(e => e.GmddidDespesa)
                .ValueGeneratedNever()
                .HasColumnName("GMDDIdDespesa");
            entity.Property(e => e.GmddanoDespesa).HasColumnName("GMDDAnoDespesa");
            entity.Property(e => e.GmddcnpjFilial)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("GMDDCnpjFilial");
            entity.Property(e => e.GmdddataDespesa)
                .HasColumnType("datetime")
                .HasColumnName("GMDDDataDespesa");
            entity.Property(e => e.GmddmovEquipId).HasColumnName("GMDDMovEquipId");
            entity.Property(e => e.GmddnumDespesa).HasColumnName("GMDDNumDespesa");
            entity.Property(e => e.GmddtipoDespesa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("GMDDTipoDespesa");
            entity.Property(e => e.GmddvalorDespesa)
                .HasColumnType("money")
                .HasColumnName("GMDDValorDespesa");
        });

        modelBuilder.Entity<GruposServico>(entity =>
        {
            entity.HasKey(e => e.GsvId);

            entity.Property(e => e.GsvId).HasColumnName("GsvID");
            entity.Property(e => e.GsvNome)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<HabAtendimento>(entity =>
        {
            entity.HasKey(e => e.AtendimentoId);

            entity.ToTable("HabAtendimento");

            entity.Property(e => e.AtendimentoId).ValueGeneratedNever();
            entity.Property(e => e.DtAtendimento).HasColumnType("datetime");
            entity.Property(e => e.DtInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasComment("")
                .HasColumnType("datetime");
            entity.Property(e => e.DtPrevAtendimento).HasColumnType("datetime");
            entity.Property(e => e.DtUltAltAnexLote)
                .HasComment("Data que o contribuinte escolheu aquele lote para  utilização.")
                .HasColumnType("datetime");
            entity.Property(e => e.InscricaoImobiliaria)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Observacao)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.PessoasMoradia).HasComment("Quantas Pessoas habitam na moradia");
            entity.Property(e => e.Situacao)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Agendado, Atendido,Ausente");
            entity.Property(e => e.TipoContribuinte)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("Normal, Grávida, Idoso");
            entity.Property(e => e.UsuId)
                .HasMaxLength(255)
                .IsUnicode(false);

            entity.HasOne(d => d.Con).WithMany(p => p.HabAtendimentos)
                .HasForeignKey(d => d.ConId)
                .HasConstraintName("FK_HabAtendimento_Contribuintes");

            entity.HasOne(d => d.IdRegiaoNavigation).WithMany(p => p.HabAtendimentos)
                .HasForeignKey(d => d.IdRegiao)
                .HasConstraintName("FK_HabAtendimento_Regioes");

            entity.HasOne(d => d.TipoAtendimento).WithMany(p => p.HabAtendimentos)
                .HasForeignKey(d => d.TipoAtendimentoId)
                .HasConstraintName("FK_HabAtendimento_HabTipoAtendimento");

            entity.HasOne(d => d.Usu).WithMany(p => p.HabAtendimentos)
                .HasForeignKey(d => d.UsuId)
                .HasConstraintName("FK_HabAtendimento_Usuarios");
        });

        modelBuilder.Entity<HabCruzamentoLogr>(entity =>
        {
            entity.HasKey(e => new { e.Chave1, e.Chave2 });

            entity.ToTable("HabCruzamentoLogr");

            entity.Property(e => e.Chave1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CHAVE1");
            entity.Property(e => e.Chave2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CHAVE2");
            entity.Property(e => e.Gx).HasColumnName("GX");
            entity.Property(e => e.Gy).HasColumnName("GY");

            entity.HasOne(d => d.Chave1Navigation).WithMany(p => p.HabCruzamentoLogrChave1Navigations)
                .HasForeignKey(d => d.Chave1)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_HabCruzamentoLogr_HabFoneticoLogr");

            entity.HasOne(d => d.Chave2Navigation).WithMany(p => p.HabCruzamentoLogrChave2Navigations)
                .HasForeignKey(d => d.Chave2)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_HabCruzamentoLogr_HabFoneticoLogr1");
        });

        modelBuilder.Entity<HabDocApresentado>(entity =>
        {
            entity.HasKey(e => e.DocApresentadosId);

            entity.Property(e => e.DocApresentadosId).ValueGeneratedNever();
            entity.Property(e => e.DocAprNumero)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.DocDtAnexacao).HasColumnType("datetime");
            entity.Property(e => e.UsuId)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasComment("Usuário que efetuou a anexação do documento");

            entity.HasOne(d => d.Atendimento).WithMany(p => p.HabDocApresentados)
                .HasForeignKey(d => d.AtendimentoId)
                .HasConstraintName("FK_HabDocApresentados_HabAtendimento");

            entity.HasOne(d => d.Documento).WithMany(p => p.HabDocApresentados)
                .HasForeignKey(d => d.DocumentoId)
                .HasConstraintName("FK_HabDocApresentados_HabDocumento");

            entity.HasOne(d => d.Usu).WithMany(p => p.HabDocApresentados)
                .HasForeignKey(d => d.UsuId)
                .HasConstraintName("FK_HabDocApresentados_Usuarios");
        });

        modelBuilder.Entity<HabDocumento>(entity =>
        {
            entity.HasKey(e => e.DocumentoId);

            entity.ToTable("HabDocumento");

            entity.Property(e => e.DocumentoId).ValueGeneratedNever();
            entity.Property(e => e.DocAutenticado)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("HÁ exigencia que o documento seja autenticado");
            entity.Property(e => e.DocNome)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DocObservacao)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.DocOrigem)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DocOriginal)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Há exigencia que o documento seja original");
            entity.Property(e => e.DocTipoOrigem)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<HabFeriado>(entity =>
        {
            entity.HasKey(e => e.FerId);

            entity.Property(e => e.FerId)
                .ValueGeneratedNever()
                .HasColumnName("ferID");
            entity.Property(e => e.FerData)
                .HasColumnType("datetime")
                .HasColumnName("ferData");
            entity.Property(e => e.FerDescricao)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("ferDescricao");
            entity.Property(e => e.FerStatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ferStatus");
            entity.Property(e => e.FerTipo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ferTipo");
        });

        modelBuilder.Entity<HabFoneticoLogr>(entity =>
        {
            entity.HasKey(e => e.Chave);

            entity.ToTable("HabFoneticoLogr");

            entity.Property(e => e.Chave)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CHAVE");
            entity.Property(e => e.Fonetico)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("FONETICO");
            entity.Property(e => e.Rua)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("RUA");
        });

        modelBuilder.Entity<HabLotesAtendimento>(entity =>
        {
            entity.HasKey(e => e.InscricaoImobiliaria);

            entity.ToTable("HabLotesAtendimento");

            entity.Property(e => e.InscricaoImobiliaria)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DtCadastro).HasColumnType("datetime");
            entity.Property(e => e.ImobiliariaOrigem)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Observacao)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.UsuId)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ValorTerreno).HasColumnType("money");

            entity.HasOne(d => d.Usu).WithMany(p => p.HabLotesAtendimentos)
                .HasForeignKey(d => d.UsuId)
                .HasConstraintName("FK_HabLotesAtendimento_Usuarios");
        });

        modelBuilder.Entity<HabLotesAtendimentoSc>(entity =>
        {
            entity.HasKey(e => e.InscricaoImobiliaria);

            entity.ToTable("HabLotesAtendimentoSC");

            entity.Property(e => e.InscricaoImobiliaria)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DtCadastro).HasColumnType("datetime");
            entity.Property(e => e.ImobiliariaOrigem)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Observacao)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.UsuId)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ValorTerreno).HasColumnType("money");
        });

        modelBuilder.Entity<HabOpcaoMoradium>(entity =>
        {
            entity.HasKey(e => e.OpcaoMoradiaId);

            entity.Property(e => e.OpcaoMoradiaId).ValueGeneratedNever();

            entity.HasOne(d => d.Atendimento).WithMany(p => p.HabOpcaoMoradia)
                .HasForeignKey(d => d.AtendimentoId)
                .HasConstraintName("FK_HabOpcaoMoradia_HabAtendimento");

            entity.HasOne(d => d.IdRegiaoNavigation).WithMany(p => p.HabOpcaoMoradia)
                .HasForeignKey(d => d.IdRegiao)
                .HasConstraintName("FK_HabOpcaoMoradia_Regioes");
        });

        modelBuilder.Entity<HabProblema>(entity =>
        {
            entity.HasKey(e => e.ProblemaId);

            entity.Property(e => e.ProblemaId).ValueGeneratedNever();
            entity.Property(e => e.ProbDescricao)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ProbObservacao)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<HabProblemasAtendimento>(entity =>
        {
            entity.HasKey(e => new { e.AtendimentoId, e.ProblemaId });

            entity.Property(e => e.DtProbAtendimento)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.UsuId)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasComment("Usuário que efetuou a manutenção do problema do atendimento");

            entity.HasOne(d => d.Atendimento).WithMany(p => p.HabProblemasAtendimentos)
                .HasForeignKey(d => d.AtendimentoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_HabProblemasAtendimentos_HabAtendimento");

            entity.HasOne(d => d.Problema).WithMany(p => p.HabProblemasAtendimentos)
                .HasForeignKey(d => d.ProblemaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_HabProblemasAtendimentos_HabProblemas");
        });

        modelBuilder.Entity<HabProgrAtendimento>(entity =>
        {
            entity.HasKey(e => e.ProgrAtendimentoId);

            entity.ToTable("HabProgrAtendimento");

            entity.Property(e => e.ProgrAtendimentoId).ValueGeneratedNever();
            entity.Property(e => e.HoraFinal).HasColumnType("datetime");
            entity.Property(e => e.HoraInicial).HasColumnType("datetime");
        });

        modelBuilder.Entity<HabTipoAtendimento>(entity =>
        {
            entity.HasKey(e => e.TipoAtendimentoId);

            entity.ToTable("HabTipoAtendimento");

            entity.Property(e => e.TipoAtendimentoId).ValueGeneratedNever();
            entity.Property(e => e.NmAtendimento)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Aquisicao Casa Própria, etc");
            entity.Property(e => e.Observacao)
                .HasMaxLength(255)
                .IsUnicode(false);

            entity.HasMany(d => d.Documentos).WithMany(p => p.TipoAtendimentos)
                .UsingEntity<Dictionary<string, object>>(
                    "HabDocAtendimento",
                    r => r.HasOne<HabDocumento>().WithMany()
                        .HasForeignKey("DocumentoId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_HabDocAtendimento_HabDocumento"),
                    l => l.HasOne<HabTipoAtendimento>().WithMany()
                        .HasForeignKey("TipoAtendimentoId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_HabDocAtendimento_HabTipoAtendimento"),
                    j =>
                    {
                        j.HasKey("TipoAtendimentoId", "DocumentoId");
                        j.ToTable("HabDocAtendimento");
                    });
        });

        modelBuilder.Entity<HorariosMaisUtilizado>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("HorariosMaisUtilizados");

            entity.Property(e => e.LcDataIni).HasColumnType("datetime");
            entity.Property(e => e.LcHorarioFim)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LcHorarioIni)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LcValorLocacao).HasColumnType("money");
            entity.Property(e => e.LocId).HasColumnName("LocID");
            entity.Property(e => e.LocNome)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.SubLocNome)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ImobensImovei>(entity =>
        {
            entity.HasKey(e => new { e.ImoCnpjfilial, e.ImoInscricao });

            entity.Property(e => e.ImoCnpjfilial)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("ImoCNPJFilial");
            entity.Property(e => e.ImoInscricao)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ImoAreaTotal).HasColumnType("money");
            entity.Property(e => e.ImoCdTombamento)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ImoCep)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ImoComplemento)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ImoDescricao)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ImoDtIncorporacao).HasColumnType("datetime");
            entity.Property(e => e.ImoEstCons)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ImoImgImovel).HasColumnType("image");
            entity.Property(e => e.ImoLogradouro)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ImoModAid).HasColumnName("ImoModAID");
            entity.Property(e => e.ImoNumMatricula)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ImoObservacao)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ImoTipoArea)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ImoTipoAreaIdtipoArea).HasColumnName("ImoTipoAreaIDTipoArea");
            entity.Property(e => e.ImoTpImoId).HasColumnName("ImoTpImoID");
            entity.Property(e => e.ImoValor).HasColumnType("money");
            entity.Property(e => e.ImoVlrAtual).HasColumnType("money");

            entity.HasOne(d => d.ImoIdLoteamentoNavigation).WithMany(p => p.ImobensImoveis)
                .HasForeignKey(d => d.ImoIdLoteamento)
                .HasConstraintName("FK_ImobensImoveis_Loteamentos");

            entity.HasOne(d => d.ImoModA).WithMany(p => p.ImobensImoveis)
                .HasForeignKey(d => d.ImoModAid)
                .HasConstraintName("FK_ImobensImoveis_ModoAquisicao");

            entity.HasOne(d => d.ImoTipoAreaIdtipoAreaNavigation).WithMany(p => p.ImobensImoveis)
                .HasForeignKey(d => d.ImoTipoAreaIdtipoArea)
                .HasConstraintName("FK_ImobensImoveis_tbImoTipoArea");

            entity.HasOne(d => d.ImoTpImo).WithMany(p => p.ImobensImoveis)
                .HasForeignKey(d => d.ImoTpImoId)
                .HasConstraintName("FK_ImobensImoveis_TipoImovel");
        });

        modelBuilder.Entity<ImobensLoteamento>(entity =>
        {
            entity.HasKey(e => e.IdLoteamento);

            entity.Property(e => e.IdLoteamento).ValueGeneratedNever();
            entity.Property(e => e.Descricao)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.Idregiao).HasColumnName("IDRegiao");
        });

        modelBuilder.Entity<ImobensMovimento>(entity =>
        {
            entity.HasKey(e => e.MovImoNumLanc);

            entity.ToTable("ImobensMovimento");

            entity.Property(e => e.MovImoNumLanc).ValueGeneratedNever();
            entity.Property(e => e.MovImoFuncionario)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.MovImoInscricao)
                .HasMaxLength(14)
                .IsUnicode(false);
            entity.Property(e => e.MovImoMetragem).HasColumnType("money");
            entity.Property(e => e.MovImoOcupacao)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.MovImoTransacao)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.MovImodtMov).HasColumnType("datetime");
        });

        modelBuilder.Entity<ImobensRegio>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.Descricao).HasMaxLength(40);
            entity.Property(e => e.Idregiao).HasColumnName("IDRegiao");
        });

        modelBuilder.Entity<ImobensUsuario>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ImobensUsuario");

            entity.Property(e => e.UsuAcesso)
                .HasMaxLength(25)
                .HasColumnName("usuAcesso");
            entity.Property(e => e.UsuCodUsuario).HasColumnName("usuCodUsuario");
            entity.Property(e => e.UsuDtCad)
                .HasColumnType("smalldatetime")
                .HasColumnName("usuDtCad");
            entity.Property(e => e.UsuNomeUsuario)
                .HasMaxLength(40)
                .HasColumnName("usuNomeUsuario");
            entity.Property(e => e.UsuSenha)
                .HasMaxLength(20)
                .HasColumnName("usuSenha");
        });

        modelBuilder.Entity<Imovei>(entity =>
        {
            entity.HasKey(e => new { e.ImoCnpjfilial, e.ImoInscricao });

            entity.Property(e => e.ImoCnpjfilial)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ImoCNPJFilial");
            entity.Property(e => e.ImoInscricao)
                .HasMaxLength(14)
                .IsUnicode(false);
            entity.Property(e => e.DePuTipoDespesa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Tipo da Despesa = 'Orçamentária' ou 'Extra-Orçamentária'");
            entity.Property(e => e.DtIncorporacao).HasColumnType("datetime");
            entity.Property(e => e.ImoAreaTotal).HasColumnType("money");
            entity.Property(e => e.ImoDtcad)
                .HasColumnType("datetime")
                .HasColumnName("ImoDTCad");
            entity.Property(e => e.ImoIdlotAnterior).HasColumnName("ImoIDLotAnterior");
            entity.Property(e => e.ImoIdloteamento).HasColumnName("ImoIDLoteamento");
            entity.Property(e => e.ImoImgImovel).HasColumnType("image");
            entity.Property(e => e.ImoNumMatricula)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ImoObservacao)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ImoTipoArea)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.TpImovelId).HasColumnName("TpImovelID");
            entity.Property(e => e.ValorImovel).HasColumnType("money");

            entity.HasOne(d => d.ImoCnpjfilialNavigation).WithMany(p => p.Imoveis)
                .HasForeignKey(d => d.ImoCnpjfilial)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Imoveis_Membros");

            entity.HasOne(d => d.ImoIdloteamentoNavigation).WithMany(p => p.Imoveis)
                .HasForeignKey(d => d.ImoIdloteamento)
                .HasConstraintName("FK_Imoveis_Loteamentos");

            entity.HasOne(d => d.TpImovel).WithMany(p => p.Imoveis)
                .HasForeignKey(d => d.TpImovelId)
                .HasConstraintName("FK_Imoveis_TipoImovel");
        });

        modelBuilder.Entity<ImoveisIsentos2006>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ImoveisIsentos2006");

            entity.Property(e => e.EdifAreaCoberta).HasColumnType("money");
            entity.Property(e => e.EdifAreaConstruida).HasColumnType("money");
            entity.Property(e => e.InscricaoImobiliaria)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TipoBxId).HasColumnName("TipoBxID");
            entity.Property(e => e.TipoBxNome)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<InexistenciaDocumentoPessoa>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("InexistenciaDocumentoPessoa");

            entity.Property(e => e.Column0)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 0");
            entity.Property(e => e.Column1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 1");
            entity.Property(e => e.Column2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 2");
            entity.Property(e => e.Column3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 3");
            entity.Property(e => e.Column4)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 4");
            entity.Property(e => e.Column5)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 5");
            entity.Property(e => e.Column6)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 6");
            entity.Property(e => e.Column7)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 7");
            entity.Property(e => e.Column8)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 8");
        });

        modelBuilder.Entity<Inscr>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("inscr");

            entity.Property(e => e.Inscricao)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<InscricaoDafoztran>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("InscricaoDAFoztrans");

            entity.Property(e => e.Ano)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DataBaixa)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DataDeGeração)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Data de Geração");
            entity.Property(e => e.Documento)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IdTributo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Mês)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NomeDevedor)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Nome Devedor");
            entity.Property(e => e.NomeDoTributo)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Nome do tributo");
            entity.Property(e => e.Observação)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Parcela)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.QtdeBaixa)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Situação)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubDivida)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Sub divida");
            entity.Property(e => e.TipoDocumento)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Tipo Documento");
            entity.Property(e => e.Usuário)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ValorBaixa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Valor Baixa");
            entity.Property(e => e.ValorCorreção)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Valor Correção");
            entity.Property(e => e.ValorDesconto)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Valor Desconto");
            entity.Property(e => e.ValorJuros)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Valor Juros");
            entity.Property(e => e.ValorMulta)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Valor Multa");
            entity.Property(e => e.ValorMultaDa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Valor Multa DA");
            entity.Property(e => e.ValorPrincipal)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Valor Principal");
            entity.Property(e => e.ValorTotal)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Valor Total");
            entity.Property(e => e.Vencimento)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<InscricoesRelReginaldo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Inscricoes_RelReginaldo");

            entity.Property(e => e.Inscricao).HasMaxLength(50);
        });

        modelBuilder.Entity<InscricoesSuspender>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("InscricoesSuspender");

            entity.Property(e => e.Inscricao)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("inscricao");
        });

        modelBuilder.Entity<ItensManutencao>(entity =>
        {
            entity.HasKey(e => new { e.ItMveiculoId, e.ItMcompServId });

            entity.ToTable("ItensManutencao");

            entity.Property(e => e.ItMveiculoId).HasColumnName("ItMVeiculoId");
            entity.Property(e => e.ItMcompServId).HasColumnName("ItMCompServId");
            entity.Property(e => e.ItMdtProxManutencao)
                .HasColumnType("datetime")
                .HasColumnName("ItMDtProxManutencao");
            entity.Property(e => e.ItMdtUltManutencao)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("ItMDtUltManutencao");
            entity.Property(e => e.ItMduracaoKm)
                .HasDefaultValue(0L)
                .HasColumnName("ItMDuracaoKm");
            entity.Property(e => e.ItMproxManutencaoKm)
                .HasDefaultValue(0L)
                .HasColumnName("ItMProxManutencaoKm");
            entity.Property(e => e.ItMultManutencaoKm)
                .HasDefaultValue(0L)
                .HasColumnName("ItMUltManutencaoKm");

            entity.HasOne(d => d.ItMcompServ).WithMany(p => p.ItensManutencaos)
                .HasForeignKey(d => d.ItMcompServId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ItensManutencao_ComponentesServicos");

            entity.HasOne(d => d.ItMveiculo).WithMany(p => p.ItensManutencaos)
                .HasForeignKey(d => d.ItMveiculoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ItensManutencao_Veiculos");
        });

        modelBuilder.Entity<ItensManutencaoMovEquip>(entity =>
        {
            entity.HasKey(e => new { e.MovEquipId, e.CompServId });

            entity.ToTable("ItensManutencaoMovEquip");

            entity.Property(e => e.MovEquipId).HasColumnName("MovEquipID");
            entity.Property(e => e.DataManutencao)
                .HasDefaultValueSql("(0)")
                .HasColumnType("datetime");
            entity.Property(e => e.DtProxManut).HasColumnType("datetime");
            entity.Property(e => e.ValDuracaoDias).HasDefaultValue(0);

            entity.HasOne(d => d.CompServ).WithMany(p => p.ItensManutencaoMovEquips)
                .HasForeignKey(d => d.CompServId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ItensManutencaoMovEquip_ComponentesServicos");

            entity.HasOne(d => d.MovEquip).WithMany(p => p.ItensManutencaoMovEquips)
                .HasForeignKey(d => d.MovEquipId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ItensManutencaoMovEquip_MoveisEquipamentos");
        });

        modelBuilder.Entity<LimpezaPublica>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("limpeza-publica");

            entity.Property(e => e.Coluna0)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Coluna 0");
            entity.Property(e => e.Coluna1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Coluna 1");
        });

        modelBuilder.Entity<LocAtividade>(entity =>
        {
            entity.HasKey(e => e.AtividadeId).HasName("PK_ScgAtividade");

            entity.ToTable("LocAtividade");

            entity.Property(e => e.AtividadeId).ValueGeneratedNever();
            entity.Property(e => e.AtivDescricao)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AtivDtUltAlt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AtivTecUltAlt)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");
        });

        modelBuilder.Entity<LocBaixa>(entity =>
        {
            entity.HasKey(e => e.BxaId).HasName("PK_ScgBaixa");

            entity.ToTable("LocBaixa", tb =>
                {
                    tb.HasTrigger("TgLocBaixaDelete");
                    tb.HasTrigger("TgLocBaixaInsert");
                    tb.HasTrigger("TgLocBaixaUpdate");
                });

            entity.Property(e => e.BxaAgenciaId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BxaBancoId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BxaDataBaixa).HasColumnType("datetime");
            entity.Property(e => e.BxaDtUltAlt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.BxaNossoNumero)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BxaOrigem)
                .HasMaxLength(11)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BxaTecUltAlt)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");
            entity.Property(e => e.BxaValorPago).HasColumnType("money");
            entity.Property(e => e.BxaVlraPagar).HasColumnType("money");

            entity.HasOne(d => d.BxaNossoNumeroNavigation).WithMany(p => p.LocBaixas)
                .HasForeignKey(d => d.BxaNossoNumero)
                .HasConstraintName("FK_ScgBaixa_ScgBoleto");
        });

        modelBuilder.Entity<LocBoleto>(entity =>
        {
            entity.HasKey(e => e.BolNossoNumero).HasName("PK_ScgBoleto");

            entity.ToTable("LocBoleto");

            entity.Property(e => e.BolNossoNumero)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("bolNossoNumero");
            entity.Property(e => e.BolCodBarra)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("bolCodBarra");
            entity.Property(e => e.BolDataLimite).HasColumnType("datetime");
            entity.Property(e => e.BolDtUltAlt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("bolDtUltAlt");
            entity.Property(e => e.BolLinhaDigitavel)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("bolLinhaDigitavel");
            entity.Property(e => e.BolTecUltAlt)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())")
                .HasColumnName("bolTecUltAlt");
            entity.Property(e => e.BolVencimento)
                .HasColumnType("datetime")
                .HasColumnName("bolVencimento");
            entity.Property(e => e.BolVlrCorrM)
                .HasColumnType("money")
                .HasColumnName("bolVlrCorrM");
            entity.Property(e => e.BolVlrDivida)
                .HasColumnType("money")
                .HasColumnName("bolVlrDivida");
            entity.Property(e => e.BolVlrJuros)
                .HasColumnType("money")
                .HasColumnName("bolVlrJuros");
            entity.Property(e => e.BolVlrMulta)
                .HasColumnType("money")
                .HasColumnName("bolVlrMulta");

            entity.HasOne(d => d.BolConvenio).WithMany(p => p.LocBoletos)
                .HasForeignKey(d => d.BolConvenioId)
                .HasConstraintName("FK_LocBoleto_ConvenioBco");
        });

        modelBuilder.Entity<LocContribuinte>(entity =>
        {
            entity.HasKey(e => e.ContribuinteId);

            entity.ToTable("LocContribuinte");

            entity.Property(e => e.ContribuinteId).ValueGeneratedNever();
            entity.Property(e => e.ConBairro)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ConCep)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength()
                .HasColumnName("ConCEP");
            entity.Property(e => e.ConCidade)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ConCnpjcpf)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength()
                .HasColumnName("ConCNPJCPF");
            entity.Property(e => e.ConComplemento)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ConDtNasc).HasColumnType("datetime");
            entity.Property(e => e.ConDtUltAlt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ConEmail)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ConEMail");
            entity.Property(e => e.ConEndereco)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ConEstadoCivil)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ConNacionalidade)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ConNome)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ConNumero)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ConProfissao)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ConRespNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ConRespRg)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ConRespRG");
            entity.Property(e => e.ConRg)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("ConRG");
            entity.Property(e => e.ConSexo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ConTecUltAlt)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");
            entity.Property(e => e.ConTelefones)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ConTipoLograd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ConUf)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength()
                .HasColumnName("ConUF");
        });

        modelBuilder.Entity<LocContribuintecrono>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("LocContribuintecrono");

            entity.Property(e => e.ConCep)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ConCEP");
            entity.Property(e => e.ConCnpjcpf)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ConCNPJCPF");
            entity.Property(e => e.ConComplemento)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ConDtNasc).HasColumnType("datetime");
            entity.Property(e => e.ConDtUltAlt).HasColumnType("datetime");
            entity.Property(e => e.ConEmail)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ConEMail");
            entity.Property(e => e.ConEndereco)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.ConEstadoCivil)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ConNacionalidade)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ConNome)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.ConNumero)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ConProfissao)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ConRespNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ConRespRg)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ConRespRG");
            entity.Property(e => e.ConRg)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("ConRG");
            entity.Property(e => e.ConSexo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ConTecUltAlt)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ConTelefones)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ConTipoLograd)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LocFilaEspera>(entity =>
        {
            entity.HasKey(e => e.FilaEsperaId);

            entity.ToTable("LocFilaEspera");

            entity.Property(e => e.FilaEsperaId).ValueGeneratedNever();
            entity.Property(e => e.FespContribId).HasColumnName("FEspContribId");
            entity.Property(e => e.FespDataFim).HasColumnType("datetime");
            entity.Property(e => e.FespDataIni).HasColumnType("datetime");
            entity.Property(e => e.FespDtUltAlt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.FespHorarioFim)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FespHorarioIni)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FespSituacao)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Atendido ou branco");
            entity.Property(e => e.FespTaxaId).HasColumnName("FEspTaxaId");
            entity.Property(e => e.FespTecUltAlt)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");

            entity.HasOne(d => d.FespAtividadeNavigation).WithMany(p => p.LocFilaEsperas)
                .HasForeignKey(d => d.FespAtividade)
                .HasConstraintName("FK_LocFilaEspera_LocAtividade");

            entity.HasOne(d => d.FespContrib).WithMany(p => p.LocFilaEsperas)
                .HasForeignKey(d => d.FespContribId)
                .HasConstraintName("FK_LocFilaEspera_Contribuintes");
        });

        modelBuilder.Entity<LocLocal>(entity =>
        {
            entity.HasKey(e => e.LocalId).HasName("PK_ScgLocal");

            entity.ToTable("LocLocal");

            entity.Property(e => e.LocalId)
                .ValueGeneratedNever()
                .HasColumnName("LocalID");
            entity.Property(e => e.LocBairro)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LocCep)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LocCEP");
            entity.Property(e => e.LocDtUltAlt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.LocFone)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LocHostUltAlt)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(host_name())");
            entity.Property(e => e.LocNomeLocal)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LocNomeLogr)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LocRespMatricula)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.LocRespNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LocRespRg)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LocRespRG");
            entity.Property(e => e.LocTecUltAlt)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");
            entity.Property(e => e.LocTipoLogr)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LocPeriodo>(entity =>
        {
            entity.HasKey(e => e.PeriodoId).HasName("PK_ScgPeriodo");

            entity.ToTable("LocPeriodo");

            entity.Property(e => e.PeriodoId).ValueGeneratedNever();
            entity.Property(e => e.PerDescricao)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PerDtUltAlt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.PerTecUltAlt)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");
            entity.Property(e => e.PerValidade)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<LocPessoa>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("LocPessoa");

            entity.Property(e => e.PesCep)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PesCEP");
            entity.Property(e => e.PesCpfCnpj)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("PesCPF_CNPJ");
            entity.Property(e => e.PesDtNasc).HasColumnType("datetime");
            entity.Property(e => e.PesDtUltAlt).HasColumnType("datetime");
            entity.Property(e => e.PesEmail)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PesEMail");
            entity.Property(e => e.PesEndereco)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PesEscolaridade)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PesEstCivil)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.PesFone)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PesHostUltAlt)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PesNacionalidade)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PesNaturalCid)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PesNaturalUf)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PesNaturalUF");
            entity.Property(e => e.PesNome)
                .HasMaxLength(40)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PesRg)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PesRG");
            entity.Property(e => e.PesSexo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PesTecUltAlt)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PesUfrg)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PesUFRG");
            entity.Property(e => e.PessoaId).HasColumnName("PessoaID");
        });

        modelBuilder.Entity<LocReceitum>(entity =>
        {
            entity.HasKey(e => e.ReceitaCodigo);

            entity.Property(e => e.ReceitaCodigo)
                .HasMaxLength(14)
                .IsUnicode(false);
            entity.Property(e => e.RecDescricao)
                .HasMaxLength(60)
                .IsUnicode(false);

            entity.HasOne(d => d.RecConvenio).WithMany(p => p.LocReceita)
                .HasForeignKey(d => d.RecConvenioId)
                .HasConstraintName("FK_LocReceita_ConvenioBco");
        });

        modelBuilder.Entity<LocSubLocal>(entity =>
        {
            entity.HasKey(e => e.SubLocalId).HasName("PK_ScgSubLocal");

            entity.ToTable("LocSubLocal");

            entity.Property(e => e.SubLocalId).ValueGeneratedNever();
            entity.Property(e => e.SubLocDtUltAlt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.SubLocFone)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SubLocLocalId).HasColumnName("SubLocLocalID");
            entity.Property(e => e.SubLocNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubLocRespMatricula)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SubLocRespNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubLocRespRg)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("SubLocRespRG");
            entity.Property(e => e.SubLocTecUltAlt)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");

            entity.HasOne(d => d.SubLocLocal).WithMany(p => p.LocSubLocals)
                .HasForeignKey(d => d.SubLocLocalId)
                .HasConstraintName("FK_LocSubLocal_Localizacao");

            entity.HasOne(d => d.SubLocTipoNavigation).WithMany(p => p.LocSubLocals)
                .HasForeignKey(d => d.SubLocTipo)
                .HasConstraintName("FK_LocSubLocal_LocTpSubLocal");
        });

        modelBuilder.Entity<LocTaxa>(entity =>
        {
            entity.HasKey(e => e.TaxaId).HasName("PK_ScgTaxa");

            entity.ToTable("LocTaxa");

            entity.Property(e => e.TaxaId).ValueGeneratedNever();
            entity.Property(e => e.TaxDtUltAlt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.TaxNome)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.TaxPrazoPagto).HasComment("Prazo de Pagto da Taxa en Dias");
            entity.Property(e => e.TaxReceitaCod)
                .HasMaxLength(14)
                .IsUnicode(false);
            entity.Property(e => e.TaxTecUltAlt)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");
            entity.Property(e => e.TaxVlrEmUffi)
                .HasColumnType("money")
                .HasColumnName("TaxVlr_em_UFFI");

            entity.HasOne(d => d.TaxPeriodo).WithMany(p => p.LocTaxas)
                .HasForeignKey(d => d.TaxPeriodoId)
                .HasConstraintName("FK_LocTaxa_LocPeriodo");

            entity.HasOne(d => d.TaxReceitaCodNavigation).WithMany(p => p.LocTaxas)
                .HasForeignKey(d => d.TaxReceitaCod)
                .HasConstraintName("FK_LocTaxa_LocReceita");

            entity.HasOne(d => d.TaxSubLocal).WithMany(p => p.LocTaxas)
                .HasForeignKey(d => d.TaxSubLocalId)
                .HasConstraintName("FK_LocTaxa_LocSubLocal");
        });

        modelBuilder.Entity<LocTipoPagto>(entity =>
        {
            entity.HasKey(e => e.TipoPagtoId).HasName("PK_ScgTipoPagto");

            entity.ToTable("LocTipoPagto");

            entity.Property(e => e.TipoPagtoId).ValueGeneratedNever();
            entity.Property(e => e.TipoPdescricao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TipoPDescricao");
            entity.Property(e => e.TipoPdtUltAlt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("TipoPDtUltAlt");
            entity.Property(e => e.TipoPtecUltAlt)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())")
                .HasColumnName("TipoPTecUltAlt");
        });

        modelBuilder.Entity<LocTpSubLocal>(entity =>
        {
            entity.HasKey(e => e.TipoSubLocId);

            entity.ToTable("LocTpSubLocal");

            entity.Property(e => e.TipoSubLocId).ValueGeneratedNever();
            entity.Property(e => e.TsdtUltAlt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("TSDtUltAlt");
            entity.Property(e => e.TsnmTipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TSNmTipo");
            entity.Property(e => e.TstecUltAlt)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())")
                .HasColumnName("TSTecUltAlt");
        });

        modelBuilder.Entity<Locacao>(entity =>
        {
            entity.HasKey(e => e.LocacaoId).HasName("PK_ScgLocacao");

            entity.ToTable("Locacao");

            entity.Property(e => e.LocacaoId).ValueGeneratedNever();
            entity.Property(e => e.LcCategoria)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LcDataFim).HasColumnType("datetime");
            entity.Property(e => e.LcDataIni).HasColumnType("datetime");
            entity.Property(e => e.LcDtGeracao).HasColumnType("datetime");
            entity.Property(e => e.LcDtUltAlt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.LcDtVencimento).HasColumnType("datetime");
            entity.Property(e => e.LcHorarioFim)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LcHorarioIni)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LcNossoNumeroTribuno)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LcSituacao)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LcTecAutorizacao)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LcTecUltAlt)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");
            entity.Property(e => e.LcUnidadesLocacao).HasComment("Qtde de horas, dias ou meses de locação");
            entity.Property(e => e.LcValorLocacao).HasColumnType("money");
            entity.Property(e => e.LcVlrEmUffi)
                .HasColumnType("money")
                .HasColumnName("LcVlr_em_UFFI");

            entity.HasOne(d => d.LcAtividadeNavigation).WithMany(p => p.Locacaos)
                .HasForeignKey(d => d.LcAtividade)
                .HasConstraintName("FK_ScgLocacao_ScgAtividade");

            entity.HasOne(d => d.LcContrib).WithMany(p => p.Locacaos)
                .HasForeignKey(d => d.LcContribId)
                .HasConstraintName("FK_Locacao_Contribuintes");

            entity.HasOne(d => d.LcTaxa).WithMany(p => p.Locacaos)
                .HasForeignKey(d => d.LcTaxaId)
                .HasConstraintName("FK_Locacao_LocTaxa");

            entity.HasOne(d => d.LcTipoPagtoNavigation).WithMany(p => p.Locacaos)
                .HasForeignKey(d => d.LcTipoPagto)
                .HasConstraintName("FK_ScgLocacao_ScgTipoPagto");

            entity.HasMany(d => d.LbnossoNumeros).WithMany(p => p.Lblocacaos)
                .UsingEntity<Dictionary<string, object>>(
                    "LocacaoBoleto",
                    r => r.HasOne<LocBoleto>().WithMany()
                        .HasForeignKey("LbnossoNumero")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_ScgLocacaoBoleto_ScgBoleto"),
                    l => l.HasOne<Locacao>().WithMany()
                        .HasForeignKey("LblocacaoId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_ScgLocacaoBoleto_ScgLocacao"),
                    j =>
                    {
                        j.HasKey("LblocacaoId", "LbnossoNumero").HasName("PK_ScgLocacaoBoleto");
                        j.ToTable("LocacaoBoleto");
                        j.IndexerProperty<long>("LblocacaoId").HasColumnName("LBLocacaoId");
                        j.IndexerProperty<string>("LbnossoNumero")
                            .HasMaxLength(14)
                            .IsUnicode(false)
                            .IsFixedLength()
                            .HasColumnName("LBNossoNumero");
                    });
        });

        modelBuilder.Entity<LocacaoFrotum>(entity =>
        {
            entity.HasKey(e => e.LocacaoId);

            entity.Property(e => e.LocVdataDevolucao)
                .HasColumnType("datetime")
                .HasColumnName("LocVDataDevolucao");
            entity.Property(e => e.LocVdataInicio)
                .HasColumnType("datetime")
                .HasColumnName("LocVDataInicio");
            entity.Property(e => e.LocVidContrato).HasColumnName("LocVIdContrato");

            entity.HasOne(d => d.LocVeiculo).WithMany(p => p.LocacaoFrota)
                .HasForeignKey(d => d.LocVeiculoId)
                .HasConstraintName("FK_LocacaoFrota_Veiculos");

            entity.HasOne(d => d.LocVidContratoNavigation).WithMany(p => p.LocacaoFrota)
                .HasForeignKey(d => d.LocVidContrato)
                .HasConstraintName("FK_LocacaoFrota_DepuContratos");
        });

        modelBuilder.Entity<LocacaoMoveisEquipamento>(entity =>
        {
            entity.HasKey(e => e.Idlocacao);

            entity.Property(e => e.Idlocacao).HasColumnName("IDLocacao");
            entity.Property(e => e.CntIdcontrato).HasColumnName("CntIDContrato");
            entity.Property(e => e.DataDevolucao).HasColumnType("datetime");
            entity.Property(e => e.DataInicio).HasColumnType("datetime");
            entity.Property(e => e.MovEquipId).HasColumnName("MovEquipID");

            entity.HasOne(d => d.CntIdcontratoNavigation).WithMany(p => p.LocacaoMoveisEquipamentos)
                .HasForeignKey(d => d.CntIdcontrato)
                .HasConstraintName("FK_LocacaoMoveisEquipamentos_DepuContratos");

            entity.HasOne(d => d.MovEquip).WithMany(p => p.LocacaoMoveisEquipamentos)
                .HasForeignKey(d => d.MovEquipId)
                .HasConstraintName("FK_LocacaoMoveisEquipamentos_MoveisEquipamentos");
        });

        modelBuilder.Entity<LocalFisico>(entity =>
        {
            entity.ToTable("LocalFisico");

            entity.Property(e => e.LocalFisicoId).ValueGeneratedNever();
            entity.Property(e => e.LocalFisicoNome)
                .HasMaxLength(255)
                .IsUnicode(false);

            entity.HasOne(d => d.Loc).WithMany(p => p.LocalFisicos)
                .HasForeignKey(d => d.LocId)
                .HasConstraintName("FK_LocalFisico_Localizacao");
        });

        modelBuilder.Entity<Localizacao>(entity =>
        {
            entity.HasKey(e => e.LocId);

            entity.ToTable("Localizacao");

            entity.Property(e => e.LocId).HasColumnName("LocID");
            entity.Property(e => e.LocBairro)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.LocCep)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength()
                .HasColumnName("LocCEP");
            entity.Property(e => e.LocCidade)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.LocComplemento)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.LocEndereco)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.LocFone)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LocNome)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.LocNumero)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.LocRespMatricula)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.LocRespNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LocUf)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength()
                .HasColumnName("LocUF");
            entity.Property(e => e.TipoLocId).HasColumnName("TipoLocID");

            entity.HasOne(d => d.TipoLoc).WithMany(p => p.Localizacaos)
                .HasForeignKey(d => d.TipoLocId)
                .HasConstraintName("FK_Localizacao_EDUTipoLocal");
        });

        modelBuilder.Entity<LogBairro>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("LOG_BAIRRO");

            entity.Property(e => e.BaiNo)
                .HasMaxLength(72)
                .HasColumnName("BAI_NO");
            entity.Property(e => e.BaiNome)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.BaiNu).HasColumnName("BAI_NU");
        });

        modelBuilder.Entity<LogLocalidade>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("LOG_LOCALIDADE");

            entity.Property(e => e.CidNome)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.LocNo)
                .HasMaxLength(72)
                .HasColumnName("LOC_NO");
            entity.Property(e => e.LocNu).HasColumnName("LOC_NU");
            entity.Property(e => e.UfeSg)
                .HasMaxLength(2)
                .HasColumnName("UFE_SG");
        });

        modelBuilder.Entity<LogLogradouro>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("LOG_LOGRADOURO");

            entity.Property(e => e.BaiNuIni).HasColumnName("BAI_NU_INI");
            entity.Property(e => e.Cep)
                .HasMaxLength(8)
                .HasColumnName("CEP");
            entity.Property(e => e.LocNu).HasColumnName("LOC_NU");
            entity.Property(e => e.LogNo)
                .HasMaxLength(100)
                .HasColumnName("LOG_NO");
            entity.Property(e => e.LogradNome)
                .HasMaxLength(75)
                .IsUnicode(false);
            entity.Property(e => e.TloTx)
                .HasMaxLength(36)
                .HasColumnName("TLO_TX");
        });

        modelBuilder.Entity<LogProcesso>(entity =>
        {
            entity.HasKey(e => e.LogId).HasName("PK_MovProcessos");

            entity.Property(e => e.LogId)
                .ValueGeneratedNever()
                .HasColumnName("LogID");
            entity.Property(e => e.LogData)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime");
            entity.Property(e => e.LogOcorrencia)
                .HasDefaultValue("")
                .HasColumnType("text");
            entity.Property(e => e.LogProcessoId)
                .HasDefaultValue(0L)
                .HasColumnName("LogProcessoID");
            entity.Property(e => e.LogTipo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.LogUsuario)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("");

            entity.HasOne(d => d.LogProcessoNavigation).WithMany(p => p.LogProcessos)
                .HasForeignKey(d => d.LogProcessoId)
                .HasConstraintName("FK_MovProcessos_Processos");
        });

        modelBuilder.Entity<Logradouro>(entity =>
        {
            entity.HasKey(e => e.LogradId);

            entity.ToTable("Logradouro");

            entity.HasIndex(e => e.LogradNome, "IX_Logradouro_LogradNome");

            entity.Property(e => e.LogradId).HasColumnName("LogradID");
            entity.Property(e => e.LogradNome)
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.LogradTipo)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<Logradourotipo>(entity =>
        {
            entity.HasKey(e => e.Idtipo);

            entity.ToTable("logradourotipo");

            entity.Property(e => e.Idtipo).HasColumnName("idtipo");
            entity.Property(e => e.Dstipologradouro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dstipologradouro");
        });

        modelBuilder.Entity<Loteamento>(entity =>
        {
            entity.HasKey(e => e.Idloteamento);

            entity.HasIndex(e => e.Idregiao, "IX_Loteamentos_IDRegiao");

            entity.Property(e => e.Idloteamento)
                .ValueGeneratedNever()
                .HasColumnName("IDLoteamento");
            entity.Property(e => e.Data)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Descricao)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.Host)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValueSql("(host_name())");
            entity.Property(e => e.Idregiao).HasColumnName("IDRegiao");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");

            entity.HasOne(d => d.IdregiaoNavigation).WithMany(p => p.Loteamentos)
                .HasForeignKey(d => d.Idregiao)
                .HasConstraintName("FK_Loteamentos_Regioes");
        });

        modelBuilder.Entity<LoteamentosAtena>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Loteamentos_Atena");

            entity.Property(e => e.Descricao)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.Idloteamento).HasColumnName("IDLoteamento");
        });

        modelBuilder.Entity<LrfInscricaoSaldoDividaAtivaAraucaria2010>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("lrfInscricaoSaldoDividaAtivaAraucaria2010");

            entity.Property(e => e.Coluna0)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Coluna 0");
            entity.Property(e => e.Coluna1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Coluna 1");
            entity.Property(e => e.Coluna2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Coluna 2");
            entity.Property(e => e.Coluna3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Coluna 3");
            entity.Property(e => e.Coluna4)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Coluna 4");
            entity.Property(e => e.Coluna5)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Coluna 5");
            entity.Property(e => e.Coluna6)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Coluna 6");
            entity.Property(e => e.Coluna7)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Coluna 7");
            entity.Property(e => e.Coluna8)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Coluna 8");
            entity.Property(e => e.Valor).HasColumnType("money");
        });

        modelBuilder.Entity<LrfOcorrenciasTributosExercicio2008>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("lrfOcorrenciasTributosExercicio2008");

            entity.Property(e => e.CdTributo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.NrContribuinteArrecPgtoParcial).HasColumnName("nrContribuinteArrecPgtoParcial");
            entity.Property(e => e.NrContribuinteArrecPgtoTotal).HasColumnName("nrContribuinteArrecPgtoTotal");
            entity.Property(e => e.NrContribuinteDeducoesParcial).HasColumnName("nrContribuinteDeducoesParcial");
            entity.Property(e => e.NrContribuinteDeducoesTotal).HasColumnName("nrContribuinteDeducoesTotal");
            entity.Property(e => e.NrContribuinteInscricaoDividaAtiva).HasColumnName("nrContribuinteInscricaoDividaAtiva");
            entity.Property(e => e.NrContribuinteLancadoExercicio).HasColumnName("nrContribuinteLancadoExercicio");
            entity.Property(e => e.NrContribuinteSaldoAntArrecadar).HasColumnName("nrContribuinteSaldoAntArrecadar");
        });

        modelBuilder.Entity<LrffiltrosTributosBimestre>(entity =>
        {
            entity.HasKey(e => new { e.TipoTribId, e.Filtro });

            entity.ToTable("LRFFiltrosTributosBimestre");

            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
            entity.Property(e => e.Filtro)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LrfocorrenciaExercicio2008>(entity =>
        {
            entity.HasKey(e => e.Idcontrole);

            entity.ToTable("LRFOcorrenciaExercicio2008");

            entity.Property(e => e.Idcontrole).HasColumnName("IDControle");
            entity.Property(e => e.Cnpjcpfcontribuinte)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("CNPJCPFContribuinte");
            entity.Property(e => e.Cnpjfilial)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("CNPJFilial");
            entity.Property(e => e.CodDivida)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ConIddivida).HasColumnName("ConIDDivida");
            entity.Property(e => e.DataBaixa).HasColumnType("datetime");
            entity.Property(e => e.DataGeracao).HasColumnType("datetime");
            entity.Property(e => e.DataInscricaoDa)
                .HasColumnType("datetime")
                .HasColumnName("DataInscricaoDA");
            entity.Property(e => e.DivEmpId).HasColumnName("DivEmpID");
            entity.Property(e => e.IdTributo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ImoIddivida).HasColumnName("ImoIDDivida");
            entity.Property(e => e.InscricaoImob)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NomeContribuinte)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ValorLancado).HasColumnType("money");
            entity.Property(e => e.ValorPago).HasColumnType("money");
        });

        modelBuilder.Entity<ManutencaoMoveisEquipamento>(entity =>
        {
            entity.HasKey(e => e.ManId);

            entity.Property(e => e.ManData).HasColumnType("datetime");
            entity.Property(e => e.ManDescricao)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ManFornecedorId).HasDefaultValueSql("('')");
            entity.Property(e => e.ManSituacao)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.ManFornecedor).WithMany(p => p.ManutencaoMoveisEquipamentos)
                .HasForeignKey(d => d.ManFornecedorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ManutencaoMoveisEquipamentos_Contribuintes");

            entity.HasOne(d => d.ManMovEquip).WithMany(p => p.ManutencaoMoveisEquipamentos)
                .HasForeignKey(d => d.ManMovEquipId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ManutencaoMoveisEquipamentos_MoveisEquipamentos");
        });

        modelBuilder.Entity<ManutencaoVeiculo>(entity =>
        {
            entity.HasKey(e => e.ManutencaoId);

            entity.Property(e => e.ManVdata)
                .HasColumnType("datetime")
                .HasColumnName("ManVData");
            entity.Property(e => e.ManVdescricao)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ManVDescricao");
            entity.Property(e => e.ManVeiculoId).HasDefaultValue(0L);
            entity.Property(e => e.ManVfornecedorId)
                .HasDefaultValueSql("('')")
                .HasColumnName("ManVFornecedorId");
            entity.Property(e => e.ManVsituacao)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ManVSituacao");

            entity.HasOne(d => d.ManVeiculo).WithMany(p => p.ManutencaoVeiculos)
                .HasForeignKey(d => d.ManVeiculoId)
                .HasConstraintName("FK_ManutencaoVeiculos_Veiculos");

            entity.HasOne(d => d.ManVfornecedor).WithMany(p => p.ManutencaoVeiculos)
                .HasForeignKey(d => d.ManVfornecedorId)
                .HasConstraintName("FK_ManutencaoVeiculos_Contribuintes");
        });

        modelBuilder.Entity<Maquina>(entity =>
        {
            entity.HasKey(e => e.Ip);

            entity.Property(e => e.Ip).HasMaxLength(15);
            entity.Property(e => e.Andar).HasMaxLength(20);
            entity.Property(e => e.Data).HasColumnType("datetime");
            entity.Property(e => e.Departamento).HasMaxLength(50);
            entity.Property(e => e.Host).HasMaxLength(50);
            entity.Property(e => e.HostCad).HasMaxLength(50);
            entity.Property(e => e.Local).HasMaxLength(100);
            entity.Property(e => e.Ramal).HasMaxLength(50);
        });

        modelBuilder.Entity<MaquinasUsuario>(entity =>
        {
            entity.HasKey(e => e.IdUsu);

            entity.ToTable("MaquinasUsuario");

            entity.Property(e => e.Ip).HasMaxLength(15);
            entity.Property(e => e.Login)
                .HasMaxLength(50)
                .HasColumnName("login");
            entity.Property(e => e.NomeUsuario).HasMaxLength(60);

            entity.HasOne(d => d.IpNavigation).WithMany(p => p.MaquinasUsuarios)
                .HasForeignKey(d => d.Ip)
                .HasConstraintName("FK_MaquinasUsuario_Maquinas");
        });

        modelBuilder.Entity<Marca>(entity =>
        {
            entity.ToTable("Marca");

            entity.Property(e => e.MarcaId).HasColumnName("MarcaID");
            entity.Property(e => e.MarcaNome)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<Meioambiente>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("meioambiente");

            entity.Property(e => e.Codigo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CODIGO");
            entity.Property(e => e.Descricao)
                .HasMaxLength(5000)
                .IsUnicode(false)
                .HasColumnName("DESCRICAO");
            entity.Property(e => e.Externos)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("EXTERNOS");
            entity.Property(e => e.Graurisco)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("GRAURISCO");
            entity.Property(e => e.Las)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("LAS");
            entity.Property(e => e.LpLiLo)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("LP_LI_LO");
            entity.Property(e => e.Perguntas)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("PERGUNTAS");
            entity.Property(e => e.Pgrs)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("PGRS");
            entity.Property(e => e.Pgrss)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("PGRSS");
        });

        modelBuilder.Entity<Membro>(entity =>
        {
            entity.HasKey(e => e.MemCnpj);

            entity.Property(e => e.MemCnpj)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength()
                .HasColumnName("MemCNPJ");
            entity.Property(e => e.MemBairro)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.MemCargoPrefeito)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.MemCep)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength()
                .HasColumnName("MemCEP");
            entity.Property(e => e.MemCidade)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.MemCodDivisao).HasDefaultValue(0);
            entity.Property(e => e.MemCodMoeda)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Código da moeda, para geração dos boletos.");
            entity.Property(e => e.MemComplEnd)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.MemEmail)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.MemEndNum)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.MemEndereco)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.MemFone)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.MemImgLogo)
                .HasDefaultValueSql("('')")
                .HasColumnType("image");
            entity.Property(e => e.MemImgLogo2)
                .HasDefaultValueSql("('')")
                .HasColumnType("image");
            entity.Property(e => e.MemNomeFantasia)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.MemNomePrefeito)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.MemNumViasComprovante)
                .HasDefaultValue((short)1)
                .HasComment("Numero de vias do Comprovante de entrada no Módulo PROSIGA");
            entity.Property(e => e.MemProcUtilizaAnoNum)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não");
            entity.Property(e => e.MemRazaoSocial)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.MemSigla)
                .HasMaxLength(6)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MemSite)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.MemTipoLograd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.MemTrabalhaDom)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength();
            entity.Property(e => e.MemTrabalhaSab)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength();
            entity.Property(e => e.MemUf)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength()
                .HasColumnName("MemUF");
        });

        modelBuilder.Entity<MembrosUsuario>(entity =>
        {
            entity.HasKey(e => new { e.UmeidUsu, e.Umecgc });

            entity.Property(e => e.UmeidUsu)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("UMEIdUsu");
            entity.Property(e => e.Umecgc)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("UMECGC");
            entity.Property(e => e.UmeCnpjPadrao)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength();

            entity.HasOne(d => d.UmecgcNavigation).WithMany(p => p.MembrosUsuarios)
                .HasForeignKey(d => d.Umecgc)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MembrosUsuarios_Membros");

            entity.HasOne(d => d.UmeidUsuNavigation).WithMany(p => p.MembrosUsuarios)
                .HasForeignKey(d => d.UmeidUsu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MembrosUsuarios_Usuarios");
        });

        modelBuilder.Entity<Modelo>(entity =>
        {
            entity.HasKey(e => e.ModId);

            entity.ToTable("Modelo");

            entity.Property(e => e.ModId).HasColumnName("ModID");
            entity.Property(e => e.ModNome)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<ModoAquisicao>(entity =>
        {
            entity.HasKey(e => e.ModAid);

            entity.ToTable("ModoAquisicao");

            entity.Property(e => e.ModAid).HasColumnName("ModAID");
            entity.Property(e => e.MacodTribunal).HasColumnName("MACodTribunal");
            entity.Property(e => e.ModAnome)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ModANome");
        });

        modelBuilder.Entity<Modulo>(entity =>
        {
            entity.HasKey(e => e.ModId);

            entity.ToTable("Modulo");

            entity.Property(e => e.ModId).ValueGeneratedNever();
            entity.Property(e => e.ModDescricao)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ModNome)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MoeMovimentacaoConta>(entity =>
        {
            entity.HasKey(e => e.IdMoeMovimentacaoContas);

            entity.Property(e => e.IdMoeMovimentacaoContas).HasColumnName("idMoeMovimentacaoContas");
            entity.Property(e => e.CdContaContabil)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("cdContaContabil");
            entity.Property(e => e.DtMovimentacao)
                .HasColumnType("datetime")
                .HasColumnName("dtMovimentacao");
            entity.Property(e => e.IdMovEquipamento).HasColumnName("idMovEquipamento");
            entity.Property(e => e.IdObra).HasColumnName("idObra");
            entity.Property(e => e.IdVeiculo).HasColumnName("idVeiculo");
        });

        modelBuilder.Entity<Moeda>(entity =>
        {
            entity.HasKey(e => e.Idmoeda);

            entity.Property(e => e.Idmoeda)
                .ValueGeneratedNever()
                .HasColumnName("IDMoeda");
            entity.Property(e => e.Nome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Sigla)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MoedasReferencia>(entity =>
        {
            entity.HasKey(e => new { e.Idmoeda, e.DataReferencia });

            entity.Property(e => e.Idmoeda).HasColumnName("IDMoeda");
            entity.Property(e => e.DataReferencia).HasColumnType("datetime");
            entity.Property(e => e.ValorReferencia).HasColumnType("decimal(14, 8)");

            entity.HasOne(d => d.IdmoedaNavigation).WithMany(p => p.MoedasReferencia)
                .HasForeignKey(d => d.Idmoeda)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MoedasReferencias_Moedas");
        });

        modelBuilder.Entity<MovEquipamentoRecurso>(entity =>
        {
            entity.HasKey(e => new { e.MovelEquiId, e.RecursoId });

            entity.Property(e => e.MovelEquiId).HasColumnName("movelEquiId");
            entity.Property(e => e.RecursoId).HasColumnName("recursoID");
        });

        modelBuilder.Entity<MovImovei>(entity =>
        {
            entity.HasKey(e => e.MovImoNumLanc).HasName("PK_Movimento");

            entity.Property(e => e.MovImoCnpjfilial)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MovImoCNPJFilial");
            entity.Property(e => e.MovImoDtmov)
                .HasColumnType("datetime")
                .HasColumnName("MovImoDTMov");
            entity.Property(e => e.MovImoFuncionario)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.MovImoInscricao)
                .HasMaxLength(14)
                .IsUnicode(false);
            entity.Property(e => e.MovImoMetragem).HasColumnType("money");
            entity.Property(e => e.MovImoOcupacao)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.MovImoTransacao)
                .HasMaxLength(25)
                .IsUnicode(false);

            entity.HasOne(d => d.Imovei).WithMany(p => p.MovImoveis)
                .HasForeignKey(d => new { d.MovImoCnpjfilial, d.MovImoInscricao })
                .HasConstraintName("FK_MovImoveis_Imoveis");
        });

        modelBuilder.Entity<MovVeiculo>(entity =>
        {
            entity.HasKey(e => e.MvId);

            entity.Property(e => e.MvId)
                .ValueGeneratedNever()
                .HasColumnName("MvID");
            entity.Property(e => e.MvData).HasColumnType("datetime");
            entity.Property(e => e.MvDtConfirmacao).HasColumnType("datetime");
            entity.Property(e => e.MvMotivo)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.MvObs)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.MvSituacao)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MvTipoMovVeiculo)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.MvVeiculo).WithMany(p => p.MovVeiculos)
                .HasForeignKey(d => d.MvVeiculoId)
                .HasConstraintName("FK_MovVeiculos_Veiculos");
        });

        modelBuilder.Entity<MoveisEquipamento>(entity =>
        {
            entity.HasKey(e => e.MoeMovEquipId);

            entity.Property(e => e.MoeMovEquipId).HasColumnName("moeMovEquipID");
            entity.Property(e => e.MoeAnoEmpenho).HasColumnName("moeAnoEmpenho");
            entity.Property(e => e.MoeCdTombamento)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("moeCdTombamento");
            entity.Property(e => e.MoeCnpjmembro)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("moeCNPJMembro");
            entity.Property(e => e.MoeDataAquisicao)
                .HasColumnType("datetime")
                .HasColumnName("moeDataAquisicao");
            entity.Property(e => e.MoeDataEmpenho)
                .HasColumnType("datetime")
                .HasColumnName("moeDataEmpenho");
            entity.Property(e => e.MoeDataIncorporacao)
                .HasColumnType("datetime")
                .HasColumnName("moeDataIncorporacao");
            entity.Property(e => e.MoeDescricao)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.MoeDtGarantia)
                .HasColumnType("datetime")
                .HasColumnName("moeDtGarantia");
            entity.Property(e => e.MoeEstCons)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("moeEstCons");
            entity.Property(e => e.MoeIdCombustivel).HasColumnName("moeIdCombustivel");
            entity.Property(e => e.MoeIdContaContabil).HasColumnName("moeIdContaContabil");
            entity.Property(e => e.MoeIdFornecedor).HasColumnName("moeIdFornecedor");
            entity.Property(e => e.MoeIdLocalFisico).HasColumnName("moeIdLocalFisico");
            entity.Property(e => e.MoeIdModalidade).HasColumnName("moeIdModalidade");
            entity.Property(e => e.MoeIdModoAquisicao).HasColumnName("moeIdModoAquisicao");
            entity.Property(e => e.MoeIdPlaqueta).HasColumnName("moeIdPlaqueta");
            entity.Property(e => e.MoeIdRecursoFinanc).HasColumnName("moeIdRecursoFinanc");
            entity.Property(e => e.MoeIdServidor).HasColumnName("moeIdServidor");
            entity.Property(e => e.MoeIdTipoBens).HasColumnName("moeIdTipoBens");
            entity.Property(e => e.MoeImgBem)
                .HasColumnType("image")
                .HasColumnName("moeImgBem");
            entity.Property(e => e.MoeNrAnoLic).HasColumnName("moeNrAnoLic");
            entity.Property(e => e.MoeNrLicitacao).HasColumnName("moeNrLicitacao");
            entity.Property(e => e.MoeNumEmpenho).HasColumnName("moeNumEmpenho");
            entity.Property(e => e.MoeNumNotaFiscal)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("moeNumNotaFiscal");
            entity.Property(e => e.MoeObservacao)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("moeObservacao");
            entity.Property(e => e.MoePlaquetaAnt)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("moePlaquetaAnt");
            entity.Property(e => e.MoePossivelAbastecer)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("moePossivelAbastecer");
            entity.Property(e => e.MoeSerie)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("moeSerie");
            entity.Property(e => e.MoeValor)
                .HasColumnType("money")
                .HasColumnName("moeValor");
            entity.Property(e => e.MoeVlrComponentes)
                .HasComputedColumnSql("([dbo].[MovVlrComponentes]([moeMovEquipID]))", false)
                .HasColumnType("money")
                .HasColumnName("moeVlrComponentes");
            entity.Property(e => e.MoeVlrManutencao)
                .HasComputedColumnSql("([dbo].[MovVlrManutencao]([moeMovEquipID]))", false)
                .HasColumnType("money")
                .HasColumnName("moeVlrManutencao");
            entity.Property(e => e.Ok).HasColumnName("ok");

            entity.HasMany(d => d.AcesMovEquips).WithMany(p => p.MoeMovEquips)
                .UsingEntity<Dictionary<string, object>>(
                    "MovEquipAcesAgrup",
                    r => r.HasOne<AcessoriosMoveisEquipamento>().WithMany()
                        .HasForeignKey("AcesMovEquipId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_MovEquipAcesAgrup_AcessoriosMoveisEquipamentos"),
                    l => l.HasOne<MoveisEquipamento>().WithMany()
                        .HasForeignKey("MoeMovEquipId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_MovEquipAcesAgrup_MoveisEquipamentos"),
                    j =>
                    {
                        j.HasKey("MoeMovEquipId", "AcesMovEquipId");
                        j.ToTable("MovEquipAcesAgrup");
                        j.IndexerProperty<long>("MoeMovEquipId").HasColumnName("moeMovEquipId");
                    });
        });

        modelBuilder.Entity<MoveisIten>(entity =>
        {
            entity.HasKey(e => e.ItemId);

            entity.Property(e => e.ItemId).ValueGeneratedNever();
            entity.Property(e => e.ItemCodBarra)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ItemImagem).HasColumnType("image");
            entity.Property(e => e.ItemNome)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ItemVlrUnitario).HasColumnType("money");

            entity.HasOne(d => d.ItemEspecie).WithMany(p => p.MoveisItens)
                .HasForeignKey(d => d.ItemEspecieId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MoveisItens_Especie");

            entity.HasOne(d => d.ItemMarca).WithMany(p => p.MoveisItens)
                .HasForeignKey(d => d.ItemMarcaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MoveisItens_Marca");

            entity.HasOne(d => d.ItemModelo).WithMany(p => p.MoveisItens)
                .HasForeignKey(d => d.ItemModeloId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MoveisItens_Modelo");

            entity.HasOne(d => d.ItemUnMed).WithMany(p => p.MoveisItens)
                .HasForeignKey(d => d.ItemUnMedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MoveisItens_AlmUnMed");
        });

        modelBuilder.Entity<MovimentacaoAcessoriosMovEquip>(entity =>
        {
            entity.HasKey(e => e.MoacId);

            entity.ToTable("MovimentacaoAcessoriosMovEquip");

            entity.Property(e => e.MoacId).ValueGeneratedNever();
            entity.Property(e => e.MoacData).HasColumnType("datetime");
            entity.Property(e => e.MoacDtConfirmacao).HasColumnType("datetime");
            entity.Property(e => e.MoacMotivo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.MoacObs)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasComment("Texto de confirmação da movimentação com servidor que confirmou");
            entity.Property(e => e.MoacSituacao)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MoacTipoMovEquip)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MoeMovEquipIdAnt).HasColumnName("moeMovEquipIdAnt");
            entity.Property(e => e.MoeMovEquipIdAtual).HasColumnName("moeMovEquipIdAtual");

            entity.HasOne(d => d.MoeMovEquipIdAntNavigation).WithMany(p => p.MovimentacaoAcessoriosMovEquipMoeMovEquipIdAntNavigations)
                .HasForeignKey(d => d.MoeMovEquipIdAnt)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MovimentacaoAcessoriosMovEquip_MoveisEquipamentos1");

            entity.HasOne(d => d.MoeMovEquipIdAtualNavigation).WithMany(p => p.MovimentacaoAcessoriosMovEquipMoeMovEquipIdAtualNavigations)
                .HasForeignKey(d => d.MoeMovEquipIdAtual)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MovimentacaoAcessoriosMovEquip_MoveisEquipamentos");
        });

        modelBuilder.Entity<MovimentacaoMoveisEquipamento>(entity =>
        {
            entity.HasKey(e => e.MmeId);

            entity.Property(e => e.MmeId).HasColumnName("MmeID");
            entity.Property(e => e.MmeData).HasColumnType("datetime");
            entity.Property(e => e.MmeDtConfiPatrimonial)
                .HasDefaultValueSql("(null)")
                .HasColumnType("datetime");
            entity.Property(e => e.MmeDtConfirmacao)
                .HasDefaultValueSql("(null)")
                .HasColumnType("datetime");
            entity.Property(e => e.MmeMotivo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.MmeMovEquipId)
                .HasDefaultValue(0L)
                .HasColumnName("MmeMovEquipID");
            entity.Property(e => e.MmeObs)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasComment("Texto de confirmação da movimentação com servidor que confirmou");
            entity.Property(e => e.MmeServidorId).HasDefaultValue(0L);
            entity.Property(e => e.MmeSituacao)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MmeTipoMovEquip)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MmeUsuarioAlt)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");
            entity.Property(e => e.MmeUsuarioAltDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("MmeUsuarioAltDT");

            entity.HasOne(d => d.MmeLocalFisicoAntNavigation).WithMany(p => p.MovimentacaoMoveisEquipamentoMmeLocalFisicoAntNavigations)
                .HasForeignKey(d => d.MmeLocalFisicoAnt)
                .HasConstraintName("FK_MovimentacaoMoveisEquipamentos_LocalFisico1");

            entity.HasOne(d => d.MmeLocalFisicoNovoNavigation).WithMany(p => p.MovimentacaoMoveisEquipamentoMmeLocalFisicoNovoNavigations)
                .HasForeignKey(d => d.MmeLocalFisicoNovo)
                .HasConstraintName("FK_MovimentacaoMoveisEquipamentos_LocalFisico");

            entity.HasOne(d => d.MmeMovEquip).WithMany(p => p.MovimentacaoMoveisEquipamentos)
                .HasForeignKey(d => d.MmeMovEquipId)
                .HasConstraintName("FK_MovimentacaoMoveisEquipamentos_MoveisEquipamentos");
        });

        modelBuilder.Entity<Natureza>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("natureza");

            entity.Property(e => e.Column0)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 0");
            entity.Property(e => e.Column1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 1");
        });

        modelBuilder.Entity<Orgao>(entity =>
        {
            entity.HasKey(e => e.OrgId);

            entity.Property(e => e.OrgCnpjfilial)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength()
                .HasColumnName("OrgCNPJFilial");
            entity.Property(e => e.OrgDtExtincao).HasColumnType("datetime");
            entity.Property(e => e.OrgExtincao)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OrgNome)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("");

            entity.HasOne(d => d.OrgCnpjfilialNavigation).WithMany(p => p.Orgaos)
                .HasForeignKey(d => d.OrgCnpjfilial)
                .HasConstraintName("FK_Orgaos_Membros");
        });

        modelBuilder.Entity<OuvidoriaOrgao>(entity =>
        {
            entity.HasKey(e => e.IdouvOrgao);

            entity.Property(e => e.IdouvOrgao)
                .ValueGeneratedNever()
                .HasColumnName("IDOuvOrgao");
            entity.Property(e => e.NmOrgao)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<OuvidoriaProcesso>(entity =>
        {
            entity.HasKey(e => e.IdouvProcesso);

            entity.Property(e => e.IdouvProcesso)
                .ValueGeneratedNever()
                .HasColumnName("IDOuvProcesso");
            entity.Property(e => e.BairroContrib)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Cepcontrib)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CEPContrib");
            entity.Property(e => e.CidadeContrib)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ComplSolicitacao)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Controle)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.DtRegistro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.EmailContrib)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EnderecoContrib)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FoneContrib)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IdouvOrgao).HasColumnName("IDOuvOrgao");
            entity.Property(e => e.IdouvServico).HasColumnName("IDOuvServico");
            entity.Property(e => e.InformarAndamento)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NmContrib)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.NumeroContrib)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OrigemSolicitacao)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProcId).HasColumnName("ProcID");
            entity.Property(e => e.TipoSolicitacao)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TpIdentContrib)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Ufcontrib)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("UFContrib");

            entity.HasOne(d => d.Con).WithMany(p => p.OuvidoriaProcessos)
                .HasForeignKey(d => d.ConId)
                .HasConstraintName("FK_OuvidoriaProcessos_Contribuintes");

            entity.HasOne(d => d.IdouvOrgaoNavigation).WithMany(p => p.OuvidoriaProcessos)
                .HasForeignKey(d => d.IdouvOrgao)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OuvidoriaProcessos_OuvidoriaOrgaos");

            entity.HasOne(d => d.IdouvServicoNavigation).WithMany(p => p.OuvidoriaProcessos)
                .HasForeignKey(d => d.IdouvServico)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OuvidoriaProcessos_OuvidoriaServicos");

            entity.HasOne(d => d.Proc).WithMany(p => p.OuvidoriaProcessos)
                .HasForeignKey(d => d.ProcId)
                .HasConstraintName("FK_OuvidoriaProcessos_Processos");
        });

        modelBuilder.Entity<OuvidoriaProcessosAco>(entity =>
        {
            entity.HasKey(e => e.IdouvProcAco);

            entity.ToTable("OuvidoriaProcessosAco");

            entity.Property(e => e.IdouvProcAco)
                .ValueGeneratedNever()
                .HasColumnName("IDOuvProcAco");
            entity.Property(e => e.DataOuvProcAco).HasColumnType("datetime");
            entity.Property(e => e.DataRetornoContrib).HasColumnType("datetime");
            entity.Property(e => e.DescricaoAco)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Divulga)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.IdouvProcesso).HasColumnName("IDOuvProcesso");
            entity.Property(e => e.TipoOcorrencia)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.UsuarioRetornoContrib)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.IdouvProcessoNavigation).WithMany(p => p.OuvidoriaProcessosAcos)
                .HasForeignKey(d => d.IdouvProcesso)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OuvidoriaProcessosAco_OuvidoriaProcessos");
        });

        modelBuilder.Entity<OuvidoriaServico>(entity =>
        {
            entity.HasKey(e => e.IdouvServico);

            entity.Property(e => e.IdouvServico)
                .ValueGeneratedNever()
                .HasColumnName("IDOuvServico");
            entity.Property(e => e.DescrServico)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Paise>(entity =>
        {
            entity.HasKey(e => e.PaisId);

            entity.Property(e => e.PaisId)
                .ValueGeneratedNever()
                .HasComment("Código|Código de identificacao do pais");
            entity.Property(e => e.PaisNome)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasComment("Nome do Pais|Nome do pais");
            entity.Property(e => e.PaisSigla)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Sigla|Sigla de identificação do pais.");
        });

        modelBuilder.Entity<Parametro>(entity =>
        {
            entity.HasKey(e => e.ParamId);

            entity.Property(e => e.ParamId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength()
                .HasColumnName("ParamID");
            entity.Property(e => e.ParamIdanexo).HasColumnName("ParamIDAnexo");
            entity.Property(e => e.ParamIdbairro).HasColumnName("ParamIDBairro");
            entity.Property(e => e.ParamIdcarga).HasColumnName("ParamIDCarga");
            entity.Property(e => e.ParamIdcidade).HasColumnName("ParamIDCidade");
            entity.Property(e => e.ParamIdcontribuinte).HasColumnName("ParamIDContribuinte");
            entity.Property(e => e.ParamIddetalhe).HasColumnName("ParamIDDetalhe");
            entity.Property(e => e.ParamIddoc).HasColumnName("ParamIDDoc");
            entity.Property(e => e.ParamIdferiado).HasColumnName("ParamIDFeriado");
            entity.Property(e => e.ParamIdfluxoProc)
                .HasComment("Armazena o último código do Fluxo do Processo")
                .HasColumnName("ParamIDFluxoProc");
            entity.Property(e => e.ParamIdlogProc).HasColumnName("ParamIDLogProc");
            entity.Property(e => e.ParamIdmanutencao).HasColumnName("ParamIDManutencao");
            entity.Property(e => e.ParamIdmovOs).HasColumnName("ParamIDMovOS");
            entity.Property(e => e.ParamIdmovimentoMovEq)
                .HasComment("Numero sequencial para as movimentações dos bens moveis e imoveis")
                .HasColumnName("ParamIDMovimentoMovEq");
            entity.Property(e => e.ParamIdos).HasColumnName("ParamIDOS");
            entity.Property(e => e.ParamIdprocRec)
                .HasComment("Armazena o último código de recebimentos de processos")
                .HasColumnName("ParamIDProcRec");
            entity.Property(e => e.ParamIdprocesso).HasColumnName("ParamIDProcesso");
            entity.Property(e => e.ParamIdrecebimento)
                .HasComment("código sequencial dos recebimentos")
                .HasColumnName("ParamIDRecebimento");
            entity.Property(e => e.ParamIdtextoPadrao).HasColumnName("ParamIDTextoPadrao");
            entity.Property(e => e.ParamIdtipProc).HasColumnName("ParamIDTipProc");
            entity.Property(e => e.ParamIdultBxMovEquip).HasColumnName("ParamIDUltBxMovEquip");
            entity.Property(e => e.ParamLogoSistema).HasColumnType("image");
            entity.Property(e => e.ParamModId)
                .HasComment("Código automático do modelo de bens patrimoniais. entidade \"Modelo\"")
                .HasColumnName("ParamModID");
            entity.Property(e => e.ParamQtdeRegPorFolhaDa).HasColumnName("ParamQtdeRegPorFolhaDA");
            entity.Property(e => e.ParamTipoBxDivTransferida).HasComment("Tipo da Baixa para Dividas Transferidas");
            entity.Property(e => e.ParamTipoBxIsencaoTaxasEmpresa).HasComment("ID da Baixa para as empresas isentas de taxas");
            entity.Property(e => e.ParamTipoBxTap).HasColumnName("ParamTipoBxTAP");
            entity.Property(e => e.ParamTipoBxdeferimentoIsencao).HasColumnName("ParamTipoBXDeferimentoIsencao");
            entity.Property(e => e.ParamTipoBxenquadramento)
                .HasDefaultValue(115)
                .HasComment("Tipo de baixa para usadao quando o enquadramento de MICRO-EMPRESA da 100% de desconto em uma determinada taxa.")
                .HasColumnName("ParamTipoBXEnquadramento");
            entity.Property(e => e.ParamTipoBxisencaoMeiaUfm)
                .HasComment("Tipo da Baixa para Isenção do Imposto qdo inferior a meia UFFI. Cfme Lei.")
                .HasColumnName("ParamTipoBXIsencaoMeiaUFM");
            entity.Property(e => e.ParamTipoBxisencaoPrecarios)
                .HasComment("Tipo da Baixa para isenção dos precários com area do terreno até 500 m2.")
                .HasColumnName("ParamTipoBXIsencaoPrecarios");
            entity.Property(e => e.ParamTipoBxpagtoUnica)
                .HasComment("Codigo da baixa para pagamento das parcelas unicas.")
                .HasColumnName("ParamTipoBXPagtoUnica");
            entity.Property(e => e.ParamTipoBxrecalculo)
                .HasComment("Codigo de baixa para o recalculo")
                .HasColumnName("ParamTipoBXRecalculo");
            entity.Property(e => e.ParamTipoBxreqIsencao)
                .HasComment("Tipo da Baixa para os casos de Requerimento de Isencoes")
                .HasColumnName("ParamTipoBXReqIsencao");
            entity.Property(e => e.ParamTipoBxunicasVencidas)
                .HasComment("Tipo da Baixa para desativar as parcelas unicas vencidas")
                .HasColumnName("ParamTipoBXUnicasVencidas");
            entity.Property(e => e.ParamTipoTribIdpredial)
                .HasComment("Codigo padrão utilizado para o calculo do Imposto Predial")
                .HasColumnName("ParamTipoTribIDPredial");
            entity.Property(e => e.ParamTipoTribIdterritorial)
                .HasComment("Codigo padrão utilizado para o calculo do Imposto Territorial")
                .HasColumnName("ParamTipoTribIDTerritorial");
            entity.Property(e => e.ParamTribAnoIptu)
                .HasDefaultValue((short)2003)
                .HasColumnName("ParamTribAnoIPTU");
            entity.Property(e => e.ParamTribProfundidadePadrao).HasColumnType("money");
        });

        modelBuilder.Entity<ParametroAssinatura>(entity =>
        {
            entity.HasKey(e => e.IdparamAssinatura);

            entity.Property(e => e.IdparamAssinatura)
                .ValueGeneratedNever()
                .HasColumnName("IDParamAssinatura");
            entity.Property(e => e.Descricao)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EstadoAgrupamento)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.IdtipoDoc).HasColumnName("IDTipoDoc");

            entity.HasOne(d => d.IdtipoDocNavigation).WithMany(p => p.ParametroAssinaturas)
                .HasForeignKey(d => d.IdtipoDoc)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ParametroAssinaturas_TiposDocumentosOficiais");
        });

        modelBuilder.Entity<Partido>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.Cidade).HasMaxLength(20);
            entity.Property(e => e.LogoPartido).HasColumnType("image");
            entity.Property(e => e.Nome).HasMaxLength(40);
            entity.Property(e => e.NomePresidente).HasMaxLength(40);
            entity.Property(e => e.Sigla).HasMaxLength(5);
            entity.Property(e => e.Uf)
                .HasMaxLength(2)
                .HasColumnName("UF");
        });

        modelBuilder.Entity<Perg>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("perg");

            entity.Property(e => e.Column10)
                .HasMaxLength(1)
                .HasColumnName("column10");
            entity.Property(e => e.Column11)
                .HasMaxLength(1)
                .HasColumnName("column11");
            entity.Property(e => e.Column4)
                .HasMaxLength(1)
                .HasColumnName("column4");
            entity.Property(e => e.Column5)
                .HasMaxLength(1)
                .HasColumnName("column5");
            entity.Property(e => e.Column6)
                .HasMaxLength(1)
                .HasColumnName("column6");
            entity.Property(e => e.Column7)
                .HasMaxLength(1)
                .HasColumnName("column7");
            entity.Property(e => e.Column8)
                .HasMaxLength(1)
                .HasColumnName("column8");
            entity.Property(e => e.Column9)
                .HasMaxLength(1)
                .HasColumnName("column9");
            entity.Property(e => e.Pergunta).HasMaxLength(300);
            entity.Property(e => e.Secretaria).HasMaxLength(50);
        });

        modelBuilder.Entity<PergSmma>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("perg_smma");

            entity.Property(e => e.Exigencia)
                .HasMaxLength(5000)
                .IsUnicode(false);
            entity.Property(e => e.Numero)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Pergunta)
                .HasMaxLength(5000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PergVisa>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("perg_visa");

            entity.Property(e => e.Numero)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Pergunta)
                .HasMaxLength(5000)
                .IsUnicode(false)
                .HasColumnName("PERGUNTA");
        });

        modelBuilder.Entity<PerguntasParaJuntum>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.Atividade)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("ATIVIDADE");
            entity.Property(e => e.Cnae)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CNAE");
            entity.Property(e => e.Numero).HasColumnName("NUMERO");
            entity.Property(e => e.Pergunta)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("PERGUNTA");
        });

        modelBuilder.Entity<PerguntasZoneamento>(entity =>
        {
            entity.HasKey(e => e.Idtabela);

            entity.ToTable("PerguntasZoneamento");

            entity.Property(e => e.Idtabela).HasColumnName("idtabela");
            entity.Property(e => e.Atividade)
                .HasMaxLength(5000)
                .IsUnicode(false)
                .HasColumnName("ATIVIDADE");
            entity.Property(e => e.Codigo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CODIGO");
            entity.Property(e => e.IdP1).HasColumnName("idP1");
            entity.Property(e => e.IdP2).HasColumnName("idP2");
            entity.Property(e => e.P1)
                .HasMaxLength(5000)
                .IsUnicode(false);
            entity.Property(e => e.P2)
                .HasMaxLength(5000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PermDecretoNovo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PermDecretoNovo");

            entity.Property(e => e.AreaRural)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AREA RURAL");
            entity.Property(e => e.CnaeCodigo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CNAE_CODIGO");
            entity.Property(e => e.CnaeDescricao)
                .HasMaxLength(5000)
                .IsUnicode(false)
                .HasColumnName("CNAE_DESCRICAO");
            entity.Property(e => e.Evb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EVB");
            entity.Property(e => e.Zc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZC");
            entity.Property(e => e.Zce)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZCE");
            entity.Property(e => e.Zcs)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZCS");
            entity.Property(e => e.Zcsp)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZCSP");
            entity.Property(e => e.Zein)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZEIN");
            entity.Property(e => e.Zeis1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZEIS1");
            entity.Property(e => e.Zeis2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZEIS2");
            entity.Property(e => e.Zep)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZEP");
            entity.Property(e => e.Zeu1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZEU1");
            entity.Property(e => e.Zeu2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZEU2");
            entity.Property(e => e.Zfa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZFA");
            entity.Property(e => e.Zfc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZFC");
            entity.Property(e => e.Zfi)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZFI");
            entity.Property(e => e.Zie)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZIE");
            entity.Property(e => e.Zm1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZM1");
            entity.Property(e => e.Zm2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZM2");
            entity.Property(e => e.Zm3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZM3");
            entity.Property(e => e.Zm4)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZM4");
            entity.Property(e => e.Zm5)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZM5");
            entity.Property(e => e.Zpp)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZPP");
            entity.Property(e => e.Zr1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZR1");
            entity.Property(e => e.Zr2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZR2");
            entity.Property(e => e.Zr3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZR3");
            entity.Property(e => e.Zr4)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZR4");
            entity.Property(e => e.Zr5)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZR5");
            entity.Property(e => e.Zro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZRO");
            entity.Property(e => e.Zsi)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZSI");
            entity.Property(e => e.Zt1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZT1");
            entity.Property(e => e.Zt2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZT2");
            entity.Property(e => e.Zt3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZT3");
            entity.Property(e => e.Zt4)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZT4");
        });

        modelBuilder.Entity<Permisso>(entity =>
        {
            entity.HasKey(e => new { e.PrmIdform, e.PrmIdusuario });

            entity.HasIndex(e => e.PrmIdusuario, "IX_Permissoes_PrmIDUsuario").HasFillFactor(90);

            entity.HasIndex(e => new { e.PrmIdusuario, e.PrmIdform }, "IX_Permissoes_PrmIDUsuario_PrmIDForm_inc_PrmInclusao_prmAlteracao");

            entity.Property(e => e.PrmIdform)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PrmIDForm");
            entity.Property(e => e.PrmIdusuario)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PrmIDUsuario");
            entity.Property(e => e.PrmAlteracao)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength();
            entity.Property(e => e.PrmConsultas)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength();
            entity.Property(e => e.PrmInclusao)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength();
            entity.Property(e => e.PrmRelatorios)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength();
            entity.Property(e => e.PrmRemocao)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength();

            entity.HasOne(d => d.PrmIdformNavigation).WithMany(p => p.Permissos)
                .HasForeignKey(d => d.PrmIdform)
                .HasConstraintName("FK_Permissoes_Formularios");

            entity.HasOne(d => d.PrmIdusuarioNavigation).WithMany(p => p.Permissos)
                .HasForeignKey(d => d.PrmIdusuario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Permissoes_Usuarios");
        });

        modelBuilder.Entity<PermissoesBackup2012>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PermissoesBackup2012");

            entity.Property(e => e.PrmAlteracao)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PrmConsultas)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PrmIdform)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PrmIDForm");
            entity.Property(e => e.PrmIdusuario)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PrmIDUsuario");
            entity.Property(e => e.PrmInclusao)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PrmRelatorios)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PrmRemocao)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<PesqServicosSec>(entity =>
        {
            entity.HasKey(e => e.PesqServId);

            entity.ToTable("PesqServicosSec");

            entity.Property(e => e.PesqServId)
                .ValueGeneratedNever()
                .HasColumnName("PesqServID");
            entity.Property(e => e.PesqServDescricao)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.PesqServDtCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.PesqServPrestCorreio)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PesqServPrestInLocco)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PesqServPrestPassivelWeb)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PesqServPrestPessoalmente)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PesqServPrestTelefone)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PesqServPrestWeb)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<PessoaAm>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PessoaAM");

            entity.Property(e => e.Column0)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 0");
            entity.Property(e => e.Column1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 1");
            entity.Property(e => e.Column2)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("Column 2");
            entity.Property(e => e.Column3)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("Column 3");
            entity.Property(e => e.Column4)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 4");
            entity.Property(e => e.Column5)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 5");
            entity.Property(e => e.Column6)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 6");
            entity.Property(e => e.Column7)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 7");
        });

        modelBuilder.Entity<Plan1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Plan1$");

            entity.Property(e => e.Acres)
                .HasColumnType("money")
                .HasColumnName("acres");
            entity.Property(e => e.Ano).HasColumnName("ano");
            entity.Property(e => e.Baixa).HasColumnName("baixa");
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Parc).HasColumnName("parc");
            entity.Property(e => e.Princ)
                .HasColumnType("money")
                .HasColumnName("princ");
            entity.Property(e => e.TipoDiv).HasColumnName("tipoDiv");
            entity.Property(e => e.Total)
                .HasColumnType("money")
                .HasColumnName("total");
            entity.Property(e => e.Vencto).HasColumnType("datetime");
        });

        modelBuilder.Entity<Plaquetum>(entity =>
        {
            entity.HasKey(e => new { e.PlaqCnpjmembro, e.PlaquetaId });

            entity.Property(e => e.PlaqCnpjmembro)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PlaqCNPJMembro");
            entity.Property(e => e.PlaqData)
                .HasComment("Data do Emplaquetamento do bem")
                .HasColumnType("datetime");
            entity.Property(e => e.PlaqDataCria)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.PlaqServidorId).HasComment("Servidor que efetuou o emplaquetamento do bem");
            entity.Property(e => e.PlaqUsuarioCria)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");
        });

        modelBuilder.Entity<PortalAgrupamentoPagina>(entity =>
        {
            entity.HasKey(e => e.IdagrupaPag);

            entity.ToTable("PortalAgrupamentoPagina");

            entity.HasIndex(e => e.Idpagina, "IX_IDPagina").HasFillFactor(90);

            entity.Property(e => e.IdagrupaPag)
                .ValueGeneratedNever()
                .HasColumnName("IDAgrupaPag");
            entity.Property(e => e.DtCad)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DtVal).HasColumnType("datetime");
            entity.Property(e => e.Idobj).HasColumnName("IDObj");
            entity.Property(e => e.Idpagina).HasColumnName("IDPagina");
            entity.Property(e => e.NomeAgrupaPag)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Ordem).HasDefaultValue(0);
            entity.Property(e => e.Posicao)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.IdobjNavigation).WithMany(p => p.PortalAgrupamentoPaginas)
                .HasForeignKey(d => d.Idobj)
                .HasConstraintName("FK_PortalAgrupamentoPagina_PortalObjetos");

            entity.HasOne(d => d.IdpaginaNavigation).WithMany(p => p.PortalAgrupamentoPaginas)
                .HasForeignKey(d => d.Idpagina)
                .HasConstraintName("FK_PortalAgrupamentoPagina_PortalSecoesPrincipal");
        });

        modelBuilder.Entity<PortalAgrupamentoPrincipal>(entity =>
        {
            entity.HasKey(e => e.IdagrupaPrincipal);

            entity.ToTable("PortalAgrupamentoPrincipal");

            entity.Property(e => e.IdagrupaPrincipal)
                .ValueGeneratedNever()
                .HasColumnName("IDAgrupaPrincipal");
            entity.Property(e => e.DtCad)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DtVal).HasColumnType("datetime");
            entity.Property(e => e.Ididioma).HasColumnName("IDIdioma");
            entity.Property(e => e.Idobj).HasColumnName("IDObj");
            entity.Property(e => e.NomeAgrupaPrinc)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Ordem).HasDefaultValue(0);
            entity.Property(e => e.Posicao)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.IdidiomaNavigation).WithMany(p => p.PortalAgrupamentoPrincipals)
                .HasForeignKey(d => d.Ididioma)
                .HasConstraintName("FK_PortalAgrupamentoPrincipal_PortalIdiomas");

            entity.HasOne(d => d.IdobjNavigation).WithMany(p => p.PortalAgrupamentoPrincipals)
                .HasForeignKey(d => d.Idobj)
                .HasConstraintName("FK_PortalAgrupamentoPrincipal_PortalObjetos");
        });

        modelBuilder.Entity<PortalIdioma>(entity =>
        {
            entity.HasKey(e => e.Ididioma);

            entity.Property(e => e.Ididioma)
                .ValueGeneratedNever()
                .HasColumnName("IDIdioma");
            entity.Property(e => e.AcessosPrincipal).HasDefaultValue(0);
            entity.Property(e => e.Idioma)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Idobj).HasColumnName("IDObj");

            entity.HasOne(d => d.IdobjNavigation).WithMany(p => p.PortalIdiomas)
                .HasForeignKey(d => d.Idobj)
                .HasConstraintName("FK_PortalIdiomas_PortalObjetos");
        });

        modelBuilder.Entity<PortalObjeto>(entity =>
        {
            entity.HasKey(e => e.Idobj);

            entity.Property(e => e.Idobj)
                .ValueGeneratedNever()
                .HasColumnName("IDObj");
            entity.Property(e => e.Extensao)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NomeObj)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Objeto).HasColumnType("image");
        });

        modelBuilder.Entity<PortalParametro>(entity =>
        {
            entity.HasKey(e => e.Idparam);

            entity.Property(e => e.Idparam)
                .ValueGeneratedNever()
                .HasColumnName("IDParam");
            entity.Property(e => e.IdobjCabecalho).HasColumnName("IDObjCabecalho");
            entity.Property(e => e.IdobjRodape).HasColumnName("IDObjRodape");
            entity.Property(e => e.ParamPadrao)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength();
            entity.Property(e => e.ParamPeriodo)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PortalPermissoesPagina>(entity =>
        {
            entity.HasKey(e => new { e.UsuId, e.Idpaginas });

            entity.Property(e => e.UsuId)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("UsuID");
            entity.Property(e => e.Idpaginas).HasColumnName("IDPaginas");
            entity.Property(e => e.DtCad)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DtVal).HasColumnType("datetime");

            entity.HasOne(d => d.IdpaginasNavigation).WithMany(p => p.PortalPermissoesPaginas)
                .HasForeignKey(d => d.Idpaginas)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PortalPermissoesPaginas_PortalSecoesPrincipal");

            entity.HasOne(d => d.Usu).WithMany(p => p.PortalPermissoesPaginas)
                .HasForeignKey(d => d.UsuId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PortalPermissoesPaginas_Usuarios");
        });

        modelBuilder.Entity<PortalPublicaco>(entity =>
        {
            entity.HasKey(e => e.Idpublicacao);

            entity.HasIndex(e => e.Idsecao, "IX_IDSecao").HasFillFactor(90);

            entity.Property(e => e.Idpublicacao)
                .ValueGeneratedNever()
                .HasColumnName("IDPublicacao");
            entity.Property(e => e.Descricao).HasColumnType("text");
            entity.Property(e => e.DtCad)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DtVal).HasColumnType("datetime");
            entity.Property(e => e.Idsecao).HasColumnName("IDSecao");
            entity.Property(e => e.Titulo)
                .HasMaxLength(120)
                .IsUnicode(false);
            entity.Property(e => e.UsuId)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("UsuID");

            entity.HasOne(d => d.IdsecaoNavigation).WithMany(p => p.PortalPublicacos)
                .HasForeignKey(d => d.Idsecao)
                .HasConstraintName("FK_PortalPublicacoes_PortalSecoesPagina");

            entity.HasOne(d => d.Usu).WithMany(p => p.PortalPublicacos)
                .HasForeignKey(d => d.UsuId)
                .HasConstraintName("FK_PortalPublicacoes_Usuarios");
        });

        modelBuilder.Entity<PortalPublicacoesObjeto>(entity =>
        {
            entity.HasKey(e => new { e.Idpublicacao, e.Idobj });

            entity.Property(e => e.Idpublicacao).HasColumnName("IDPublicacao");
            entity.Property(e => e.Idobj).HasColumnName("IDObj");
            entity.Property(e => e.Padrao)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.IdobjNavigation).WithMany(p => p.PortalPublicacoesObjetos)
                .HasForeignKey(d => d.Idobj)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PortalPublicacoesObjetos_PortalObjetos");

            entity.HasOne(d => d.IdpublicacaoNavigation).WithMany(p => p.PortalPublicacoesObjetos)
                .HasForeignKey(d => d.Idpublicacao)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PortalPublicacoesObjetos_PortalPublicacoes");
        });

        modelBuilder.Entity<PortalSecoesPagina>(entity =>
        {
            entity.HasKey(e => e.Idsecao);

            entity.ToTable("PortalSecoesPagina");

            entity.HasIndex(e => e.IdagrupaPag, "IX_IDAgrupaPag").HasFillFactor(90);

            entity.Property(e => e.Idsecao)
                .ValueGeneratedNever()
                .HasColumnName("IDSecao");
            entity.Property(e => e.AbrirLink)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DtCad)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DtVal).HasColumnType("datetime");
            entity.Property(e => e.IdagrupaPag).HasColumnName("IDAgrupaPag");
            entity.Property(e => e.Idobj).HasColumnName("IDObj");
            entity.Property(e => e.NomeSecao)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Ordem).HasDefaultValue(0);
            entity.Property(e => e.Target)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.TipoRedirect)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Url)
                .HasMaxLength(120)
                .IsUnicode(false);

            entity.HasOne(d => d.IdagrupaPagNavigation).WithMany(p => p.PortalSecoesPaginas)
                .HasForeignKey(d => d.IdagrupaPag)
                .HasConstraintName("FK_PortalSecoesPagina_PortalAgrupamentoPagina");
        });

        modelBuilder.Entity<PortalSecoesPrincipal>(entity =>
        {
            entity.HasKey(e => e.Idpaginas);

            entity.ToTable("PortalSecoesPrincipal");

            entity.HasIndex(e => e.IdagrupaPrincipal, "IX_IDAgrupaPrincipal").HasFillFactor(90);

            entity.Property(e => e.Idpaginas)
                .ValueGeneratedNever()
                .HasColumnName("IDPaginas");
            entity.Property(e => e.AbrirLink)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Acessos).HasDefaultValue(0);
            entity.Property(e => e.DtCad)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DtVal).HasColumnType("datetime");
            entity.Property(e => e.IdagrupaPrincipal).HasColumnName("IDAgrupaPrincipal");
            entity.Property(e => e.Idobj).HasColumnName("IDObj");
            entity.Property(e => e.Idparam).HasColumnName("IDParam");
            entity.Property(e => e.NomePag)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Ordem).HasDefaultValue(0);
            entity.Property(e => e.Target)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.TipoRedirect)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Url)
                .HasMaxLength(120)
                .IsUnicode(false);

            entity.HasOne(d => d.IdagrupaPrincipalNavigation).WithMany(p => p.PortalSecoesPrincipals)
                .HasForeignKey(d => d.IdagrupaPrincipal)
                .HasConstraintName("FK_PortalSecoesPrincipal_PortalAgrupamentoPrincipal");

            entity.HasOne(d => d.IdparamNavigation).WithMany(p => p.PortalSecoesPrincipals)
                .HasForeignKey(d => d.Idparam)
                .HasConstraintName("FK_PortalSecoesPrincipal_PortalParametros");
        });

        modelBuilder.Entity<ProSigaConsultaProcesso>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ProSIGA_ConsultaProcessos");

            entity.Property(e => e.CargaData).HasColumnType("datetime");
            entity.Property(e => e.CargaDivisaoId).HasColumnName("CargaDivisaoID");
            entity.Property(e => e.CargaDivisaoIdorigem).HasColumnName("CargaDivisaoIDOrigem");
            entity.Property(e => e.CargaId).HasColumnName("CargaID");
            entity.Property(e => e.ProcId).HasColumnName("ProcID");
            entity.Property(e => e.ProcSituacao)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.RecData).HasColumnType("datetime");
            entity.Property(e => e.RecId).HasColumnName("RecID");
            entity.Property(e => e.RecSituacao)
                .HasMaxLength(15)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ProSigaProcessosItbi>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ProSIGA_ProcessosITBI");

            entity.Property(e => e.ConCnpjcpf)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ConCNPJCPF");
            entity.Property(e => e.ConNome)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DivNome)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.ProcDataEntrada).HasColumnType("datetime");
            entity.Property(e => e.ProcDescricao)
                .HasMaxLength(1024)
                .IsUnicode(false);
            entity.Property(e => e.ProcId).HasColumnName("ProcID");
            entity.Property(e => e.ProcTipoProcId).HasColumnName("ProcTipoProcID");
            entity.Property(e => e.TipoProNome)
                .HasMaxLength(60)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ProcArquivamento>(entity =>
        {
            entity.HasKey(e => e.ArquivId);

            entity.Property(e => e.ArquivId).ValueGeneratedNever();

            entity.HasOne(d => d.ArqLocalFisico).WithMany(p => p.ProcArquivamentos)
                .HasForeignKey(d => d.ArqLocalFisicoId)
                .HasConstraintName("FK_ProcArquivamentos_LocalFisico");
        });

        modelBuilder.Entity<Processo>(entity =>
        {
            entity.HasKey(e => e.ProcId);

            entity.ToTable(tb => tb.HasTrigger("TgProcessosInsert"));

            entity.HasIndex(e => e.ProcDivTramitacao, "IX_Processos_ProcDivTramitacao").HasFillFactor(90);

            entity.HasIndex(e => e.ProcIdContribuinte, "IX_Processos_ProcIdContribuinte").HasFillFactor(90);

            entity.Property(e => e.ProcId)
                .ValueGeneratedNever()
                .HasComment("Código de Identificação do Processo")
                .HasColumnName("ProcID");
            entity.Property(e => e.ProcAtendido)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasComment("Informar se a solicitação foi ou não atendida.");
            entity.Property(e => e.ProcDataEnc)
                .HasComment("Data de encerramento do processo")
                .HasColumnType("datetime");
            entity.Property(e => e.ProcDataEntrada)
                .HasDefaultValueSql("('')")
                .HasComment("Data da entrada do processo")
                .HasColumnType("datetime");
            entity.Property(e => e.ProcDataPrevResp)
                .HasDefaultValueSql("('')")
                .HasComment("Data prevista para resposta ao contribuinte")
                .HasColumnType("datetime");
            entity.Property(e => e.ProcDeferido)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasComment("Informar se a solicitação foi ou não aprovada");
            entity.Property(e => e.ProcDescricao)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("Descrição do objeto do processo");
            entity.Property(e => e.ProcDivTramitacao)
                .HasDefaultValue(0)
                .HasComment("Identificação da divisão onde o processo está");
            entity.Property(e => e.ProcDtArquivo).HasColumnType("datetime");
            entity.Property(e => e.ProcDtIncineracao).HasColumnType("datetime");
            entity.Property(e => e.ProcIdContribuinte)
                .HasDefaultValueSql("('')")
                .HasComment("Código de Identificação  do Contribuinte");
            entity.Property(e => e.ProcPublicaWeb)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Sim")
                .IsFixedLength()
                .HasComment("Permite ou não consulta na internet");
            entity.Property(e => e.ProcSituacao)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("Situação do processo");
            entity.Property(e => e.ProcTipoProcId)
                .HasDefaultValue(0)
                .HasComment("Identificação do Tipo do Processo")
                .HasColumnName("ProcTipoProcID");

            entity.HasOne(d => d.ProcArquiv).WithMany(p => p.Processos)
                .HasForeignKey(d => d.ProcArquivId)
                .HasConstraintName("FK_Processos_ProcArquivamentos");

            entity.HasOne(d => d.ProcDivTramitacaoNavigation).WithMany(p => p.Processos)
                .HasForeignKey(d => d.ProcDivTramitacao)
                .HasConstraintName("FK_Processos_Divisoes");

            entity.HasOne(d => d.ProcIdContribuinteNavigation).WithMany(p => p.Processos)
                .HasForeignKey(d => d.ProcIdContribuinte)
                .HasConstraintName("FK_Processos_Contribuintes");

            entity.HasOne(d => d.ProcServidor).WithMany(p => p.Processos)
                .HasForeignKey(d => d.ProcServidorId)
                .HasConstraintName("FK_Processos_Servidores");

            entity.HasOne(d => d.ProcTipoProc).WithMany(p => p.Processos)
                .HasForeignKey(d => d.ProcTipoProcId)
                .HasConstraintName("FK_Processos_TipoProcesso");
        });

        modelBuilder.Entity<Processos2017>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PROCESSOS_2017");

            entity.Property(e => e.Cpf)
                .HasMaxLength(50)
                .HasColumnName("CPF");
            entity.Property(e => e.Data)
                .HasColumnType("datetime")
                .HasColumnName("DATA");
            entity.Property(e => e.Inscrição)
                .HasMaxLength(50)
                .HasColumnName("INSCRIÇÃO");
            entity.Property(e => e.NomeDoRequerente)
                .HasMaxLength(255)
                .HasColumnName("NOME DO REQUERENTE");
            entity.Property(e => e.Processo).HasColumnName("PROCESSO");
            entity.Property(e => e.Processo1).HasColumnName("PROCESSO1");
        });

        modelBuilder.Entity<Processos2018>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PROCESSOS_2018");

            entity.Property(e => e.Cpf)
                .HasMaxLength(255)
                .HasColumnName("CPF");
            entity.Property(e => e.Data)
                .HasColumnType("datetime")
                .HasColumnName("DATA");
            entity.Property(e => e.F6).HasMaxLength(255);
            entity.Property(e => e.Inscrição)
                .HasMaxLength(255)
                .HasColumnName("INSCRIÇÃO");
            entity.Property(e => e.NomeDoRequerente)
                .HasMaxLength(255)
                .HasColumnName("NOME DO REQUERENTE");
            entity.Property(e => e.Processo).HasColumnName("PROCESSO");
        });

        modelBuilder.Entity<Processos2019>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PROCESSOS_2019");

            entity.Property(e => e.Cpf)
                .HasMaxLength(255)
                .HasColumnName("CPF");
            entity.Property(e => e.DataProc)
                .HasColumnType("datetime")
                .HasColumnName("DATA_PROC");
            entity.Property(e => e.Inscricao)
                .HasMaxLength(255)
                .HasColumnName("INSCRICAO");
            entity.Property(e => e.ProcAno).HasColumnName("PROC_ANO");
            entity.Property(e => e.ProcNum).HasColumnName("PROC_NUM");
            entity.Property(e => e.ProcRequerente)
                .HasMaxLength(255)
                .HasColumnName("PROC_REQUERENTE");
        });

        modelBuilder.Entity<ProdRurAtividadeRural>(entity =>
        {
            entity.HasKey(e => e.IdativRural);

            entity.ToTable("ProdRurAtividadeRural");

            entity.Property(e => e.IdativRural)
                .ValueGeneratedNever()
                .HasColumnName("IDAtivRural");
            entity.Property(e => e.Nome)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ProdRurClassificacaoRecurso>(entity =>
        {
            entity.HasKey(e => e.Idclassificacao);

            entity.Property(e => e.Idclassificacao)
                .ValueGeneratedNever()
                .HasColumnName("IDClassificacao");
            entity.Property(e => e.Nome)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ProdRurCoeficienteUnidMed>(entity =>
        {
            entity.HasKey(e => e.IdcoeUni).HasName("PK_ProdRurCoeficienteUnidades");

            entity.ToTable("ProdRurCoeficienteUnidMed");

            entity.Property(e => e.IdcoeUni)
                .ValueGeneratedNever()
                .HasColumnName("IDCoeUni");
            entity.Property(e => e.Coeficiente).HasColumnType("money");
            entity.Property(e => e.IdprodRural).HasColumnName("IDProdRural");
        });

        modelBuilder.Entity<ProdRurImposto>(entity =>
        {
            entity.HasKey(e => e.Idimposto);

            entity.Property(e => e.Idimposto)
                .ValueGeneratedNever()
                .HasColumnName("IDImposto");
            entity.Property(e => e.AliquotaPadrao).HasColumnType("money");
            entity.Property(e => e.Nome)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ProdRurNaturezaOperacao>(entity =>
        {
            entity.HasKey(e => e.IdnatOperacao);

            entity.ToTable("ProdRurNaturezaOperacao");

            entity.Property(e => e.IdnatOperacao)
                .ValueGeneratedNever()
                .HasColumnName("IDNatOperacao");
            entity.Property(e => e.Nome)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ProdRurNotaFiscaisCancelada>(entity =>
        {
            entity.HasKey(e => e.IdcancNf);

            entity.Property(e => e.IdcancNf)
                .ValueGeneratedNever()
                .HasColumnName("IDCancNF");
            entity.Property(e => e.Data).HasColumnType("datetime");
            entity.Property(e => e.Historico)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.IdnotaFiscal).HasColumnName("IDNotaFiscal");

            entity.HasOne(d => d.IdnotaFiscalNavigation).WithMany(p => p.ProdRurNotaFiscaisCancelada)
                .HasForeignKey(d => d.IdnotaFiscal)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProdRurNotaFiscaisCanceladas_ProdRurNotaFiscal");
        });

        modelBuilder.Entity<ProdRurNotaFiscal>(entity =>
        {
            entity.HasKey(e => e.IdnotaFiscal);

            entity.ToTable("ProdRurNotaFiscal");

            entity.HasIndex(e => e.ConIdcomprador, "IX_ConIDComprador").HasFillFactor(90);

            entity.HasIndex(e => e.IdpropProdutor, "IX_IDPropProdutor").HasFillFactor(90);

            entity.Property(e => e.IdnotaFiscal)
                .ValueGeneratedNever()
                .HasColumnName("IDNotaFiscal");
            entity.Property(e => e.ConIdcomprador)
                .HasDefaultValue(0L)
                .HasColumnName("ConIDComprador");
            entity.Property(e => e.ConIdtransportador)
                .HasDefaultValue(0L)
                .HasColumnName("ConIDTransportador");
            entity.Property(e => e.DataEmissao).HasColumnType("datetime");
            entity.Property(e => e.DataValidade).HasColumnType("datetime");
            entity.Property(e => e.FretePorConta)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.IdnatOperacao).HasColumnName("IDNatOperacao");
            entity.Property(e => e.IdpropProdutor).HasColumnName("IDPropProdutor");
            entity.Property(e => e.NumNfcomprador)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasColumnName("NumNFComprador");
            entity.Property(e => e.ValorBaseImposto).HasColumnType("money");
            entity.Property(e => e.ValorImposto).HasColumnType("money");
            entity.Property(e => e.ValorNfcomprador)
                .HasColumnType("money")
                .HasColumnName("ValorNFComprador");
            entity.Property(e => e.VeicTransPlacaNum)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.VeicTransPlacaPref)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.ConIdcompradorNavigation).WithMany(p => p.ProdRurNotaFiscalConIdcompradorNavigations)
                .HasForeignKey(d => d.ConIdcomprador)
                .HasConstraintName("FK_ProdRurNotaFiscal_Contribuintes");

            entity.HasOne(d => d.ConIdtransportadorNavigation).WithMany(p => p.ProdRurNotaFiscalConIdtransportadorNavigations)
                .HasForeignKey(d => d.ConIdtransportador)
                .HasConstraintName("FK_ProdRurNotaFiscal_Contribuintes1");

            entity.HasOne(d => d.IdnatOperacaoNavigation).WithMany(p => p.ProdRurNotaFiscals)
                .HasForeignKey(d => d.IdnatOperacao)
                .HasConstraintName("FK_ProdRurNotaFiscal_ProdRurNaturezaOperacao");

            entity.HasOne(d => d.IdpropProdutorNavigation).WithMany(p => p.ProdRurNotaFiscals)
                .HasForeignKey(d => d.IdpropProdutor)
                .HasConstraintName("FK_ProdRurNotaFiscal_ProdRurPropriedadesRurProdutor");
        });

        modelBuilder.Entity<ProdRurNotaFiscalIten>(entity =>
        {
            entity.HasKey(e => new { e.IdnotaFiscal, e.IdprodRural });

            entity.Property(e => e.IdnotaFiscal).HasColumnName("IDNotaFiscal");
            entity.Property(e => e.IdprodRural).HasColumnName("IDProdRural");
            entity.Property(e => e.Aliquota).HasColumnType("money");
            entity.Property(e => e.Idimposto).HasColumnName("IDImposto");
            entity.Property(e => e.Qtde).HasColumnType("money");
            entity.Property(e => e.ValorTotal).HasColumnType("money");

            entity.HasOne(d => d.IdimpostoNavigation).WithMany(p => p.ProdRurNotaFiscalItens)
                .HasForeignKey(d => d.Idimposto)
                .HasConstraintName("FK_ProdRurNotaFiscalItens_ProdRurImpostos");

            entity.HasOne(d => d.IdnotaFiscalNavigation).WithMany(p => p.ProdRurNotaFiscalItens)
                .HasForeignKey(d => d.IdnotaFiscal)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProdRurNotaFiscalItens_ProdRurNotaFiscal");

            entity.HasOne(d => d.IdprodRuralNavigation).WithMany(p => p.ProdRurNotaFiscalItens)
                .HasForeignKey(d => d.IdprodRural)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProdRurNotaFiscalItens_ProdRurProdutosRurais");

            entity.HasOne(d => d.UnMed).WithMany(p => p.ProdRurNotaFiscalItens)
                .HasForeignKey(d => d.UnMedId)
                .HasConstraintName("FK_ProdRurNotaFiscalItens_AlmUnMed");
        });

        modelBuilder.Entity<ProdRurNotaFiscalOcorr>(entity =>
        {
            entity.HasKey(e => e.IdocorNf);

            entity.ToTable("ProdRurNotaFiscalOcorr");

            entity.Property(e => e.IdocorNf)
                .ValueGeneratedNever()
                .HasColumnName("IDOcorNF");
            entity.Property(e => e.Data).HasColumnType("datetime");
            entity.Property(e => e.Historico)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.IdnotaFiscal).HasColumnName("IDNotaFiscal");
            entity.Property(e => e.TipoOcor)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.UsuId)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("UsuID");

            entity.HasOne(d => d.IdnotaFiscalNavigation).WithMany(p => p.ProdRurNotaFiscalOcorrs)
                .HasForeignKey(d => d.IdnotaFiscal)
                .HasConstraintName("FK_ProdRurNotaFiscalOcorr_ProdRurNotaFiscal");

            entity.HasOne(d => d.Usu).WithMany(p => p.ProdRurNotaFiscalOcorrs)
                .HasForeignKey(d => d.UsuId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProdRurNotaFiscalOcorr_Usuarios");
        });

        modelBuilder.Entity<ProdRurProducao>(entity =>
        {
            entity.HasKey(e => e.Idproducao);

            entity.ToTable("ProdRurProducao");

            entity.Property(e => e.Idproducao)
                .ValueGeneratedNever()
                .HasColumnName("IDProducao");
            entity.Property(e => e.AreaProducao).HasColumnType("money");
            entity.Property(e => e.DataFim).HasColumnType("datetime");
            entity.Property(e => e.DataIni).HasColumnType("datetime");
            entity.Property(e => e.IdprodRural).HasColumnName("IDProdRural");
            entity.Property(e => e.IdpropProdutor).HasColumnName("IDPropProdutor");
            entity.Property(e => e.Qtde).HasColumnType("money");

            entity.HasOne(d => d.IdprodRuralNavigation).WithMany(p => p.ProdRurProducaos)
                .HasForeignKey(d => d.IdprodRural)
                .HasConstraintName("FK_ProdRurProducao_ProdRurProdutosRurais");

            entity.HasOne(d => d.IdpropProdutorNavigation).WithMany(p => p.ProdRurProducaos)
                .HasForeignKey(d => d.IdpropProdutor)
                .HasConstraintName("FK_ProdRurProducao_ProdRurPropriedadesRurProdutor");

            entity.HasOne(d => d.UnMed).WithMany(p => p.ProdRurProducaos)
                .HasForeignKey(d => d.UnMedId)
                .HasConstraintName("FK_ProdRurProducao_AlmUnMed");
        });

        modelBuilder.Entity<ProdRurProdutor>(entity =>
        {
            entity.HasKey(e => e.Idprodutor);

            entity.ToTable("ProdRurProdutor");

            entity.Property(e => e.Idprodutor)
                .ValueGeneratedNever()
                .HasColumnName("IDProdutor");
            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.ProdCodAnterior)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ProdDataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ProdDataUltAlt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ProdInscCadIcms)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ProdInscCadICMS");
            entity.Property(e => e.ProdInscCadInss)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ProdInscCadINSS");
            entity.Property(e => e.ProdInscrRecFederal)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ProdUsuCad)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");
            entity.Property(e => e.ProdUsuUltAlt)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");

            entity.HasOne(d => d.Con).WithMany(p => p.ProdRurProdutors)
                .HasForeignKey(d => d.ConId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProdRurProdutor_Contribuintes");
        });

        modelBuilder.Entity<ProdRurProdutorFamilium>(entity =>
        {
            entity.HasKey(e => new { e.Idprodutor, e.ConId });

            entity.Property(e => e.Idprodutor).HasColumnName("IDProdutor");
            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.NivelParent)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SairNota)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength();

            entity.HasOne(d => d.Con).WithMany(p => p.ProdRurProdutorFamilia)
                .HasForeignKey(d => d.ConId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProdRurProdutorFamilia_Contribuintes");

            entity.HasOne(d => d.IdprodutorNavigation).WithMany(p => p.ProdRurProdutorFamilia)
                .HasForeignKey(d => d.Idprodutor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProdRurProdutorFamilia_ProdRurProdutor");
        });

        modelBuilder.Entity<ProdRurProdutosRurai>(entity =>
        {
            entity.HasKey(e => e.IdprodRural);

            entity.Property(e => e.IdprodRural)
                .ValueGeneratedNever()
                .HasColumnName("IDProdRural");
            entity.Property(e => e.IdativRural).HasColumnName("IDAtivRural");
            entity.Property(e => e.Nome)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.IdativRuralNavigation).WithMany(p => p.ProdRurProdutosRurais)
                .HasForeignKey(d => d.IdativRural)
                .HasConstraintName("FK_ProdRurProdutosRurais_ProdRurAtividadeRural");
        });

        modelBuilder.Entity<ProdRurProprRurViasAcesso>(entity =>
        {
            entity.HasKey(e => new { e.Idpropriedade, e.LogradId });

            entity.ToTable("ProdRurProprRurViasAcesso");

            entity.Property(e => e.Idpropriedade).HasColumnName("IDPropriedade");
            entity.Property(e => e.LogradId).HasColumnName("LogradID");
            entity.Property(e => e.DataCadastro).HasColumnType("datetime");
            entity.Property(e => e.DistanciaSedeKm)
                .HasColumnType("decimal(6, 3)")
                .HasColumnName("DistanciaSedeKM");

            entity.HasOne(d => d.IdpropriedadeNavigation).WithMany(p => p.ProdRurProprRurViasAcessos)
                .HasForeignKey(d => d.Idpropriedade)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProdRurProprRurViasAcesso_ProdRurPropriedades");
        });

        modelBuilder.Entity<ProdRurPropriedade>(entity =>
        {
            entity.HasKey(e => e.Idpropriedade);

            entity.Property(e => e.Idpropriedade)
                .ValueGeneratedNever()
                .HasColumnName("IDPropriedade");
            entity.Property(e => e.LogradId).HasColumnName("LogradID");
            entity.Property(e => e.ProRuAreaTotal).HasColumnType("money");
            entity.Property(e => e.ProRuCartorio)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.ProRuCep)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ProRuCEP");
            entity.Property(e => e.ProRuCodAnterior)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ProRuComplemento)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ProRuCoordGeoLat).HasColumnType("decimal(10, 7)");
            entity.Property(e => e.ProRuCoordGeoLong).HasColumnType("decimal(10, 7)");
            entity.Property(e => e.ProRuNome)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.ProRuNumInscrIncra)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ProRuNumInscrINCRA");
            entity.Property(e => e.ProRuNumRegistro)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ProRuUtmfinal)
                .HasColumnType("decimal(10, 7)")
                .HasColumnName("ProRuUTMFinal");
            entity.Property(e => e.ProRuUtminicial)
                .HasColumnType("decimal(10, 7)")
                .HasColumnName("ProRuUTMInicial");
            entity.Property(e => e.ProRuUtmzona)
                .HasColumnType("decimal(10, 7)")
                .HasColumnName("ProRuUTMZONA");

            entity.HasOne(d => d.Bairro).WithMany(p => p.ProdRurPropriedades)
                .HasForeignKey(d => d.BairroId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProdRurPropriedades_Bairro");

            entity.HasOne(d => d.Cidade).WithMany(p => p.ProdRurPropriedades)
                .HasForeignKey(d => d.CidadeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProdRurPropriedades_Cidade");

            entity.HasOne(d => d.Lograd).WithMany(p => p.ProdRurPropriedades)
                .HasForeignKey(d => d.LogradId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProdRurPropriedades_Logradouro");
        });

        modelBuilder.Entity<ProdRurPropriedadesRurProdutor>(entity =>
        {
            entity.HasKey(e => e.IdpropProdutor);

            entity.ToTable("ProdRurPropriedadesRurProdutor");

            entity.Property(e => e.IdpropProdutor)
                .ValueGeneratedNever()
                .HasColumnName("IDPropProdutor");
            entity.Property(e => e.Idprodutor).HasColumnName("IDProdutor");
            entity.Property(e => e.Idpropriedade).HasColumnName("IDPropriedade");
            entity.Property(e => e.ProPoArrendatario)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProPoDataFim).HasColumnType("datetime");
            entity.Property(e => e.ProPoDataInicio).HasColumnType("datetime");
            entity.Property(e => e.ProPoNumCtrArrend)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ProPoObservacao)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ProPoParceiro)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProPoProprietario)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProPoVencCtrArrend).HasColumnType("datetime");

            entity.HasOne(d => d.IdprodutorNavigation).WithMany(p => p.ProdRurPropriedadesRurProdutors)
                .HasForeignKey(d => d.Idprodutor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProdRurPropriedadesRurProdutor_ProdRurProdutor");

            entity.HasOne(d => d.IdpropriedadeNavigation).WithMany(p => p.ProdRurPropriedadesRurProdutors)
                .HasForeignKey(d => d.Idpropriedade)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProdRurPropriedadesRurProdutor_ProdRurPropriedades");
        });

        modelBuilder.Entity<ProdRurProtocolo>(entity =>
        {
            entity.HasKey(e => e.Idprotocolo);

            entity.ToTable("ProdRurProtocolo");

            entity.Property(e => e.Idprotocolo)
                .ValueGeneratedNever()
                .HasColumnName("IDProtocolo");
            entity.Property(e => e.Data).HasColumnType("datetime");
            entity.Property(e => e.Operacao)
                .HasMaxLength(15)
                .IsUnicode(false);

            entity.HasMany(d => d.IdnotaFiscals).WithMany(p => p.Idprotocolos)
                .UsingEntity<Dictionary<string, object>>(
                    "ProdRurNotaFiscalProtocolo",
                    r => r.HasOne<ProdRurNotaFiscal>().WithMany()
                        .HasForeignKey("IdnotaFiscal")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_ProdRurNotaFiscalProtocolo_ProdRurNotaFiscal"),
                    l => l.HasOne<ProdRurProtocolo>().WithMany()
                        .HasForeignKey("Idprotocolo")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_ProdRurNotaFiscalProtocolo_ProdRurProtocolo"),
                    j =>
                    {
                        j.HasKey("Idprotocolo", "IdnotaFiscal");
                        j.ToTable("ProdRurNotaFiscalProtocolo");
                        j.IndexerProperty<int>("Idprotocolo").HasColumnName("IDProtocolo");
                        j.IndexerProperty<int>("IdnotaFiscal").HasColumnName("IDNotaFiscal");
                    });
        });

        modelBuilder.Entity<ProdRurRecurPropriedade>(entity =>
        {
            entity.HasKey(e => e.IdrecPropriedade);

            entity.ToTable("ProdRurRecurPropriedade");

            entity.Property(e => e.IdrecPropriedade)
                .ValueGeneratedNever()
                .HasColumnName("IDRecPropriedade");
            entity.Property(e => e.DataFim).HasColumnType("datetime");
            entity.Property(e => e.DataIni).HasColumnType("datetime");
            entity.Property(e => e.Idpropriedade).HasColumnName("IDPropriedade");
            entity.Property(e => e.IdtipoRecurso).HasColumnName("IDTipoRecurso");

            entity.HasOne(d => d.IdpropriedadeNavigation).WithMany(p => p.ProdRurRecurPropriedades)
                .HasForeignKey(d => d.Idpropriedade)
                .HasConstraintName("FK_ProdRurRecurPropriedade_ProdRurPropriedades");

            entity.HasOne(d => d.IdtipoRecursoNavigation).WithMany(p => p.ProdRurRecurPropriedades)
                .HasForeignKey(d => d.IdtipoRecurso)
                .HasConstraintName("FK_ProdRurRecurPropriedade_ProdRurTipoRecurso");
        });

        modelBuilder.Entity<ProdRurTipoRecurso>(entity =>
        {
            entity.HasKey(e => e.IdtipoRecurso);

            entity.ToTable("ProdRurTipoRecurso");

            entity.Property(e => e.IdtipoRecurso)
                .ValueGeneratedNever()
                .HasColumnName("IDTipoRecurso");
            entity.Property(e => e.Idclassificacao).HasColumnName("IDClassificacao");
            entity.Property(e => e.Nome)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.IdclassificacaoNavigation).WithMany(p => p.ProdRurTipoRecursos)
                .HasForeignKey(d => d.Idclassificacao)
                .HasConstraintName("FK_ProdRurTipoRecurso_ProdRurClassificacaoRecursos");
        });

        modelBuilder.Entity<Profissao>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Profissao");

            entity.Property(e => e.DsProfissao)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DS_Profissao");
            entity.Property(e => e.IdProfissao)
                .HasMaxLength(6)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID_Profissao");
            entity.Property(e => e.SgProfissao)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SG_Profissao");
        });

        modelBuilder.Entity<Psiaplicativo>(entity =>
        {
            entity.HasKey(e => e.AplicativoId);

            entity.ToTable("PSIAplicativo");

            entity.Property(e => e.AplicativoId).ValueGeneratedNever();
            entity.Property(e => e.AplicNome)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.AplicSigla)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Psiformulario>(entity =>
        {
            entity.HasKey(e => e.FormularioId).HasName("PK_psiMenu");

            entity.ToTable("PSIFormularios");

            entity.Property(e => e.FormularioId)
                .ValueGeneratedNever()
                .HasComment("Identificação do Formulário")
                .HasColumnName("FormularioID");
            entity.Property(e => e.FormCabecObjId).HasComment("Chave Estrangeira( ObjetoId )  que representa a Imagem do objeto a ser colocado no cabeçalho do formulário");
            entity.Property(e => e.FormFuncao)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasComment("Função do formulário ou descritivo do menu");
            entity.Property(e => e.FormHelpObjId).HasComment("Chave Estrangeira( ObjetoId )  que representa a Imagem do objeto a ser colocado como help do formulário no cabeçalho deste");
            entity.Property(e => e.FormNmMenu)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasComment("Nome do formulário a ser exibido no menu, onde muitas vezes se faz necessário abreviar o nome para que nao se tenha um menu gigantesco ");
            entity.Property(e => e.FormNmTitulo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasComment("Nome do formulário a ser exibido no cabecalho do mesmo");
            entity.Property(e => e.ModuloId).HasComment("Identificação do Módulo do Formulario");
            entity.Property(e => e.PageEndereco)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasComment("Endereço da Página a ser exibida");
            entity.Property(e => e.RefFormulario).HasComment("Referencia do Formulário, indicando a quem o mesmo se refere");
            entity.Property(e => e.TemaId).HasComment("Chave Estrangeira que representara ");
            entity.Property(e => e.TipoForm)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Tipo do Formulário podendo ser Cadastros, Relatórios, Parametros, Movimento");

            entity.HasOne(d => d.FormCabecObj).WithMany(p => p.PsiformularioFormCabecObjs)
                .HasForeignKey(d => d.FormCabecObjId)
                .HasConstraintName("FK_psiFormularios_PSIObjetos");

            entity.HasOne(d => d.FormHelpObj).WithMany(p => p.PsiformularioFormHelpObjs)
                .HasForeignKey(d => d.FormHelpObjId)
                .HasConstraintName("FK_psiFormularios_PSIObjetos1");

            entity.HasOne(d => d.Modulo).WithMany(p => p.Psiformularios)
                .HasForeignKey(d => d.ModuloId)
                .HasConstraintName("FK_psiFormularios_PSIModulo");

            entity.HasOne(d => d.RefFormularioNavigation).WithMany(p => p.InverseRefFormularioNavigation)
                .HasForeignKey(d => d.RefFormulario)
                .HasConstraintName("FK_psiMenu_psiMenu");

            entity.HasOne(d => d.Tema).WithMany(p => p.Psiformularios)
                .HasForeignKey(d => d.TemaId)
                .HasConstraintName("FK_psiFormularios_psiTemas");

            entity.HasMany(d => d.TipoPerfils).WithMany(p => p.Formularios)
                .UsingEntity<Dictionary<string, object>>(
                    "PsiperfilFormulario",
                    r => r.HasOne<PsitipoPerfil>().WithMany()
                        .HasForeignKey("TipoPerfilId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_PSIPerfilFormularios_PSITipoPerfil"),
                    l => l.HasOne<Psiformulario>().WithMany()
                        .HasForeignKey("FormularioId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_PSIPerfilFormularios_psiFormularios"),
                    j =>
                    {
                        j.HasKey("FormularioId", "TipoPerfilId");
                        j.ToTable("PSIPerfilFormularios");
                        j.IndexerProperty<long>("FormularioId").HasColumnName("FormularioID");
                    });
        });

        modelBuilder.Entity<PsilogauditoriaConfig>(entity =>
        {
            entity.HasKey(e => e.LogAuditConfigNomeTabela);

            entity.ToTable("PSILOGAuditoriaConfig");

            entity.Property(e => e.LogAuditConfigNomeTabela)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("logAuditConfigNomeTabela");
            entity.Property(e => e.LogAuditConfigAtivadoAlt)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("logAuditConfigAtivadoAlt");
            entity.Property(e => e.LogAuditConfigAtivadoExc)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("logAuditConfigAtivadoExc");
            entity.Property(e => e.LogAuditConfigAtivadoIns)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("logAuditConfigAtivadoIns");
        });

        modelBuilder.Entity<Psimodulo>(entity =>
        {
            entity.HasKey(e => e.ModuloId);

            entity.ToTable("PSIModulo");

            entity.Property(e => e.ModuloId).ValueGeneratedNever();
            entity.Property(e => e.ModNome)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ModSigla)
                .HasMaxLength(30)
                .IsUnicode(false);

            entity.HasOne(d => d.Aplicativo).WithMany(p => p.Psimodulos)
                .HasForeignKey(d => d.AplicativoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PSIModulo_PSIAplicativo");
        });

        modelBuilder.Entity<Psiobjeto>(entity =>
        {
            entity.HasKey(e => e.ObjetoId);

            entity.ToTable("PSIObjetos");

            entity.Property(e => e.ObjetoId).ValueGeneratedNever();
            entity.Property(e => e.ObjDtCad).HasColumnType("datetime");
            entity.Property(e => e.ObjNome)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ObjTipo)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ObjUsuarioCad)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Objeto).HasColumnType("image");
        });

        modelBuilder.Entity<Psitema>(entity =>
        {
            entity.HasKey(e => e.TemaId).HasName("PK_psiTemas");

            entity.ToTable("PSITemas");

            entity.Property(e => e.TemaId).ValueGeneratedNever();
            entity.Property(e => e.TemaTitulo)
                .HasMaxLength(255)
                .IsUnicode(false);

            entity.HasOne(d => d.TemaCabecObj).WithMany(p => p.PsitemaTemaCabecObjs)
                .HasForeignKey(d => d.TemaCabecObjId)
                .HasConstraintName("FK_psiTemas_PSIObjetos");

            entity.HasOne(d => d.TemaRodapeobj).WithMany(p => p.PsitemaTemaRodapeobjs)
                .HasForeignKey(d => d.TemaRodapeobjId)
                .HasConstraintName("FK_psiTemas_PSIObjetos1");
        });

        modelBuilder.Entity<PsitipoPerfil>(entity =>
        {
            entity.HasKey(e => e.TipoPerfilId).HasName("PK_PSIPerfil");

            entity.ToTable("PSITipoPerfil");

            entity.Property(e => e.TipoPerfilId).ValueGeneratedNever();
            entity.Property(e => e.TipPerfNome)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Psiusuario>(entity =>
        {
            entity.HasKey(e => e.UsuarioId);

            entity.ToTable("PSIUsuario");

            entity.Property(e => e.UsuarioId).ValueGeneratedNever();
            entity.Property(e => e.UsuarioDtCad).HasColumnType("datetime");
            entity.Property(e => e.UsuarioEmail)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("UsuarioEMail");

            entity.HasOne(d => d.Con).WithMany(p => p.Psiusuarios)
                .HasForeignKey(d => d.ConId)
                .HasConstraintName("FK_PSIUsuario_Contribuintes");

            entity.HasMany(d => d.TipoPerfils).WithMany(p => p.Usuarios)
                .UsingEntity<Dictionary<string, object>>(
                    "PsiperfildoUsuario",
                    r => r.HasOne<PsitipoPerfil>().WithMany()
                        .HasForeignKey("TipoPerfilId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_PSIPerfildoUsuario_PSITipoPerfil"),
                    l => l.HasOne<Psiusuario>().WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_PSIPerfildoUsuario_PSIUsuario"),
                    j =>
                    {
                        j.HasKey("UsuarioId", "TipoPerfilId");
                        j.ToTable("PSIPerfildoUsuario");
                    });
        });

        modelBuilder.Entity<PubDocumento>(entity =>
        {
            entity.HasIndex(e => new { e.DivId, e.TipoId }, "IX_DivID_TipoID").HasFillFactor(90);

            entity.HasIndex(e => e.PubDataInclusao, "IX_PubDocumentos")
                .IsDescending()
                .HasFillFactor(90);

            entity.HasIndex(e => e.PubNomeDocumento, "IX_PubNomeDocumento").HasFillFactor(90);

            entity.Property(e => e.PubDocumentoId).HasColumnName("PubDocumentoID");
            entity.Property(e => e.DivId).HasColumnName("DivID");
            entity.Property(e => e.PubCaminho)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.PubData).HasColumnType("datetime");
            entity.Property(e => e.PubDataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.PubDataPublicacao).HasColumnType("datetime");
            entity.Property(e => e.PubImagem).HasColumnType("image");
            entity.Property(e => e.PubNomeDocumento)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PubObjeto).HasColumnType("text");
            entity.Property(e => e.PubOrgaoNumero)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PubPublicaInternet)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Sim")
                .IsFixedLength();
            entity.Property(e => e.PubTamanho)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PubUsuarioInclusao)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.TipoId).HasColumnName("TipoID");

            entity.HasOne(d => d.Div).WithMany(p => p.PubDocumentos)
                .HasForeignKey(d => d.DivId)
                .HasConstraintName("FK_PubDocumentos_Divisoes");

            entity.HasOne(d => d.Tipo).WithMany(p => p.PubDocumentos)
                .HasForeignKey(d => d.TipoId)
                .HasConstraintName("FK_PubDocumentos_PubTipoDocumento");
        });

        modelBuilder.Entity<PubTipoDocumento>(entity =>
        {
            entity.HasKey(e => e.TipoId);

            entity.ToTable("PubTipoDocumento");

            entity.Property(e => e.TipoId)
                .ValueGeneratedNever()
                .HasColumnName("TipoID");
            entity.Property(e => e.TipoDescricao)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Recebimento>(entity =>
        {
            entity.HasKey(e => e.RecId);

            entity.HasIndex(e => e.RecCargaId, "IX_RecCargaID").HasFillFactor(90);

            entity.HasIndex(e => e.RecSituacao, "IX_RecSituacao").HasFillFactor(90);

            entity.HasIndex(e => e.RecServidorId, "IX_Recebimentos_RecServidorID").HasFillFactor(90);

            entity.HasIndex(e => new { e.RecSituacao, e.RecCargaId, e.RecServidorId, e.RecId }, "_dta_index_Recebimentos_9_1109631046__K5_K4_K2_K1").HasFillFactor(90);

            entity.HasIndex(e => new { e.RecCargaId, e.RecId, e.RecSituacao }, "ix_Recebimentos_RecCargaID_RecID_RecSituacao").HasFillFactor(90);

            entity.Property(e => e.RecId)
                .ValueGeneratedNever()
                .HasComment("Código de Identificação do Recebimento")
                .HasColumnName("RecID");
            entity.Property(e => e.RecCargaId)
                .HasDefaultValue(0L)
                .HasColumnName("RecCargaID");
            entity.Property(e => e.RecData)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime");
            entity.Property(e => e.RecIdrecebimento)
                .HasComment("Numero referente ao recebimento de um determinado lote de documentos")
                .HasColumnName("RecIDRecebimento");
            entity.Property(e => e.RecServidorId)
                .HasDefaultValue(0L)
                .HasColumnName("RecServidorID");
            entity.Property(e => e.RecSituacao)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("Recebido");

            entity.HasOne(d => d.RecCarga).WithMany(p => p.Recebimentos)
                .HasForeignKey(d => d.RecCargaId)
                .HasConstraintName("FK_Recebimentos_CargasProcesso");

            entity.HasOne(d => d.RecServidor).WithMany(p => p.Recebimentos)
                .HasForeignKey(d => d.RecServidorId)
                .HasConstraintName("FK_Recebimentos_Servidores");
        });

        modelBuilder.Entity<RecursoFinanceiro>(entity =>
        {
            entity.HasKey(e => e.RecursoId);

            entity.ToTable("RecursoFinanceiro");

            entity.Property(e => e.RecursoId).HasColumnName("RecursoID");
            entity.Property(e => e.RecursoNome)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<RedeSimLevantamento>(entity =>
        {
            entity.HasKey(e => e.IdtTabela);

            entity.ToTable("RedeSimLevantamento");

            entity.Property(e => e.IdtTabela).HasColumnName("IDtTabela");
            entity.Property(e => e.ArquivoXml)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("ArquivoXML");
            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.ConsLocalizador)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("consLocalizador");
            entity.Property(e => e.Cpfcnpj)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CPFCNPJ");
            entity.Property(e => e.EmprCmc).HasColumnName("EmprCMC");
            entity.Property(e => e.InicioAtividade).HasColumnType("datetime");
            entity.Property(e => e.Natureza)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.RazaoSocial)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Regio>(entity =>
        {
            entity.HasKey(e => e.Idregiao);

            entity.Property(e => e.Idregiao)
                .ValueGeneratedNever()
                .HasColumnName("IDRegiao");
            entity.Property(e => e.CentroGrauLat)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Valor da Latitude na area central da região");
            entity.Property(e => e.CentroGrauLon)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Valor da Longitude na area central da região");
            entity.Property(e => e.Descricao)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.PercentualUvc)
                .HasColumnType("money")
                .HasColumnName("PercentualUVC");

            entity.HasOne(d => d.Cidade).WithMany(p => p.Regios)
                .HasForeignKey(d => d.CidadeId)
                .HasConstraintName("FK_Regioes_Cidade");
        });

        modelBuilder.Entity<RelTribLivroInscrDatemp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("RelTribLivroInscrDATemp");

            entity.HasIndex(e => e.Sessao, "IX_RelTribLivroInscrDATemp_Sessao").IsClustered();

            entity.Property(e => e.Contribuinte)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.DataInscricao).HasColumnType("datetime");
            entity.Property(e => e.InscrDa).HasColumnName("InscrDA");
            entity.Property(e => e.Inscricao)
                .HasMaxLength(18)
                .IsUnicode(false);
            entity.Property(e => e.LivroDaanoTermo).HasColumnName("LivroDAAnoTermo");
            entity.Property(e => e.LivroDanumeroTermo).HasColumnName("LivroDANumeroTermo");
            entity.Property(e => e.MultaDa)
                .HasColumnType("money")
                .HasColumnName("MultaDA");
            entity.Property(e => e.NomeTributo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Sessao)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("sessao");
            entity.Property(e => e.Situacao)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SituacaoDiv)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TipoCadastro)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Valor).HasColumnType("money");
            entity.Property(e => e.Vencimento).HasColumnType("datetime");
        });

        modelBuilder.Entity<Relatoriocpf>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("RELATORIOCPF");

            entity.HasIndex(e => e.Ordem, "ClusteredIndex_20220914_174506").IsClustered();

            entity.Property(e => e.Cpf)
                .HasMaxLength(255)
                .HasColumnName("cpf");
            entity.Property(e => e.Identidade)
                .HasMaxLength(255)
                .HasColumnName("identidade");
            entity.Property(e => e.Nis)
                .HasMaxLength(255)
                .HasColumnName("nis");
            entity.Property(e => e.Ordem).HasColumnName("ordem");
            entity.Property(e => e.Pessoa)
                .HasMaxLength(255)
                .HasColumnName("pessoa");
        });

        modelBuilder.Entity<Relatoriocpfcnpj>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("RELATORIOCPFCNPJ");

            entity.Property(e => e.Cpf)
                .HasMaxLength(255)
                .HasColumnName("cpf");
            entity.Property(e => e.Identidade)
                .HasMaxLength(255)
                .HasColumnName("identidade");
            entity.Property(e => e.Nis)
                .HasMaxLength(255)
                .HasColumnName("nis");
            entity.Property(e => e.Ordem).HasColumnName("ordem");
            entity.Property(e => e.Pessoa)
                .HasMaxLength(255)
                .HasColumnName("pessoa");
        });

        modelBuilder.Entity<RhcargoFuncaoLocal>(entity =>
        {
            entity.HasKey(e => new { e.LocId, e.CargoFuncId });

            entity.ToTable("RHCargoFuncaoLocal");

            entity.Property(e => e.LocId).HasColumnName("LocID");
            entity.Property(e => e.CargoFuncId).HasColumnName("CargoFuncID");
            entity.Property(e => e.CarFocupada).HasColumnName("CarFOcupada");
            entity.Property(e => e.CarFqtdeVagas).HasColumnName("CarFQtdeVagas");

            entity.HasOne(d => d.CargoFunc).WithMany(p => p.RhcargoFuncaoLocals)
                .HasForeignKey(d => d.CargoFuncId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RHCargoFuncaoLocal_RHCargosFuncoes");

            entity.HasOne(d => d.Loc).WithMany(p => p.RhcargoFuncaoLocals)
                .HasForeignKey(d => d.LocId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RHCargoFuncaoLocal_Localizacao");
        });

        modelBuilder.Entity<RhcargosFunco>(entity =>
        {
            entity.HasKey(e => e.CargoFuncId);

            entity.ToTable("RHCargosFuncoes");

            entity.Property(e => e.CargoFuncId)
                .ValueGeneratedNever()
                .HasColumnName("CargoFuncID");
            entity.Property(e => e.CargoFuncNome)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Rhconcurso>(entity =>
        {
            entity.HasKey(e => e.ConcId);

            entity.ToTable("RHConcursos");

            entity.Property(e => e.ConcId)
                .ValueGeneratedNever()
                .HasColumnName("ConcID");
            entity.Property(e => e.ConcData).HasColumnType("datetime");
            entity.Property(e => e.ConcNumero)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<RhdadosFuncionai>(entity =>
        {
            entity.HasKey(e => e.DadFid);

            entity.ToTable("RHDadosFuncionais");

            entity.Property(e => e.DadFid)
                .ValueGeneratedNever()
                .HasColumnName("DadFID");
            entity.Property(e => e.CargoFuncId).HasColumnName("CargoFuncID");
            entity.Property(e => e.CargoFuncIdatual).HasColumnName("CargoFuncIDAtual");
            entity.Property(e => e.ConcId).HasColumnName("ConcID");
            entity.Property(e => e.DadFclassifConcurso).HasColumnName("DadFClassifConcurso");
            entity.Property(e => e.DadFdataAdm)
                .HasColumnType("datetime")
                .HasColumnName("DadFDataAdm");
            entity.Property(e => e.DadFdataDem)
                .HasColumnType("datetime")
                .HasColumnName("DadFDataDem");
            entity.Property(e => e.DadFnotaConcurso).HasColumnName("DadFNotaConcurso");
            entity.Property(e => e.DadFqtdeVt).HasColumnName("DadFQtdeVT");
            entity.Property(e => e.DadPmatricula).HasColumnName("DadPMatricula");
            entity.Property(e => e.DivId).HasColumnName("DivID");
            entity.Property(e => e.LocIdatuacao).HasColumnName("LocIDAtuacao");
            entity.Property(e => e.LocIdlotacao).HasColumnName("LocIDLotacao");
            entity.Property(e => e.MemCnpj)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MemCNPJ");
            entity.Property(e => e.RecIdatual).HasColumnName("RecIDAtual");
            entity.Property(e => e.RecIdpadrao).HasColumnName("RecIDPadrao");
            entity.Property(e => e.VincEid).HasColumnName("VincEID");

            entity.HasOne(d => d.CargoFunc).WithMany(p => p.RhdadosFuncionaiCargoFuncs)
                .HasForeignKey(d => d.CargoFuncId)
                .HasConstraintName("FK_RHDadosFuncionais_RHCargosFuncoes");

            entity.HasOne(d => d.CargoFuncIdatualNavigation).WithMany(p => p.RhdadosFuncionaiCargoFuncIdatualNavigations)
                .HasForeignKey(d => d.CargoFuncIdatual)
                .HasConstraintName("FK_RHDadosFuncionais_RHCargosFuncoes1");

            entity.HasOne(d => d.Conc).WithMany(p => p.RhdadosFuncionais)
                .HasForeignKey(d => d.ConcId)
                .HasConstraintName("FK_RHDadosFuncionais_RHConcursos");

            entity.HasOne(d => d.Div).WithMany(p => p.RhdadosFuncionais)
                .HasForeignKey(d => d.DivId)
                .HasConstraintName("FK_RHDadosFuncionais_Divisoes");

            entity.HasOne(d => d.LocIdatuacaoNavigation).WithMany(p => p.RhdadosFuncionaiLocIdatuacaoNavigations)
                .HasForeignKey(d => d.LocIdatuacao)
                .HasConstraintName("FK_RHDadosFuncionais_Localizacao");

            entity.HasOne(d => d.LocIdlotacaoNavigation).WithMany(p => p.RhdadosFuncionaiLocIdlotacaoNavigations)
                .HasForeignKey(d => d.LocIdlotacao)
                .HasConstraintName("FK_RHDadosFuncionais_Localizacao1");

            entity.HasOne(d => d.RecIdatualNavigation).WithMany(p => p.RhdadosFuncionaiRecIdatualNavigations)
                .HasForeignKey(d => d.RecIdatual)
                .HasConstraintName("FK_RHDadosFuncionais_EDURecurso");

            entity.HasOne(d => d.RecIdpadraoNavigation).WithMany(p => p.RhdadosFuncionaiRecIdpadraoNavigations)
                .HasForeignKey(d => d.RecIdpadrao)
                .HasConstraintName("FK_RHDadosFuncionais_EDURecurso1");

            entity.HasOne(d => d.VincE).WithMany(p => p.RhdadosFuncionais)
                .HasForeignKey(d => d.VincEid)
                .HasConstraintName("FK_RHDadosFuncionais_RHVinculoEmpregaticio");

            entity.HasOne(d => d.RhdadosPessoai).WithMany(p => p.RhdadosFuncionais)
                .HasForeignKey(d => new { d.MemCnpj, d.DadPmatricula })
                .HasConstraintName("FK_RHDadosFuncionais_RHDadosPessoais");
        });

        modelBuilder.Entity<RhdadosPessoai>(entity =>
        {
            entity.HasKey(e => new { e.MemCnpj, e.DadPmatricula });

            entity.ToTable("RHDadosPessoais");

            entity.Property(e => e.MemCnpj)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MemCNPJ");
            entity.Property(e => e.DadPmatricula).HasColumnName("DadPMatricula");
            entity.Property(e => e.ConId).HasColumnName("ConID");

            entity.HasOne(d => d.Con).WithMany(p => p.RhdadosPessoais)
                .HasForeignKey(d => d.ConId)
                .HasConstraintName("FK_RHDadosPessoais_Contribuintes");

            entity.HasOne(d => d.MemCnpjNavigation).WithMany(p => p.RhdadosPessoais)
                .HasForeignKey(d => d.MemCnpj)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RHDadosPessoais_Membros");
        });

        modelBuilder.Entity<Rhlicenca>(entity =>
        {
            entity.HasKey(e => e.AcoLicId);

            entity.ToTable("RHLicencas");

            entity.Property(e => e.AcoLicId)
                .ValueGeneratedNever()
                .HasColumnName("AcoLicID");
            entity.Property(e => e.AcoLicData).HasColumnType("datetime");
            entity.Property(e => e.AcoLicDataFim).HasColumnType("datetime");
            entity.Property(e => e.AcoLicDataIni).HasColumnType("datetime");
            entity.Property(e => e.DadFid).HasColumnName("DadFID");
            entity.Property(e => e.TipoLicId).HasColumnName("TipoLicID");

            entity.HasOne(d => d.DadF).WithMany(p => p.Rhlicencas)
                .HasForeignKey(d => d.DadFid)
                .HasConstraintName("FK_RHLicencas_RHDadosFuncionais");

            entity.HasOne(d => d.TipoLic).WithMany(p => p.Rhlicencas)
                .HasForeignKey(d => d.TipoLicId)
                .HasConstraintName("FK_RHLicencas_RHTipoLicenca");
        });

        modelBuilder.Entity<RhtipoLicenca>(entity =>
        {
            entity.HasKey(e => e.TipoLicId);

            entity.ToTable("RHTipoLicenca");

            entity.Property(e => e.TipoLicId)
                .ValueGeneratedNever()
                .HasColumnName("TipoLicID");
            entity.Property(e => e.TipoLicNome)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<RhtipoProventosDesconto>(entity =>
        {
            entity.HasKey(e => e.TipoPdid);

            entity.ToTable("RHTipoProventosDescontos");

            entity.Property(e => e.TipoPdid)
                .ValueGeneratedNever()
                .HasColumnName("TipoPDID");
            entity.Property(e => e.TipoPdformaCalc)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TipoPDFormaCalc");
            entity.Property(e => e.TipoPdnome)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TipoPDNome");
            entity.Property(e => e.TipoPdprovDesc)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TipoPDProvDesc");
        });

        modelBuilder.Entity<RhvinculoEmpregaticio>(entity =>
        {
            entity.HasKey(e => e.VincEid);

            entity.ToTable("RHVinculoEmpregaticio");

            entity.Property(e => e.VincEid)
                .ValueGeneratedNever()
                .HasColumnName("VincEID");
            entity.Property(e => e.VincEnome)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VincENome");
        });

        modelBuilder.Entity<Sanepar>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("sanepar");

            entity.Property(e => e.Ac)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AC");
            entity.Property(e => e.Ai)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AI");
            entity.Property(e => e.Ap)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AP");
            entity.Property(e => e.Ar)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AR");
            entity.Property(e => e.Au)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AU");
            entity.Property(e => e.Cat)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CAT");
            entity.Property(e => e.Classe)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CLASSE");
            entity.Property(e => e.Column38)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 38");
            entity.Property(e => e.Column39)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 39");
            entity.Property(e => e.Complemento)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("COMPLEMENTO");
            entity.Property(e => e.CpfCnpj)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CPF_CNPJ");
            entity.Property(e => e.Ctg)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CTG");
            entity.Property(e => e.Dist)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DIST");
            entity.Property(e => e.Dtliga)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DTLIGA");
            entity.Property(e => e.Ec)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EC");
            entity.Property(e => e.Ei)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EI");
            entity.Property(e => e.Endereco)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("ENDERECO");
            entity.Property(e => e.Ep)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EP");
            entity.Property(e => e.Er)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ER");
            entity.Property(e => e.Eu)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EU");
            entity.Property(e => e.Fa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FA");
            entity.Property(e => e.Gr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("GR");
            entity.Property(e => e.Loc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("LOC");
            entity.Property(e => e.Lote)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("LOTE");
            entity.Property(e => e.Matricula)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MATRICULA");
            entity.Property(e => e.McEcon)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MC-ECON");
            entity.Property(e => e.Mcm)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MCM");
            entity.Property(e => e.Nome)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("NOME");
            entity.Property(e => e.Nume)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NUME");
            entity.Property(e => e.NvClasse)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NV CLASSE");
            entity.Property(e => e.Qda)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("QDA");
            entity.Property(e => e.Qdi)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("QDI");
            entity.Property(e => e.Roteiro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ROTEIRO");
            entity.Property(e => e.SA)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("S_A");
            entity.Property(e => e.SE)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("S_E");
            entity.Property(e => e.Set1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SET1");
            entity.Property(e => e.Tea)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TEA");
            entity.Property(e => e.TeaTee)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TEA+TEE");
            entity.Property(e => e.Tp)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TP");
            entity.Property(e => e.Valor)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VALOR");
        });

        modelBuilder.Entity<Sapcarga>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SAPCARGA");

            entity.Property(e => e.CodCarga)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("COD_CARGA");
            entity.Property(e => e.Descricao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRICAO");
            entity.Property(e => e.Recnum)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RECNUM");
        });

        modelBuilder.Entity<Sappront>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SAPPRONT");

            entity.Property(e => e.AnoPront)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ANO_PRONT");
            entity.Property(e => e.CodCarga)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("COD_CARGA");
            entity.Property(e => e.CodDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("COD_DESCR");
            entity.Property(e => e.CodReq)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("COD_REQ");
            entity.Property(e => e.Custas)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CUSTAS");
            entity.Property(e => e.DataAbertura)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DATA_ABERTURA");
            entity.Property(e => e.DataDigitacao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DATA_DIGITACAO");
            entity.Property(e => e.DataEncerra)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DATA_ENCERRA");
            entity.Property(e => e.DataUltOcor)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DATA_ULT_OCOR");
            entity.Property(e => e.DataUltTramit)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DATA_ULT_TRAMIT");
            entity.Property(e => e.DescrComp)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCR_COMP");
            entity.Property(e => e.HoraDigitacao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("HORA_DIGITACAO");
            entity.Property(e => e.Inscricao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("INSCRICAO");
            entity.Property(e => e.MinDigitacao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MIN_DIGITACAO");
            entity.Property(e => e.NumArqEncerra)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NUM_ARQ_ENCERRA");
            entity.Property(e => e.NumPront)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NUM_PRONT");
            entity.Property(e => e.Recnum)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RECNUM");
            entity.Property(e => e.RgUltAcesso)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RG_ULT_ACESSO");
            entity.Property(e => e.SegDigitacao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SEG_DIGITACAO");
            entity.Property(e => e.StatTramita)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STAT_TRAMITA");
            entity.Property(e => e.TipoIndice)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TIPO_INDICE");
            entity.Property(e => e.TipoProcesso)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TIPO_PROCESSO");
            entity.Property(e => e.TipoReq)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TIPO_REQ");
        });

        modelBuilder.Entity<Saptipo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SAPTIPO");

            entity.Property(e => e.Descricao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRICAO");
            entity.Property(e => e.DiasPrimAtend)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DIAS_PRIM_ATEND");
            entity.Property(e => e.ProcessoJurid)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PROCESSO_JURID");
            entity.Property(e => e.Recnum)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RECNUM");
            entity.Property(e => e.TipoIndice)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TIPO_INDICE");
            entity.Property(e => e.TipoProcesso)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TIPO_PROCESSO");
        });

        modelBuilder.Entity<SaudeAc>(entity =>
        {
            entity.HasKey(e => e.Idacs).HasName("PK_Saude_ACS_1");

            entity.ToTable("Saude_ACS");

            entity.Property(e => e.Idacs)
                .ValueGeneratedNever()
                .HasColumnName("IDACS");
            entity.Property(e => e.Complemento)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Cpf)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CPF");
            entity.Property(e => e.Data).HasColumnType("datetime");
            entity.Property(e => e.Idendereco).HasColumnName("IDEndereco");
            entity.Property(e => e.Idpsf).HasColumnName("IDPSF");
            entity.Property(e => e.NomeAcs)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("NomeACS");
            entity.Property(e => e.NrPredial)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Rg)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RG");
            entity.Property(e => e.Situacao)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Telefones)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SaudeAcsPaciente>(entity =>
        {
            entity.HasKey(e => new { e.Idacs, e.IdPaciente });

            entity.ToTable("Saude_ACS_Pacientes");

            entity.Property(e => e.Idacs).HasColumnName("IDACS");
            entity.Property(e => e.IdPaciente).HasColumnName("ID_Paciente");

            entity.HasOne(d => d.IdPacienteNavigation).WithMany(p => p.SaudeAcsPacientes)
                .HasForeignKey(d => d.IdPaciente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Saude_ACS_Pacientes_Saude_Paciente");
        });

        modelBuilder.Entity<SaudeAgendaVaga>(entity =>
        {
            entity.HasKey(e => new { e.Idagenda, e.IdUnidadeSaude });

            entity.ToTable("Saude_AgendaVagas");

            entity.Property(e => e.Idagenda).HasColumnName("IDAgenda");

            entity.HasOne(d => d.IdUnidadeSaudeNavigation).WithMany(p => p.SaudeAgendaVagas)
                .HasForeignKey(d => d.IdUnidadeSaude)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Saude_AgendaVagas_UnidadeSaude");

            entity.HasOne(d => d.IdagendaNavigation).WithMany(p => p.SaudeAgendaVagas)
                .HasForeignKey(d => d.Idagenda)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Saude_AgendaVagas_Saude_Agenda");
        });

        modelBuilder.Entity<SaudeAgendaXxxxxx>(entity =>
        {
            entity.HasKey(e => e.Idagenda).HasName("PK_Saude_Agenda");

            entity.ToTable("Saude_AgendaXXXXXX");

            entity.Property(e => e.Idagenda)
                .ValueGeneratedNever()
                .HasColumnName("IDAgenda");
            entity.Property(e => e.DataFinal).HasColumnType("datetime");
            entity.Property(e => e.DataInclusao).HasColumnType("datetime");
            entity.Property(e => e.DataInicial).HasColumnType("datetime");
            entity.Property(e => e.Motivo)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Situacao)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.IdEscalaNavigation).WithMany(p => p.SaudeAgendaXxxxxxes)
                .HasForeignKey(d => d.IdEscala)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Saude_Agenda_SaudeEscala");
        });

        modelBuilder.Entity<SaudeAlmoxEntrada>(entity =>
        {
            entity.HasKey(e => e.IdAmoxEntrada);

            entity.Property(e => e.IdAmoxEntrada).ValueGeneratedNever();
            entity.Property(e => e.DtEmpenho).HasColumnType("datetime");
            entity.Property(e => e.DtMovimento).HasColumnType("datetime");
            entity.Property(e => e.DtNotaFiscal).HasColumnType("datetime");
            entity.Property(e => e.HrMovimento)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.IdtipoMovimentacao).HasColumnName("IDTipoMovimentacao");
            entity.Property(e => e.NrDocumentoDevolucao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Nr_DocumentoDevolucao");
            entity.Property(e => e.NrEmpenho)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("NR_Empenho");
            entity.Property(e => e.NrNotaFiscal)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Nr_NotaFiscal");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SaudeAlmoxEntradaDevolucao>(entity =>
        {
            entity.HasKey(e => e.IdFormularioDevolucao);

            entity.ToTable("Saude_AlmoxEntradaDevolucao");

            entity.Property(e => e.IdFormularioDevolucao).ValueGeneratedNever();
            entity.Property(e => e.DataRecebimento).HasColumnType("datetime");
            entity.Property(e => e.HoraRecebimento)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SaudeAlmoxEntradaDevolucaoItem>(entity =>
        {
            entity.HasKey(e => e.IdItemFormDevolucao);

            entity.ToTable("Saude_AlmoxEntradaDevolucaoItem");

            entity.Property(e => e.IdItemFormDevolucao).ValueGeneratedNever();
            entity.Property(e => e.DtMovimento).HasColumnType("datetime");
            entity.Property(e => e.HrMovimento)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.IdenLote)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SaudeAlmoxEntradasItem>(entity =>
        {
            entity.HasKey(e => e.IdsaudeAlmoxEntradaItem);

            entity.ToTable("SaudeAlmoxEntradasItem");

            entity.Property(e => e.IdsaudeAlmoxEntradaItem)
                .ValueGeneratedNever()
                .HasColumnName("IDSaudeAlmoxEntradaItem");
            entity.Property(e => e.DtItemMovimento).HasColumnType("datetime");
            entity.Property(e => e.HrItemMovimento)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.IdentLote)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.PrecoUnitario).HasColumnType("money");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.IdAlmoxEntradaNavigation).WithMany(p => p.SaudeAlmoxEntradasItems)
                .HasForeignKey(d => d.IdAlmoxEntrada)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SaudeAlmoxEntradasItem_SaudeAlmoxEntradas");
        });

        modelBuilder.Entity<SaudeAlmoxEntradasItensExtorno>(entity =>
        {
            entity.HasKey(e => e.IdItemExtorno);

            entity.ToTable("SaudeAlmoxEntradasItensExtorno");

            entity.Property(e => e.IdItemExtorno).ValueGeneratedNever();
            entity.Property(e => e.DtItemMovimento).HasColumnType("datetime");
            entity.Property(e => e.HrItemMovimento)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Idalmox).HasColumnName("IDAlmox");
            entity.Property(e => e.IdentLote)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.Idfabricante).HasColumnName("IDFabricante");
            entity.Property(e => e.Idmedicamento).HasColumnName("IDMedicamento");
            entity.Property(e => e.Usuario)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.IdAlmoxEntradaNavigation).WithMany(p => p.SaudeAlmoxEntradasItensExtornos)
                .HasForeignKey(d => d.IdAlmoxEntrada)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SaudeAlmoxEntradasItensExtorno_SaudeAlmoxEntradas");
        });

        modelBuilder.Entity<SaudeAlmoxLote>(entity =>
        {
            entity.HasKey(e => new { e.IdAlmoxarifado, e.IdentLote, e.IdFabricante, e.IdMedicamento });

            entity.ToTable("SaudeAlmoxLote");

            entity.Property(e => e.IdentLote)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.SaldoLoteAlmoxarifado).HasColumnType("money");
        });

        modelBuilder.Entity<SaudeAlmoxPerda>(entity =>
        {
            entity.HasKey(e => e.Idperda);

            entity.ToTable("Saude_AlmoxPerdas");

            entity.Property(e => e.Idperda)
                .ValueGeneratedNever()
                .HasColumnName("IDPerda");
            entity.Property(e => e.Data).HasColumnType("datetime");
            entity.Property(e => e.Hora)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SaudeAlmoxPerdaIten>(entity =>
        {
            entity.HasKey(e => e.IdPerdaItem);

            entity.ToTable("Saude_AlmoxPerdaItens");

            entity.Property(e => e.IdPerdaItem).ValueGeneratedNever();
            entity.Property(e => e.DtMovimento).HasColumnType("datetime");
            entity.Property(e => e.HrMovimento)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.IdentLote)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.IdPerdaNavigation).WithMany(p => p.SaudeAlmoxPerdaItens)
                .HasForeignKey(d => d.IdPerda)
                .HasConstraintName("FK_Saude_AlmoxPerdaItens_Saude_AlmoxPerdas");
        });

        modelBuilder.Entity<SaudeAlmoxPerdaItensExtorno>(entity =>
        {
            entity.HasKey(e => e.IdPerdaItemExtorno);

            entity.ToTable("Saude_AlmoxPerdaItensExtorno");

            entity.Property(e => e.IdPerdaItemExtorno).ValueGeneratedNever();
            entity.Property(e => e.DtMovimento).HasColumnType("datetime");
            entity.Property(e => e.HrMovimento)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.IdentLote)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Usuario)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.IdPerdaNavigation).WithMany(p => p.SaudeAlmoxPerdaItensExtornos)
                .HasForeignKey(d => d.IdPerda)
                .HasConstraintName("FK_Saude_AlmoxPerdaItensExtorno_Saude_AlmoxPerdas");
        });

        modelBuilder.Entity<SaudeAlmoxSaida>(entity =>
        {
            entity.HasKey(e => e.IdSaida);

            entity.ToTable("Saude_AlmoxSaidas");

            entity.Property(e => e.IdSaida).ValueGeneratedNever();
            entity.Property(e => e.DataSaida).HasColumnType("datetime");
            entity.Property(e => e.HoraSaida)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.Idpaciente).HasColumnName("IDPaciente");
            entity.Property(e => e.Idreceita).HasColumnName("IDReceita");
            entity.Property(e => e.Removido)
                .HasMaxLength(3)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SaudeAlmoxSaidaItemExtorno>(entity =>
        {
            entity.HasKey(e => e.IdSaidaItemExtorno);

            entity.ToTable("Saude_AlmoxSaidaItemExtorno");

            entity.Property(e => e.IdSaidaItemExtorno).ValueGeneratedNever();
            entity.Property(e => e.DtMovimento).HasColumnType("datetime");
            entity.Property(e => e.HrMovimento)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.IdentLote)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Usuario)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.IdSaidaNavigation).WithMany(p => p.SaudeAlmoxSaidaItemExtornos)
                .HasForeignKey(d => d.IdSaida)
                .HasConstraintName("FK_Saude_AlmoxSaidaItemExtorno_Saude_AlmoxSaidas");
        });

        modelBuilder.Entity<SaudeAlmoxSaidasItem>(entity =>
        {
            entity.HasKey(e => new { e.IdSaidaItem, e.IdSaida });

            entity.ToTable("Saude_AlmoxSaidasItem");

            entity.Property(e => e.DtMovimento).HasColumnType("datetime");
            entity.Property(e => e.HrMovimento)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.IdLote)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.IdSaidaNavigation).WithMany(p => p.SaudeAlmoxSaidasItems)
                .HasForeignKey(d => d.IdSaida)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Saude_AlmoxSaidasItem_Saude_AlmoxSaidas");
        });

        modelBuilder.Entity<SaudeAlmoxSaldoInicial>(entity =>
        {
            entity.HasKey(e => e.IdConfiguraEstoque);

            entity.ToTable("Saude_AlmoxSaldoInicial");

            entity.Property(e => e.IdConfiguraEstoque).ValueGeneratedNever();
            entity.Property(e => e.Custo).HasColumnType("money");
            entity.Property(e => e.DataLcto).HasColumnType("datetime");
            entity.Property(e => e.DtFabricacao).HasColumnType("datetime");
            entity.Property(e => e.DtValidade).HasColumnType("datetime");
            entity.Property(e => e.IdentLote)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.NomeComercial)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Usuario)
                .HasMaxLength(255)
                .IsUnicode(false);

            entity.HasOne(d => d.IdAlmoxNavigation).WithMany(p => p.SaudeAlmoxSaldoInicials)
                .HasForeignKey(d => d.IdAlmox)
                .HasConstraintName("FK_Saude_AlmoxSaldoInicial_Almoxarifados");

            entity.HasOne(d => d.IdFabricanteNavigation).WithMany(p => p.SaudeAlmoxSaldoInicials)
                .HasForeignKey(d => d.IdFabricante)
                .HasConstraintName("FK_Saude_AlmoxSaldoInicial_Saude_Fabricante");

            entity.HasOne(d => d.IdMedicamentoNavigation).WithMany(p => p.SaudeAlmoxSaldoInicials)
                .HasForeignKey(d => d.IdMedicamento)
                .HasConstraintName("FK_Saude_AlmoxSaldoInicial_Saude_Medicamento");

            entity.HasOne(d => d.SaudeLote).WithMany(p => p.SaudeAlmoxSaldoInicials)
                .HasForeignKey(d => new { d.IdentLote, d.IdFabricante, d.IdMedicamento })
                .HasConstraintName("FK_Saude_AlmoxSaldoInicial_Saude_Lote");

            entity.HasOne(d => d.SaudeAlmoxLote).WithMany(p => p.SaudeAlmoxSaldoInicials)
                .HasForeignKey(d => new { d.IdAlmox, d.IdentLote, d.IdFabricante, d.IdMedicamento })
                .HasConstraintName("FK_Saude_AlmoxSaldoInicial_SaudeAlmoxLote");
        });

        modelBuilder.Entity<SaudeApresentacao>(entity =>
        {
            entity.HasKey(e => e.IdApresentacao);

            entity.ToTable("Saude_Apresentacao");

            entity.Property(e => e.IdApresentacao).ValueGeneratedNever();
            entity.Property(e => e.DsApresentacao)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SaudeAtendimento>(entity =>
        {
            entity.HasKey(e => e.AtendId);

            entity.ToTable("Saude_Atendimento");

            entity.Property(e => e.AtendId)
                .ValueGeneratedNever()
                .HasColumnName("AtendID");
            entity.Property(e => e.AtendData).HasColumnType("datetime");
            entity.Property(e => e.AtendHora)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CdFuncionario).HasColumnName("CD_Funcionario");
            entity.Property(e => e.CdOcupacaoSaude).HasColumnName("CD_OcupacaoSaude");
            entity.Property(e => e.CdPaciente).HasColumnName("Cd_Paciente");
            entity.Property(e => e.CdUnidadeSaude).HasColumnName("Cd_UnidadeSaude");
            entity.Property(e => e.DataInclusao).HasColumnType("datetime");
            entity.Property(e => e.Situacao)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TipoAtendimento)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SaudeAtendimentoDadosClinico>(entity =>
        {
            entity.HasKey(e => e.ClinicId);

            entity.ToTable("Saude_AtendimentoDadosClinicos");

            entity.Property(e => e.ClinicId)
                .ValueGeneratedNever()
                .HasColumnName("ClinicID");
            entity.Property(e => e.AtendId).HasColumnName("AtendID");
            entity.Property(e => e.CdCid)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("Cd_Cid");
            entity.Property(e => e.ClinicDisgnostico)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ClinicHora)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DataInclusao).HasColumnType("datetime");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Atend).WithMany(p => p.SaudeAtendimentoDadosClinicos)
                .HasForeignKey(d => d.AtendId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Saude_AtendimentoDadosClinicos_Saude_Atendimento");
        });

        modelBuilder.Entity<SaudeAtendimentoPreConsultum>(entity =>
        {
            entity.HasKey(e => e.PreConsId);

            entity.ToTable("Saude_AtendimentoPreConsulta");

            entity.Property(e => e.PreConsId)
                .ValueGeneratedNever()
                .HasColumnName("PreConsID");
            entity.Property(e => e.AtendId).HasColumnName("AtendID");
            entity.Property(e => e.CdFuncionario).HasColumnName("CD_Funcionario");
            entity.Property(e => e.CdOcupacaoSaude).HasColumnName("CD_OcupacaoSaude");
            entity.Property(e => e.DataInclusao).HasColumnType("datetime");
            entity.Property(e => e.PreConsDescricao)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.PreConsEstatura)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PreConsHora)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PreConsPa)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PreConsPA");
            entity.Property(e => e.PreConsPeso)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PreConsTemperatura)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SaudeAtendimentoProcedimento>(entity =>
        {
            entity.HasKey(e => e.ProcedId);

            entity.ToTable("Saude_AtendimentoProcedimento");

            entity.Property(e => e.ProcedId)
                .ValueGeneratedNever()
                .HasColumnName("ProcedID");
            entity.Property(e => e.AtendId).HasColumnName("AtendID");
            entity.Property(e => e.CdMedicamento).HasColumnName("Cd_Medicamento");
            entity.Property(e => e.CdProcedimento).HasColumnName("Cd_Procedimento");
            entity.Property(e => e.DataInclusao).HasColumnType("datetime");
            entity.Property(e => e.ProcedHora)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProcedModoProceder)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ProcedQuantidade)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SaudeAtendimentoReceituario>(entity =>
        {
            entity.HasKey(e => e.ReceitId);

            entity.ToTable("Saude_AtendimentoReceituario");

            entity.Property(e => e.ReceitId)
                .ValueGeneratedNever()
                .HasColumnName("ReceitID");
            entity.Property(e => e.AtendId).HasColumnName("AtendID");
            entity.Property(e => e.CdMedicamento).HasColumnName("Cd_Medicamento");
            entity.Property(e => e.DataInclusao).HasColumnType("datetime");
            entity.Property(e => e.ReceitDuracao)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ReceitHora)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ReceitModoUso)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ReceitQuantidade)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SaudeAutorizaAcesso>(entity =>
        {
            entity.HasKey(e => e.IdLogonAutorizado);

            entity.ToTable("SaudeAutorizaAcesso");

            entity.Property(e => e.IdLogonAutorizado).ValueGeneratedNever();
            entity.Property(e => e.TipoOrgao)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.IdUnidadeSaudeNavigation).WithMany(p => p.SaudeAutorizaAcessos)
                .HasForeignKey(d => d.IdUnidadeSaude)
                .HasConstraintName("FK_SaudeAutorizaAcesso_UnidadeSaude");
        });

        modelBuilder.Entity<SaudeAutorizaFormulario>(entity =>
        {
            entity.HasKey(e => new { e.IdLogonAutorizado, e.UsuId, e.FrmId });

            entity.Property(e => e.UsuId)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("UsuID");
            entity.Property(e => e.FrmId)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.Data).HasColumnType("datetime");
            entity.Property(e => e.Usuario)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.Frm).WithMany(p => p.SaudeAutorizaFormularios)
                .HasForeignKey(d => d.FrmId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SaudeAutorizaFormularios_Formularios");

            entity.HasOne(d => d.SaudeUsuariosUnidade).WithMany(p => p.SaudeAutorizaFormularios)
                .HasForeignKey(d => new { d.IdLogonAutorizado, d.UsuId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SaudeAutorizaFormularios_SaudeUsuariosUnidades");
        });

        modelBuilder.Entity<SaudeCid>(entity =>
        {
            entity.HasKey(e => e.CdCid).HasName("PK_CID");

            entity.ToTable("Saude_CID");

            entity.Property(e => e.CdCid)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("Cd_Cid");
            entity.Property(e => e.Descricao)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<SaudeConfigSaldoEstoque>(entity =>
        {
            entity.HasKey(e => e.IdConfiguracao).HasName("PK_Saude__1");

            entity.ToTable("Saude_ConfigSaldoEstoque");

            entity.Property(e => e.IdConfiguracao).ValueGeneratedNever();
            entity.Property(e => e.Maximo).HasColumnType("money");
            entity.Property(e => e.Minimo).HasColumnType("money");
        });

        modelBuilder.Entity<SaudeConfiguracaoAlmoxarifado>(entity =>
        {
            entity.HasKey(e => new { e.CdAlmoxarifado, e.CdMedicamento });

            entity.ToTable("Saude_ConfiguracaoAlmoxarifado");

            entity.Property(e => e.CdAlmoxarifado).HasColumnName("CD_Almoxarifado");
            entity.Property(e => e.CdMedicamento).HasColumnName("CD_Medicamento");
        });

        modelBuilder.Entity<SaudeConfiguracaoEstoque>(entity =>
        {
            entity.HasKey(e => new { e.CdEstoque, e.CdMedicamento });

            entity.ToTable("Saude_ConfiguracaoEstoque");

            entity.Property(e => e.CdEstoque).HasColumnName("CD_Estoque");
            entity.Property(e => e.CdMedicamento).HasColumnName("CD_Medicamento");
        });

        modelBuilder.Entity<SaudeEmpenho>(entity =>
        {
            entity.HasKey(e => e.IdEmpenho).HasName("PK_Saude_");

            entity.ToTable("Saude_Empenho");

            entity.Property(e => e.IdEmpenho).ValueGeneratedNever();
            entity.Property(e => e.AnoEmpenho)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CnpjFornecedor)
                .HasMaxLength(18)
                .IsUnicode(false);
            entity.Property(e => e.Cnpjempenho)
                .HasMaxLength(18)
                .IsUnicode(false)
                .HasColumnName("CNPJEmpenho");
            entity.Property(e => e.DataEmpenho).HasColumnType("datetime");
            entity.Property(e => e.Historico)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Prazo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TipoDespesa)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Valor).HasColumnType("money");
        });

        modelBuilder.Entity<SaudeEmpenhoIten>(entity =>
        {
            entity.HasKey(e => e.IdEmpenhoItens);

            entity.ToTable("Saude_EmpenhoItens");

            entity.Property(e => e.IdEmpenhoItens).ValueGeneratedNever();
            entity.Property(e => e.DescricaoItem)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IdItemEmpenho).HasColumnName("IdItem_Empenho");
            entity.Property(e => e.QtdRecebida).HasColumnName("Qtd_Recebida");
            entity.Property(e => e.QtdSaldo).HasColumnName("Qtd_Saldo");
            entity.Property(e => e.QtdTotal).HasColumnName("Qtd_Total");
            entity.Property(e => e.ValorUnitario).HasColumnType("money");
        });

        modelBuilder.Entity<SaudeEscala>(entity =>
        {
            entity.HasKey(e => e.IdEscala);

            entity.ToTable("SaudeEscala");

            entity.Property(e => e.IdEscala).ValueGeneratedNever();
            entity.Property(e => e.Data).HasColumnType("datetime");
            entity.Property(e => e.DataFimEscala)
                .HasColumnType("datetime")
                .HasColumnName("DataFim_Escala");
            entity.Property(e => e.DataInicioEscala)
                .HasColumnType("datetime")
                .HasColumnName("DataInicio_Escala");
            entity.Property(e => e.HoraFimEscala)
                .HasColumnType("datetime")
                .HasColumnName("HoraFim_Escala");
            entity.Property(e => e.HoraInicioEscala)
                .HasColumnType("datetime")
                .HasColumnName("HoraInicio_Escala");
            entity.Property(e => e.IdunidadeSaude).HasColumnName("IDUnidadeSaude");
            entity.Property(e => e.Obs)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Usuario)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.IdunidadeSaudeNavigation).WithMany(p => p.SaudeEscalas)
                .HasForeignKey(d => d.IdunidadeSaude)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SaudeEscala_UnidadeSaude");

            entity.HasOne(d => d.SaudeServidorCategProf).WithMany(p => p.SaudeEscalas)
                .HasForeignKey(d => new { d.IdFuncionario, d.IdCategoria })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SaudeEscala_SaudeServidorCategProf");
        });

        modelBuilder.Entity<SaudeEscalaUnidadeSaude>(entity =>
        {
            entity.HasKey(e => new { e.Idescala, e.IdUnidadeSaude });

            entity.ToTable("SaudeEscala_UnidadeSaude");

            entity.Property(e => e.Idescala).HasColumnName("IDEscala");

            entity.HasOne(d => d.IdUnidadeSaudeNavigation).WithMany(p => p.SaudeEscalaUnidadeSaudes)
                .HasForeignKey(d => d.IdUnidadeSaude)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SaudeEscala_UnidadeSaude_UnidadeSaude");

            entity.HasOne(d => d.IdescalaNavigation).WithMany(p => p.SaudeEscalaUnidadeSaudes)
                .HasForeignKey(d => d.Idescala)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SaudeEscala_UnidadeSaude_SaudeEscala");
        });

        modelBuilder.Entity<SaudeEstoque>(entity =>
        {
            entity.HasKey(e => e.IdEstoque);

            entity.ToTable("Saude_Estoque");

            entity.Property(e => e.IdEstoque)
                .ValueGeneratedNever()
                .HasColumnName("Id_Estoque");
            entity.Property(e => e.EmailResponsavel)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.IdSetor).HasColumnName("ID_Setor");
            entity.Property(e => e.IdUnidadeSaudeSetor).HasColumnName("Id_UnidadeSaudeSetor");
            entity.Property(e => e.NomeEstoque)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SaudeExamesSolicitado>(entity =>
        {
            entity.HasKey(e => new { e.TipoExameId, e.AtendId });

            entity.ToTable("Saude_ExamesSolicitados");

            entity.Property(e => e.AtendId).HasColumnName("AtendID");
            entity.Property(e => e.Data).HasColumnType("datetime");
            entity.Property(e => e.Observacao)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Situacao)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SaudeFabricante>(entity =>
        {
            entity.HasKey(e => e.IdFabricante);

            entity.ToTable("Saude_Fabricante");

            entity.Property(e => e.IdFabricante).ValueGeneratedNever();
            entity.Property(e => e.Cnpj)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Complemento)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FabricanteNome)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.NroPredial)
                .HasMaxLength(6)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SaudeFarmaEntradasItemFormulario>(entity =>
        {
            entity.HasKey(e => e.IdEntradaItem);

            entity.ToTable("Saude_FarmaEntradasItemFormulario");

            entity.Property(e => e.IdEntradaItem)
                .ValueGeneratedNever()
                .HasColumnName("Id_EntradaItem");
            entity.Property(e => e.DtMovimento).HasColumnType("datetime");
            entity.Property(e => e.HrMovimento)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.IdEntrada).HasColumnName("Id_Entrada");
            entity.Property(e => e.IdEstoque).HasColumnName("Id_Estoque");
            entity.Property(e => e.IdFabricante).HasColumnName("Id_Fabricante");
            entity.Property(e => e.IdLote)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Removido)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.IdEntradaNavigation).WithMany(p => p.SaudeFarmaEntradasItemFormularios)
                .HasForeignKey(d => d.IdEntrada)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Saude_FarmaEntradasItemFormulario_Saude_FarmaEntradasPorFormulario");
        });

        modelBuilder.Entity<SaudeFarmaEntradasItemFormularioExtorno>(entity =>
        {
            entity.HasKey(e => e.IdEntradaItemExtorno);

            entity.ToTable("Saude_FarmaEntradasItemFormularioExtorno");

            entity.Property(e => e.IdEntradaItemExtorno)
                .ValueGeneratedNever()
                .HasColumnName("Id_EntradaItemExtorno");
            entity.Property(e => e.DtMovimento).HasColumnType("datetime");
            entity.Property(e => e.HrMovimento)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.IdEntrada).HasColumnName("Id_Entrada");
            entity.Property(e => e.IdEstoque).HasColumnName("Id_Estoque");
            entity.Property(e => e.IdFabricante).HasColumnName("Id_Fabricante");
            entity.Property(e => e.IdLote)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Usuario)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.IdEntradaNavigation).WithMany(p => p.SaudeFarmaEntradasItemFormularioExtornos)
                .HasForeignKey(d => d.IdEntrada)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Saude_FarmaEntradasItemFormularioExtorno_Saude_FarmaEntradasPorFormulario");
        });

        modelBuilder.Entity<SaudeFarmaEntradasPorFormulario>(entity =>
        {
            entity.HasKey(e => e.IdEntrada);

            entity.ToTable("Saude_FarmaEntradasPorFormulario");

            entity.Property(e => e.IdEntrada)
                .ValueGeneratedNever()
                .HasColumnName("Id_Entrada");
            entity.Property(e => e.DataEntrada).HasColumnType("datetime");
            entity.Property(e => e.HoraEntrada)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.IdFormSaida).HasColumnName("Id_FormSaida");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SaudeFarmaFormularioDevolucao>(entity =>
        {
            entity.HasKey(e => e.IdFormulario);

            entity.ToTable("Saude_FarmaFormularioDevolucao");

            entity.Property(e => e.IdFormulario).ValueGeneratedNever();
            entity.Property(e => e.DataMov).HasColumnType("datetime");
            entity.Property(e => e.HoraMov)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Usuario)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SaudeFarmaFormularioDevolucaoIten>(entity =>
        {
            entity.HasKey(e => e.IdItemFormulario);

            entity.ToTable("Saude_FarmaFormularioDevolucaoItens");

            entity.Property(e => e.IdItemFormulario).ValueGeneratedNever();
            entity.Property(e => e.DtMovimento).HasColumnType("datetime");
            entity.Property(e => e.HrMovimento)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.IdLote)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Motivo)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Usuario)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.IdFormularioNavigation).WithMany(p => p.SaudeFarmaFormularioDevolucaoItens)
                .HasForeignKey(d => d.IdFormulario)
                .HasConstraintName("FK_Saude_FarmaFormularioDevolucaoItens_Saude_FarmaFormularioDevolucao");
        });

        modelBuilder.Entity<SaudeFarmaFormularioDevolucaoItensEstorno>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Saude_FarmaFormularioDevolucaoItensEstorno");

            entity.Property(e => e.DtMovimento).HasColumnType("datetime");
            entity.Property(e => e.HrMovimento)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.IdLote)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Usuario)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SaudeFarmaLote>(entity =>
        {
            entity.HasKey(e => new { e.IdEstoque, e.IdentLote, e.IdFabricante, e.IdMedicamento });

            entity.ToTable("Saude_FarmaLote");

            entity.Property(e => e.IdentLote)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.SaldoLoteEstoque).HasColumnType("money");
        });

        modelBuilder.Entity<SaudeFarmaPerda>(entity =>
        {
            entity.HasKey(e => e.Idperda);

            entity.ToTable("Saude_FarmaPerdas");

            entity.Property(e => e.Idperda)
                .ValueGeneratedNever()
                .HasColumnName("IDPerda");
            entity.Property(e => e.Data).HasColumnType("datetime");
            entity.Property(e => e.Hora)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Usuario)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SaudeFarmaPerdaIten>(entity =>
        {
            entity.HasKey(e => e.IdPerdaItem);

            entity.ToTable("Saude_FarmaPerdaItens");

            entity.Property(e => e.IdPerdaItem).ValueGeneratedNever();
            entity.Property(e => e.DtMovimento).HasColumnType("datetime");
            entity.Property(e => e.Hrmovimento)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HRMovimento");
            entity.Property(e => e.IdentLote)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Motivo)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Usuario)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.IdPerdaNavigation).WithMany(p => p.SaudeFarmaPerdaItens)
                .HasForeignKey(d => d.IdPerda)
                .HasConstraintName("FK_Saude_FarmaPerdaItens_Saude_FarmaPerdas");
        });

        modelBuilder.Entity<SaudeFarmaPerdaItensEstorno>(entity =>
        {
            entity.HasKey(e => e.IdPerdaItemEst);

            entity.ToTable("Saude_FarmaPerdaItensEstorno");

            entity.Property(e => e.IdPerdaItemEst).ValueGeneratedNever();
            entity.Property(e => e.DtMovimento).HasColumnType("datetime");
            entity.Property(e => e.Hrmovimento)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HRMovimento");
            entity.Property(e => e.IdentLote)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Usuario)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.IdPerdaNavigation).WithMany(p => p.SaudeFarmaPerdaItensEstornos)
                .HasForeignKey(d => d.IdPerda)
                .HasConstraintName("FK_Saude_FarmaPerdaItensEstorno_Saude_FarmaPerdas");
        });

        modelBuilder.Entity<SaudeFarmaRequisicaoItem>(entity =>
        {
            entity.HasKey(e => e.IdItemRequisicao);

            entity.ToTable("Saude_FarmaRequisicaoItem");

            entity.Property(e => e.IdItemRequisicao)
                .ValueGeneratedNever()
                .HasColumnName("Id_ItemRequisicao");
            entity.Property(e => e.IdMedicamento).HasColumnName("Id_Medicamento");
            entity.Property(e => e.IdRequisicao).HasColumnName("Id_Requisicao");
            entity.Property(e => e.Quantidade).HasColumnType("money");

            entity.HasOne(d => d.IdRequisicaoNavigation).WithMany(p => p.SaudeFarmaRequisicaoItems)
                .HasForeignKey(d => d.IdRequisicao)
                .HasConstraintName("FK_Saude_FarmaRequisicaoItem_Saude_FarmaRequisicaoMedic");
        });

        modelBuilder.Entity<SaudeFarmaRequisicaoMedic>(entity =>
        {
            entity.HasKey(e => e.IdRequisicao);

            entity.ToTable("Saude_FarmaRequisicaoMedic");

            entity.Property(e => e.IdRequisicao)
                .ValueGeneratedNever()
                .HasColumnName("Id_Requisicao");
            entity.Property(e => e.Data).HasColumnType("datetime");
            entity.Property(e => e.IdAlmox).HasColumnName("Id_Almox");
            entity.Property(e => e.IdEstoque).HasColumnName("Id_Estoque");
            entity.Property(e => e.Usuario)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SaudeFarmaSaidaIten>(entity =>
        {
            entity.HasKey(e => e.IdItemSaida);

            entity.ToTable("Saude_FarmaSaidaItens");

            entity.Property(e => e.IdItemSaida).ValueGeneratedNever();
            entity.Property(e => e.DtItemMovimento).HasColumnType("datetime");
            entity.Property(e => e.DtProxRetirada).HasColumnType("datetime");
            entity.Property(e => e.HrItemMovimento)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.IdentLote)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.Idestoque).HasColumnName("IDEstoque");
            entity.Property(e => e.Idfabricante).HasColumnName("IDFabricante");
            entity.Property(e => e.Idmedicamento).HasColumnName("IDMedicamento");
            entity.Property(e => e.ModoDeUso)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Usuario)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.IdReceitaNavigation).WithMany(p => p.SaudeFarmaSaidaItens)
                .HasForeignKey(d => d.IdReceita)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Saude_FarmaSaidaItens_Saude_Receita");

            entity.HasOne(d => d.IdmedicamentoNavigation).WithMany(p => p.SaudeFarmaSaidaItens)
                .HasForeignKey(d => d.Idmedicamento)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Saude_FarmaSaidaItens_Saude_Medicamento");
        });

        modelBuilder.Entity<SaudeFarmaSaidaItensExtorno>(entity =>
        {
            entity.HasKey(e => e.IdItemExtorno);

            entity.ToTable("Saude_FarmaSaidaItensExtorno");

            entity.Property(e => e.IdItemExtorno).ValueGeneratedNever();
            entity.Property(e => e.DtItemMovimento).HasColumnType("datetime");
            entity.Property(e => e.HrItemMovimento)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.IdentLote)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.Idestoque).HasColumnName("IDEstoque");
            entity.Property(e => e.Idfabricante).HasColumnName("IDFabricante");
            entity.Property(e => e.Idmedicamento).HasColumnName("IDMedicamento");
            entity.Property(e => e.Usuario)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.IdmedicamentoNavigation).WithMany(p => p.SaudeFarmaSaidaItensExtornos)
                .HasForeignKey(d => d.Idmedicamento)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Saude_FarmaSaidaItensExtorno_Saude_Medicamento");
        });

        modelBuilder.Entity<SaudeFarmaSaldoInicial>(entity =>
        {
            entity.HasKey(e => e.IdConfiguraEstoque);

            entity.ToTable("Saude_FarmaSaldoInicial");

            entity.Property(e => e.IdConfiguraEstoque).ValueGeneratedNever();
            entity.Property(e => e.DataLcto).HasColumnType("datetime");
            entity.Property(e => e.DtFabricacao).HasColumnType("datetime");
            entity.Property(e => e.DtValidade).HasColumnType("datetime");
            entity.Property(e => e.IdentLote)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.NomeComercial)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Usuario)
                .HasMaxLength(255)
                .IsUnicode(false);

            entity.HasOne(d => d.IdEstoqueNavigation).WithMany(p => p.SaudeFarmaSaldoInicials)
                .HasForeignKey(d => d.IdEstoque)
                .HasConstraintName("FK_Saude_FarmaSaldoInicial_Saude_Estoque");

            entity.HasOne(d => d.SaudeLote).WithMany(p => p.SaudeFarmaSaldoInicials)
                .HasForeignKey(d => new { d.IdentLote, d.IdFabricante, d.IdMedicamento })
                .HasConstraintName("FK_Saude_FarmaSaldoInicial_Saude_Lote");
        });

        modelBuilder.Entity<SaudeFormularioDevolucao>(entity =>
        {
            entity.HasKey(e => e.IdFormulario);

            entity.ToTable("Saude_FormularioDevolucao");

            entity.Property(e => e.IdFormulario).ValueGeneratedNever();
            entity.Property(e => e.DataMov).HasColumnType("datetime");
            entity.Property(e => e.HoraMov)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SaudeFormularioDevolucaoIten>(entity =>
        {
            entity.HasKey(e => e.IdItemFormulario).HasName("PK_Saude_FormularioItens");

            entity.ToTable("Saude_FormularioDevolucaoItens");

            entity.Property(e => e.IdItemFormulario).ValueGeneratedNever();
            entity.Property(e => e.DtMovimento).HasColumnType("datetime");
            entity.Property(e => e.HrMovimento)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.IdLote)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Motivo)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.IdFormularioNavigation).WithMany(p => p.SaudeFormularioDevolucaoItens)
                .HasForeignKey(d => d.IdFormulario)
                .HasConstraintName("FK_Saude_FormularioDevolucaoItens_Saude_FormularioDevolucao");
        });

        modelBuilder.Entity<SaudeFormularioDevolucaoItensExtorno>(entity =>
        {
            entity.HasKey(e => e.IdItemExtorno);

            entity.ToTable("Saude_FormularioDevolucaoItensExtorno");

            entity.Property(e => e.IdItemExtorno).ValueGeneratedNever();
            entity.Property(e => e.DtMovimento).HasColumnType("datetime");
            entity.Property(e => e.HoraMovimento)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.IdLote)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Usuario)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.IdFormularioNavigation).WithMany(p => p.SaudeFormularioDevolucaoItensExtornos)
                .HasForeignKey(d => d.IdFormulario)
                .HasConstraintName("FK_Saude_FormularioDevolucaoItensExtorno_Saude_FormularioDevolucao");
        });

        modelBuilder.Entity<SaudeFornecedor>(entity =>
        {
            entity.HasKey(e => e.IdFornecedor);

            entity.ToTable("Saude_Fornecedor");

            entity.Property(e => e.IdFornecedor).ValueGeneratedNever();
            entity.Property(e => e.Complemento)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CpfCnpj)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NomeContato)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NomeFantasia)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.NroPredial)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.RazaoSocial)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Telefone)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SaudeItemFormulario>(entity =>
        {
            entity.HasKey(e => new { e.CdFormulario, e.CdMedicamento });

            entity.ToTable("Saude_Item_Formulario");

            entity.Property(e => e.CdFormulario).HasColumnName("Cd_Formulario");
            entity.Property(e => e.CdMedicamento).HasColumnName("Cd_Medicamento");
            entity.Property(e => e.QtdFornecida)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<SaudeItensAgendaAusencium>(entity =>
        {
            entity.HasKey(e => e.IdagendaItens);

            entity.ToTable("Saude_ItensAgendaAusencia");

            entity.Property(e => e.IdagendaItens)
                .ValueGeneratedNever()
                .HasColumnName("IDAgendaItens");
            entity.Property(e => e.AtendId).HasColumnName("AtendID");
            entity.Property(e => e.Data).HasColumnType("datetime");
            entity.Property(e => e.DataInclusao).HasColumnType("datetime");
            entity.Property(e => e.Hora).HasColumnType("datetime");
            entity.Property(e => e.IdPaciente).HasColumnName("ID_Paciente");
            entity.Property(e => e.Idagenda).HasColumnName("IDAgenda");
            entity.Property(e => e.Motivo)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Situacao)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TipoConsulta)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SaudeItensAgendum>(entity =>
        {
            entity.HasKey(e => e.IdagendaItens);

            entity.ToTable("Saude_ItensAgenda");

            entity.Property(e => e.IdagendaItens)
                .ValueGeneratedNever()
                .HasColumnName("IDAgendaItens");
            entity.Property(e => e.AtendId).HasColumnName("AtendID");
            entity.Property(e => e.Data).HasColumnType("datetime");
            entity.Property(e => e.DataInclusao).HasColumnType("datetime");
            entity.Property(e => e.Hora).HasColumnType("datetime");
            entity.Property(e => e.IdPaciente).HasColumnName("ID_Paciente");
            entity.Property(e => e.Idagenda).HasColumnName("IDAgenda");
            entity.Property(e => e.Motivo)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Situacao)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TipoConsulta)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.IdPacienteNavigation).WithMany(p => p.SaudeItensAgenda)
                .HasForeignKey(d => d.IdPaciente)
                .HasConstraintName("FK_Saude_ItensAgenda_Saude_Paciente");

            entity.HasOne(d => d.IdagendaNavigation).WithMany(p => p.SaudeItensAgenda)
                .HasForeignKey(d => d.Idagenda)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Saude_ItensAgenda_Saude_Agenda");
        });

        modelBuilder.Entity<SaudeListaSubstancia>(entity =>
        {
            entity.HasKey(e => e.ListaId);

            entity.ToTable("Saude_ListaSubstancias");

            entity.Property(e => e.ListaId).ValueGeneratedNever();
            entity.Property(e => e.NomeLista)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Substancia)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SaudeLote>(entity =>
        {
            entity.HasKey(e => new { e.IdentLote, e.CdFabricante, e.CdMedicamento });

            entity.ToTable("Saude_Lote");

            entity.Property(e => e.IdentLote)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.CdFabricante).HasColumnName("Cd_Fabricante");
            entity.Property(e => e.CdMedicamento).HasColumnName("Cd_Medicamento");
            entity.Property(e => e.DtFabricacao).HasColumnType("datetime");
            entity.Property(e => e.DtValidade).HasColumnType("datetime");
            entity.Property(e => e.NomeComercial)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SaudeMedicamentoXxxxxx>(entity =>
        {
            entity.HasKey(e => e.IdMedicamento).HasName("PK_Saude_Medicamento");

            entity.ToTable("Saude_MedicamentoXXXXXX");

            entity.Property(e => e.IdMedicamento).ValueGeneratedNever();
            entity.Property(e => e.Codigodcb)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Custo).HasColumnType("money");
            entity.Property(e => e.DsMedicamento)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IdSus)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Id_SUS");
            entity.Property(e => e.Posologia)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.QtdePrincipioAtivo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Qtde_PrincipioAtivo");
            entity.Property(e => e.Tipo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("tipo");
            entity.Property(e => e.UniversalPrincipioAtivo)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.IdApresentacaoNavigation).WithMany(p => p.SaudeMedicamentoXxxxxxes)
                .HasForeignKey(d => d.IdApresentacao)
                .HasConstraintName("FK_Saude_Medicamento_Saude_Apresentacao");

            entity.HasOne(d => d.IdListaNavigation).WithMany(p => p.SaudeMedicamentoXxxxxxes)
                .HasForeignKey(d => d.IdLista)
                .HasConstraintName("FK_Saude_Medicamento_Saude_ListaSubstancias");

            entity.HasOne(d => d.IdTipoMedicamentoNavigation).WithMany(p => p.SaudeMedicamentoXxxxxxes)
                .HasForeignKey(d => d.IdTipoMedicamento)
                .HasConstraintName("FK_Saude_Medicamento_Saude_TipoMedicamento");

            entity.HasOne(d => d.IdUnidadeMedidaNavigation).WithMany(p => p.SaudeMedicamentoXxxxxxes)
                .HasForeignKey(d => d.IdUnidadeMedida)
                .HasConstraintName("FK_Saude_Medicamento_Saude_UnidadeMedida");
        });

        modelBuilder.Entity<SaudeMedicamentosIten>(entity =>
        {
            entity.HasKey(e => e.IdMedicEmpenho);

            entity.ToTable("SaudeMedicamentos_Itens");

            entity.Property(e => e.IdMedicEmpenho)
                .ValueGeneratedNever()
                .HasColumnName("IdMedic_Empenho");
        });

        modelBuilder.Entity<SaudePacientePrograma>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SaudePacientePrograma");

            entity.Property(e => e.Data)
                .HasColumnType("datetime")
                .HasColumnName("data");
            entity.Property(e => e.Situacao)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SaudePacienteXxxxxx>(entity =>
        {
            entity.HasKey(e => e.IdPaciente).HasName("PK_Saude_Paciente");

            entity.ToTable("Saude_PacienteXXXXXX");

            entity.HasIndex(e => new { e.NomePaciente, e.RgPaciente, e.DtNascPaciente, e.NomePai, e.NomeMae, e.IdPaciente }, "IX_Nome_Paciente_Rg_Paciente_DtNasc_Paciente_NomePai_NomeMae_ID_Paciente").HasFillFactor(90);

            entity.Property(e => e.IdPaciente)
                .ValueGeneratedNever()
                .HasColumnName("ID_Paciente");
            entity.Property(e => e.CartorioCertidao)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CertidaoPaciente)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Certidao_Paciente");
            entity.Property(e => e.CodigoSus)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CpfPaciente)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CPF_Paciente");
            entity.Property(e => e.CtpsPaciente)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CTPS_Paciente");
            entity.Property(e => e.DtEmissaoCertidao).HasColumnType("datetime");
            entity.Property(e => e.DtEmissaoCpf)
                .HasColumnType("datetime")
                .HasColumnName("DtEmissaoCPF");
            entity.Property(e => e.DtEmissaoCtps)
                .HasColumnType("datetime")
                .HasColumnName("DtEmissaoCTPS");
            entity.Property(e => e.DtEmissaoPis)
                .HasColumnType("datetime")
                .HasColumnName("DtEmissaoPIS");
            entity.Property(e => e.DtEmissaoRg).HasColumnType("datetime");
            entity.Property(e => e.DtNascPaciente)
                .HasColumnType("datetime")
                .HasColumnName("DtNasc_Paciente");
            entity.Property(e => e.EmailPaciente)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Email_Paciente");
            entity.Property(e => e.EnderecoComplemento)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.EntradaPais).HasColumnType("datetime");
            entity.Property(e => e.EstadoCivil)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FarmaciaAmiga)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.FolhasCertidao)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FoneCelular)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FoneComercial)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FoneObservacoes)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FoneResidencia)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GrauInstrucao)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IdNacionalidade).HasColumnName("ID_Nacionalidade");
            entity.Property(e => e.IdNaturalidade).HasColumnName("ID_Naturalidade");
            entity.Property(e => e.IdProfissao)
                .HasMaxLength(6)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID_Profissao");
            entity.Property(e => e.IdProntuario)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("ID_Prontuario");
            entity.Property(e => e.LivroCertidao)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NomeMae)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.NomePaciente)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Nome_Paciente");
            entity.Property(e => e.NomePai)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.NrPredial)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Observacao)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.OrgEmissorRg)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.PispasepPaciente)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("PISPASEP_Paciente");
            entity.Property(e => e.RgPaciente)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Rg_Paciente");
            entity.Property(e => e.SerieCtps)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("SerieCTPS");
            entity.Property(e => e.SexoPaciente)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Sexo_Paciente");
            entity.Property(e => e.TermoCertidao)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Ufctps)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("UFCTPS");
            entity.Property(e => e.UforgEmissorRg)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("UFOrgEmissorRg");

            entity.HasOne(d => d.IdNaturalidadeNavigation).WithMany(p => p.SaudePacienteXxxxxxes)
                .HasForeignKey(d => d.IdNaturalidade)
                .HasConstraintName("FK_Saude_Paciente_Cidade");
        });

        modelBuilder.Entity<SaudePermisso>(entity =>
        {
            entity.HasKey(e => new { e.PrmIdForm, e.PrmIdUsuario, e.LocId }).HasName("PK_SaudePermissoes");

            entity.ToTable("Saude_Permissoes");

            entity.Property(e => e.PrmIdForm)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.PrmIdUsuario)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LocId).HasColumnName("LocID");
            entity.Property(e => e.PrmAlteracao)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PrmConsultas)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PrmInclusao)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PrmRelatorios)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PrmRemocao)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<SaudeProcedimento>(entity =>
        {
            entity.HasKey(e => e.Idprocedimento);

            entity.ToTable("Saude_Procedimentos");

            entity.Property(e => e.Idprocedimento)
                .ValueGeneratedNever()
                .HasColumnName("IDProcedimento");
            entity.Property(e => e.Descricao)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SaudeProgramaSaude>(entity =>
        {
            entity.HasKey(e => e.IdPrograma);

            entity.ToTable("Saude_ProgramaSaude");

            entity.Property(e => e.IdPrograma).ValueGeneratedNever();
            entity.Property(e => e.DsPrograma)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasMany(d => d.IdMedicamentos).WithMany(p => p.Idprogramas)
                .UsingEntity<Dictionary<string, object>>(
                    "SaudeProgramaMedicamento",
                    r => r.HasOne<SaudeMedicamentoXxxxxx>().WithMany()
                        .HasForeignKey("IdMedicamento")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_Saude_ProgramaMedicamento_Saude_Medicamento"),
                    l => l.HasOne<SaudeProgramaSaude>().WithMany()
                        .HasForeignKey("Idprograma")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_Saude_ProgramaMedicamento_Saude_ProgramaSaude"),
                    j =>
                    {
                        j.HasKey("Idprograma", "IdMedicamento");
                        j.ToTable("Saude_ProgramaMedicamento");
                        j.IndexerProperty<int>("Idprograma").HasColumnName("IDPrograma");
                    });
        });

        modelBuilder.Entity<SaudeProntuario>(entity =>
        {
            entity.HasKey(e => new { e.IdUnidadeSaude, e.IdPaciente }).HasName("PK_Saude_Prontuario_1");

            entity.ToTable("Saude_Prontuario");

            entity.Property(e => e.IdPaciente).HasColumnName("ID_Paciente");
        });

        modelBuilder.Entity<SaudePsf>(entity =>
        {
            entity.HasKey(e => e.Idpsf);

            entity.ToTable("Saude_PSF");

            entity.Property(e => e.Idpsf)
                .ValueGeneratedNever()
                .HasColumnName("IDPSF");
            entity.Property(e => e.NomePsf)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NomePSF");

            entity.HasOne(d => d.IdUnidadeSaudeNavigation).WithMany(p => p.SaudePsfs)
                .HasForeignKey(d => d.IdUnidadeSaude)
                .HasConstraintName("FK_Saude_PSF_UnidadeSaude");
        });

        modelBuilder.Entity<SaudeReceitaItem>(entity =>
        {
            entity.HasKey(e => new { e.Idreceita, e.Idmedicamento, e.Removido });

            entity.ToTable("Saude_ReceitaItem");

            entity.Property(e => e.Idreceita).HasColumnName("IDReceita");
            entity.Property(e => e.Idmedicamento).HasColumnName("IDMedicamento");
            entity.Property(e => e.DtProximaRetiradaAtualizada).HasColumnType("datetime");
            entity.Property(e => e.IditemReceita).HasColumnName("IDItemReceita");
            entity.Property(e => e.ModoUso)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.QtdeRetirada).HasColumnName("Qtde_Retirada");
            entity.Property(e => e.QtdeSolicitada).HasColumnName("Qtde_Solicitada");

            entity.HasOne(d => d.IdmedicamentoNavigation).WithMany(p => p.SaudeReceitaItems)
                .HasForeignKey(d => d.Idmedicamento)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Saude_ReceitaItem_Saude_Medicamento");

            entity.HasOne(d => d.IdreceitaNavigation).WithMany(p => p.SaudeReceitaItems)
                .HasForeignKey(d => d.Idreceita)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Saude_ReceitaItem_Saude_Receita");
        });

        modelBuilder.Entity<SaudeReceitaMotivoSaidaIncompletum>(entity =>
        {
            entity.HasKey(e => e.IdmotivoSaidaIncompleta);

            entity.ToTable("Saude_ReceitaMotivoSaidaIncompleta");

            entity.Property(e => e.IdmotivoSaidaIncompleta)
                .ValueGeneratedNever()
                .HasColumnName("IDMotivoSaidaIncompleta");
            entity.Property(e => e.NomeMotivo)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SaudeReceitum>(entity =>
        {
            entity.HasKey(e => e.Idreceita);

            entity.ToTable("Saude_Receita");

            entity.Property(e => e.Idreceita)
                .ValueGeneratedNever()
                .HasColumnName("IDReceita");
            entity.Property(e => e.AtendId).HasColumnName("AtendID");
            entity.Property(e => e.DataAtendimento)
                .HasColumnType("datetime")
                .HasColumnName("Data_Atendimento");
            entity.Property(e => e.HoraAtendimento)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Hora_Atendimento");
            entity.Property(e => e.Idatendimento).HasColumnName("IDAtendimento");
            entity.Property(e => e.Idfuncionario).HasColumnName("IDFuncionario");
            entity.Property(e => e.IdocupacaoSaude).HasColumnName("IDOcupacaoSaude");
            entity.Property(e => e.Idpaciente).HasColumnName("IDPaciente");
            entity.Property(e => e.IdunidadeSaude).HasColumnName("IDUnidadeSaude");
        });

        modelBuilder.Entity<SaudeResumoSaldoMedicamentoEstoque>(entity =>
        {
            entity.HasKey(e => new { e.CdEstoque, e.CdMedicamento, e.Trimestre, e.Ano });

            entity.ToTable("Saude_Resumo_SaldoMedicamentoEstoque");

            entity.Property(e => e.CdEstoque).HasColumnName("Cd_Estoque");
            entity.Property(e => e.CdMedicamento).HasColumnName("Cd_Medicamento");
        });

        modelBuilder.Entity<SaudeServidorCategProf>(entity =>
        {
            entity.HasKey(e => new { e.IdServidor, e.IdCategoria });

            entity.ToTable("SaudeServidorCategProf");

            entity.Property(e => e.NumRegClasse)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.IdCategoriaNavigation).WithMany(p => p.SaudeServidorCategProfs)
                .HasForeignKey(d => d.IdCategoria)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SaudeServidorCategProf_TribCategProfissional");

            entity.HasOne(d => d.IdServidorNavigation).WithMany(p => p.SaudeServidorCategProfs)
                .HasForeignKey(d => d.IdServidor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SaudeServidorCategProf_Servidores");
        });

        modelBuilder.Entity<SaudeSituacaoAgendum>(entity =>
        {
            entity.HasKey(e => e.IdsituacaoAgenda);

            entity.ToTable("Saude_SituacaoAgenda");

            entity.Property(e => e.IdsituacaoAgenda)
                .ValueGeneratedNever()
                .HasColumnName("IDSituacaoAgenda");
            entity.Property(e => e.DssituacaoAgenda)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DSSituacaoAgenda");
        });

        modelBuilder.Entity<SaudeTipoAgendamento>(entity =>
        {
            entity.HasKey(e => e.IdTipoAgendamento);

            entity.ToTable("Saude_TipoAgendamento");

            entity.Property(e => e.IdTipoAgendamento).ValueGeneratedNever();
            entity.Property(e => e.DstipoAgendamento)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DSTipoAgendamento");
        });

        modelBuilder.Entity<SaudeTipoConsultum>(entity =>
        {
            entity.HasKey(e => e.IdTipoConsulta);

            entity.ToTable("Saude_TipoConsulta");

            entity.Property(e => e.IdTipoConsulta).ValueGeneratedNever();
            entity.Property(e => e.DstipoConsulta)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DSTipoConsulta");
        });

        modelBuilder.Entity<SaudeTipoExame>(entity =>
        {
            entity.HasKey(e => e.TipoExameId).HasName("PK_SaudeTipoExames");

            entity.ToTable("Saude_TipoExames");

            entity.Property(e => e.TipoExameId).ValueGeneratedNever();
            entity.Property(e => e.TipoExameNome)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TipoExameProced)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SaudeTipoMedicamento>(entity =>
        {
            entity.HasKey(e => e.IdTipoMedicamento);

            entity.ToTable("Saude_TipoMedicamento");

            entity.Property(e => e.IdTipoMedicamento).ValueGeneratedNever();
            entity.Property(e => e.DsTipoMedicamento)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DS_TipoMedicamento");
        });

        modelBuilder.Entity<SaudeTipoMovimentacao>(entity =>
        {
            entity.HasKey(e => e.IdTipoMovimentacao);

            entity.ToTable("SaudeTipoMovimentacao");

            entity.Property(e => e.IdTipoMovimentacao).ValueGeneratedNever();
            entity.Property(e => e.DsTipoGrupo)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.DsTipoMovimentacao)
                .HasMaxLength(60)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SaudeUnidadeMedidum>(entity =>
        {
            entity.HasKey(e => e.IdUnidadeMedida);

            entity.ToTable("Saude_UnidadeMedida");

            entity.Property(e => e.IdUnidadeMedida).ValueGeneratedNever();
            entity.Property(e => e.DsUnidadeMedida)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("DS_UnidadeMedida");
        });

        modelBuilder.Entity<SaudeUsuariosUnidade>(entity =>
        {
            entity.HasKey(e => new { e.IdLogonAutorizado, e.UsuId });

            entity.Property(e => e.UsuId)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("UsuID");
            entity.Property(e => e.UnidadePadrao)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.IdLogonAutorizadoNavigation).WithMany(p => p.SaudeUsuariosUnidades)
                .HasForeignKey(d => d.IdLogonAutorizado)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SaudeUsuariosUnidades_SaudeAutorizaAcesso");

            entity.HasOne(d => d.Usu).WithMany(p => p.SaudeUsuariosUnidades)
                .HasForeignKey(d => d.UsuId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SaudeUsuariosUnidades_Usuarios");
        });

        modelBuilder.Entity<Sebrae>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Sebrae");

            entity.Property(e => e.Bairro)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Celular)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CelularSocio)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Cep)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CEP");
            entity.Property(e => e.Cidade)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Cnae)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("CNAE");
            entity.Property(e => e.Comercial)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Complemento)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.CpfCnpj)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CPF_CNPJ");
            entity.Property(e => e.Email)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.EmailSocio)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Endereço)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Fax)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Nome)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.NomeFantasia)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Nome Fantasia");
            entity.Property(e => e.Número)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Porte)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.RazãoSocial)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Razão Social");
            entity.Property(e => e.Setor)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Telefone)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TelefoneSocio)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TotalClientes)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Total Clientes");
            entity.Property(e => e.TotalHorasDeConsultoria)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Total Horas de Consultoria");
            entity.Property(e => e.TotalPartContatos)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Total Part  Contatos");
            entity.Property(e => e.TotalRealizações)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Total Realizações");
            entity.Property(e => e.Uf)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("UF");
        });

        modelBuilder.Entity<Secao>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("secaos");

            entity.Property(e => e.Bairro).HasColumnName("bairro");
            entity.Property(e => e.Cep)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cep");
            entity.Property(e => e.Distrito).HasColumnName("distrito");
            entity.Property(e => e.LadoSecao)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("lado_secao");
            entity.Property(e => e.Logradouro).HasColumnName("logradouro");
            entity.Property(e => e.Pavimento).HasColumnName("pavimento");
            entity.Property(e => e.Secao1).HasColumnName("secao");
            entity.Property(e => e.Setor).HasColumnName("setor");
            entity.Property(e => e.ValorMetroQuadrado)
                .HasColumnType("money")
                .HasColumnName("valor_metro_quadrado");
        });

        modelBuilder.Entity<SecaoServico>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("secao_servicos");

            entity.HasIndex(e => new { e.LadoSecao, e.Logradouro, e.Secao, e.Distrito, e.Setor, e.Servico }, "IX_secao_servicos").HasFillFactor(90);

            entity.Property(e => e.Distrito).HasColumnName("distrito");
            entity.Property(e => e.LadoSecao)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("lado_secao");
            entity.Property(e => e.Logradouro).HasColumnName("logradouro");
            entity.Property(e => e.Periodicidade).HasColumnName("periodicidade");
            entity.Property(e => e.Secao).HasColumnName("secao");
            entity.Property(e => e.Servico).HasColumnName("servico");
            entity.Property(e => e.Setor).HasColumnName("setor");
        });

        modelBuilder.Entity<Seguro>(entity =>
        {
            entity.Property(e => e.SeguroId).ValueGeneratedNever();
            entity.Property(e => e.SegApolice)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SegCnpjfilial)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SegCNPJFilial");
            entity.Property(e => e.SegDtFim).HasColumnType("datetime");
            entity.Property(e => e.SegDtInicio).HasColumnType("datetime");
            entity.Property(e => e.SegObjeto)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.SegValor).HasColumnType("money");

            entity.HasOne(d => d.Con).WithMany(p => p.Seguros)
                .HasForeignKey(d => d.ConId)
                .HasConstraintName("FK_Seguros_Contribuintes");
        });

        modelBuilder.Entity<SerIturAtrativosServicosEquipamento>(entity =>
        {
            entity.HasKey(e => new { e.AtrativoId, e.GrupoServEquipId, e.ServEquipId }).HasName("PK_SerITurAtrativosGruposServEquip");

            entity.ToTable("SerITurAtrativosServicosEquipamentos");

            entity.Property(e => e.AtrativoId).HasColumnName("AtrativoID");
            entity.Property(e => e.GrupoServEquipId).HasColumnName("GrupoServEquipID");
            entity.Property(e => e.ServEquipId).HasColumnName("ServEquipID");
            entity.Property(e => e.Param1)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Param2)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ParamTipo)
                .HasMaxLength(15)
                .IsUnicode(false);

            entity.HasOne(d => d.Atrativo).WithMany(p => p.SerIturAtrativosServicosEquipamentos)
                .HasForeignKey(d => d.AtrativoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SerITurAtrativosServicosEquipametnos_SerITurAtrativosTuristicos");

            entity.HasOne(d => d.SerIturServEquipGrupo).WithMany(p => p.SerIturAtrativosServicosEquipamentos)
                .HasForeignKey(d => new { d.GrupoServEquipId, d.ServEquipId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SerITurAtrativosServicosEquipamentos_SerITurServEquipGrupo");
        });

        modelBuilder.Entity<SerIturAtrativosTuristico>(entity =>
        {
            entity.HasKey(e => e.AtrativoId);

            entity.ToTable("SerITurAtrativosTuristicos");

            entity.Property(e => e.AtrativoId)
                .ValueGeneratedNever()
                .HasColumnName("AtrativoID");
            entity.Property(e => e.AtrativoDescricao)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AtrativoEmail)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AtrativoHomePage)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AtrativoLogradouro)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AtrativoNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AtrativoNumLograd)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.AtrativoObservacao)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AtrativoTelefone)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Bairro).WithMany(p => p.SerIturAtrativosTuristicos)
                .HasForeignKey(d => d.BairroId)
                .HasConstraintName("FK_SerITurAtrativosTuristicos_Bairro");

            entity.HasOne(d => d.Cidade).WithMany(p => p.SerIturAtrativosTuristicos)
                .HasForeignKey(d => d.CidadeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SerITurAtrativosTuristicos_Cidade");
        });

        modelBuilder.Entity<SerIturContribAtrativosTuristico>(entity =>
        {
            entity.HasKey(e => new { e.ConId, e.AtrativoId });

            entity.ToTable("SerITurContribAtrativosTuristicos");

            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.AtrativoId).HasColumnName("AtrativoID");
            entity.Property(e => e.Proprietario)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Sim ou Não");
            entity.Property(e => e.Responsavel)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Sim ou Não");

            entity.HasOne(d => d.Atrativo).WithMany(p => p.SerIturContribAtrativosTuristicos)
                .HasForeignKey(d => d.AtrativoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SerITurContribAtrativosTuristicos_SerITurAtrativosTuristicos");

            entity.HasOne(d => d.Con).WithMany(p => p.SerIturContribAtrativosTuristicos)
                .HasForeignKey(d => d.ConId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SerITurContribAtrativosTuristicos_Contribuintes");
        });

        modelBuilder.Entity<SerIturContribuintesTribEmpresa>(entity =>
        {
            entity.HasKey(e => new { e.ConId, e.EmprCmc });

            entity.ToTable("SerITurContribuintesTribEmpresas");

            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.Data)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.UsuId)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("UsuID");
        });

        modelBuilder.Entity<SerIturDatasHistorica>(entity =>
        {
            entity.HasKey(e => e.DataHistId);

            entity.ToTable("SerITurDatasHistoricas");

            entity.Property(e => e.DataHistId)
                .ValueGeneratedNever()
                .HasColumnName("DataHistID");
            entity.Property(e => e.DataHistData).HasColumnType("datetime");
            entity.Property(e => e.DataHistDescricao)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasMany(d => d.Atrativos).WithMany(p => p.DataHists)
                .UsingEntity<Dictionary<string, object>>(
                    "SerIturDatasAtrativosTuristico",
                    r => r.HasOne<SerIturAtrativosTuristico>().WithMany()
                        .HasForeignKey("AtrativoId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_SerITurDatasAtrativosTuristicos_SerITurAtrativosTuristicos"),
                    l => l.HasOne<SerIturDatasHistorica>().WithMany()
                        .HasForeignKey("DataHistId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_SerITurDatasAtrativosTuristicos_SerITurDatasHistoricas"),
                    j =>
                    {
                        j.HasKey("DataHistId", "AtrativoId");
                        j.ToTable("SerITurDatasAtrativosTuristicos");
                        j.IndexerProperty<long>("DataHistId").HasColumnName("DataHistID");
                        j.IndexerProperty<long>("AtrativoId").HasColumnName("AtrativoID");
                    });
        });

        modelBuilder.Entity<SerIturDestino>(entity =>
        {
            entity.HasKey(e => e.DestinoId);

            entity.ToTable("SerITurDestinos");

            entity.Property(e => e.DestinoId)
                .ValueGeneratedNever()
                .HasColumnName("DestinoID");
            entity.Property(e => e.DestinoKm)
                .HasColumnType("money")
                .HasColumnName("DestinoKM");
            entity.Property(e => e.DestinoNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DestinoTempo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasMany(d => d.Atrativos).WithMany(p => p.Destinos)
                .UsingEntity<Dictionary<string, object>>(
                    "SerIturDestinosAtrativosTuristico",
                    r => r.HasOne<SerIturAtrativosTuristico>().WithMany()
                        .HasForeignKey("AtrativoId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_SerITurDestinosAtrativosTuristicos_SerITurAtrativosTuristicos"),
                    l => l.HasOne<SerIturDestino>().WithMany()
                        .HasForeignKey("DestinoId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_SerITurDestinosAtrativosTuristicos_SerITurDestinos"),
                    j =>
                    {
                        j.HasKey("DestinoId", "AtrativoId");
                        j.ToTable("SerITurDestinosAtrativosTuristicos");
                        j.IndexerProperty<long>("DestinoId").HasColumnName("DestinoID");
                        j.IndexerProperty<long>("AtrativoId").HasColumnName("AtrativoID");
                    });
        });

        modelBuilder.Entity<SerIturEmpresaInfraEstrutura>(entity =>
        {
            entity.HasKey(e => e.EmprInfraId).HasName("PK_SerITurInfraEstruturaEmpresa");

            entity.ToTable("SerITurEmpresaInfraEstrutura");

            entity.HasIndex(e => e.EmprCmc, "IX_EmprCMC").HasFillFactor(90);

            entity.HasIndex(e => e.EmprId, "IX_EmprID").HasFillFactor(90);

            entity.Property(e => e.EmprInfraId)
                .ValueGeneratedNever()
                .HasColumnName("EmprInfraID");
            entity.Property(e => e.EmprCmc).HasColumnName("EmprCMC");
            entity.Property(e => e.EmprId).HasColumnName("EmprID");
            entity.Property(e => e.EmprInfraNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TipoEstabId).HasColumnName("TipoEstabID");
            entity.Property(e => e.TipoInfraEstId).HasColumnName("TipoInfraEstID");

            entity.HasOne(d => d.EmprCmcNavigation).WithMany(p => p.SerIturEmpresaInfraEstruturas)
                .HasForeignKey(d => d.EmprCmc)
                .HasConstraintName("FK_SerITurEmpresaInfraEstrutura_TribEmpresas");

            entity.HasOne(d => d.TipoEstab).WithMany(p => p.SerIturEmpresaInfraEstruturas)
                .HasForeignKey(d => d.TipoEstabId)
                .HasConstraintName("FK_SerITurEmpresaInfraEstrutura_SerITurTipoEstabelecimento");

            entity.HasOne(d => d.TipoInfraEst).WithMany(p => p.SerIturEmpresaInfraEstruturas)
                .HasForeignKey(d => d.TipoInfraEstId)
                .HasConstraintName("FK_SerITurEmpresaInfraEstrutura_SerITurTipoInfraEstrutura");
        });

        modelBuilder.Entity<SerIturEmpresaServicosEquipamento>(entity =>
        {
            entity.HasKey(e => new { e.EmprInfraId, e.GrupoServEquipId, e.ServEquipId });

            entity.ToTable("SerITurEmpresaServicosEquipamentos", tb => tb.HasTrigger("TgSerITurEmpresaServicosEquipamentosDELETE"));

            entity.Property(e => e.EmprInfraId).HasColumnName("EmprInfraID");
            entity.Property(e => e.GrupoServEquipId).HasColumnName("GrupoServEquipID");
            entity.Property(e => e.ServEquipId).HasColumnName("ServEquipID");
            entity.Property(e => e.Param1)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Param2)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ParamTipo)
                .HasMaxLength(15)
                .IsUnicode(false);

            entity.HasOne(d => d.EmprInfra).WithMany(p => p.SerIturEmpresaServicosEquipamentos)
                .HasForeignKey(d => d.EmprInfraId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SerITurEmpresaServicosEquipamentos_SerITurEmpresaInfraEstrutura");

            entity.HasOne(d => d.SerIturServEquipGrupo).WithMany(p => p.SerIturEmpresaServicosEquipamentos)
                .HasForeignKey(d => new { d.GrupoServEquipId, d.ServEquipId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SerITurEmpresaServicosEquipamentos_SerITurServEquipGrupo");
        });

        modelBuilder.Entity<SerIturEmpresasSemCmc>(entity =>
        {
            entity.HasKey(e => e.EmprId);

            entity.ToTable("SerITurEmpresasSemCMC");

            entity.Property(e => e.EmprId)
                .ValueGeneratedNever()
                .HasColumnName("EmprID");
            entity.Property(e => e.BairroId).HasColumnName("BairroID");
            entity.Property(e => e.CargoResponsavel)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ConEmail)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ConEMail");
            entity.Property(e => e.ConSite)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.DataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.EmprCep)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("EmprCEP");
            entity.Property(e => e.EmprComplemento)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.EmprEnderecoNum)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength();
            entity.Property(e => e.EmprNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EmprTelefone)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EmprTipoEntidadeId)
                .HasComment("")
                .HasColumnName("EmprTipoEntidadeID");
            entity.Property(e => e.EmprTipoId).HasColumnName("EmprTipoID");
            entity.Property(e => e.LogradId)
                .HasDefaultValue(0)
                .HasColumnName("LogradID");
            entity.Property(e => e.NomeResponsavel)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");

            entity.HasOne(d => d.Bairro).WithMany(p => p.SerIturEmpresasSemCmcs)
                .HasForeignKey(d => d.BairroId)
                .HasConstraintName("FK_SerITurEmpresasSemCMC_Bairro");

            entity.HasOne(d => d.Cidade).WithMany(p => p.SerIturEmpresasSemCmcs)
                .HasForeignKey(d => d.CidadeId)
                .HasConstraintName("FK_SerITurEmpresasSemCMC_Cidade");

            entity.HasOne(d => d.EmprTipoEntidade).WithMany(p => p.SerIturEmpresasSemCmcs)
                .HasForeignKey(d => d.EmprTipoEntidadeId)
                .HasConstraintName("FK_SerITurEmpresasSemCMC_TribEmpresasTipoEntidade");

            entity.HasOne(d => d.EmprTipo).WithMany(p => p.SerIturEmpresasSemCmcs)
                .HasForeignKey(d => d.EmprTipoId)
                .HasConstraintName("FK_SerITurEmpresasSemCMC_TribEmpresasTipo");

            entity.HasOne(d => d.Lograd).WithMany(p => p.SerIturEmpresasSemCmcs)
                .HasForeignKey(d => d.LogradId)
                .HasConstraintName("FK_SerITurEmpresasSemCMC_Logradouro");
        });

        modelBuilder.Entity<SerIturEmpresasSemCmcativ>(entity =>
        {
            entity.HasKey(e => new { e.EmprId, e.Atividade });

            entity.ToTable("SerITurEmpresasSemCMCAtiv");

            entity.HasIndex(e => new { e.Atividade, e.EmprId }, "IX_Atividade_EmprID").HasFillFactor(90);

            entity.Property(e => e.EmprId).HasColumnName("EmprID");
            entity.Property(e => e.Atividade)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.EmprAtivDataFim).HasColumnType("datetime");
            entity.Property(e => e.EmprAtivDataIni).HasColumnType("datetime");
            entity.Property(e => e.EmprAtivPrincipal)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.AtividadeNavigation).WithMany(p => p.SerIturEmpresasSemCmcativs)
                .HasForeignKey(d => d.Atividade)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SerITurEmpresasSemCMCAtiv_TribAtivAtividade");

            entity.HasOne(d => d.Empr).WithMany(p => p.SerIturEmpresasSemCmcativs)
                .HasForeignKey(d => d.EmprId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SerITurEmpresasSemCMCAtiv_SerITurEmpresasSemCMC");
        });

        modelBuilder.Entity<SerIturGrupoServEquip>(entity =>
        {
            entity.HasKey(e => e.GrupoServEquipId).HasName("PK_SerITurGrupoServicosEquipamentos");

            entity.ToTable("SerITurGrupoServEquip");

            entity.Property(e => e.GrupoServEquipId)
                .ValueGeneratedNever()
                .HasColumnName("GrupoServEquipID");
            entity.Property(e => e.GrupoServDispAtrativos)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.GrupoServDispEmpresas)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.GrupoServEquipNome)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.GrupoServExterno)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Sim")
                .IsFixedLength();
            entity.Property(e => e.GrupoServOrdem).HasDefaultValue(0);
        });

        modelBuilder.Entity<SerIturGrupoServEquipTipoEstab>(entity =>
        {
            entity.HasKey(e => new { e.TipoEstabId, e.GrupoServEquipId, e.TipoInfraEstId }).HasName("PK_SerITurEstabEquipInfraEst");

            entity.ToTable("SerITurGrupoServEquipTipoEstab");

            entity.Property(e => e.TipoEstabId).HasColumnName("TipoEstabID");
            entity.Property(e => e.GrupoServEquipId).HasColumnName("GrupoServEquipID");
            entity.Property(e => e.TipoInfraEstId).HasColumnName("TipoInfraEstID");
            entity.Property(e => e.Ordem).HasDefaultValue(0);

            entity.HasOne(d => d.GrupoServEquip).WithMany(p => p.SerIturGrupoServEquipTipoEstabs)
                .HasForeignKey(d => d.GrupoServEquipId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SerITurGrupoServicosEquipamentosTipoEstabelecimento_SerITurGrupoServicosEquipamentos");

            entity.HasOne(d => d.TipoEstab).WithMany(p => p.SerIturGrupoServEquipTipoEstabs)
                .HasForeignKey(d => d.TipoEstabId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SerITurGrupoServicosEquipamentosTipoEstabelecimento_SerITurTipoEstabelecimento");

            entity.HasOne(d => d.TipoInfraEst).WithMany(p => p.SerIturGrupoServEquipTipoEstabs)
                .HasForeignKey(d => d.TipoInfraEstId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SerITurGrupoServicosEquipamentosTipoEstabelecimento_SerITurTipoInfraEstrutura");
        });

        modelBuilder.Entity<SerIturObjeto>(entity =>
        {
            entity.HasKey(e => e.ObjId).HasName("PK_SerITurObjetosEmpresa");

            entity.ToTable("SerITurObjetos");

            entity.Property(e => e.ObjId)
                .ValueGeneratedNever()
                .HasColumnName("ObjID");
            entity.Property(e => e.Objeto).HasColumnType("image");
            entity.Property(e => e.ObjetoExt)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ObjetoNome)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SerIturObjetoAtrativosTuristico>(entity =>
        {
            entity.HasKey(e => new { e.ObjId, e.AtrativoId });

            entity.ToTable("SerITurObjetoAtrativosTuristicos");

            entity.Property(e => e.ObjId).HasColumnName("ObjID");
            entity.Property(e => e.AtrativoId).HasColumnName("AtrativoID");
            entity.Property(e => e.Descricao).HasColumnType("text");

            entity.HasOne(d => d.Atrativo).WithMany(p => p.SerIturObjetoAtrativosTuristicos)
                .HasForeignKey(d => d.AtrativoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SerITurObjetoAtrativosTuristicos_SerITurAtrativosTuristicos");

            entity.HasOne(d => d.Obj).WithMany(p => p.SerIturObjetoAtrativosTuristicos)
                .HasForeignKey(d => d.ObjId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SerITurObjetoAtrativosTuristicos_SerITurObjetos");
        });

        modelBuilder.Entity<SerIturObjetoDadosEstatistico>(entity =>
        {
            entity.HasKey(e => e.DadoEstatisticoId);

            entity.ToTable("SerITurObjetoDadosEstatisticos");

            entity.Property(e => e.DadoEstatisticoId)
                .ValueGeneratedNever()
                .HasColumnName("DadoEstatisticoID");
            entity.Property(e => e.Data).HasColumnType("datetime");
            entity.Property(e => e.Descricao)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ObjId).HasColumnName("ObjID");

            entity.HasOne(d => d.Obj).WithMany(p => p.SerIturObjetoDadosEstatisticos)
                .HasForeignKey(d => d.ObjId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SerITurObjetoDadosEstatisticos_SerITurObjetos");

            entity.HasMany(d => d.Atrativos).WithMany(p => p.DadoEstatisticos)
                .UsingEntity<Dictionary<string, object>>(
                    "SerIturDadosEstatisticosAtrativosTuristico",
                    r => r.HasOne<SerIturAtrativosTuristico>().WithMany()
                        .HasForeignKey("AtrativoId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_SerITurDadosEstatisticosAtrativosTuristicos_SerITurAtrativosTuristicos"),
                    l => l.HasOne<SerIturObjetoDadosEstatistico>().WithMany()
                        .HasForeignKey("DadoEstatisticoId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_SerITurDadosEstatisticosAtrativosTuristicos_SerITurObjetoDadosEstatisticos"),
                    j =>
                    {
                        j.HasKey("DadoEstatisticoId", "AtrativoId").HasName("PK_SerITurDadosEstaticosAtrativosTuristicos");
                        j.ToTable("SerITurDadosEstatisticosAtrativosTuristicos");
                        j.IndexerProperty<long>("DadoEstatisticoId").HasColumnName("DadoEstatisticoID");
                        j.IndexerProperty<long>("AtrativoId").HasColumnName("AtrativoID");
                    });
        });

        modelBuilder.Entity<SerIturObjetoEmpresa>(entity =>
        {
            entity.HasKey(e => new { e.ObjId, e.EmprCmc });

            entity.ToTable("SerITurObjetoEmpresa");

            entity.Property(e => e.ObjId).HasColumnName("ObjID");
            entity.Property(e => e.EmprCmc).HasColumnName("EmprCMC");
            entity.Property(e => e.Descricao).HasColumnType("text");

            entity.HasOne(d => d.EmprCmcNavigation).WithMany(p => p.SerIturObjetoEmpresas)
                .HasForeignKey(d => d.EmprCmc)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SerITurObjetoEmpresa_TribEmpresas");

            entity.HasOne(d => d.Obj).WithMany(p => p.SerIturObjetoEmpresas)
                .HasForeignKey(d => d.ObjId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SerITurObjetoEmpresa_SerITurObjetos");
        });

        modelBuilder.Entity<SerIturServEquipGrupo>(entity =>
        {
            entity.HasKey(e => new { e.GrupoServEquipId, e.ServEquipId }).HasName("PK_SeITurServEquipGrupo");

            entity.ToTable("SerITurServEquipGrupo");

            entity.Property(e => e.GrupoServEquipId).HasColumnName("GrupoServEquipID");
            entity.Property(e => e.ServEquipId).HasColumnName("ServEquipID");

            entity.HasOne(d => d.GrupoServEquip).WithMany(p => p.SerIturServEquipGrupos)
                .HasForeignKey(d => d.GrupoServEquipId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SeITurServEquipGrupo_SerITurGrupoServEquip");

            entity.HasOne(d => d.ServEquip).WithMany(p => p.SerIturServEquipGrupos)
                .HasForeignKey(d => d.ServEquipId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SeITurServEquipGrupo_SerITurServicosEquipamentos");
        });

        modelBuilder.Entity<SerIturServicosEquipamento>(entity =>
        {
            entity.HasKey(e => e.ServEquipId);

            entity.ToTable("SerITurServicosEquipamentos");

            entity.Property(e => e.ServEquipId)
                .ValueGeneratedNever()
                .HasColumnName("ServEquipID");
            entity.Property(e => e.ServEquipExterno)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ServEquipNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ServEquipOrdem).HasDefaultValue(0);
            entity.Property(e => e.ServEquipTipoCompl)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ServEquipTipoDadoCompl)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SerIturTipoEstabelecimento>(entity =>
        {
            entity.HasKey(e => e.TipoEstabId);

            entity.ToTable("SerITurTipoEstabelecimento");

            entity.Property(e => e.TipoEstabId)
                .ValueGeneratedNever()
                .HasColumnName("TipoEstabID");
            entity.Property(e => e.GrTiId).HasColumnName("GrTiID");
            entity.Property(e => e.TipoEstabNome)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.GrTi).WithMany(p => p.SerIturTipoEstabelecimentos)
                .HasForeignKey(d => d.GrTiId)
                .HasConstraintName("FK_SerITurTipoEstabelecimento_SeriTurGrupoTipoEstabelecimento");
        });

        modelBuilder.Entity<SerIturTipoInfraEstrutura>(entity =>
        {
            entity.HasKey(e => e.TipoInfraEstId).HasName("PK_SerITurTipoInfaEstrutura");

            entity.ToTable("SerITurTipoInfraEstrutura");

            entity.Property(e => e.TipoInfraEstId)
                .ValueGeneratedNever()
                .HasColumnName("TipoInfraEstID");
            entity.Property(e => e.TipoInfraEstNome)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SeriTurContinente>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SeriTurContinente");

            entity.Property(e => e.ContNome).HasMaxLength(50);
            entity.Property(e => e.Idcontinente).HasColumnName("IDContinente");
        });

        modelBuilder.Entity<SeriTurGrupoTipoEstabelecimento>(entity =>
        {
            entity.HasKey(e => e.GrTiId);

            entity.ToTable("SeriTurGrupoTipoEstabelecimento");

            entity.Property(e => e.GrTiId)
                .ValueGeneratedNever()
                .HasColumnName("GrTiID");
            entity.Property(e => e.GrTiDescricao)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ObjId).HasColumnName("ObjID");

            entity.HasOne(d => d.Obj).WithMany(p => p.SeriTurGrupoTipoEstabelecimentos)
                .HasForeignKey(d => d.ObjId)
                .HasConstraintName("FK_SeriTurGrupoTipoEstabelecimento_SerITurObjetos");
        });

        modelBuilder.Entity<SeriTurInformacoesPrestada>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.IdmovInform).HasColumnName("IDMovInform");
            entity.Property(e => e.IdmovOrigem).HasColumnName("IDMovOrigem");
            entity.Property(e => e.IdtipoInfo).HasColumnName("IDTipoInfo");
        });

        modelBuilder.Entity<SeriTurMovAtendimento>(entity =>
        {
            entity.HasKey(e => e.MoAtId);

            entity.ToTable("SeriTurMovAtendimento");

            entity.Property(e => e.MoAtId)
                .ValueGeneratedNever()
                .HasColumnName("MoAtID");
            entity.Property(e => e.AtrativoId).HasColumnName("AtrativoID");
            entity.Property(e => e.EmprId).HasColumnName("EmprID");
            entity.Property(e => e.IdmovOrigem).HasColumnName("IDMovOrigem");

            entity.HasOne(d => d.Atrativo).WithMany(p => p.SeriTurMovAtendimentos)
                .HasForeignKey(d => d.AtrativoId)
                .HasConstraintName("FK_SeriTurMovAtendimento_SerITurAtrativosTuristicos");

            entity.HasOne(d => d.EmprCmcNavigation).WithMany(p => p.SeriTurMovAtendimentos)
                .HasForeignKey(d => d.EmprCmc)
                .HasConstraintName("FK_SeriTurMovAtendimento_TribEmpresas");

            entity.HasOne(d => d.Empr).WithMany(p => p.SeriTurMovAtendimentos)
                .HasForeignKey(d => d.EmprId)
                .HasConstraintName("FK_SeriTurMovAtendimento_SerITurEmpresasSemCMC");

            entity.HasOne(d => d.IdmovOrigemNavigation).WithMany(p => p.SeriTurMovAtendimentos)
                .HasForeignKey(d => d.IdmovOrigem)
                .HasConstraintName("FK_SeriTurMovAtendimento_SeriTurOrigemTuristaCidadao");
        });

        modelBuilder.Entity<SeriTurOrigemTuristaCidadao>(entity =>
        {
            entity.HasKey(e => e.IdmovOrigem);

            entity.ToTable("SeriTurOrigemTuristaCidadao");

            entity.Property(e => e.IdmovOrigem)
                .ValueGeneratedNever()
                .HasColumnName("IDMovOrigem");
            entity.Property(e => e.Data).HasColumnType("datetime");
            entity.Property(e => e.Idpit).HasColumnName("IDPit");
            entity.Property(e => e.Iduf).HasColumnName("IDUF");
            entity.Property(e => e.UsuId)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("UsuID");

            entity.HasMany(d => d.Idufs).WithMany(p => p.IdmovOrigems)
                .UsingEntity<Dictionary<string, object>>(
                    "SeriturOrigemTurUf",
                    r => r.HasOne<SeriTurUf>().WithMany()
                        .HasForeignKey("Iduf")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_SeriturOrigemTurUF_SeriTurUF"),
                    l => l.HasOne<SeriTurOrigemTuristaCidadao>().WithMany()
                        .HasForeignKey("IdmovOrigem")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_SeriturOrigemTurUF_SeriTurOrigemTuristaCidadao"),
                    j =>
                    {
                        j.HasKey("IdmovOrigem", "Iduf");
                        j.ToTable("SeriturOrigemTurUF");
                        j.IndexerProperty<long>("IdmovOrigem").HasColumnName("IDMovOrigem");
                        j.IndexerProperty<long>("Iduf")
                            .HasComment(" Identificação do Unid Federativa")
                            .HasColumnName("IDUF");
                    });
        });

        modelBuilder.Entity<SeriTurPai>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.Idcontinente).HasColumnName("IDContinente");
            entity.Property(e => e.Idpais).HasColumnName("IDPais");
            entity.Property(e => e.PaisNome).HasMaxLength(50);
        });

        modelBuilder.Entity<SeriTurPostosInformacao>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SeriTurPostosInformacao");

            entity.Property(e => e.Idpit).HasColumnName("IDPit");
            entity.Property(e => e.PitNome).HasMaxLength(50);
        });

        modelBuilder.Entity<SeriTurPostosInformacaoUsuario>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.Idpit).HasColumnName("IDPit");
            entity.Property(e => e.UsuId)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("UsuID");
        });

        modelBuilder.Entity<SeriTurTiposInformacao>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SeriTurTiposInformacao");

            entity.Property(e => e.IdtipoInfo).HasColumnName("IDTipoInfo");
            entity.Property(e => e.TipoInfoNome).HasMaxLength(50);
        });

        modelBuilder.Entity<SeriTurUf>(entity =>
        {
            entity.HasKey(e => e.Iduf);

            entity.ToTable("SeriTurUF");

            entity.Property(e => e.Iduf)
                .ValueGeneratedNever()
                .HasColumnName("IDUF");
            entity.Property(e => e.Idpais).HasColumnName("IDPais");
            entity.Property(e => e.Regiao).HasMaxLength(50);
            entity.Property(e => e.Ufnome)
                .HasMaxLength(50)
                .HasColumnName("UFNome");
        });

        modelBuilder.Entity<SeriturPublicaEmpresa>(entity =>
        {
            entity.HasKey(e => e.IdPublica);

            entity.Property(e => e.IdPublica)
                .ValueGeneratedNever()
                .HasColumnName("idPublica");
            entity.Property(e => e.EmprId).HasColumnName("EmprID");

            entity.HasOne(d => d.EmprCmcNavigation).WithMany(p => p.SeriturPublicaEmpresas)
                .HasForeignKey(d => d.EmprCmc)
                .HasConstraintName("FK_SeriturPublicaEmpresas_TribEmpresas");

            entity.HasOne(d => d.Empr).WithMany(p => p.SeriturPublicaEmpresas)
                .HasForeignKey(d => d.EmprId)
                .HasConstraintName("FK_SeriturPublicaEmpresas_SerITurEmpresasSemCMC");
        });

        modelBuilder.Entity<ServCalculoExceco>(entity =>
        {
            entity.ToTable("servCalculoExcecoes");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Correcao)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("correcao");
            entity.Property(e => e.Iddivida).HasColumnName("IDDivida");
            entity.Property(e => e.Juros)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("juros");
            entity.Property(e => e.Mda)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("mda");
            entity.Property(e => e.Multa)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("multa");
        });

        modelBuilder.Entity<ServCalculoExec>(entity =>
        {
            entity.ToTable("servCalculoExec");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.DataExec).HasColumnType("datetime");
            entity.Property(e => e.DataFim).HasColumnType("datetime");
            entity.Property(e => e.DataIni).HasColumnType("datetime");
        });

        modelBuilder.Entity<ServCalculoLog>(entity =>
        {
            entity.ToTable("servCalculoLog");

            entity.HasIndex(e => new { e.Iddivida, e.Data }, "IX_servCalculoLog_IDDivda_Data").HasFillFactor(90);

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Data).HasColumnType("datetime");
            entity.Property(e => e.Erro)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Iddivida).HasColumnName("IDDivida");
        });

        modelBuilder.Entity<Servidore>(entity =>
        {
            entity.HasKey(e => e.ServId);

            entity.HasIndex(e => new { e.ServDivisaoId, e.ServId }, "IX_Servidores_ServDivisaoID_ServID_inc_ServNome_ServCargo");

            entity.Property(e => e.ServId).HasColumnName("ServID");
            entity.Property(e => e.Complemento)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ImgAssinatura)
                .HasColumnType("image")
                .HasColumnName("imgAssinatura");
            entity.Property(e => e.NuPredial)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("Nu_Predial");
            entity.Property(e => e.ServCargo)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ServDivisaoId)
                .HasDefaultValue(0)
                .HasColumnName("ServDivisaoID");
            entity.Property(e => e.ServEmail)
                .HasMaxLength(90)
                .IsUnicode(false);
            entity.Property(e => e.ServFuncao)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ServMatricula).HasComment("Número de Matricula do servidor na empresa");
            entity.Property(e => e.ServNome)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ServRg)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("ServRG");
            entity.Property(e => e.ServSituacaoFunc)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Situação Funcional do Servidor, podendo ser Inativo, Pensionista, Licenca Saude, Ferias, etc");
            entity.Property(e => e.ServTelefone)
                .HasMaxLength(40)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SimAmIrfOcorrenciasTributoDum>(entity =>
        {
            entity.HasKey(e => e.IdLcto);

            entity.ToTable("SimAmIrfOcorrenciasTributoDA");

            entity.Property(e => e.Cnpjfilial)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CNPJFilial");
            entity.Property(e => e.NrContribuinteAdministrativoPgtoParcial).HasColumnName("nrContribuinteAdministrativoPgtoParcial");
            entity.Property(e => e.NrContribuinteAdministrativoPgtoTotal).HasColumnName("nrContribuinteAdministrativoPgtoTotal");
            entity.Property(e => e.NrContribuinteCancelamentoParcial).HasColumnName("nrContribuinteCancelamentoParcial");
            entity.Property(e => e.NrContribuinteCancelamentoTotal).HasColumnName("nrContribuinteCancelamentoTotal");
            entity.Property(e => e.NrContribuinteExpontaneoPgtoParcial).HasColumnName("nrContribuinteExpontaneoPgtoParcial");
            entity.Property(e => e.NrContribuinteExpontaneoPgtoTotal).HasColumnName("nrContribuinteExpontaneoPgtoTotal");
            entity.Property(e => e.NrContribuinteJudicialPgtoParcial).HasColumnName("nrContribuinteJudicialPgtoParcial");
            entity.Property(e => e.NrContribuinteJudicialPgtoTotal).HasColumnName("nrContribuinteJudicialPgtoTotal");
            entity.Property(e => e.NrContribuinteJurosAtualiza).HasColumnName("nrContribuinteJurosAtualiza");
            entity.Property(e => e.NrContribuinteSaldoAntArrecadar).HasColumnName("nrContribuinteSaldoAntArrecadar");
            entity.Property(e => e.NrContribuinteSaldoExercSeguinteDividaAtiva).HasColumnName("nrContribuinteSaldoExercSeguinteDividaAtiva");
        });

        modelBuilder.Entity<SimAmOcorrenciasExercicio>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SimAmOcorrenciasExercicio");

            entity.Property(e => e.Cnpjcpfcontribuinte)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("CNPJCPFContribuinte");
            entity.Property(e => e.Cnpjfilial)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("CNPJFilial");
            entity.Property(e => e.CodDivida)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ConIddivida).HasColumnName("ConIDDivida");
            entity.Property(e => e.DataBaixa).HasColumnType("datetime");
            entity.Property(e => e.DataGeracao).HasColumnType("datetime");
            entity.Property(e => e.DataInscricaoDa)
                .HasColumnType("datetime")
                .HasColumnName("DataInscricaoDA");
            entity.Property(e => e.DivEmpId).HasColumnName("DivEmpID");
            entity.Property(e => e.IdTributo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Idcontrole)
                .ValueGeneratedOnAdd()
                .HasColumnName("IDControle");
            entity.Property(e => e.ImoIddivida).HasColumnName("ImoIDDivida");
            entity.Property(e => e.InscricaoImob)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NomeContribuinte)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ValorLancado).HasColumnType("money");
        });

        modelBuilder.Entity<SimAmOcorrenciasTributoDum>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SimAmOcorrenciasTributoDA");

            entity.Property(e => e.Cnpjfilial)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CNPJFilial");
            entity.Property(e => e.IdLcto).ValueGeneratedOnAdd();
            entity.Property(e => e.NrContribuinteAdministrativoPgtoParcial).HasColumnName("nrContribuinteAdministrativoPgtoParcial");
            entity.Property(e => e.NrContribuinteAdministrativoPgtoTotal).HasColumnName("nrContribuinteAdministrativoPgtoTotal");
            entity.Property(e => e.NrContribuinteCancelamentoParcial).HasColumnName("nrContribuinteCancelamentoParcial");
            entity.Property(e => e.NrContribuinteCancelamentoTotal).HasColumnName("nrContribuinteCancelamentoTotal");
            entity.Property(e => e.NrContribuinteExpontaneoPgtoParcial).HasColumnName("nrContribuinteExpontaneoPgtoParcial");
            entity.Property(e => e.NrContribuinteExpontaneoPgtoTotal).HasColumnName("nrContribuinteExpontaneoPgtoTotal");
            entity.Property(e => e.NrContribuinteJudicialPgtoParcial).HasColumnName("nrContribuinteJudicialPgtoParcial");
            entity.Property(e => e.NrContribuinteJudicialPgtoTotal).HasColumnName("nrContribuinteJudicialPgtoTotal");
            entity.Property(e => e.NrContribuinteJurosAtualiza).HasColumnName("nrContribuinteJurosAtualiza");
            entity.Property(e => e.NrContribuinteSaldoAntArrecadar).HasColumnName("nrContribuinteSaldoAntArrecadar");
            entity.Property(e => e.NrContribuinteSaldoExercSeguinteDividaAtiva).HasColumnName("nrContribuinteSaldoExercSeguinteDividaAtiva");
        });

        modelBuilder.Entity<SimAmRolDaTemp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SimAmRolDaTemp");

            entity.Property(e => e.CdDivida).ValueGeneratedOnAdd();
            entity.Property(e => e.CodDivida)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NmContribuinte)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nmContribuinte");
            entity.Property(e => e.NrAnoDivida).HasColumnName("nrAnoDivida");
            entity.Property(e => e.NrdocumentoContratado)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("nrdocumentoContratado");
            entity.Property(e => e.TpDocumento)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tpDocumento");
            entity.Property(e => e.VlLancado)
                .HasColumnType("money")
                .HasColumnName("vlLancado");
        });

        modelBuilder.Entity<SimAmRolDaTemp2>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SimAmRolDaTemp2");

            entity.Property(e => e.CodDivida)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NmContribuinte)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nmContribuinte");
            entity.Property(e => e.NrAnoDivida).HasColumnName("nrAnoDivida");
            entity.Property(e => e.NrdocumentoContratado)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("nrdocumentoContratado");
            entity.Property(e => e.TpDocumento)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tpDocumento");
            entity.Property(e => e.VlLancado)
                .HasColumnType("money")
                .HasColumnName("vlLancado");
        });

        modelBuilder.Entity<SimAmRowDum>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.CdDivida).ValueGeneratedOnAdd();
            entity.Property(e => e.CodDivida)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NmContribuinte)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nmContribuinte");
            entity.Property(e => e.NrAnoDivida).HasColumnName("nrAnoDivida");
            entity.Property(e => e.NrdocumentoContratado)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("nrdocumentoContratado");
            entity.Property(e => e.TpDocumento)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tpDocumento");
            entity.Property(e => e.VlLancado)
                .HasColumnType("money")
                .HasColumnName("vlLancado");
        });

        modelBuilder.Entity<SimaminscricaoEmDividaAtiva>(entity =>
        {
            entity.HasKey(e => e.Idcontrole);

            entity.ToTable("SIMAMInscricaoEmDividaAtiva");

            entity.HasIndex(e => e.ConIddivida, "IX_SIMAMInscricaoEmDividaAtiva_ConIDDivida").HasFillFactor(90);

            entity.HasIndex(e => e.DivEmpId, "IX_SIMAMInscricaoEmDividaAtiva_DivEmpID").HasFillFactor(90);

            entity.HasIndex(e => e.ImoIddivida, "IX_SIMAMInscricaoEmDividaAtiva_ImoIDDivida").HasFillFactor(90);

            entity.Property(e => e.Idcontrole).HasColumnName("IDControle");
            entity.Property(e => e.Cnpjcpfcontribuinte)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("CNPJCPFContribuinte");
            entity.Property(e => e.Cnpjfilial)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("CNPJFilial");
            entity.Property(e => e.ConIddivida).HasColumnName("ConIDDivida");
            entity.Property(e => e.DataBaixa).HasColumnType("datetime");
            entity.Property(e => e.DataInscricaoDa)
                .HasColumnType("datetime")
                .HasColumnName("DataInscricaoDA");
            entity.Property(e => e.DivEmpId).HasColumnName("DivEmpID");
            entity.Property(e => e.ImoIddivida)
                .HasComment("Código de identificação da dívida.")
                .HasColumnName("ImoIDDivida");
            entity.Property(e => e.InscricaoImob)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Juros).HasColumnType("money");
            entity.Property(e => e.NomeContribuinte)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ValorLancado).HasColumnType("money");

            entity.HasOne(d => d.ConIddividaNavigation).WithMany(p => p.SimaminscricaoEmDividaAtivas)
                .HasForeignKey(d => d.ConIddivida)
                .HasConstraintName("FK_SIMAMInscricaoEmDividaAtiva_TribDividasContribuinte");

            entity.HasOne(d => d.DivEmp).WithMany(p => p.SimaminscricaoEmDividaAtivas)
                .HasForeignKey(d => d.DivEmpId)
                .HasConstraintName("FK_SIMAMInscricaoEmDividaAtiva_TribDividasEmpresas");

            entity.HasOne(d => d.ImoIddividaNavigation).WithMany(p => p.SimaminscricaoEmDividaAtivas)
                .HasForeignKey(d => d.ImoIddivida)
                .HasConstraintName("FK_SIMAMInscricaoEmDividaAtiva_TribDividasImo");
        });

        modelBuilder.Entity<SimamirfocorrenciasTribExerc>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SIMAMIRFOcorrenciasTribExerc");

            entity.Property(e => e.Cnpjcpfcontribuinte)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("CNPJCPFContribuinte");
            entity.Property(e => e.Cnpjfilial)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("CNPJFilial");
            entity.Property(e => e.ConIddivida).HasColumnName("ConIDDivida");
            entity.Property(e => e.DataBaixa).HasColumnType("datetime");
            entity.Property(e => e.DataGeracao).HasColumnType("datetime");
            entity.Property(e => e.DataInscricaoDa)
                .HasColumnType("datetime")
                .HasColumnName("DataInscricaoDA");
            entity.Property(e => e.DivEmpId).HasColumnName("DivEmpID");
            entity.Property(e => e.IdTributo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Idcontrole)
                .ValueGeneratedOnAdd()
                .HasColumnName("IDControle");
            entity.Property(e => e.ImoIddivida).HasColumnName("ImoIDDivida");
            entity.Property(e => e.InscricaoImob)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NomeContribuinte)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ValorLancado).HasColumnType("money");
        });

        modelBuilder.Entity<SimamrolDa2008>(entity =>
        {
            entity.HasKey(e => e.Idcontrole);

            entity.ToTable("SIMAMRolDA2008");

            entity.Property(e => e.Idcontrole).HasColumnName("IDControle");
            entity.Property(e => e.Cnpjcpfcontribuinte)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("CNPJCPFContribuinte");
            entity.Property(e => e.Cnpjfilial)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("CNPJFilial");
            entity.Property(e => e.CodDivida)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ConIddivida).HasColumnName("ConIDDivida");
            entity.Property(e => e.DataBaixa).HasColumnType("datetime");
            entity.Property(e => e.DataInscricaoDa)
                .HasColumnType("datetime")
                .HasColumnName("DataInscricaoDA");
            entity.Property(e => e.DivEmpId).HasColumnName("DivEmpID");
            entity.Property(e => e.ImoIddivida).HasColumnName("ImoIDDivida");
            entity.Property(e => e.InscricaoImob)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Juros).HasColumnType("money");
            entity.Property(e => e.NomeContribuinte)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TapId).HasColumnName("TapID");
            entity.Property(e => e.ValorLancado).HasColumnType("money");
        });

        modelBuilder.Entity<SimamrolDa2008temp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SIMAMRolDA2008temp");

            entity.Property(e => e.Cnpjcpfcontribuinte)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("CNPJCPFContribuinte");
            entity.Property(e => e.Cnpjfilial)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("CNPJFilial");
            entity.Property(e => e.CodDivida)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ConIddivida).HasColumnName("ConIDDivida");
            entity.Property(e => e.DataBaixa).HasColumnType("datetime");
            entity.Property(e => e.DataInscricaoDa)
                .HasColumnType("datetime")
                .HasColumnName("DataInscricaoDA");
            entity.Property(e => e.DivEmpId).HasColumnName("DivEmpID");
            entity.Property(e => e.Idcontrole).HasColumnName("IDControle");
            entity.Property(e => e.ImoIddivida).HasColumnName("ImoIDDivida");
            entity.Property(e => e.InscricaoImob)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Juros).HasColumnType("money");
            entity.Property(e => e.NomeContribuinte)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TapId).HasColumnName("TapID");
            entity.Property(e => e.ValorLancado).HasColumnType("money");
        });

        modelBuilder.Entity<SimamrowDividaAtiva>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SIMAMrowDividaAtiva");

            entity.Property(e => e.Cnpjcpfcontribuinte)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("CNPJCPFContribuinte");
            entity.Property(e => e.Cnpjfilial)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("CNPJFilial");
            entity.Property(e => e.CodDivida)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ConIddivida).HasColumnName("ConIDDivida");
            entity.Property(e => e.DataBaixa).HasColumnType("datetime");
            entity.Property(e => e.DataInscricaoDa)
                .HasColumnType("datetime")
                .HasColumnName("DataInscricaoDA");
            entity.Property(e => e.DivEmpId).HasColumnName("DivEmpID");
            entity.Property(e => e.Idcontrole)
                .ValueGeneratedOnAdd()
                .HasColumnName("IDControle");
            entity.Property(e => e.ImoIddivida).HasColumnName("ImoIDDivida");
            entity.Property(e => e.InscricaoImob)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Juros).HasColumnType("money");
            entity.Property(e => e.NomeContribuinte)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ValorLancado).HasColumnType("money");
        });

        modelBuilder.Entity<Simamtributo>(entity =>
        {
            entity.HasKey(e => e.TribAmcodigo);

            entity.ToTable("SIMAMTributos");

            entity.Property(e => e.TribAmcodigo)
                .ValueGeneratedNever()
                .HasColumnName("TribAMCodigo");
            entity.Property(e => e.TribDescricao)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SimamtributosEquivalencium>(entity =>
        {
            entity.HasKey(e => new { e.TipoTribId, e.TribAmcodigo });

            entity.ToTable("SIMAMTributosEquivalencia");

            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
            entity.Property(e => e.TribAmcodigo).HasColumnName("TribAMCodigo");
            entity.Property(e => e.DataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.HostInclusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(host_name())");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");

            entity.HasOne(d => d.TipoTrib).WithMany(p => p.SimamtributosEquivalencia)
                .HasForeignKey(d => d.TipoTribId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SIMAMTributosEquivalencia_TribTipoTributos");

            entity.HasOne(d => d.TribAmcodigoNavigation).WithMany(p => p.SimamtributosEquivalencia)
                .HasForeignKey(d => d.TribAmcodigo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SIMAMTributosEquivalencia_SIMAMTributos");
        });

        modelBuilder.Entity<SimuladoIptu>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SimuladoIPTU");

            entity.HasIndex(e => e.SimuAno, "IX_SimuladoIPTU_Ano").HasFillFactor(90);

            entity.HasIndex(e => e.EdificacaoId, "IX_SimuladoIPTU_Edificacao").HasFillFactor(90);

            entity.HasIndex(e => e.Edifedificacaoenglobamento, "IX_SimuladoIPTU_Englobamento").HasFillFactor(90);

            entity.HasIndex(e => e.SimuId, "IX_SimuladoIPTU_Id").HasFillFactor(90);

            entity.HasIndex(e => e.Inscricaoimobiliaria, "IX_SimuladoIPTU_Inscricao").HasFillFactor(90);

            entity.HasIndex(e => new { e.SimuId, e.Incidencia }, "IX_SimuladoIPTU_SimuId_Incidencia")
                .IsClustered()
                .HasFillFactor(90);

            entity.HasIndex(e => new { e.SimuId, e.TipoBxId }, "IX_SimuladoIPTU_SimuId_TipoBxId").HasFillFactor(90);

            entity.HasIndex(e => new { e.TipoTribId, e.TipoBxId }, "IX_SimuladoIPTU_TipoTribId_TipoBxId").HasFillFactor(90);

            entity.HasIndex(e => new { e.SimuAno, e.Incidencia, e.SimuId, e.EdificacaoId, e.Edifedificacaoenglobamento, e.TipoTribId, e.TipoBxId }, "_dta_index_SimuladoIPTU_8_1015323027__K8_K9_K1_K2_K10_K4_K5_6").HasFillFactor(90);

            entity.Property(e => e.Edifedificacaoenglobamento).HasColumnName("edifedificacaoenglobamento");
            entity.Property(e => e.Incidencia).HasColumnName("incidencia");
            entity.Property(e => e.Inscricaoimobiliaria)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SimuAno).HasColumnName("simuAno");
            entity.Property(e => e.SimuId).HasColumnName("simuId");
            entity.Property(e => e.Valor).HasColumnType("money");
        });

        modelBuilder.Entity<SimuladoIptu2010>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SimuladoIPTU2010");

            entity.Property(e => e.Edifedificacaoenglobamento).HasColumnName("edifedificacaoenglobamento");
            entity.Property(e => e.Incidencia).HasColumnName("incidencia");
            entity.Property(e => e.Inscricaoimobiliaria)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SimuAno).HasColumnName("simuAno");
            entity.Property(e => e.SimuId).HasColumnName("simuId");
            entity.Property(e => e.Valor).HasColumnType("money");
        });

        modelBuilder.Entity<SisAtalho>(entity =>
        {
            entity.HasKey(e => e.Idatalho);

            entity.Property(e => e.Idatalho)
                .ValueGeneratedNever()
                .HasColumnName("IDAtalho");
            entity.Property(e => e.FormAcessKey)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FormIdatalho)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("FormIDAtalho");
            entity.Property(e => e.FormIdlocal)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("FormIDLocal");
            entity.Property(e => e.UsuId)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("UsuID");

            entity.HasOne(d => d.FormIdatalhoNavigation).WithMany(p => p.SisAtalhoFormIdatalhoNavigations)
                .HasForeignKey(d => d.FormIdatalho)
                .HasConstraintName("FK_SisAtalhos_Formularios1");

            entity.HasOne(d => d.FormIdlocalNavigation).WithMany(p => p.SisAtalhoFormIdlocalNavigations)
                .HasForeignKey(d => d.FormIdlocal)
                .HasConstraintName("FK_SisAtalhos_Formularios");

            entity.HasOne(d => d.Usu).WithMany(p => p.SisAtalhos)
                .HasForeignKey(d => d.UsuId)
                .HasConstraintName("FK_SisAtalhos_Usuarios");
        });

        modelBuilder.Entity<SisCore>(entity =>
        {
            entity.HasKey(e => e.SicoId);

            entity.ToTable("sisCores");

            entity.Property(e => e.SicoId)
                .ValueGeneratedNever()
                .HasColumnName("sicoID");
            entity.Property(e => e.SicoNome)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sicoNome");
        });

        modelBuilder.Entity<SisFaixaHorario>(entity =>
        {
            entity.HasKey(e => e.FaHoId);

            entity.ToTable("SisFaixaHorario");

            entity.Property(e => e.FaHoId)
                .ValueGeneratedNever()
                .HasComment("Identificação da faixa do horário.")
                .HasColumnName("FaHoID");
            entity.Property(e => e.FaHoPeriodoFinal)
                .HasComment("Hora, Minuto e Segundo Final permitido para faixa.")
                .HasColumnType("datetime");
            entity.Property(e => e.FaHoPeriodoIni)
                .HasComment("Hora, Minuto e Segundo  inicial permitido para faixa.")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<SisFormataCampo>(entity =>
        {
            entity.HasKey(e => new { e.SifoTipoFormatacao, e.SifoDescrNomeCampo });

            entity.ToTable("sisFormataCampo");

            entity.Property(e => e.SifoTipoFormatacao)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Nome do tipo de formatação, ex.: InscricaoImobiliaria (10132320237001).")
                .HasColumnName("sifoTipoFormatacao");
            entity.Property(e => e.SifoDescrNomeCampo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Nome do campo que será formatado. Ex.: Quadrante, Quadricula, Setor e etc...")
                .HasColumnName("sifoDescrNomeCampo");
            entity.Property(e => e.SifoInicioFormatacao)
                .HasComment("Marca o início para realização do MID no campo.")
                .HasColumnName("sifoInicioFormatacao");
            entity.Property(e => e.SifoTamanhoFormatacao)
                .HasComment("Marca o tamanho que deverá ser retirando da string com MID.")
                .HasColumnName("sifoTamanhoFormatacao");
        });

        modelBuilder.Entity<SisLogDado>(entity =>
        {
            entity.HasKey(e => e.LoDaId);

            entity.ToTable("sisLogDados");

            entity.HasIndex(e => new { e.TabelaNome, e.DataHora }, "IX_sisLogDadosTabelaNome_DataHora").HasFillFactor(90);

            entity.HasIndex(e => new { e.BancoNome, e.TabelaNome }, "IX_sisLogDados_BancoNome_TabelaNome").HasFillFactor(90);

            entity.HasIndex(e => new { e.DataHora, e.TabelaNome, e.Operacao, e.LoDaId }, "IX_sisLogDados_DataHora_TabelaNome_Operacao_LoDaID").HasFillFactor(90);

            entity.HasIndex(e => e.TabelaNome, "IX_sisLogDados_TabelaNome").HasFillFactor(90);

            entity.Property(e => e.LoDaId).HasColumnName("LoDaID");
            entity.Property(e => e.BancoNome)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.DataHora).HasColumnType("datetime");
            entity.Property(e => e.EnderecoIp)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EnderecoIP");
            entity.Property(e => e.ObjetoOcorrencia).HasColumnType("text");
            entity.Property(e => e.Operacao)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Pode ser: Inclusão, Alteração ou Exclusão.");
            entity.Property(e => e.TabelaAlias)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.TabelaNome)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Usuario)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SisLogDadosComposicao>(entity =>
        {
            entity.HasKey(e => e.LoDaCoId);

            entity.ToTable("sisLogDadosComposicao");

            entity.HasIndex(e => e.Chave, "IX_sisLogDadosComposicao").HasFillFactor(90);

            entity.HasIndex(e => new { e.Chave, e.Valor }, "IX_sisLogDadosComposicao_1").HasFillFactor(90);

            entity.Property(e => e.LoDaCoId).HasColumnName("LoDaCoID");
            entity.Property(e => e.Chave)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LoDaId).HasColumnName("LoDaID");
            entity.Property(e => e.Valor)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SisLogDadosTemp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("sisLogDadosTemp");

            entity.Property(e => e.Campo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Data).HasColumnType("datetime");
            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.InscricaoImobiliaria)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Usuario)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ValorAntigo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ValorNovo)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SisLogSistema>(entity =>
        {
            entity.HasKey(e => e.LoSisId);

            entity.ToTable("sisLogSistema");

            entity.Property(e => e.LoSisId)
                .ValueGeneratedNever()
                .HasColumnName("LoSisID");
            entity.Property(e => e.LoSisData).HasColumnType("datetime");
            entity.Property(e => e.LoSisIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("LoSisIP");
            entity.Property(e => e.LoSisSituacao)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LoSisUsuId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("LoSisUsuID");
        });

        modelBuilder.Entity<SisOcorrencia>(entity =>
        {
            entity.HasKey(e => e.Idocorrencia);

            entity.Property(e => e.Idocorrencia).HasColumnName("IDOcorrencia");
            entity.Property(e => e.DataOcorrencia)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DescricaoOcorrencia)
                .HasMaxLength(1024)
                .IsUnicode(false);
            entity.Property(e => e.FrmId)
                .HasMaxLength(512)
                .IsUnicode(false);
            entity.Property(e => e.TipoOcorrencia)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.UsuId)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("UsuID");

            entity.HasOne(d => d.Usu).WithMany(p => p.SisOcorrencia)
                .HasForeignKey(d => d.UsuId)
                .HasConstraintName("FK_SisOcorrencias_Usuarios");
        });

        modelBuilder.Entity<SisParametro>(entity =>
        {
            entity.HasKey(e => new { e.SiPaIdSistema, e.SiPaIdParametro });

            entity.ToTable("sisParametros");

            entity.Property(e => e.SiPaIdSistema)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SiPaIdParametro)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SiPaDescrParametro)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.SiPaValorParametro)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SisTarefa>(entity =>
        {
            entity.HasKey(e => e.TiJoId).HasName("PK_JobTipo");

            entity.ToTable("SisTarefa");

            entity.Property(e => e.TiJoId)
                .ValueGeneratedNever()
                .HasComment("Código de identificação do tipo do JOB.")
                .HasColumnName("TiJoID");
            entity.Property(e => e.TiJoNameSpace)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TiJoNome)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasComment("Nome do JOB que aparece para o usuário. Pode ser: CalculoIPTU, CalculoRenovacao, ExtratoUnificado  e etc...");
            entity.Property(e => e.TiJoNomeProcedimento)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Nome do procedimento (stored procedure) que banco deve executar.");
            entity.Property(e => e.TiJoObjetivo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasComment("Descrever o objetivo do JOB.");
            entity.Property(e => e.TiJoPathFileDll)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Define a classe que contem o methodo as ser chamado")
                .HasColumnName("TiJoPathFileDLL");
            entity.Property(e => e.TiJoTipo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Este atributo descreve se deve ser chamado um metodo ou um Job (BANCO,APLICAÇÃO)");

            entity.HasMany(d => d.FaHos).WithMany(p => p.TiJos)
                .UsingEntity<Dictionary<string, object>>(
                    "SisTarefaFaixaHorario",
                    r => r.HasOne<SisFaixaHorario>().WithMany()
                        .HasForeignKey("FaHoId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_SisTarefaFaixaHorario_SisFaixaHorario"),
                    l => l.HasOne<SisTarefa>().WithMany()
                        .HasForeignKey("TiJoId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_SisTarefaFaixaHorario_SisTarefa"),
                    j =>
                    {
                        j.HasKey("TiJoId", "FaHoId");
                        j.ToTable("SisTarefaFaixaHorario", tb => tb.HasComment("Controla a faixa de horarios permitidos para agendamento da tarefa."));
                        j.IndexerProperty<int>("TiJoId")
                            .HasComment("Código de identificação do tipo do JOB.")
                            .HasColumnName("TiJoID");
                        j.IndexerProperty<short>("FaHoId")
                            .HasComment("Identificação da faixa do horário.")
                            .HasColumnName("FaHoID");
                    });

            entity.HasMany(d => d.Usus).WithMany(p => p.TiJos)
                .UsingEntity<Dictionary<string, object>>(
                    "SisTarefaUsuario",
                    r => r.HasOne<Usuario>().WithMany()
                        .HasForeignKey("UsuId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_SisTarefaUsuario_Usuarios"),
                    l => l.HasOne<SisTarefa>().WithMany()
                        .HasForeignKey("TiJoId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_SisTarefaUsuario_SisTarefa"),
                    j =>
                    {
                        j.HasKey("TiJoId", "UsuId");
                        j.ToTable("SisTarefaUsuario");
                        j.IndexerProperty<int>("TiJoId").HasColumnName("TiJoID");
                        j.IndexerProperty<string>("UsuId")
                            .HasMaxLength(255)
                            .IsUnicode(false)
                            .HasColumnName("UsuID");
                    });
        });

        modelBuilder.Entity<SisTarefaAgendum>(entity =>
        {
            entity.HasKey(e => e.JoAgId).HasName("PK_JobAgenda");

            entity.Property(e => e.JoAgId)
                .ValueGeneratedNever()
                .HasColumnName("JoAgID");
            entity.Property(e => e.DataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Data da inclusão do JOB.")
                .HasColumnType("datetime");
            entity.Property(e => e.Host)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValueSql("(host_name())")
                .HasComment("Nome da maquina que agendou o JOB.");
            entity.Property(e => e.JoAgArquivo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasComment("Contem o endereço do arquivo gerado");
            entity.Property(e => e.JoAgDataHoraFim)
                .HasComment("Data gravada automaticamente pelo sistema qdo. finalizada a tarefa.")
                .HasColumnType("datetime");
            entity.Property(e => e.JoAgDataHoraIni)
                .HasComment("Data, hora e minuto para execução da tarefa.")
                .HasColumnType("datetime");
            entity.Property(e => e.JoAgMensagem)
                .HasComment("Mensagem sobre a situação da agenda da tarefa. Ex. Situação:Finalizada - Mensagem: ERRO ou 30 Registros Afetados.")
                .HasColumnType("text");
            entity.Property(e => e.JoAgSituacao)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("Aguardando")
                .HasComment("Para controlar a situação do JOB no banco, pode ser: Aguardando, Rodando, Concluido.");
            entity.Property(e => e.TiJoId).HasColumnName("TiJoID");
            entity.Property(e => e.UsuId)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())")
                .HasComment("Nome do usuário que agendou o JOB.")
                .HasColumnName("UsuID");

            entity.HasOne(d => d.TiJo).WithMany(p => p.SisTarefaAgenda)
                .HasForeignKey(d => d.TiJoId)
                .HasConstraintName("FK_SisTarefaAgenda_SisTarefa");

            entity.HasOne(d => d.Usu).WithMany(p => p.SisTarefaAgenda)
                .HasForeignKey(d => d.UsuId)
                .HasConstraintName("FK_SisTarefaAgenda_Usuarios");
        });

        modelBuilder.Entity<SisTarefaParametro>(entity =>
        {
            entity.HasKey(e => e.TaPaId).HasName("PK_SisJobTarefaParametros");

            entity.Property(e => e.TaPaId)
                .ValueGeneratedNever()
                .HasComment("Identificação da Tarefa.")
                .HasColumnName("TaPaID");
            entity.Property(e => e.TaPaDescrParametro)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TaPaOpcional)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength()
                .HasComment("Marca se o parâmetro é opcional.");
            entity.Property(e => e.TaPaParametro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Parâmetro do procedimento (strored procedure) que será executado pelo tipo de JOB.");
            entity.Property(e => e.TaPaTamanhoParametro)
                .HasComment("Tamanho do paramentro ex. string 50, inteiro 4, money 8,2.")
                .HasColumnType("decimal(8, 0)");
            entity.Property(e => e.TaPaTipoParametro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Tipo do parâmetro do procedimento (strored procedure) que será executado pelo tipo de JOB. Pode ser: String, Inteiro, Money");
            entity.Property(e => e.TaPaVlrPadrao)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TiJoId).HasColumnName("TiJoID");

            entity.HasOne(d => d.TiJo).WithMany(p => p.SisTarefaParametros)
                .HasForeignKey(d => d.TiJoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SisTarefaParametros_SisTarefa");
        });

        modelBuilder.Entity<SisTarefaParametrosValore>(entity =>
        {
            entity.HasKey(e => e.PaVaId);

            entity.Property(e => e.PaVaId)
                .ValueGeneratedNever()
                .HasColumnName("PaVaID");
            entity.Property(e => e.JoAgId).HasColumnName("JoAgID");
            entity.Property(e => e.PaVaValor)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Valor atribuido ao parametro.");
            entity.Property(e => e.TaPaId)
                .HasComment("Identificação da Tarefa.")
                .HasColumnName("TaPaID");

            entity.HasOne(d => d.JoAg).WithMany(p => p.SisTarefaParametrosValores)
                .HasForeignKey(d => d.JoAgId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SisTarefaParametrosValores_SisTarefaAgenda");

            entity.HasOne(d => d.TaPa).WithMany(p => p.SisTarefaParametrosValores)
                .HasForeignKey(d => d.TaPaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SisTarefaParametrosValores_SisTarefaParametros");
        });

        modelBuilder.Entity<SocComposicaoPasse>(entity =>
        {
            entity.HasKey(e => e.CompId);

            entity.ToTable("SocComposicaoPasse");

            entity.Property(e => e.CompId)
                .ValueGeneratedNever()
                .HasColumnName("CompID");
            entity.Property(e => e.CompTipo)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.PasseId).HasColumnName("PasseID");

            entity.HasOne(d => d.Con).WithMany(p => p.SocComposicaoPasses)
                .HasForeignKey(d => d.ConId)
                .HasConstraintName("FK_SocComposicaoPasse_Contribuintes");

            entity.HasOne(d => d.Passe).WithMany(p => p.SocComposicaoPasses)
                .HasForeignKey(d => d.PasseId)
                .HasConstraintName("FK_SocComposicaoPasse_SocPasse");
        });

        modelBuilder.Entity<SocOcorrencium>(entity =>
        {
            entity.HasKey(e => e.OcorId);

            entity.Property(e => e.OcorId)
                .ValueGeneratedNever()
                .HasColumnName("OcorID");
            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.OcorDataRetirada).HasColumnType("datetime");
            entity.Property(e => e.OcorPasseDataValidade).HasColumnType("datetime");
            entity.Property(e => e.OcorPassePeriodo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.OcorPasseSituacao)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.PasseId).HasColumnName("PasseID");

            entity.HasOne(d => d.Con).WithMany(p => p.SocOcorrencia)
                .HasForeignKey(d => d.ConId)
                .HasConstraintName("FK_SocOcorrencia_Contribuintes");

            entity.HasOne(d => d.Passe).WithMany(p => p.SocOcorrencia)
                .HasForeignKey(d => d.PasseId)
                .HasConstraintName("FK_SocOcorrencia_SocPasse");
        });

        modelBuilder.Entity<SocPasse>(entity =>
        {
            entity.HasKey(e => e.PasseId);

            entity.ToTable("SocPasse");

            entity.Property(e => e.PasseId)
                .ValueGeneratedNever()
                .HasColumnName("PasseID");
            entity.Property(e => e.LocId).HasColumnName("LocID");
            entity.Property(e => e.PasseAcompanhante)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PasseDataCadastro).HasColumnType("datetime");
            entity.Property(e => e.PasseDataSituacao).HasColumnType("datetime");
            entity.Property(e => e.PasseDataValidade).HasColumnType("datetime");
            entity.Property(e => e.PassePeriodo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("Integral")
                .HasComment("Tipos: Manhã, Tarde, Noite, Integral, Manhã/Tarde, Manhã/Noite e Tarde/Noite.");
            entity.Property(e => e.PasseSituacao)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.TpassId).HasColumnName("TPassID");

            entity.HasOne(d => d.Loc).WithMany(p => p.SocPasses)
                .HasForeignKey(d => d.LocId)
                .HasConstraintName("FK_SocPasse_Localizacao");

            entity.HasOne(d => d.Tpass).WithMany(p => p.SocPasses)
                .HasForeignKey(d => d.TpassId)
                .HasConstraintName("FK_SocPasse_SocTipoPasse");
        });

        modelBuilder.Entity<SocTipoPasse>(entity =>
        {
            entity.HasKey(e => e.TpassId);

            entity.ToTable("SocTipoPasse");

            entity.Property(e => e.TpassId)
                .ValueGeneratedNever()
                .HasColumnName("TPassID");
            entity.Property(e => e.TpassDescricao)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("TPassDescricao");
            entity.Property(e => e.TpassNome)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TPassNome");
        });

        modelBuilder.Entity<SysTabela>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("sysTabelas");

            entity.Property(e => e.NomeAmigavel).HasMaxLength(128);
            entity.Property(e => e.Tabela).HasMaxLength(128);
        });

        modelBuilder.Entity<TabAtributosDinamico>(entity =>
        {
            entity.HasKey(e => e.TabParId);

            entity.Property(e => e.TabParId)
                .ValueGeneratedNever()
                .HasColumnName("TabParID");
            entity.Property(e => e.TabParNome)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.TabParTabela)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TabParTipo)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Table1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Table1");

            entity.Property(e => e.Campo1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("campo1");
            entity.Property(e => e.Campo2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("(host_name())")
                .IsFixedLength()
                .HasColumnName("campo2");
        });

        modelBuilder.Entity<Table2>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Table2");

            entity.Property(e => e.Eee)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("eee");
            entity.Property(e => e.Ttt)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())")
                .IsFixedLength()
                .HasColumnName("ttt");
        });

        modelBuilder.Entity<Tb24LotesSolCad>(entity =>
        {
            entity.HasKey(e => new { e.IdLotes, e.IdProjeto });

            entity.ToTable("tb24LotesSolCad");

            entity.Property(e => e.IdLotes)
                .ValueGeneratedOnAdd()
                .HasColumnName("idLotes");
            entity.Property(e => e.IdProjeto).HasColumnName("idProjeto");
            entity.Property(e => e.DsAreaAtingida)
                .HasMaxLength(30)
                .IsFixedLength()
                .HasColumnName("dsAreaAtingida");
            entity.Property(e => e.DsIndFiscal)
                .HasMaxLength(30)
                .IsFixedLength()
                .HasColumnName("dsIndFiscal");
            entity.Property(e => e.DsSubLote)
                .HasMaxLength(30)
                .IsFixedLength()
                .HasColumnName("dsSubLote");
            entity.Property(e => e.FlLotePrincipal).HasColumnName("flLotePrincipal");
            entity.Property(e => e.NrAreaTerreno)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("nrAreaTerreno");
            entity.Property(e => e.NrDifLoteMenor)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("nrDifLoteMenor");
        });

        modelBuilder.Entity<Tb24SolicitaCadastro>(entity =>
        {
            entity.HasKey(e => e.IdProjeto);

            entity.ToTable("tb24SolicitaCadastros");

            entity.Property(e => e.IdProjeto).HasColumnName("idProjeto");
            entity.Property(e => e.DsArtautorProj)
                .HasMaxLength(80)
                .IsFixedLength()
                .HasColumnName("dsARTAutorProj");
            entity.Property(e => e.DsCnpjempProj)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("dsCNPJEmpProj");
            entity.Property(e => e.DsCreaAutor)
                .HasMaxLength(30)
                .IsFixedLength()
                .HasColumnName("dsCreaAutor");
            entity.Property(e => e.DsCrearesponsavel)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("dsCREAResponsavel");
            entity.Property(e => e.DsEmpProj)
                .HasMaxLength(30)
                .IsFixedLength()
                .HasColumnName("dsEmpProj");
            entity.Property(e => e.DsFinalidade)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("dsFinalidade");
            entity.Property(e => e.DsObservacao).HasColumnName("dsObservacao");
            entity.Property(e => e.DsProjeto)
                .HasMaxLength(200)
                .IsFixedLength()
                .HasColumnName("dsProjeto");
        });

        modelBuilder.Entity<TbCepcorreio>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbCEPCorreio");

            entity.Property(e => e.BaiNo)
                .HasMaxLength(255)
                .HasColumnName("BAI_NO");
            entity.Property(e => e.LocNuSequencial).HasColumnName("LOC_NU_SEQUENCIAL");
            entity.Property(e => e.LogKeyDne)
                .HasMaxLength(255)
                .HasColumnName("LOG_KEY_DNE");
            entity.Property(e => e.LogNo)
                .HasMaxLength(255)
                .HasColumnName("LOG_NO");
        });

        modelBuilder.Entity<TbCertidaoPrevium>(entity =>
        {
            entity.HasKey(e => e.IdPrevia);

            entity.ToTable("tbCertidaoPrevia");

            entity.HasIndex(e => new { e.DsLogin, e.LivroDaid, e.FlProcessado }, "_dta_index_tbCertidaoPrevia_19_139418420__K5_K2_K8_1_3_4_6_7_9_10_11_12").HasFillFactor(90);

            entity.Property(e => e.IdPrevia).HasColumnName("idPrevia");
            entity.Property(e => e.DsErro)
                .IsUnicode(false)
                .HasColumnName("dsErro");
            entity.Property(e => e.DsLogin)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsLogin");
            entity.Property(e => e.DtInclusao)
                .HasColumnType("datetime")
                .HasColumnName("dtInclusao");
            entity.Property(e => e.DtProcessamento)
                .HasColumnType("datetime")
                .HasColumnName("dtProcessamento");
            entity.Property(e => e.FlGerarCertidao).HasColumnName("flGerarCertidao");
            entity.Property(e => e.FlProcessado).HasColumnName("flProcessado");
            entity.Property(e => e.LivroDaid).HasColumnName("LivroDAID");
            entity.Property(e => e.NrAgrupar)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("nrAgrupar");
            entity.Property(e => e.Ordem)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TpAgrupar)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("tpAgrupar");
            entity.Property(e => e.TpCadastro).HasColumnName("tpCadastro");
        });

        modelBuilder.Entity<TbConSolicitacaoInscricaoAtividade>(entity =>
        {
            entity.HasKey(e => e.IdSolicitacaoInscricaoAtividade).HasName("PK_tbConSolicitacaoInscricaoAtividades_1");

            entity.ToTable("tbConSolicitacaoInscricaoAtividades", tb => tb.HasTrigger("TrgTbConSolicitacaoInscricaoAtividadesInsert"));

            entity.HasIndex(e => e.IdSolicitacaoInscricao, "IX_tbConSolicitacaoInscricaoAtividades_IdSolicitacaoInscricao_inc_Atividade_flPrincipal_dtInicial_dtFim");

            entity.Property(e => e.Atividade)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DsValor)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsValor");
            entity.Property(e => e.DtFim)
                .HasColumnType("datetime")
                .HasColumnName("dtFim");
            entity.Property(e => e.DtInicial)
                .HasColumnType("datetime")
                .HasColumnName("dtInicial");
            entity.Property(e => e.FlPrincipal).HasColumnName("flPrincipal");

            entity.HasOne(d => d.IdSolicitacaoInscricaoNavigation).WithMany(p => p.TbConSolicitacaoInscricaoAtividades)
                .HasForeignKey(d => d.IdSolicitacaoInscricao)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tbConSolicitacaoInscricaoAtividades_tbConSolicitacaoInscricaoCMC");
        });

        modelBuilder.Entity<TbConSolicitacaoInscricaoAtividadesLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbConSolicitacaoInscricaoAtividadesLOG");

            entity.Property(e => e.Atividade)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DsOperacao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsOperacao");
            entity.Property(e => e.DtInicial)
                .HasColumnType("datetime")
                .HasColumnName("dtInicial");
            entity.Property(e => e.FlPrincipal).HasColumnName("flPrincipal");
        });

        modelBuilder.Entity<TbConSolicitacaoInscricaoCmc>(entity =>
        {
            entity.HasKey(e => e.IdSolicitacaoInscricao);

            entity.ToTable("tbConSolicitacaoInscricaoCMC", tb =>
                {
                    tb.HasTrigger("TrgTbConSolicitacaoInscricaoCMCEmailInsert");
                    tb.HasTrigger("TrgTbConSolicitacaoInscricaoCMCInsertZeraAreaAberta");
                });

            entity.HasIndex(e => new { e.DsTipoSolicitacao, e.NrLocalizadorAlvara, e.EmprCmc }, "IX_tbConSolicitacaoInscricaoCMC_dsTipoSolic_nrLocAlv_EmprCMC_inc_IdSolInscr_nrCnpjCpf_dsTpAlt");

            entity.HasIndex(e => e.NrLocalizadorAlvara, "IX_tbConSolicitacaoInscricaoCMC_nrLocalizadorAlvara").HasFillFactor(90);

            entity.HasIndex(e => new { e.NrLocalizadorAlvara, e.DsTipoSolicitacao }, "IX_tbConSolicitacaoInscricaoCMC_nrLocalizadorAlvara_dsTipoSolicitacao").HasFillFactor(90);

            entity.Property(e => e.ConsId).HasColumnName("consId");
            entity.Property(e => e.DsAtividadeAlvara)
                .IsUnicode(false)
                .HasColumnName("dsAtividadeAlvara");
            entity.Property(e => e.DsComplementoEndereco)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("dsComplementoEndereco");
            entity.Property(e => e.DsEmail)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsEmail");
            entity.Property(e => e.DsEmailContador)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsEmailContador");
            entity.Property(e => e.DsOrigemInscricao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsOrigemInscricao");
            entity.Property(e => e.DsRazaoSocial)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dsRazaoSocial");
            entity.Property(e => e.DsRestricoes)
                .IsUnicode(false)
                .HasColumnName("dsRestricoes");
            entity.Property(e => e.DsSituacaoInscricao)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("dsSituacaoInscricao");
            entity.Property(e => e.DsTipoContribuinte)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("dsTipoContribuinte");
            entity.Property(e => e.DsTipoSolicitacao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsTipoSolicitacao");
            entity.Property(e => e.DsTiposAlteracao)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("dsTiposAlteracao");
            entity.Property(e => e.Dsarquivoxml)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasColumnName("dsarquivoxml");
            entity.Property(e => e.DtInscricao).HasColumnName("dtInscricao");
            entity.Property(e => e.DtJucepar)
                .HasColumnType("datetime")
                .HasColumnName("dtJucepar");
            entity.Property(e => e.DtRegistroJucepar).HasColumnName("dtRegistroJucepar");
            entity.Property(e => e.DtValidade).HasColumnName("dtValidade");
            entity.Property(e => e.DtVistoria).HasColumnName("dtVistoria");
            entity.Property(e => e.Dtinclusao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtinclusao");
            entity.Property(e => e.EmprAlicotaPrincipal).HasColumnType("money");
            entity.Property(e => e.EmprCaracId).HasColumnName("EmprCaracID");
            entity.Property(e => e.EmprCmc).HasColumnName("EmprCMC");
            entity.Property(e => e.EmprConstitId).HasColumnName("EmprConstitID");
            entity.Property(e => e.EmprDataAdesao).HasColumnType("datetime");
            entity.Property(e => e.EmprEmpresaPublica)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.EmprSubstitutoTributario)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.EmprTipoEmpresa)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.EmprValorEstimado).HasColumnType("money");
            entity.Property(e => e.EmprValorMensal).HasColumnType("money");
            entity.Property(e => e.FlDemaisEmpresas).HasColumnName("flDemaisEmpresas");
            entity.Property(e => e.FlDomicilioTributario).HasColumnName("flDomicilioTributario");
            entity.Property(e => e.FlEnquadraSimplesNacional).HasColumnName("flEnquadraSimplesNacional");
            entity.Property(e => e.FlExpirado).HasColumnName("flExpirado");
            entity.Property(e => e.FlMei).HasColumnName("flMEI");
            entity.Property(e => e.IdAlvara).HasColumnName("idAlvara");
            entity.Property(e => e.InscricaoImobiliaria)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NmFantasia)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("nmFantasia");
            entity.Property(e => e.NrAno).HasColumnName("nrAno");
            entity.Property(e => e.NrAnoProtocolo).HasColumnName("nrAnoProtocolo");
            entity.Property(e => e.NrAreaAbertaM2)
                .HasColumnType("money")
                .HasColumnName("nrAreaAbertaM2");
            entity.Property(e => e.NrAreaCobertaM2)
                .HasColumnType("money")
                .HasColumnName("nrAreaCobertaM2");
            entity.Property(e => e.NrCnpjCpf)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("nrCnpjCpf");
            entity.Property(e => e.NrJucepar)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nrJucepar");
            entity.Property(e => e.NrLaudoBombeiro).HasColumnName("nrLaudoBombeiro");
            entity.Property(e => e.NrLocalizadorAlvara)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nrLocalizadorAlvara");
            entity.Property(e => e.NrPredial)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("nrPredial");
            entity.Property(e => e.NrRegistroJucepar).HasColumnName("nrRegistroJucepar");
            entity.Property(e => e.NrSequenciaProtocolo).HasColumnName("nrSequenciaProtocolo");
            entity.Property(e => e.NrTelefone)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("nrTelefone");

            entity.HasOne(d => d.EmprCarac).WithMany(p => p.TbConSolicitacaoInscricaoCmcs)
                .HasForeignKey(d => d.EmprCaracId)
                .HasConstraintName("FK_tbConSolicitacaoInscricaoCMC_TribEmpresasTipoCaracteristicas");

            entity.HasOne(d => d.EmprConstit).WithMany(p => p.TbConSolicitacaoInscricaoCmcs)
                .HasForeignKey(d => d.EmprConstitId)
                .HasConstraintName("FK_tbConSolicitacaoInscricaoCMC_TribEmpresasTipoConstituicao");

            entity.HasOne(d => d.IdEnderecoNavigation).WithMany(p => p.TbConSolicitacaoInscricaoCmcs)
                .HasForeignKey(d => d.IdEndereco)
                .HasConstraintName("FK_tbConSolicitacaoInscricaoCMC_CEPS");
        });

        modelBuilder.Entity<TbConSolicitacaoInscricaoCmcTmpTrigger>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TbConSolicitacaoInscricaoCMC_tmp_trigger");

            entity.Property(e => e.DataInclusao).HasColumnType("datetime");
            entity.Property(e => e.DsRazaoSocial)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dsRazaoSocial");
            entity.Property(e => e.IdsolicitacaoInscricao).HasColumnName("IDSolicitacaoInscricao");
            entity.Property(e => e.NrCnpjCpf)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("nrCnpjCpf");
            entity.Property(e => e.NrLocalizadorAlvara)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nrLocalizadorAlvara");
            entity.Property(e => e.Usuario)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("usuario");
        });

        modelBuilder.Entity<TbConSolicitacaoInscricaoCmcdespacho>(entity =>
        {
            entity.HasKey(e => e.IdSolicitacaoInscricaoDespacho);

            entity.ToTable("tbConSolicitacaoInscricaoCMCDespachos", tb => tb.HasTrigger("TgtbConSolicitacaoInscricaoCMCDespachosInsertEmail"));

            entity.HasIndex(e => e.IdSolicitacaoInscricao, "IX_tbConSolicitacaoInscricaoCMCDespachos_IdSolicitacaoInscricao");

            entity.HasIndex(e => new { e.IdSolicitacaoInscricao, e.DsSituacao }, "IX_tbConSolicitacaoInscricaoCMCDespachos_IdSolicitacaoInscricao_dsSituacao");

            entity.HasIndex(e => new { e.IdSolicitacaoInscricao, e.DtDespacho, e.DsSituacao }, "IX_tbConSolicitacaoInscricaoCMCDespachos_IdSolicitacaoInscricao_dtDespacho_dsSituacao");

            entity.Property(e => e.DsDespacho)
                .IsUnicode(false)
                .HasColumnName("dsDespacho");
            entity.Property(e => e.DsLogin)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsLogin");
            entity.Property(e => e.DsSituacao)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("dsSituacao");
            entity.Property(e => e.DtDespacho)
                .HasColumnType("datetime")
                .HasColumnName("dtDespacho");

            entity.HasOne(d => d.IdSolicitacaoInscricaoNavigation).WithMany(p => p.TbConSolicitacaoInscricaoCmcdespachos)
                .HasForeignKey(d => d.IdSolicitacaoInscricao)
                .HasConstraintName("FK_tbConSolicitacaoInscricaoCMCDespachos_tbConSolicitacaoInscricaoCMC");
        });

        modelBuilder.Entity<TbConSolicitacaoInscricaoCmcdocumento>(entity =>
        {
            entity.HasKey(e => e.IdSolicitacaoInscricaoDocumento);

            entity.ToTable("tbConSolicitacaoInscricaoCMCDocumentos");

            entity.HasIndex(e => e.IdSolicitacaoInscricao, "IX_tbConSolicitacaoInscricaoCMCDocumentos_IdSolicitacaoInscricao");

            entity.Property(e => e.DsNomeDocumento)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsNomeDocumento");

            entity.HasOne(d => d.IdSolicitacaoInscricaoNavigation).WithMany(p => p.TbConSolicitacaoInscricaoCmcdocumentos)
                .HasForeignKey(d => d.IdSolicitacaoInscricao)
                .HasConstraintName("FK_tbConSolicitacaoInscricaoCMCDocumentos_tbConSolicitacaoInscricaoCMC");

            entity.HasOne(d => d.Objeto).WithMany(p => p.TbConSolicitacaoInscricaoCmcdocumentos)
                .HasForeignKey(d => d.ObjetoId)
                .HasConstraintName("FK_tbConSolicitacaoInscricaoCMCDocumentos_TribObjetos");
        });

        modelBuilder.Entity<TbConSolicitacaoInscricaoCmcdocumentosAnalise>(entity =>
        {
            entity.HasKey(e => e.IdAnaliseSetor).HasName("PK_TribAnaliseSetor");

            entity.ToTable("tbConSolicitacaoInscricaoCMCDocumentosAnalise");

            entity.Property(e => e.IdAnaliseSetor).HasColumnName("idAnaliseSetor");
            entity.Property(e => e.DsParecer)
                .IsUnicode(false)
                .HasColumnName("dsParecer");
            entity.Property(e => e.Dslogin)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dslogin");
            entity.Property(e => e.DtParecer)
                .HasColumnType("datetime")
                .HasColumnName("dtParecer");
            entity.Property(e => e.FlStatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("flStatus");
            entity.Property(e => e.IdSetor).HasColumnName("idSetor");
            entity.Property(e => e.IdSolicitacaoInscricaoDocumento)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("idSolicitacaoInscricaoDocumento");
        });

        modelBuilder.Entity<TbConSolicitacaoInscricaoCmceventosRedesim>(entity =>
        {
            entity.HasKey(e => e.Idevento).HasName("PK_tbConSolicitacaoInscricaoCMCEvento");

            entity.ToTable("tbConSolicitacaoInscricaoCMCEventosREDESIM", tb => tb.HasTrigger("TrgTbConSolicitacaoInscricaoCMCEventosNotificaZap"));

            entity.Property(e => e.Idevento).HasColumnName("idevento");
            entity.Property(e => e.Dtinclusao)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Data de gravação do registro.")
                .HasColumnType("datetime")
                .HasColumnName("dtinclusao");
            entity.Property(e => e.Evento).HasColumnName("evento");
            entity.Property(e => e.Idsolicitacaoinscricao).HasColumnName("idsolicitacaoinscricao");
        });

        modelBuilder.Entity<TbConSolicitacaoInscricaoCmclaudoBombeiro>(entity =>
        {
            entity.HasKey(e => e.IdSolicitacaoInscricaoLaudoBombeiro);

            entity.ToTable("tbConSolicitacaoInscricaoCMCLaudoBombeiro");

            entity.Property(e => e.DsLogin)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("dsLogin");
            entity.Property(e => e.DsObservacao)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("dsObservacao");
            entity.Property(e => e.DtInclusao)
                .HasColumnType("datetime")
                .HasColumnName("dtInclusao");
            entity.Property(e => e.DtValidade)
                .HasColumnType("datetime")
                .HasColumnName("dtValidade");
            entity.Property(e => e.DtVistoria)
                .HasColumnType("datetime")
                .HasColumnName("dtVistoria");
            entity.Property(e => e.NrAno).HasColumnName("nrAno");
            entity.Property(e => e.NrLaudo).HasColumnName("nrLaudo");
        });

        modelBuilder.Entity<TbConSolicitacaoInscricaoCmcpublicidade>(entity =>
        {
            entity.HasKey(e => e.IdSolicitacaoInscricaoPublicidade);

            entity.ToTable("tbConSolicitacaoInscricaoCMCPublicidades");

            entity.Property(e => e.DsPublicidadeNome)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("dsPublicidadeNome");
            entity.Property(e => e.NrAreaAberta)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("nrAreaAberta");
            entity.Property(e => e.NrAreaCoberta)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("nrAreaCoberta");
            entity.Property(e => e.NrPeriodicidade).HasColumnName("nrPeriodicidade");
            entity.Property(e => e.NrUnidMedida).HasColumnName("nrUnidMedida");
            entity.Property(e => e.NrVistoriaAno).HasColumnName("nrVistoriaAno");
            entity.Property(e => e.NrVistoriaNumero).HasColumnName("nrVistoriaNumero");
        });

        modelBuilder.Entity<TbConSolicitacaoInscricaoCmcservico>(entity =>
        {
            entity.HasKey(e => e.IdSolicitacaoInscricaoServico);

            entity.ToTable("tbConSolicitacaoInscricaoCMCServicos");

            entity.HasIndex(e => e.IdSolicitacaoInscricao, "IX_tbConSolicitacaoInscricaoCMCServicos_IdSolicitacaoInscricao");

            entity.Property(e => e.DsDescricao)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("dsDescricao");
            entity.Property(e => e.DsIncidencia)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dsIncidencia");
            entity.Property(e => e.DsMotivo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsMotivo");
            entity.Property(e => e.DtFinal)
                .HasColumnType("smalldatetime")
                .HasColumnName("dtFinal");
            entity.Property(e => e.DtInicial)
                .HasColumnType("smalldatetime")
                .HasColumnName("dtInicial");
            entity.Property(e => e.FlPrincipal).HasColumnName("flPrincipal");
            entity.Property(e => e.ServId)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TbConSolicitacaoInscricaoCmcvigilanciaSanitarium>(entity =>
        {
            entity.HasKey(e => e.IdSolicitacaoInscricaoVigilanciaSanitaria);

            entity.ToTable("tbConSolicitacaoInscricaoCMCVigilanciaSanitaria");

            entity.Property(e => e.DsLogin)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsLogin");
            entity.Property(e => e.DsObservacao)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("dsObservacao");
            entity.Property(e => e.DtInclusao)
                .HasColumnType("smalldatetime")
                .HasColumnName("dtInclusao");
            entity.Property(e => e.DtValidade)
                .HasColumnType("smalldatetime")
                .HasColumnName("dtValidade");
            entity.Property(e => e.DtVistoria)
                .HasColumnType("smalldatetime")
                .HasColumnName("dtVistoria");
            entity.Property(e => e.NrAno).HasColumnName("nrAno");
            entity.Property(e => e.NrLaudo).HasColumnName("nrLaudo");

            entity.HasOne(d => d.IdSolicitacaoInscricaoNavigation).WithMany(p => p.TbConSolicitacaoInscricaoCmcvigilanciaSanitaria)
                .HasForeignKey(d => d.IdSolicitacaoInscricao)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tbConSolicitacaoInscricaoCMCVigilanciaSanitaria_tbConSolicitacaoInscricaoCMC");
        });

        modelBuilder.Entity<TbConSolicitacaoInscricaoSocio>(entity =>
        {
            entity.HasKey(e => e.IdSolicitacaoInscricaoSocio);

            entity.ToTable("tbConSolicitacaoInscricaoSocios");

            entity.HasIndex(e => e.IdSolicitacaoInscricao, "IX_tbConSolicitacaoInscricaoSocios_IdSolicitacaoInscricao");

            entity.HasIndex(e => new { e.IdSolicitacaoInscricao, e.SociosResponsavel }, "IX_tbConSolicitacaoInscricaoSocios_IdSolicitacaoInscricao_SociosResponsavel");

            entity.Property(e => e.DsNomeMae)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dsNomeMae");
            entity.Property(e => e.DtNascimento)
                .HasColumnType("datetime")
                .HasColumnName("dtNascimento");
            entity.Property(e => e.FlPrestaServicos).HasColumnName("flPrestaServicos");
            entity.Property(e => e.FlSocio).HasColumnName("flSocio");
            entity.Property(e => e.NivelProfissional)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("Nenhum")
                .HasComment("Superior , Tecnico ou Nenhum");
            entity.Property(e => e.NmConjuge)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nmConjuge");
            entity.Property(e => e.NmSocio)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nmSocio");
            entity.Property(e => e.NrCpf)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("nrCpf");
            entity.Property(e => e.NrRg)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("nrRG");
            entity.Property(e => e.SociosDataFim).HasColumnType("datetime");
            entity.Property(e => e.SociosDataIni).HasColumnType("datetime");
            entity.Property(e => e.SociosDomicilioExt).HasComment("informar se o socio tem domicilio no exterior");
            entity.Property(e => e.SociosResponsavel).HasComment("Garatir nos metodos de inclusao, alteracao e remoção que a tabela mantenha somente um único responsável pela empresa.");
            entity.Property(e => e.Ufrg)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("UFRG");

            entity.HasOne(d => d.IdSolicitacaoInscricaoNavigation).WithMany(p => p.TbConSolicitacaoInscricaoSocios)
                .HasForeignKey(d => d.IdSolicitacaoInscricao)
                .HasConstraintName("FK_tbConSolicitacaoInscricaoSocios_tbConSolicitacaoInscricaoCMC");

            entity.HasOne(d => d.TipoSocio).WithMany(p => p.TbConSolicitacaoInscricaoSocios)
                .HasForeignKey(d => d.TipoSocioId)
                .HasConstraintName("FK_tbConSolicitacaoInscricaoSocios_tbTipoSocio");
        });

        modelBuilder.Entity<TbConsultaPreviaAux>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbConsultaPreviaAux");

            entity.Property(e => e.EmprCme).HasColumnName("EmprCME");
            entity.Property(e => e.IdZoneamento).HasColumnName("idZoneamento");
            entity.Property(e => e.InscricaoImobiliaria)
                .HasMaxLength(14)
                .IsUnicode(false);
            entity.Property(e => e.NomeZoneamento)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.OrigemZoneamento)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SiglaZoneamento)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TbConsultaPreviaAuxAtividade>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbConsultaPreviaAuxAtividades");

            entity.Property(e => e.Atividade)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.EmprCme).HasColumnName("EmprCME");
            entity.Property(e => e.InscricaoImobiliaria)
                .HasMaxLength(14)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TbContaContabil>(entity =>
        {
            entity.HasKey(e => e.IdContaContabil);

            entity.ToTable("tbContaContabil");

            entity.Property(e => e.IdContaContabil)
                .ValueGeneratedNever()
                .HasColumnName("idContaContabil");
            entity.Property(e => e.DsContaContabil)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("dsContaContabil");
        });

        modelBuilder.Entity<TbControleExecucaoRotina>(entity =>
        {
            entity.HasKey(e => e.IdControle);

            entity.ToTable("tbControleExecucaoRotinas");

            entity.Property(e => e.IdControle).HasColumnName("idControle");
            entity.Property(e => e.DtUltimaExecucao)
                .HasColumnType("datetime")
                .HasColumnName("dtUltimaExecucao");
        });

        modelBuilder.Entity<TbDadosDaReintegracao>(entity =>
        {
            entity.HasKey(e => e.IdReintegracao);

            entity.ToTable("tbDadosDaReintegracao");

            entity.Property(e => e.IdReintegracao)
                .ValueGeneratedNever()
                .HasColumnName("idReintegracao");
            entity.Property(e => e.DsReintegracao)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dsReintegracao");
            entity.Property(e => e.DtReintegracao)
                .HasColumnType("datetime")
                .HasColumnName("dtReintegracao");
            entity.Property(e => e.IdInvasao).HasColumnName("idInvasao");
            entity.Property(e => e.ObsReintegracao)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("obsReintegracao");

            entity.HasOne(d => d.IdInvasaoNavigation).WithMany(p => p.TbDadosDaReintegracaos)
                .HasForeignKey(d => d.IdInvasao)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tbDadosDaReintegracao_tbImoInvasao");
        });

        modelBuilder.Entity<TbDaprevium>(entity =>
        {
            entity.HasKey(e => e.IdPrevia);

            entity.ToTable("tbDAPrevia");

            entity.HasIndex(e => new { e.TpCadastro, e.FlInscreverDa, e.TipoTribId, e.IdInscricao, e.NrAno, e.DsLogin, e.FlProcessado }, "IX_tbDAPrevia_7_1009581018__K10_K15_K6_K2_K17_K13_K16_1_11").HasFillFactor(90);

            entity.HasIndex(e => new { e.FlInscreverDa, e.DsLogin, e.FlProcessado }, "IX_tbDAPrevia_flInscreverDA_dsLogin_flProcessado_inc_idPrevia_dsErro").HasFillFactor(90);

            entity.HasIndex(e => new { e.IdDivida, e.DsLogin, e.TpCadastro, e.FlInscreverDa }, "IX_tbDAPrevia_idDivida_dsLogin_tpCadastro_flInscreverDA_inc_idPrevia").HasFillFactor(90);

            entity.Property(e => e.IdPrevia).HasColumnName("idPrevia");
            entity.Property(e => e.CodDivida)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("codDivida");
            entity.Property(e => e.DsErro)
                .IsUnicode(false)
                .HasColumnName("dsErro");
            entity.Property(e => e.DsLogin)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsLogin");
            entity.Property(e => e.DtInclusao)
                .HasColumnType("datetime")
                .HasColumnName("dtInclusao");
            entity.Property(e => e.DtProcessamento)
                .HasColumnType("datetime")
                .HasColumnName("dtProcessamento");
            entity.Property(e => e.FlInscreverDa).HasColumnName("flInscreverDA");
            entity.Property(e => e.FlProcessado).HasColumnName("flProcessado");
            entity.Property(e => e.IdDivida).HasColumnName("idDivida");
            entity.Property(e => e.IdInscricao).HasColumnName("idInscricao");
            entity.Property(e => e.NrAno).HasColumnName("nrAno");
            entity.Property(e => e.NrInscricao)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("nrInscricao");
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
            entity.Property(e => e.TipoTribNome)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.TpCadastro)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tpCadastro");
            entity.Property(e => e.Vencimento).HasColumnType("datetime");
            entity.Property(e => e.VlDivida)
                .HasColumnType("money")
                .HasColumnName("vlDivida");
        });

        modelBuilder.Entity<TbDeprecicaoValorizacao>(entity =>
        {
            entity.HasKey(e => e.IdDepVal).HasName("PK_tbImoDeprecicaoValorizacao");

            entity.ToTable("tbDeprecicaoValorizacao");

            entity.Property(e => e.IdDepVal)
                .ValueGeneratedNever()
                .HasColumnName("idDepVal");
            entity.Property(e => e.DsDecreto)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dsDecreto");
            entity.Property(e => e.DsDepVal)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dsDepVal");
            entity.Property(e => e.DsPortaria)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dsPortaria");
            entity.Property(e => e.DtDepVal)
                .HasColumnType("datetime")
                .HasColumnName("dtDepVal");
            entity.Property(e => e.IdTipoOperacao).HasColumnName("idTipoOperacao");
            entity.Property(e => e.ImoCnpjfilial)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("ImoCNPJFilial");
            entity.Property(e => e.ImoInscricao)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.MoeMovEquipId).HasColumnName("moeMovEquipID");
            entity.Property(e => e.ObdDepVal)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("obdDepVal");
            entity.Property(e => e.VlAnt)
                .HasColumnType("decimal(16, 2)")
                .HasColumnName("vlAnt");
            entity.Property(e => e.VlAtual)
                .HasColumnType("decimal(16, 2)")
                .HasColumnName("vlAtual");

            entity.HasOne(d => d.IdTipoOperacaoNavigation).WithMany(p => p.TbDeprecicaoValorizacaos)
                .HasForeignKey(d => d.IdTipoOperacao)
                .HasConstraintName("FK_tbDeprecicaoValorizacao_tbTipoOperacao");

            entity.HasOne(d => d.MoeMovEquip).WithMany(p => p.TbDeprecicaoValorizacaos)
                .HasForeignKey(d => d.MoeMovEquipId)
                .HasConstraintName("FK_tbDeprecicaoValorizacao_MoveisEquipamentos");

            entity.HasOne(d => d.Veiculo).WithMany(p => p.TbDeprecicaoValorizacaos)
                .HasForeignKey(d => d.VeiculoId)
                .HasConstraintName("FK_tbDeprecicaoValorizacao_Veiculos");

            entity.HasOne(d => d.ImobensImovei).WithMany(p => p.TbDeprecicaoValorizacaos)
                .HasForeignKey(d => new { d.ImoCnpjfilial, d.ImoInscricao })
                .HasConstraintName("FK_tbImoDeprecicaoValorizacao_ImobensImoveis");

            entity.HasMany(d => d.Servs).WithMany(p => p.IdDepVals)
                .UsingEntity<Dictionary<string, object>>(
                    "TbComissaoAvaliadora",
                    r => r.HasOne<Servidore>().WithMany()
                        .HasForeignKey("ServId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_tbComissaoAvaliadora_Servidores"),
                    l => l.HasOne<TbDeprecicaoValorizacao>().WithMany()
                        .HasForeignKey("IdDepVal")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_tbComissaoAvaliadora_tbImoDeprecicaoValorizacao"),
                    j =>
                    {
                        j.HasKey("IdDepVal", "ServId");
                        j.ToTable("tbComissaoAvaliadora");
                        j.IndexerProperty<int>("IdDepVal").HasColumnName("idDepVal");
                        j.IndexerProperty<long>("ServId").HasColumnName("ServID");
                    });
        });

        modelBuilder.Entity<TbDivContribuintesSancao>(entity =>
        {
            entity.HasKey(e => new { e.IdContribuinte, e.IdSancao });

            entity.ToTable("tbDivContribuintesSancao");

            entity.Property(e => e.IdContribuinte).HasColumnName("idContribuinte");
            entity.Property(e => e.IdSancao).HasColumnName("idSancao");
        });

        modelBuilder.Entity<TbDivDiarioArrecadacao>(entity =>
        {
            entity.HasKey(e => e.IdArrecadacao);

            entity.ToTable("tbDivDiarioArrecadacao");

            entity.HasIndex(e => e.IdDeducao, "IX_IdDeducao").HasFillFactor(90);

            entity.HasIndex(e => e.IdConvenio, "IX_idConvenio_dtArrecadacao").HasFillFactor(90);

            entity.HasIndex(e => e.IdCreditoDivida, "IX_tbDivDiarioArrecadacao_IX_IdCreditoDivida").HasFillFactor(90);

            entity.HasIndex(e => e.IdCredito, "IX_tbDivDiarioArrecadacao_IdCredito").HasFillFactor(90);

            entity.HasIndex(e => e.DtArrecadacao, "IX_tbDivDiarioArrecadacao_dtArrecadacao").HasFillFactor(90);

            entity.HasIndex(e => e.DtArrecadacao, "IX_tbDivDiarioArrecadacao_dtArrecadacao_inc_IdArrecadacao_nrAnoArrecadacao").HasFillFactor(90);

            entity.HasIndex(e => new { e.NrAnoArrecadacao, e.DtArrecadacao, e.IdArrecadacao }, "IX_tbDivDiarioArrecadacao_nrAnoArrecadacao_dtArrecadacao_IdArrecadacao").HasFillFactor(90);

            entity.HasIndex(e => e.NrArrecadacao, "IX_tbDivDiarioArrecadacao_nrArrecadacao").HasFillFactor(90);

            entity.HasIndex(e => e.NrDocContribuinte, "IX_tbDivDiarioArrecadacao_nrDocContribuinte_inc_IdAr_IdCred_tpCre_nrArr_anoArr_").HasFillFactor(90);

            entity.HasIndex(e => new { e.DtArrecadacao, e.IdConvenio, e.IdArrecadacao, e.IdCreditoDivida, e.CdReceita }, "_dta_index_tbDivDiarioArrecadacao_8_1778599362__K14_K19_K1_K18_K7_15").HasFillFactor(90);

            entity.HasIndex(e => new { e.IdCredito, e.IdArrecadacao }, "_dta_index_tbDivDiarioArrecadacao_8_1778599362__K2_K1");

            entity.HasIndex(e => new { e.IdCredito, e.IdArrecadacao, e.DtArrecadacao }, "_dta_index_tbDivDiarioArrecadacao_8_1778599362__K2_K1_K14_15");

            entity.Property(e => e.BxBanco)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("bxBanco");
            entity.Property(e => e.CdReceita)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("cdReceita");
            entity.Property(e => e.DsHistorico)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("dsHistorico");
            entity.Property(e => e.DsLoginInclusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsLoginInclusao");
            entity.Property(e => e.DtArrecadacao)
                .HasColumnType("datetime")
                .HasColumnName("dtArrecadacao");
            entity.Property(e => e.NmContribuinte)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("nmContribuinte");
            entity.Property(e => e.NrAnoArrecadacao).HasColumnName("nrAnoArrecadacao");
            entity.Property(e => e.NrAnoPlanoContas).HasColumnName("nrAnoPlanoContas");
            entity.Property(e => e.NrArrecadacao).HasColumnName("nrArrecadacao");
            entity.Property(e => e.NrDocContribuinte)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("nrDocContribuinte");
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
            entity.Property(e => e.TpCredito)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tpCredito");
            entity.Property(e => e.TpDocContribuinte)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("tpDocContribuinte");
            entity.Property(e => e.VlArrecadacao)
                .HasColumnType("money")
                .HasColumnName("vlArrecadacao");
        });

        modelBuilder.Entity<TbDivDiarioArrecadacaoEstorno>(entity =>
        {
            entity.HasKey(e => e.IdArrecadacaoEstorno);

            entity.ToTable("tbDivDiarioArrecadacaoEstorno");

            entity.HasIndex(e => e.IdArrecadacao, "IX_tbDivDiarioArrecadacaoEstorno_IdArrecadacao").HasFillFactor(90);

            entity.HasIndex(e => e.NrEstorno, "IX_tbDivDiarioArrecadacaoEstorno_nrEstorno");

            entity.HasIndex(e => new { e.IdArrecadacao, e.IdArrecadacaoEstorno, e.DtEstorno }, "_dta_index_tbDivDiarioArrecadacaoEstorno_8_491513180__K2_K1_K5_6");

            entity.Property(e => e.DsLoginInclusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsLoginInclusao");
            entity.Property(e => e.DsMotivo)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("dsMotivo");
            entity.Property(e => e.DtEstorno)
                .HasColumnType("datetime")
                .HasColumnName("dtEstorno");
            entity.Property(e => e.DtInclusao)
                .HasColumnType("datetime")
                .HasColumnName("dtInclusao");
            entity.Property(e => e.NrAnoEstorno).HasColumnName("nrAnoEstorno");
            entity.Property(e => e.NrEstorno).HasColumnName("nrEstorno");
            entity.Property(e => e.VlOperacao)
                .HasColumnType("money")
                .HasColumnName("vlOperacao");

            entity.HasOne(d => d.IdArrecadacaoNavigation).WithMany(p => p.TbDivDiarioArrecadacaoEstornos)
                .HasForeignKey(d => d.IdArrecadacao)
                .HasConstraintName("FK_tbDivDiarioArrecadacaoEstorno_tbDivDiarioArrecadacao");
        });

        modelBuilder.Entity<TbDivDividaAtivaJudicial>(entity =>
        {
            entity.HasKey(e => e.IdDividaAtivaJudicial);

            entity.ToTable("tbDivDividaAtivaJudicial");

            entity.Property(e => e.DtInicio)
                .HasColumnType("datetime")
                .HasColumnName("dtInicio");
            entity.Property(e => e.DtProcessoJudicial)
                .HasColumnType("datetime")
                .HasColumnName("dtProcessoJudicial");
            entity.Property(e => e.NrAnoOperacao).HasColumnName("nrAnoOperacao");
            entity.Property(e => e.NrOperacao).HasColumnName("nrOperacao");
            entity.Property(e => e.NrProcessoJudicial)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("nrProcessoJudicial");
            entity.Property(e => e.TpCredito)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tpCredito");
            entity.Property(e => e.TpOperacao)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tpOperacao");
            entity.Property(e => e.VlOperacao)
                .HasColumnType("money")
                .HasColumnName("vlOperacao");

            entity.HasOne(d => d.IdCreditoNavigation).WithMany(p => p.TbDivDividaAtivaJudicials)
                .HasForeignKey(d => d.IdCredito)
                .HasConstraintName("FK_tbDivDividaAtivaJudicial_tbDivLancamentoCredito");
        });

        modelBuilder.Entity<TbDivInscricaoSancao>(entity =>
        {
            entity.HasKey(e => e.IdInscricao);

            entity.ToTable("tbDivInscricaoSancao");

            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.ConIddivida).HasColumnName("ConIDDivida");
            entity.Property(e => e.ConIdsolidario).HasColumnName("ConIDSolidario");
            entity.Property(e => e.IdTipoUnidadeTce).HasColumnName("idTipoUnidadeTCE");
            entity.Property(e => e.NrAnoAto).HasColumnName("nrAnoAto");
            entity.Property(e => e.NrAnoCertidao).HasColumnName("nrAnoCertidao");
            entity.Property(e => e.NrAnoOperacao).HasColumnName("nrAnoOperacao");
            entity.Property(e => e.NrAnoProcesso).HasColumnName("nrAnoProcesso");
            entity.Property(e => e.NrAto).HasColumnName("nrAto");
            entity.Property(e => e.NrCertidao).HasColumnName("nrCertidao");
            entity.Property(e => e.NrOperacao).HasColumnName("nrOperacao");
            entity.Property(e => e.NrProcesso).HasColumnName("nrProcesso");
            entity.Property(e => e.TpAtoSancao)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tpAtoSancao");
            entity.Property(e => e.TpCredito)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tpCredito");
            entity.Property(e => e.VlInscricao)
                .HasColumnType("money")
                .HasColumnName("vlInscricao");
            entity.Property(e => e.VlOriginalSancao)
                .HasColumnType("money")
                .HasColumnName("vlOriginalSancao");

            entity.HasOne(d => d.IdCreditoNavigation).WithMany(p => p.TbDivInscricaoSancaos)
                .HasForeignKey(d => d.IdCredito)
                .HasConstraintName("FK_tbDivInscricaoSancao_tbDivLancamentoCredito");

            entity.HasOne(d => d.IdTipoUnidadeTceNavigation).WithMany(p => p.TbDivInscricaoSancaos)
                .HasForeignKey(d => d.IdTipoUnidadeTce)
                .HasConstraintName("FK_tbDivInscricaoSancao_tbDivTipoUnidadeTCE");
        });

        modelBuilder.Entity<TbDivLancamentoAtualizacaoCreditoEstorno>(entity =>
        {
            entity.HasKey(e => e.IdAtualizacaoEstorno);

            entity.ToTable("tbDivLancamentoAtualizacaoCreditoEstorno");

            entity.HasIndex(e => e.IdAtualizacao, "IX_tbDivLancamentoAtualizacaoCreditoEstorno_IdAtualizacao_inc_IdAtualizacaoEstorno").HasFillFactor(90);

            entity.HasIndex(e => new { e.IdAtualizacao, e.IdAtualizacaoEstorno, e.DtEstorno }, "_dta_index_tbDivLancamentoAtualizacaoCredit_8_1019515061__K2_K1_K7_8");

            entity.Property(e => e.DsMotivo)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("dsMotivo");
            entity.Property(e => e.DtEstorno)
                .HasColumnType("datetime")
                .HasColumnName("dtEstorno");
            entity.Property(e => e.NrAnoEstorno).HasColumnName("nrAnoEstorno");
            entity.Property(e => e.NrEstorno).HasColumnName("nrEstorno");
            entity.Property(e => e.TpCredito)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tpCredito");
            entity.Property(e => e.VlEstorno)
                .HasColumnType("money")
                .HasColumnName("vlEstorno");

            entity.HasOne(d => d.IdAtualizacaoNavigation).WithMany(p => p.TbDivLancamentoAtualizacaoCreditoEstornos)
                .HasForeignKey(d => d.IdAtualizacao)
                .HasConstraintName("FK_tbDivLancamentoAtualizacaoCreditoEstorno_tbDivLancamentoAtualizacaoMonetariaCredito");
        });

        modelBuilder.Entity<TbDivLancamentoAtualizacaoMonetariaCredito>(entity =>
        {
            entity.HasKey(e => e.IdAtualizacao);

            entity.ToTable("tbDivLancamentoAtualizacaoMonetariaCredito");

            entity.HasIndex(e => e.IdCredito, "IX_IdCredito").HasFillFactor(90);

            entity.HasIndex(e => e.IdArrecadacao, "IX_tbDivLancamentoAtualizacaoMonetariaCredito_IdArrecadacao").HasFillFactor(90);

            entity.HasIndex(e => new { e.IdCredito, e.IdAtualizacao }, "_dta_index_tbDivLancamentoAtualizacaoMoneta_8_987514947__K2_K1");

            entity.HasIndex(e => new { e.IdCredito, e.IdAtualizacao, e.DtAtualizacao }, "_dta_index_tbDivLancamentoAtualizacaoMoneta_8_987514947__K2_K1_K8_9");

            entity.Property(e => e.DtAtualizacao)
                .HasColumnType("datetime")
                .HasColumnName("dtAtualizacao");
            entity.Property(e => e.NrAnoAtualizacao).HasColumnName("nrAnoAtualizacao");
            entity.Property(e => e.NrAtualizacao).HasColumnName("nrAtualizacao");
            entity.Property(e => e.TpCredito)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tpCredito");
            entity.Property(e => e.VlAtualizacao)
                .HasColumnType("money")
                .HasColumnName("vlAtualizacao");

            entity.HasOne(d => d.IdCreditoNavigation).WithMany(p => p.TbDivLancamentoAtualizacaoMonetariaCreditos)
                .HasForeignKey(d => d.IdCredito)
                .HasConstraintName("FK_tbDivLancamentoAtualizacaoMonetariaCredito_tbDivLancamentoCredito");
        });

        modelBuilder.Entity<TbDivLancamentoCredito>(entity =>
        {
            entity.HasKey(e => e.IdCredito);

            entity.ToTable("tbDivLancamentoCredito");

            entity.HasIndex(e => new { e.IdCredito, e.IdTipoOperacaoCredito, e.IdTipoCredito, e.CdReceita }, "IX_IdCredito_idTipoOperacaoCredito_idTipoCredito_cdReceita").HasFillFactor(90);

            entity.HasIndex(e => e.IdCreditoOrigem, "IX_tbDivLancamentoCredito_IdCreditoOrigem").HasFillFactor(90);

            entity.HasIndex(e => new { e.TipoTribId, e.NrAnoBase, e.TpCadastro, e.IdCadastro }, "IX_tbDivLancamentoCredito_TipoTribID_nrAnoBase_tpCadastro_idCadastro").HasFillFactor(90);

            entity.HasIndex(e => e.DtLancamento, "IX_tbDivLancamentoCredito_dtLancamento_inc_tpCredito_nrAnoCredito_nrMesBase_nrAnoBase_nrAnoInscricao");

            entity.HasIndex(e => e.IdTipoCredito, "IX_tbDivLancamentoCredito_idTipoCredito_inc_IdCred_tpCred_AnoCred_dtLanc_MesBa_AnoBa_IdLeiA");

            entity.HasIndex(e => e.NrCredito, "IX_tbDivLancamentoCredito_nrCredito").HasFillFactor(90);

            entity.HasIndex(e => e.NrDocContribuinte, "IX_tbDivLancamentoCredito_nrDocContribuinte");

            entity.HasIndex(e => new { e.TpCredito, e.IdTipoOperacaoCredito, e.DtLancamento }, "IX_tbDivLancamentoCredito_tpCredito_idTipoOperacaoCredito_dtLancamento").HasFillFactor(90);

            entity.HasIndex(e => new { e.TpCredito, e.NrAnoCredito, e.NrAnoBase, e.NrMesBase, e.NrAnoInscricao, e.DtLancamento, e.IdCredito }, "_dta_index_tbDivLancamentoCredito_19_249362111__K2_K4_K10_K9_K11_K8_K1").HasFillFactor(90);

            entity.HasIndex(e => new { e.IdCreditoOrigem, e.IdCredito, e.IdTipoCredito, e.NrDocContribuinte, e.IdLeiAto }, "_dta_index_tbDivLancamentoCredito_8_249362111__K20_K1_K5_K14_K12_2_3_4_8_9_10_13_16_21_22");

            entity.HasIndex(e => new { e.IdTipoCredito, e.IdCredito, e.IdLeiAto, e.NrDocContribuinte }, "_dta_index_tbDivLancamentoCredito_8_249362111__K5_K1_K12_K14_2_3_4_8_9_10_13_16_21_22");

            entity.HasIndex(e => new { e.IdTipoCredito, e.IdCredito, e.IdLeiAto, e.NrDocContribuinte }, "_dta_index_tbDivLancamentoCredito_8_249362111__K5_K1_K12_K14_4_8_9_10_13_21_22");

            entity.Property(e => e.CdReceita)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("cdReceita");
            entity.Property(e => e.DsLoginInclusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsLoginInclusao");
            entity.Property(e => e.DtInclusao)
                .HasColumnType("datetime")
                .HasColumnName("dtInclusao");
            entity.Property(e => e.DtLancamento)
                .HasColumnType("datetime")
                .HasColumnName("dtLancamento");
            entity.Property(e => e.DtUltimaCorrecao)
                .HasColumnType("datetime")
                .HasColumnName("dtUltimaCorrecao");
            entity.Property(e => e.IdCadastro).HasColumnName("idCadastro");
            entity.Property(e => e.IdTipoCredito).HasColumnName("idTipoCredito");
            entity.Property(e => e.IdTipoOperacaoCredito).HasColumnName("idTipoOperacaoCredito");
            entity.Property(e => e.NmContribuinte)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("nmContribuinte");
            entity.Property(e => e.NrAnoBase).HasColumnName("nrAnoBase");
            entity.Property(e => e.NrAnoCredito).HasColumnName("nrAnoCredito");
            entity.Property(e => e.NrAnoInscricao).HasColumnName("nrAnoInscricao");
            entity.Property(e => e.NrCredito).HasColumnName("nrCredito");
            entity.Property(e => e.NrDocContribuinte)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("nrDocContribuinte");
            entity.Property(e => e.NrMesBase).HasColumnName("nrMesBase");
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
            entity.Property(e => e.TpCadastro).HasColumnName("tpCadastro");
            entity.Property(e => e.TpCredito)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tpCredito");
            entity.Property(e => e.TpDocContribuinte)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("tpDocContribuinte");
            entity.Property(e => e.VlCredito)
                .HasColumnType("money")
                .HasColumnName("vlCredito");
        });

        modelBuilder.Entity<TbDivLancamentoCreditoComposicao>(entity =>
        {
            entity.HasKey(e => e.IdCreditoDivida);

            entity.ToTable("tbDivLancamentoCreditoComposicao");

            entity.HasIndex(e => e.ConIddivida, "IX_tbDivLancamentoCreditoComposicao_ConIDDivida").HasFillFactor(90);

            entity.HasIndex(e => e.EmpIddivida, "IX_tbDivLancamentoCreditoComposicao_EmpIDDivida").HasFillFactor(90);

            entity.HasIndex(e => e.IdCredito, "IX_tbDivLancamentoCreditoComposicao_IdCredito").HasFillFactor(90);

            entity.HasIndex(e => new { e.IdCredito, e.IdCreditoDivida, e.ImoIddivida }, "IX_tbDivLancamentoCreditoComposicao_IdCredito_IdCreditoDivida_ImoIDDivida").HasFillFactor(90);

            entity.HasIndex(e => e.ImoIddivida, "IX_tbDivLancamentoCreditoComposicao_ImoIDDivida").HasFillFactor(90);

            entity.HasIndex(e => new { e.ImoIddivida, e.IdCreditoDivida, e.IdCredito }, "IX_tbDivLancamentoCreditoComposicao_ImoIDDivida_IdCreditoDivida_IdCredito").HasFillFactor(90);

            entity.HasIndex(e => new { e.IdCreditoDivida, e.ConIddivida, e.ImoIddivida, e.EmpIddivida }, "_dta_index_tbDivLancamentoCreditoComposicao_8_715513978__K1_K4_K3_K5").HasFillFactor(90);

            entity.HasIndex(e => new { e.IdCredito, e.IdCreditoDivida, e.ImoIddivida, e.EmpIddivida, e.ConIddivida }, "_dta_index_tbDivLancamentoCreditoComposicao_8_715513978__K2_K1_K3_K5_K4");

            entity.HasIndex(e => new { e.IdCredito, e.ImoIddivida }, "_dta_index_tbDivLancamentoCreditoComposicao_8_715513978__K2_K3");

            entity.HasIndex(e => new { e.IdCredito, e.ImoIddivida, e.IdCreditoDivida, e.EmpIddivida, e.ConIddivida }, "_dta_index_tbDivLancamentoCreditoComposicao_8_715513978__K2_K3_K1_K5_K4");

            entity.HasIndex(e => new { e.IdCredito, e.ImoIddivida, e.IdCreditoDivida, e.FlUnica }, "_dta_index_tbDivLancamentoCreditoComposicao_8_715513978__K2_K3_K1_K8_6");

            entity.HasIndex(e => new { e.IdCredito, e.ConIddivida }, "_dta_index_tbDivLancamentoCreditoComposicao_8_715513978__K2_K4");

            entity.HasIndex(e => new { e.IdCredito, e.EmpIddivida }, "_dta_index_tbDivLancamentoCreditoComposicao_8_715513978__K2_K5");

            entity.HasIndex(e => new { e.FlUnica, e.IdCredito, e.ImoIddivida, e.EmpIddivida, e.ConIddivida, e.IdCreditoDivida }, "_dta_index_tbDivLancamentoCreditoComposicao_8_715513978__K8_K2_K3_K5_K4_K1_6");

            entity.Property(e => e.ConIddivida).HasColumnName("ConIDDivida");
            entity.Property(e => e.EmpIddivida).HasColumnName("EmpIDDivida");
            entity.Property(e => e.FlDiferenca).HasColumnName("flDiferenca");
            entity.Property(e => e.FlExcluido).HasColumnName("flExcluido");
            entity.Property(e => e.FlUnica).HasColumnName("flUnica");
            entity.Property(e => e.ImoIddivida).HasColumnName("ImoIDDivida");
            entity.Property(e => e.VlComposicao)
                .HasColumnType("money")
                .HasColumnName("vlComposicao");

            entity.HasOne(d => d.IdCreditoNavigation).WithMany(p => p.TbDivLancamentoCreditoComposicaos)
                .HasForeignKey(d => d.IdCredito)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_tbDivLancamentoCreditoComposicao_tbDivLancamentoCredito");
        });

        modelBuilder.Entity<TbDivLancamentoCreditoEstorno>(entity =>
        {
            entity.HasKey(e => e.IdEstono);

            entity.ToTable("tbDivLancamentoCreditoEstorno");

            entity.HasIndex(e => e.IdCredito, "IX_tbDivLancamentoCreditoEstorno_IdCredito").HasFillFactor(90);

            entity.HasIndex(e => e.NrEstono, "IX_tbDivLancamentoCreditoEstorno_nrEstono");

            entity.HasIndex(e => new { e.TpCredito, e.DtEstono, e.IdCredito }, "IX_tpCredito_dtEstono_IdCredito").HasFillFactor(90);

            entity.HasIndex(e => new { e.IdCredito, e.IdEstono, e.DtEstono }, "_dta_index_tbDivLancamentoCreditoEstorno_8_154131990__K2_K1_K7_8");

            entity.Property(e => e.DsLoginInclusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsLoginInclusao");
            entity.Property(e => e.DsMotivo)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("dsMotivo");
            entity.Property(e => e.DtEstono)
                .HasColumnType("datetime")
                .HasColumnName("dtEstono");
            entity.Property(e => e.DtInclusao)
                .HasColumnType("datetime")
                .HasColumnName("dtInclusao");
            entity.Property(e => e.NrAnoEstorno).HasColumnName("nrAnoEstorno");
            entity.Property(e => e.NrEstono).HasColumnName("nrEstono");
            entity.Property(e => e.TpCredito)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tpCredito");
            entity.Property(e => e.VlEstorno)
                .HasColumnType("money")
                .HasColumnName("vlEstorno");

            entity.HasOne(d => d.IdCreditoNavigation).WithMany(p => p.TbDivLancamentoCreditoEstornos)
                .HasForeignKey(d => d.IdCredito)
                .HasConstraintName("FK_tbDivLancamentoCreditoEstorno_tbDivLancamentoCredito");
        });

        modelBuilder.Entity<TbDivLancamentoDeducaoCredito>(entity =>
        {
            entity.HasKey(e => e.IdDeducao);

            entity.ToTable("tbDivLancamentoDeducaoCredito");

            entity.HasIndex(e => e.DtDeducao, "IX_dtDeducao").HasFillFactor(90);

            entity.HasIndex(e => e.IdCredito, "IX_tbDivLancamentoDeducaoCredito_IX_IdCredito").HasFillFactor(90);

            entity.HasIndex(e => e.NrDeducao, "IX_tbDivLancamentoDeducaoCredito_nrDeducao").HasFillFactor(90);

            entity.HasIndex(e => new { e.TpCredito, e.DtDeducao }, "IX_tpCredito_dtDeducao").HasFillFactor(90);

            entity.HasIndex(e => new { e.IdCredito, e.IdDeducao }, "_dta_index_tbDivLancamentoDeducaoCredito_8_202132161__K2_K1");

            entity.HasIndex(e => new { e.IdCredito, e.IdDeducao, e.DtDeducao }, "_dta_index_tbDivLancamentoDeducaoCredito_8_202132161__K2_K1_K9_10");

            entity.Property(e => e.DsLoginInclusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsLoginInclusao");
            entity.Property(e => e.DsMotivo)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("dsMotivo");
            entity.Property(e => e.DtDeducao)
                .HasColumnType("datetime")
                .HasColumnName("dtDeducao");
            entity.Property(e => e.DtInclusao)
                .HasColumnType("datetime")
                .HasColumnName("dtInclusao");
            entity.Property(e => e.NrAnoDeducao).HasColumnName("nrAnoDeducao");
            entity.Property(e => e.NrDeducao).HasColumnName("nrDeducao");
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
            entity.Property(e => e.TpCredito)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tpCredito");
            entity.Property(e => e.VlDeducao)
                .HasColumnType("money")
                .HasColumnName("vlDeducao");

            entity.HasOne(d => d.IdCreditoNavigation).WithMany(p => p.TbDivLancamentoDeducaoCreditos)
                .HasForeignKey(d => d.IdCredito)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_tbDivLancamentoDeducaoCredito_tbDivLancamentoCredito");

            entity.HasOne(d => d.IdTipoDeducaoCreditoNavigation).WithMany(p => p.TbDivLancamentoDeducaoCreditos)
                .HasForeignKey(d => d.IdTipoDeducaoCredito)
                .HasConstraintName("FK_tbDivLancamentoDeducaoCredito_tbDivTipoDeducaoCredito");
        });

        modelBuilder.Entity<TbDivLancamentoDeducaoCreditoEstorno>(entity =>
        {
            entity.HasKey(e => e.IdDeducaoEstorno);

            entity.ToTable("tbDivLancamentoDeducaoCreditoEstorno");

            entity.HasIndex(e => e.IdDeducao, "IX_tbDivLancamentoDeducaoCreditoEstorno_IdDeducao").HasFillFactor(90);

            entity.HasIndex(e => e.NrEstorno, "IX_tbDivLancamentoDeducaoCreditoEstorno_nrEstorno");

            entity.HasIndex(e => new { e.IdDeducao, e.IdDeducaoEstorno, e.DtEstorno }, "_dta_index_tbDivLancamentoDeducaoCreditoEst_8_1339516201__K2_K1_K7_8");

            entity.Property(e => e.DsLoginInclusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsLoginInclusao");
            entity.Property(e => e.DsMotivo)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("dsMotivo");
            entity.Property(e => e.DtEstorno)
                .HasColumnType("datetime")
                .HasColumnName("dtEstorno");
            entity.Property(e => e.DtInclusao)
                .HasColumnType("datetime")
                .HasColumnName("dtInclusao");
            entity.Property(e => e.NrAnoEstorno).HasColumnName("nrAnoEstorno");
            entity.Property(e => e.NrEstorno).HasColumnName("nrEstorno");
            entity.Property(e => e.TpCredito)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tpCredito");
            entity.Property(e => e.VlEstono)
                .HasColumnType("money")
                .HasColumnName("vlEstono");

            entity.HasOne(d => d.IdDeducaoNavigation).WithMany(p => p.TbDivLancamentoDeducaoCreditoEstornos)
                .HasForeignKey(d => d.IdDeducao)
                .HasConstraintName("FK_tbDivLancamentoDeducaoCreditoEstorno_tbDivLancamentoDeducaoCredito");
        });

        modelBuilder.Entity<TbDivParcelamentoCredito>(entity =>
        {
            entity.HasKey(e => e.IdParcelamento);

            entity.ToTable("tbDivParcelamentoCredito");

            entity.Property(e => e.DtFim)
                .HasColumnType("datetime")
                .HasColumnName("dtFim");
            entity.Property(e => e.DtInicio)
                .HasColumnType("datetime")
                .HasColumnName("dtInicio");
            entity.Property(e => e.NrAnoParcelamento).HasColumnName("nrAnoParcelamento");
            entity.Property(e => e.NrParcelamento).HasColumnName("nrParcelamento");
            entity.Property(e => e.NrParcelas).HasColumnName("nrParcelas");
            entity.Property(e => e.TpCredito)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tpCredito");
            entity.Property(e => e.TpParcelamento)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tpParcelamento");
            entity.Property(e => e.VlParcelamento)
                .HasColumnType("money")
                .HasColumnName("vlParcelamento");

            entity.HasOne(d => d.IdCreditoNavigation).WithMany(p => p.TbDivParcelamentoCreditos)
                .HasForeignKey(d => d.IdCredito)
                .HasConstraintName("FK_tbDivParcelamentoCredito_tbDivLancamentoCredito");
        });

        modelBuilder.Entity<TbDivTabelasEvento>(entity =>
        {
            entity.HasKey(e => new { e.IdEvento, e.IdObjeto, e.NmTabela }).HasName("PK_tbDivTabelasEventos_1");

            entity.ToTable("tbDivTabelasEventos");

            entity.HasIndex(e => e.IdEvento, "IX_tbDivTabelasEventos_idEvento").HasFillFactor(90);

            entity.HasIndex(e => new { e.IdEvento, e.NmTabela }, "IX_tbDivTabelasEventos_idEvento_nmTabela_inc_idObjeto_vlEvento").HasFillFactor(90);

            entity.Property(e => e.IdEvento).HasColumnName("idEvento");
            entity.Property(e => e.IdObjeto).HasColumnName("idObjeto");
            entity.Property(e => e.NmTabela)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nmTabela");
            entity.Property(e => e.VlEvento)
                .HasColumnType("money")
                .HasColumnName("vlEvento");
        });

        modelBuilder.Entity<TbDivTipoArrecadacao>(entity =>
        {
            entity.HasKey(e => e.IdTipoArrecadacao);

            entity.ToTable("tbDivTipoArrecadacao");

            entity.Property(e => e.IdTipoArrecadacao).ValueGeneratedNever();
            entity.Property(e => e.DsTipoArrecadacao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsTipoArrecadacao");
        });

        modelBuilder.Entity<TbDivTipoAtualizacaoCredito>(entity =>
        {
            entity.HasKey(e => e.IdTipoAtualizacaoCredito);

            entity.ToTable("tbDivTipoAtualizacaoCredito");

            entity.Property(e => e.IdTipoAtualizacaoCredito).ValueGeneratedNever();
            entity.Property(e => e.DsTipoAtualizacaoCredito)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsTipoAtualizacaoCredito");
        });

        modelBuilder.Entity<TbDivTipoCredito>(entity =>
        {
            entity.HasKey(e => e.IdTipoCredito);

            entity.ToTable("tbDivTipoCredito");

            entity.Property(e => e.IdTipoCredito)
                .ValueGeneratedNever()
                .HasColumnName("idTipoCredito");
            entity.Property(e => e.DsTipoCredito)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("dsTipoCredito");
            entity.Property(e => e.FlTributo).HasColumnName("flTributo");
            entity.Property(e => e.TrGrId).HasColumnName("TrGrID");

            entity.HasOne(d => d.IdTipoNaturezaCreditoNavigation).WithMany(p => p.TbDivTipoCreditos)
                .HasForeignKey(d => d.IdTipoNaturezaCredito)
                .HasConstraintName("FK_tbDivTipoCredito_tbDivTipoNaturezaCredito");

            entity.HasOne(d => d.TrGr).WithMany(p => p.TbDivTipoCreditos)
                .HasForeignKey(d => d.TrGrId)
                .HasConstraintName("FK_tbDivTipoCredito_tribTipoTributosGrupo");
        });

        modelBuilder.Entity<TbDivTipoDeducaoCredito>(entity =>
        {
            entity.HasKey(e => e.IdTipoDeducaoCredito);

            entity.ToTable("tbDivTipoDeducaoCredito");

            entity.Property(e => e.IdTipoDeducaoCredito).ValueGeneratedNever();
            entity.Property(e => e.DsTipoDeducaoCredito)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("dsTipoDeducaoCredito");
        });

        modelBuilder.Entity<TbDivTipoNaturezaCredito>(entity =>
        {
            entity.HasKey(e => e.IdTipoNaturezaCredito);

            entity.ToTable("tbDivTipoNaturezaCredito");

            entity.Property(e => e.IdTipoNaturezaCredito).ValueGeneratedNever();
            entity.Property(e => e.DsTipoNaturezaCredito)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("dsTipoNaturezaCredito");
        });

        modelBuilder.Entity<TbDivTipoOperacaoCredito>(entity =>
        {
            entity.HasKey(e => e.IdTipoOperacaoCredito).HasName("PK_tbDivrTipoOperacaoCredito");

            entity.ToTable("tbDivTipoOperacaoCredito");

            entity.Property(e => e.IdTipoOperacaoCredito)
                .ValueGeneratedNever()
                .HasColumnName("idTipoOperacaoCredito");
            entity.Property(e => e.DsTipoOperacaoCredito)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("dsTipoOperacaoCredito");
        });

        modelBuilder.Entity<TbDivTipoOrigemReceitum>(entity =>
        {
            entity.HasKey(e => e.IdTipoOrigemReceita);

            entity.ToTable("tbDivTipoOrigemReceita");

            entity.Property(e => e.IdTipoOrigemReceita).ValueGeneratedNever();
            entity.Property(e => e.DsTipoOrigemReceita)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("dsTipoOrigemReceita");
        });

        modelBuilder.Entity<TbDivTipoUnidadeTce>(entity =>
        {
            entity.HasKey(e => e.IdTipoUnidadeTce);

            entity.ToTable("tbDivTipoUnidadeTCE");

            entity.Property(e => e.IdTipoUnidadeTce)
                .ValueGeneratedNever()
                .HasColumnName("idTipoUnidadeTCE");
            entity.Property(e => e.DsTipoUnidadeTce)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsTipoUnidadeTCE");
        });

        modelBuilder.Entity<TbDivTmpArrecadacaoDeduco>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbDivTmpArrecadacaoDeducoes", tb => tb.HasComment("Cadastro Permissionarios cfe Aba 1 de Docto Enviado por Elvis"));

            entity.Property(e => e.CdReceita)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("cdReceita");
            entity.Property(e => e.DsHistorico)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("dsHistorico");
            entity.Property(e => e.DsLoginInclusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsLoginInclusao");
            entity.Property(e => e.DtArrecadacao)
                .HasColumnType("datetime")
                .HasColumnName("dtArrecadacao");
            entity.Property(e => e.IdArrecadacao).ValueGeneratedOnAdd();
            entity.Property(e => e.NmContribuinte)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nmContribuinte");
            entity.Property(e => e.NrAnoArrecadacao).HasColumnName("nrAnoArrecadacao");
            entity.Property(e => e.NrAnoPlanoContas).HasColumnName("nrAnoPlanoContas");
            entity.Property(e => e.NrArrecadacao).HasColumnName("nrArrecadacao");
            entity.Property(e => e.NrDocContribuinte)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("nrDocContribuinte");
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
            entity.Property(e => e.TpDocContribuinte)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("tpDocContribuinte");
            entity.Property(e => e.VlArrecadacao)
                .HasColumnType("money")
                .HasColumnName("vlArrecadacao");
        });

        modelBuilder.Entity<TbEmpAtributoDinamicoAtividade>(entity =>
        {
            entity.HasKey(e => new { e.Atividade, e.IdAtributo });

            entity.ToTable("tbEmpAtributoDinamicoAtividades");

            entity.Property(e => e.Atividade)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DsLoginInclusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsLoginInclusao");
            entity.Property(e => e.DtInclusao)
                .HasColumnType("datetime")
                .HasColumnName("dtInclusao");
            entity.Property(e => e.FlAtivo).HasColumnName("flAtivo");
        });

        modelBuilder.Entity<TbEmpAtributosDinamico>(entity =>
        {
            entity.HasKey(e => e.IdAtributo);

            entity.ToTable("tbEmpAtributosDinamicos");

            entity.Property(e => e.DsAtributo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsAtributo");
            entity.Property(e => e.DsTipoAtributo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("dsTipoAtributo");
            entity.Property(e => e.DsValoresValidos)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsValoresValidos");
        });

        modelBuilder.Entity<TbEstornoCombustivelCupomFiscal>(entity =>
        {
            entity.HasKey(e => e.IdEstorno);

            entity.ToTable("tbEstornoCombustivelCupomFiscal");

            entity.Property(e => e.IdEstorno)
                .ValueGeneratedNever()
                .HasColumnName("idEstorno");
            entity.Property(e => e.KmAnterior).HasColumnType("money");
            entity.Property(e => e.KmAtual).HasColumnType("money");
            entity.Property(e => e.QtdeLitrosAbast).HasColumnType("money");
            entity.Property(e => e.ValorCupom).HasColumnType("money");
        });

        modelBuilder.Entity<TbImoInvasao>(entity =>
        {
            entity.HasKey(e => e.IdInvasao);

            entity.ToTable("tbImoInvasao");

            entity.Property(e => e.IdInvasao)
                .ValueGeneratedNever()
                .HasColumnName("idInvasao");
            entity.Property(e => e.AreaAcupadaInvasao)
                .HasColumnType("decimal(9, 3)")
                .HasColumnName("areaAcupadaInvasao");
            entity.Property(e => e.DtInvasao)
                .HasColumnType("datetime")
                .HasColumnName("dtInvasao");
            entity.Property(e => e.DtUsoCapiao)
                .HasColumnType("datetime")
                .HasColumnName("dtUsoCapiao");
            entity.Property(e => e.ImoCnpjfilial)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("ImoCNPJFilial");
            entity.Property(e => e.ImoInscricao)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NmLoteInvasao)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("nmLoteInvasao");
            entity.Property(e => e.ObsInvasao)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("obsInvasao");

            entity.HasOne(d => d.ImobensImovei).WithMany(p => p.TbImoInvasaos)
                .HasForeignKey(d => new { d.ImoCnpjfilial, d.ImoInscricao })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tbImoInvasao_ImobensImoveis");
        });

        modelBuilder.Entity<TbImoMovObrasDepuDesp>(entity =>
        {
            entity.HasKey(e => e.IdmovObrasDepuDesp);

            entity.ToTable("tbImoMovObrasDepuDesp");

            entity.Property(e => e.IdmovObrasDepuDesp)
                .ValueGeneratedNever()
                .HasColumnName("IDMovObrasDepuDesp");
            entity.Property(e => e.DsDePuTipoDespesa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsDePuTipoDespesa");
            entity.Property(e => e.DtDespesa)
                .HasColumnType("datetime")
                .HasColumnName("dtDespesa");
            entity.Property(e => e.ImoTbImoMovObrasIdObra).HasColumnName("imoTbImoMovObrasIdObra");
            entity.Property(e => e.NroDepuDespAno).HasColumnName("nroDepuDespAno");
            entity.Property(e => e.NroDepuDespNum).HasColumnName("nroDepuDespNum");
            entity.Property(e => e.VlDepuDespValor)
                .HasColumnType("decimal(16, 2)")
                .HasColumnName("vlDepuDespValor");

            entity.HasOne(d => d.ImoTbImoMovObrasIdObraNavigation).WithMany(p => p.TbImoMovObrasDepuDesps)
                .HasForeignKey(d => d.ImoTbImoMovObrasIdObra)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tbImoMovObrasDepuDesp_tbImoMovimentoObras");
        });

        modelBuilder.Entity<TbImoMovimentoObra>(entity =>
        {
            entity.HasKey(e => e.IdmovObras);

            entity.ToTable("tbImoMovimentoObras");

            entity.Property(e => e.IdmovObras)
                .ValueGeneratedNever()
                .HasColumnName("IDMovObras");
            entity.Property(e => e.DsMovimento)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dsMovimento");
            entity.Property(e => e.DsSituacao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsSituacao");
            entity.Property(e => e.DtMovimento)
                .HasColumnType("datetime")
                .HasColumnName("dtMovimento");
            entity.Property(e => e.Idobra).HasColumnName("IDObra");
            entity.Property(e => e.Idusu)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("IDUsu");
            entity.Property(e => e.ModAid).HasColumnName("ModAID");
            entity.Property(e => e.NrAnoLic).HasColumnName("nrAnoLic");
            entity.Property(e => e.NrLicitacao).HasColumnName("nrLicitacao");

            entity.HasOne(d => d.IdobraNavigation).WithMany(p => p.TbImoMovimentoObras)
                .HasForeignKey(d => d.Idobra)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tbImoMovimentoObras_tbImoObras");

            entity.HasOne(d => d.IdusuNavigation).WithMany(p => p.TbImoMovimentoObras)
                .HasForeignKey(d => d.Idusu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tbImoMovimentoObras_Usuarios");
        });

        modelBuilder.Entity<TbImoObra>(entity =>
        {
            entity.HasKey(e => e.Idobra);

            entity.ToTable("tbImoObras");

            entity.Property(e => e.Idobra)
                .ValueGeneratedNever()
                .HasColumnName("IDObra");
            entity.Property(e => e.CdProprio).HasColumnName("cdProprio");
            entity.Property(e => e.DsObjetoObra)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dsObjetoObra");
            entity.Property(e => e.DtEstimadaFim)
                .HasColumnType("datetime")
                .HasColumnName("dtEstimadaFim");
            entity.Property(e => e.DtFim)
                .HasColumnType("datetime")
                .HasColumnName("dtFim");
            entity.Property(e => e.DtInicio)
                .HasColumnType("datetime")
                .HasColumnName("dtInicio");
            entity.Property(e => e.ImoImoveisCnpjfilial)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("imoImoveisCNPJFilial");
            entity.Property(e => e.ImoImoveisInscricao)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("imoImoveisInscricao");
            entity.Property(e => e.NmObra)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nmObra");
            entity.Property(e => e.VlEstimado)
                .HasColumnType("decimal(16, 2)")
                .HasColumnName("vlEstimado");
            entity.Property(e => e.VlGasto)
                .HasColumnType("decimal(16, 2)")
                .HasColumnName("vlGasto");

            entity.HasOne(d => d.ImobensImovei).WithMany(p => p.TbImoObras)
                .HasForeignKey(d => new { d.ImoImoveisCnpjfilial, d.ImoImoveisInscricao })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tbImoObras_ImobensImoveis");
        });

        modelBuilder.Entity<TbImoObrasDepuDesp>(entity =>
        {
            entity.HasKey(e => e.IdobrasDepuDesp);

            entity.ToTable("tbImoObrasDepuDesp");

            entity.Property(e => e.IdobrasDepuDesp)
                .ValueGeneratedNever()
                .HasColumnName("IDObrasDepuDesp");
            entity.Property(e => e.DsDePuTipoDespesa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsDePuTipoDespesa");
            entity.Property(e => e.ImoTbImoObrasIdObra).HasColumnName("imoTbImoObrasIdObra");
            entity.Property(e => e.NroDepuDespAno).HasColumnName("nroDepuDespAno");
            entity.Property(e => e.NroDepuDespNum).HasColumnName("nroDepuDespNum");
            entity.Property(e => e.VlDepuDespValor)
                .HasColumnType("decimal(16, 2)")
                .HasColumnName("vlDepuDespValor");

            entity.HasOne(d => d.ImoTbImoObrasIdObraNavigation).WithMany(p => p.TbImoObrasDepuDesps)
                .HasForeignKey(d => d.ImoTbImoObrasIdObra)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tbImoObrasDepuDesp_tbImoObras");
        });

        modelBuilder.Entity<TbImoTipoArea>(entity =>
        {
            entity.HasKey(e => e.IdtipoArea);

            entity.ToTable("tbImoTipoArea");

            entity.Property(e => e.IdtipoArea)
                .ValueGeneratedNever()
                .HasColumnName("IDTipoArea");
            entity.Property(e => e.CdTipoConta).HasColumnName("cdTipoConta");
            entity.Property(e => e.DsTipoArea)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("dsTipoArea");
        });

        modelBuilder.Entity<TbImportacaoGeo>(entity =>
        {
            entity.HasKey(e => e.IdImportacaoGeo);

            entity.ToTable("tbImportacaoGEO");

            entity.Property(e => e.IdImportacaoGeo).HasColumnName("idImportacaoGEO");
            entity.Property(e => e.CdLote)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("cdLote");
            entity.Property(e => e.CdQuadra)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("cdQuadra");
            entity.Property(e => e.DsCarecteristica)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("dsCarecteristica");
            entity.Property(e => e.DsComplemento)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("dsComplemento");
            entity.Property(e => e.DsDenominacaoPredial)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("dsDenominacaoPredial");
            entity.Property(e => e.DsEndereco)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dsEndereco");
            entity.Property(e => e.DsSituacao)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("dsSituacao");
            entity.Property(e => e.DtInclusao)
                .HasColumnType("datetime")
                .HasColumnName("dtInclusao");
            entity.Property(e => e.FlImportado).HasColumnName("flImportado");
            entity.Property(e => e.NmBairro)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nmBairro");
            entity.Property(e => e.NmCidade)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("nmCidade");
            entity.Property(e => e.NmLoteamento)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nmLoteamento");
            entity.Property(e => e.NmProprietario)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("nmProprietario");
            entity.Property(e => e.NmUf)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("nmUF");
            entity.Property(e => e.NrEconomia)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("nrEconomia");
            entity.Property(e => e.NrIdadeAparente).HasColumnName("nrIdadeAparente");
            entity.Property(e => e.NrInscricao)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("nrInscricao");
            entity.Property(e => e.NrMatricula)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("nrMatricula");
            entity.Property(e => e.NrNumeroOficio)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("nrNumeroOficio");
            entity.Property(e => e.NrNumeroPavimento).HasColumnName("nrNumeroPavimento");
            entity.Property(e => e.NrNumeroPredial)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("nrNumeroPredial");
            entity.Property(e => e.TpLogradouro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tpLogradouro");
            entity.Property(e => e.VlMetragemAreaCoberta)
                .HasColumnType("money")
                .HasColumnName("vlMetragemAreaCoberta");
            entity.Property(e => e.VlMetragemConstruida)
                .HasColumnType("money")
                .HasColumnName("vlMetragemConstruida");
        });

        modelBuilder.Entity<TbImportacaoGeocaracteristica>(entity =>
        {
            entity.HasKey(e => e.IdImportacaoGeocaracteristica);

            entity.ToTable("tbImportacaoGEOCaracteristica");

            entity.Property(e => e.IdImportacaoGeocaracteristica).HasColumnName("idImportacaoGEOCaracteristica");
            entity.Property(e => e.IdImportacaoGeo).HasColumnName("idImportacaoGEO");
            entity.Property(e => e.Tid).HasColumnName("TID");
            entity.Property(e => e.Tnome)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TNome");
            entity.Property(e => e.Valor)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Vid).HasColumnName("VID");
            entity.Property(e => e.Vnome)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("VNome");
        });

        modelBuilder.Entity<TbLicModalidade>(entity =>
        {
            entity.HasKey(e => e.IdModalidade);

            entity.ToTable("tbLicModalidade");

            entity.Property(e => e.IdModalidade)
                .ValueGeneratedNever()
                .HasColumnName("idModalidade");
            entity.Property(e => e.NmModalidade)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nmModalidade");
        });

        modelBuilder.Entity<TbObrIntervencao>(entity =>
        {
            entity.HasKey(e => e.Idintervencao);

            entity.ToTable("tbObrIntervencao");

            entity.Property(e => e.Idintervencao)
                .ValueGeneratedNever()
                .HasColumnName("IDIntervencao");
            entity.Property(e => e.DsObjetoObra)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("dsObjetoObra");
            entity.Property(e => e.DtRefEstimado)
                .HasColumnType("datetime")
                .HasColumnName("dtRefEstimado");
            entity.Property(e => e.IdtipoObraServ).HasColumnName("IDTipoObraServ");
            entity.Property(e => e.NmObra)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nmObra");
            entity.Property(e => e.NrMedidaObra)
                .HasColumnType("decimal(6, 2)")
                .HasColumnName("nrMedidaObra");
            entity.Property(e => e.VlEstimado)
                .HasColumnType("decimal(16, 2)")
                .HasColumnName("vlEstimado");

            entity.HasOne(d => d.IdtipoObraServNavigation).WithMany(p => p.TbObrIntervencaos)
                .HasForeignKey(d => d.IdtipoObraServ)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tbObrIntervencao_tbObrTipoObrasServicos");

            entity.HasOne(d => d.UnMed).WithMany(p => p.TbObrIntervencaos)
                .HasForeignKey(d => d.UnMedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tbObrIntervencao_AlmUnMed");
        });

        modelBuilder.Entity<TbObrTipoObrasServico>(entity =>
        {
            entity.HasKey(e => e.IdtipoObraServ);

            entity.ToTable("tbObrTipoObrasServicos");

            entity.Property(e => e.IdtipoObraServ)
                .ValueGeneratedNever()
                .HasColumnName("IDTipoObraServ");
            entity.Property(e => e.CdTipoObra).HasColumnName("cdTipoObra");
            entity.Property(e => e.DsDcadastroPrevioLoc)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dsDCadastroPrevioLoc");
            entity.Property(e => e.DsTipoObraServ)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsTipoObraServ");
        });

        modelBuilder.Entity<TbReceitasGrupoTributo>(entity =>
        {
            entity.HasKey(e => new { e.Receita, e.TrGrId });

            entity.ToTable("tbReceitasGrupoTributos");

            entity.Property(e => e.Receita)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TrGrId).HasColumnName("TrGrID");
        });

        modelBuilder.Entity<TbTempBoletosClassifConsistencium>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbTempBoletosClassifConsistencia");

            entity.Property(e => e.Boletos)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("boletos");
        });

        modelBuilder.Entity<TbTempValidadorCdaprevium>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbTempValidadorCDAPrevia");

            entity.Property(e => e.CorrecaoMonetaria).HasColumnType("decimal(14, 2)");
            entity.Property(e => e.ImoIddivida).HasColumnName("ImoIDDivida");
            entity.Property(e => e.Juros).HasColumnType("decimal(14, 2)");
            entity.Property(e => e.Livrodaid).HasColumnName("livrodaid");
            entity.Property(e => e.Multa).HasColumnType("decimal(14, 2)");
            entity.Property(e => e.MultaDividaAtiva).HasColumnType("decimal(14, 2)");
            entity.Property(e => e.Ordem)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ordem");
            entity.Property(e => e.Tipo)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.TpCadastro).HasColumnName("tpCadastro");
            entity.Property(e => e.Valor).HasColumnType("money");
        });

        modelBuilder.Entity<TbTempValidadorCdum>(entity =>
        {
            entity.HasKey(e => e.IdValidador);

            entity.ToTable("tbTempValidadorCDA");

            entity.Property(e => e.IdValidador).HasColumnName("idValidador");
            entity.Property(e => e.DsLogin)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsLogin");
            entity.Property(e => e.IdIdentificador)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("idIdentificador");
            entity.Property(e => e.VlTotal)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("vlTotal");
        });

        modelBuilder.Entity<TbTempprocessaEdital222012>(entity =>
        {
            entity.HasKey(e => new { e.Ano, e.Inscricao });

            entity.ToTable("tbTEMPProcessaEdital222012");

            entity.Property(e => e.Inscricao)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FlProcessado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flProcessado");
        });

        modelBuilder.Entity<TbTipoBen>(entity =>
        {
            entity.HasKey(e => e.IdTipoBens);

            entity.ToTable("tbTipoBens");

            entity.Property(e => e.IdTipoBens)
                .ValueGeneratedNever()
                .HasColumnName("idTipoBens");
            entity.Property(e => e.DsTipoBens)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsTipoBens");
        });

        modelBuilder.Entity<TbTipoOperacao>(entity =>
        {
            entity.HasKey(e => e.IdTipoOperacao);

            entity.ToTable("tbTipoOperacao");

            entity.Property(e => e.IdTipoOperacao).HasColumnName("idTipoOperacao");
            entity.Property(e => e.CdTribunal).HasColumnName("cdTribunal");
            entity.Property(e => e.DsTipooperacao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsTipooperacao");
        });

        modelBuilder.Entity<TbTipoPlaqueta>(entity =>
        {
            entity.HasKey(e => e.IdTipoPlaqueta);

            entity.ToTable("tbTipoPlaquetas");

            entity.Property(e => e.IdTipoPlaqueta)
                .ValueGeneratedNever()
                .HasColumnName("idTipoPlaqueta");
            entity.Property(e => e.AlPlaqueta)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("alPlaqueta");
            entity.Property(e => e.CRecurso)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("NÃO")
                .IsFixedLength()
                .HasColumnName("cRecurso");
            entity.Property(e => e.DsTipoPlaqueta)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsTipoPlaqueta");
            entity.Property(e => e.LgPlaqueta)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("lgPlaqueta");
            entity.Property(e => e.MgDireita)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("mgDireita");
            entity.Property(e => e.MgEntreColunas)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("mgEntreColunas");
            entity.Property(e => e.MgEsquerda)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("mgEsquerda");
            entity.Property(e => e.MgInferior)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("mgInferior");
            entity.Property(e => e.MgSuperior)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("mgSuperior");
            entity.Property(e => e.NrColunas).HasColumnName("nrColunas");
        });

        modelBuilder.Entity<TbTipoSocio>(entity =>
        {
            entity.HasKey(e => e.TipoSocioId).HasName("PK_tbTipoSocio_1");

            entity.ToTable("tbTipoSocio");

            entity.Property(e => e.DsTipoSocio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsTipoSocio");
        });

        modelBuilder.Entity<TbTmpCreditosCosip>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbTmpCreditosCOSIP");

            entity.Property(e => e.Idcredito).HasColumnName("idcredito");
            entity.Property(e => e.Vlcredito)
                .HasColumnType("money")
                .HasColumnName("vlcredito");
        });

        modelBuilder.Entity<TbTmpRenumeraCreditosDividaAtiva>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbTmpRenumeraCreditosDividaAtiva");

            entity.Property(e => e.NrLancamento).HasColumnName("nrLancamento");
        });

        modelBuilder.Entity<TbTmpTribEdificacoes2017>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbTmpTribEdificacoes2017");

            entity.Property(e => e.AcabExtId).HasColumnName("AcabExtID");
            entity.Property(e => e.AcabIntId).HasColumnName("AcabIntID");
            entity.Property(e => e.AgrupaId).HasColumnName("AgrupaID");
            entity.Property(e => e.CategId).HasColumnName("CategID");
            entity.Property(e => e.CobertId).HasColumnName("CobertID");
            entity.Property(e => e.DataInclusao).HasColumnType("datetime");
            entity.Property(e => e.DenoId).HasColumnName("DenoID");
            entity.Property(e => e.EdifAlvara)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EdifAreaCoberta).HasColumnType("money");
            entity.Property(e => e.EdifAreaConstruida).HasColumnType("money");
            entity.Property(e => e.EdifBloco)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EdifCaracteristica)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.EdifCentroGrauLat)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("edifCentroGrauLat");
            entity.Property(e => e.EdifCentroGrauLon)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("edifCentroGrauLon");
            entity.Property(e => e.EdifCep)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("edifCEP");
            entity.Property(e => e.EdifComplemento)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.EdifContinuacaoTerreno)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EdifDtInicioConstrucao).HasColumnType("datetime");
            entity.Property(e => e.EdifDtMatricula)
                .HasColumnType("datetime")
                .HasColumnName("edifDtMatricula");
            entity.Property(e => e.EdifDtParalizacaoConstrucao).HasColumnType("datetime");
            entity.Property(e => e.EdifDtUltTransfPropriedade).HasColumnType("datetime");
            entity.Property(e => e.EdifEconomia)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EdifFracaoIdealEdificacao).HasColumnType("numeric(19, 6)");
            entity.Property(e => e.EdifMatricula)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EdifMotivoAlteracao)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("edifMotivoAlteracao");
            entity.Property(e => e.EdifNumAptoSalaLoja)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.EdifNumeracao)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.EdifObs).HasColumnType("text");
            entity.Property(e => e.EdifSituacao)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.EletricaId).HasColumnName("EletricaID");
            entity.Property(e => e.EsquadriasId).HasColumnName("EsquadriasID");
            entity.Property(e => e.EstConservId).HasColumnName("EstConservID");
            entity.Property(e => e.EstrutId).HasColumnName("EstrutID");
            entity.Property(e => e.ForroId).HasColumnName("ForroID");
            entity.Property(e => e.Idloteamento).HasColumnName("IDLoteamento");
            entity.Property(e => e.Idplanta).HasColumnName("IDPlanta");
            entity.Property(e => e.InciId).HasColumnName("InciID");
            entity.Property(e => e.InscricaoImobiliaria)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.InscricaoImobiliariaGeo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("InscricaoImobiliariaGEO");
            entity.Property(e => e.LogradId).HasColumnName("LogradID");
            entity.Property(e => e.NumeroCadastroCanadas).HasColumnName("NumeroCadastroCANADAS");
            entity.Property(e => e.OcupaId).HasColumnName("OcupaID");
            entity.Property(e => e.ParedeId).HasColumnName("ParedeID");
            entity.Property(e => e.PisoId).HasColumnName("PisoID");
            entity.Property(e => e.PosicaoId).HasColumnName("PosicaoID");
            entity.Property(e => e.ProcId).HasColumnName("ProcID");
            entity.Property(e => e.SituacaoId).HasColumnName("SituacaoID");
            entity.Property(e => e.TerrenoId).HasColumnName("TerrenoID");
            entity.Property(e => e.TipoConId).HasColumnName("TipoConID");
            entity.Property(e => e.UsoId).HasColumnName("UsoID");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UtilizId).HasColumnName("UtilizID");
            entity.Property(e => e.ValorVenalCalculo).HasColumnType("money");
            entity.Property(e => e.ValorVenalEdificacao).HasColumnType("money");
            entity.Property(e => e.ValorVenalTerrenoParaEdificacao).HasColumnType("money");
        });

        modelBuilder.Entity<TbTmpTribEdificacoes2018>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbTmpTribEdificacoes2018");

            entity.Property(e => e.AcabExtId).HasColumnName("AcabExtID");
            entity.Property(e => e.AcabIntId).HasColumnName("AcabIntID");
            entity.Property(e => e.AgrupaId).HasColumnName("AgrupaID");
            entity.Property(e => e.CategId).HasColumnName("CategID");
            entity.Property(e => e.CobertId).HasColumnName("CobertID");
            entity.Property(e => e.DataInclusao).HasColumnType("datetime");
            entity.Property(e => e.DenoId).HasColumnName("DenoID");
            entity.Property(e => e.EdifAlvara)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EdifAreaCoberta).HasColumnType("money");
            entity.Property(e => e.EdifAreaConstruida).HasColumnType("money");
            entity.Property(e => e.EdifBloco)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EdifCaracteristica)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.EdifCentroGrauLat)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("edifCentroGrauLat");
            entity.Property(e => e.EdifCentroGrauLon)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("edifCentroGrauLon");
            entity.Property(e => e.EdifCep)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("edifCEP");
            entity.Property(e => e.EdifComplemento)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.EdifContinuacaoTerreno)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EdifDtInicioConstrucao).HasColumnType("datetime");
            entity.Property(e => e.EdifDtMatricula)
                .HasColumnType("datetime")
                .HasColumnName("edifDtMatricula");
            entity.Property(e => e.EdifDtParalizacaoConstrucao).HasColumnType("datetime");
            entity.Property(e => e.EdifDtUltTransfPropriedade).HasColumnType("datetime");
            entity.Property(e => e.EdifEconomia)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EdifFracaoIdealEdificacao).HasColumnType("numeric(19, 6)");
            entity.Property(e => e.EdifMatricula)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EdifMotivoAlteracao)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("edifMotivoAlteracao");
            entity.Property(e => e.EdifNumAptoSalaLoja)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.EdifNumeracao)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.EdifObs).HasColumnType("text");
            entity.Property(e => e.EdifSituacao)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.EletricaId).HasColumnName("EletricaID");
            entity.Property(e => e.EsquadriasId).HasColumnName("EsquadriasID");
            entity.Property(e => e.EstConservId).HasColumnName("EstConservID");
            entity.Property(e => e.EstrutId).HasColumnName("EstrutID");
            entity.Property(e => e.ForroId).HasColumnName("ForroID");
            entity.Property(e => e.Idloteamento).HasColumnName("IDLoteamento");
            entity.Property(e => e.Idplanta).HasColumnName("IDPlanta");
            entity.Property(e => e.InciId).HasColumnName("InciID");
            entity.Property(e => e.InscricaoImobiliaria)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.InscricaoImobiliariaGeo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("InscricaoImobiliariaGEO");
            entity.Property(e => e.LogradId).HasColumnName("LogradID");
            entity.Property(e => e.NumeroCadastroCanadas).HasColumnName("NumeroCadastroCANADAS");
            entity.Property(e => e.OcupaId).HasColumnName("OcupaID");
            entity.Property(e => e.ParedeId).HasColumnName("ParedeID");
            entity.Property(e => e.PisoId).HasColumnName("PisoID");
            entity.Property(e => e.PosicaoId).HasColumnName("PosicaoID");
            entity.Property(e => e.ProcId).HasColumnName("ProcID");
            entity.Property(e => e.SituacaoId).HasColumnName("SituacaoID");
            entity.Property(e => e.TerrenoId).HasColumnName("TerrenoID");
            entity.Property(e => e.TipoConId).HasColumnName("TipoConID");
            entity.Property(e => e.UsoId).HasColumnName("UsoID");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UtilizId).HasColumnName("UtilizID");
            entity.Property(e => e.ValorVenalCalculo).HasColumnType("money");
            entity.Property(e => e.ValorVenalEdificacao).HasColumnType("money");
            entity.Property(e => e.ValorVenalTerrenoParaEdificacao).HasColumnType("money");
        });

        modelBuilder.Entity<TbTmpTribEdificacoes2020>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbTmpTribEdificacoes2020");

            entity.Property(e => e.AcabExtId).HasColumnName("AcabExtID");
            entity.Property(e => e.AcabIntId).HasColumnName("AcabIntID");
            entity.Property(e => e.AgrupaId).HasColumnName("AgrupaID");
            entity.Property(e => e.CategId).HasColumnName("CategID");
            entity.Property(e => e.CobertId).HasColumnName("CobertID");
            entity.Property(e => e.DataInclusao).HasColumnType("datetime");
            entity.Property(e => e.DenoId).HasColumnName("DenoID");
            entity.Property(e => e.EdifAlvara)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EdifAreaCoberta).HasColumnType("money");
            entity.Property(e => e.EdifAreaConstruida).HasColumnType("money");
            entity.Property(e => e.EdifBloco)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EdifCaracteristica)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.EdifCentroGrauLat)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("edifCentroGrauLat");
            entity.Property(e => e.EdifCentroGrauLon)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("edifCentroGrauLon");
            entity.Property(e => e.EdifCep)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("edifCEP");
            entity.Property(e => e.EdifComplemento)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.EdifContinuacaoTerreno)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EdifDataAtualizacaoEndereco).HasColumnType("datetime");
            entity.Property(e => e.EdifDtInicioConstrucao).HasColumnType("datetime");
            entity.Property(e => e.EdifDtMatricula)
                .HasColumnType("datetime")
                .HasColumnName("edifDtMatricula");
            entity.Property(e => e.EdifDtParalizacaoConstrucao).HasColumnType("datetime");
            entity.Property(e => e.EdifDtUltTransfPropriedade).HasColumnType("datetime");
            entity.Property(e => e.EdifEconomia)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EdifFracaoIdealEdificacao).HasColumnType("numeric(19, 6)");
            entity.Property(e => e.EdifMatricula)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EdifMotivoAlteracao)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("edifMotivoAlteracao");
            entity.Property(e => e.EdifNumAptoSalaLoja)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.EdifNumeracao)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.EdifObs).HasColumnType("text");
            entity.Property(e => e.EdifSituacao)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.EdifUsuarioAtualizacaoEndereco)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.EletricaId).HasColumnName("EletricaID");
            entity.Property(e => e.EsquadriasId).HasColumnName("EsquadriasID");
            entity.Property(e => e.EstConservId).HasColumnName("EstConservID");
            entity.Property(e => e.EstrutId).HasColumnName("EstrutID");
            entity.Property(e => e.ForroId).HasColumnName("ForroID");
            entity.Property(e => e.Idloteamento).HasColumnName("IDLoteamento");
            entity.Property(e => e.Idplanta).HasColumnName("IDPlanta");
            entity.Property(e => e.InciId).HasColumnName("InciID");
            entity.Property(e => e.InscricaoImobiliaria)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.InscricaoImobiliariaGeo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("InscricaoImobiliariaGEO");
            entity.Property(e => e.LogradId).HasColumnName("LogradID");
            entity.Property(e => e.NumeroCadastroCanadas).HasColumnName("NumeroCadastroCANADAS");
            entity.Property(e => e.OcupaId).HasColumnName("OcupaID");
            entity.Property(e => e.ParedeId).HasColumnName("ParedeID");
            entity.Property(e => e.PisoId).HasColumnName("PisoID");
            entity.Property(e => e.PosicaoId).HasColumnName("PosicaoID");
            entity.Property(e => e.ProcId).HasColumnName("ProcID");
            entity.Property(e => e.SituacaoId).HasColumnName("SituacaoID");
            entity.Property(e => e.TerrenoId).HasColumnName("TerrenoID");
            entity.Property(e => e.TipoConId).HasColumnName("TipoConID");
            entity.Property(e => e.UsoId).HasColumnName("UsoID");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UtilizId).HasColumnName("UtilizID");
            entity.Property(e => e.ValorVenalCalculo).HasColumnType("money");
            entity.Property(e => e.ValorVenalEdificacao).HasColumnType("money");
            entity.Property(e => e.ValorVenalTerrenoParaEdificacao).HasColumnType("money");
        });

        modelBuilder.Entity<TbTmpTribTerreno2017>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbTmpTribTerreno2017");

            entity.Property(e => e.AreaAbertaCoberta).HasColumnType("money");
            entity.Property(e => e.AreaUsoComum).HasColumnType("money");
            entity.Property(e => e.CalcaId).HasColumnName("CalcaID");
            entity.Property(e => e.FundoId).HasColumnName("FundoID");
            entity.Property(e => e.InciId).HasColumnName("InciID");
            entity.Property(e => e.JuriId).HasColumnName("JuriID");
            entity.Property(e => e.LimTid).HasColumnName("LimTID");
            entity.Property(e => e.LocQid).HasColumnName("LocQID");
            entity.Property(e => e.LoteCondominio)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LoteLoteamento)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.NumeroCadastroCanadas).HasColumnName("NumeroCadastroCANADAS");
            entity.Property(e => e.PatrId).HasColumnName("PatrID");
            entity.Property(e => e.PedoId).HasColumnName("PedoID");
            entity.Property(e => e.QuadraId).HasColumnName("QuadraID");
            entity.Property(e => e.QuadraLoteamento)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.TerrAreaTerreno).HasColumnType("money");
            entity.Property(e => e.TerrLote)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.TerrObs).HasColumnType("text");
            entity.Property(e => e.TerrReferenciaAnterior)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TerrenoId).HasColumnName("TerrenoID");
            entity.Property(e => e.TipoCondominio)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TopoId).HasColumnName("TopoID");
            entity.Property(e => e.ValorVenalTerreno).HasColumnType("money");
            entity.Property(e => e.VegeId).HasColumnName("VegeID");
        });

        modelBuilder.Entity<TbTmpTribTerreno2018>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbTmpTribTerreno2018");

            entity.Property(e => e.AreaAbertaCoberta).HasColumnType("money");
            entity.Property(e => e.AreaUsoComum).HasColumnType("money");
            entity.Property(e => e.CalcaId).HasColumnName("CalcaID");
            entity.Property(e => e.FundoId).HasColumnName("FundoID");
            entity.Property(e => e.InciId).HasColumnName("InciID");
            entity.Property(e => e.JuriId).HasColumnName("JuriID");
            entity.Property(e => e.LimTid).HasColumnName("LimTID");
            entity.Property(e => e.LocQid).HasColumnName("LocQID");
            entity.Property(e => e.LoteCondominio)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LoteLoteamento)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.NumeroCadastroCanadas).HasColumnName("NumeroCadastroCANADAS");
            entity.Property(e => e.PatrId).HasColumnName("PatrID");
            entity.Property(e => e.PedoId).HasColumnName("PedoID");
            entity.Property(e => e.QuadraId).HasColumnName("QuadraID");
            entity.Property(e => e.QuadraLoteamento)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.TerrAreaTerreno).HasColumnType("money");
            entity.Property(e => e.TerrLote)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.TerrObs).HasColumnType("text");
            entity.Property(e => e.TerrReferenciaAnterior)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TerrenoId).HasColumnName("TerrenoID");
            entity.Property(e => e.TipoCondominio)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TopoId).HasColumnName("TopoID");
            entity.Property(e => e.ValorVenalTerreno).HasColumnType("money");
            entity.Property(e => e.VegeId).HasColumnName("VegeID");
        });

        modelBuilder.Entity<TbTmpTribTerreno2020>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbTmpTribTerreno2020");

            entity.Property(e => e.AreaAbertaCoberta).HasColumnType("money");
            entity.Property(e => e.AreaUsoComum).HasColumnType("money");
            entity.Property(e => e.CalcaId).HasColumnName("CalcaID");
            entity.Property(e => e.FundoId).HasColumnName("FundoID");
            entity.Property(e => e.InciId).HasColumnName("InciID");
            entity.Property(e => e.JuriId).HasColumnName("JuriID");
            entity.Property(e => e.LimTid).HasColumnName("LimTID");
            entity.Property(e => e.LocQid).HasColumnName("LocQID");
            entity.Property(e => e.LoteCondominio)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LoteLoteamento)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.NumeroCadastroCanadas).HasColumnName("NumeroCadastroCANADAS");
            entity.Property(e => e.PatrId).HasColumnName("PatrID");
            entity.Property(e => e.PedoId).HasColumnName("PedoID");
            entity.Property(e => e.QuadraId).HasColumnName("QuadraID");
            entity.Property(e => e.QuadraLoteamento)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.TerrAreaTerreno).HasColumnType("money");
            entity.Property(e => e.TerrLote)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.TerrObs).HasColumnType("text");
            entity.Property(e => e.TerrReferenciaAnterior)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TerrenoId).HasColumnName("TerrenoID");
            entity.Property(e => e.TipoCondominio)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TopoId).HasColumnName("TopoID");
            entity.Property(e => e.ValorVenalTerreno).HasColumnType("money");
            entity.Property(e => e.VegeId).HasColumnName("VegeID");
        });

        modelBuilder.Entity<TbTmpcmcVigilancium>(entity =>
        {
            entity.HasKey(e => e.EmprCmc);

            entity.ToTable("tbTMPCmcVigilancia");

            entity.Property(e => e.EmprCmc)
                .ValueGeneratedNever()
                .HasColumnName("EmprCMC");
        });

        modelBuilder.Entity<TbTribAvaliacoesItbi>(entity =>
        {
            entity.HasKey(e => e.IdAvaliacao);

            entity.ToTable("tbTribAvaliacoesITBI");

            entity.Property(e => e.IdAvaliacao).HasColumnName("idAvaliacao");
            entity.Property(e => e.DsLogin)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsLogin");
            entity.Property(e => e.DsMatricula)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsMatricula");
            entity.Property(e => e.DsObservacao)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dsObservacao");
            entity.Property(e => e.DsTipoConstrucao)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("dsTipoConstrucao");
            entity.Property(e => e.DtInclusao)
                .HasColumnType("datetime")
                .HasColumnName("dtInclusao");
            entity.Property(e => e.DtValidade)
                .HasColumnType("datetime")
                .HasColumnName("dtValidade");
            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.FlFinanciado).HasColumnName("flFinanciado");
            entity.Property(e => e.FlSomarEconomias).HasColumnName("flSomarEconomias");
            entity.Property(e => e.IdRequerente).HasColumnName("idRequerente");
            entity.Property(e => e.NrAno).HasColumnName("nrAno");
            entity.Property(e => e.NrAvaliacao).HasColumnName("nrAvaliacao");
            entity.Property(e => e.VlAliquota)
                .HasColumnType("money")
                .HasColumnName("vlAliquota");
            entity.Property(e => e.VlAliquotaFinanciado)
                .HasColumnType("money")
                .HasColumnName("vlAliquotaFinanciado");
            entity.Property(e => e.VlBaseCalculo)
                .HasColumnType("money")
                .HasColumnName("vlBaseCalculo");
            entity.Property(e => e.VlBaseCalculoFinanciado)
                .HasColumnType("money")
                .HasColumnName("vlBaseCalculoFinanciado");
            entity.Property(e => e.VlDeclarado)
                .HasColumnType("money")
                .HasColumnName("vlDeclarado");
            entity.Property(e => e.VlParteIdeal)
                .HasColumnType("money")
                .HasColumnName("vlParteIdeal");
        });

        modelBuilder.Entity<TbTribAvaliacoesItbienglobamento>(entity =>
        {
            entity.HasKey(e => new { e.EdificacaoId, e.IdAvaliacao });

            entity.ToTable("tbTribAvaliacoesITBIEnglobamentos");

            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.IdAvaliacao).HasColumnName("idAvaliacao");
            entity.Property(e => e.DsEstruturaConstrucao)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("dsEstruturaConstrucao");
            entity.Property(e => e.VlAreaConstruida)
                .HasColumnType("money")
                .HasColumnName("vlAreaConstruida");
            entity.Property(e => e.VlVenal)
                .HasColumnType("money")
                .HasColumnName("vlVenal");
        });

        modelBuilder.Entity<TbTribExclusaoCalculo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbTribExclusaoCalculo");

            entity.Property(e => e.DsLogin)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("dsLogin");
            entity.Property(e => e.DtInclusao)
                .HasColumnType("datetime")
                .HasColumnName("dtInclusao");
            entity.Property(e => e.NrAno).HasColumnName("nrAno");
            entity.Property(e => e.TipoTribId).HasColumnName("tipoTribID");
        });

        modelBuilder.Entity<Tbapp156Divida>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbapp156Dividas");

            entity.HasIndex(e => e.Cpfcnpj, "IX_tbapp156Dividas_CPFCnpj");

            entity.Property(e => e.Cotaunica).HasColumnName("cotaunica");
            entity.Property(e => e.Cpfcnpj)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("CPFCnpj");
            entity.Property(e => e.Detalhes)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("detalhes");
            entity.Property(e => e.Iddivida).HasColumnName("iddivida");
            entity.Property(e => e.Idlei).HasColumnName("idlei");
            entity.Property(e => e.Tipo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TipoDivida)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
            entity.Property(e => e.Tipocadastro).HasColumnName("tipocadastro");
            entity.Property(e => e.Tributo)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ValorAcrescimos).HasColumnType("money");
            entity.Property(e => e.ValorPrincipal).HasColumnType("money");
        });

        modelBuilder.Entity<Tbatendeagendamento>(entity =>
        {
            entity.HasKey(e => e.Idagendamento);

            entity.ToTable("tbatendeagendamento");

            entity.HasIndex(e => e.Idusuario, "IX_tbatendeagendamento_idusuario");

            entity.Property(e => e.Idagendamento)
                .ValueGeneratedNever()
                .HasColumnName("idagendamento");
            entity.Property(e => e.Dsavaliacao)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dsavaliacao");
            entity.Property(e => e.Dsdose)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsdose");
            entity.Property(e => e.Dsendereco)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dsendereco");
            entity.Property(e => e.Dsmotivo)
                .HasMaxLength(3000)
                .IsUnicode(false)
                .HasColumnName("dsmotivo");
            entity.Property(e => e.Dsobservacao)
                .IsUnicode(false)
                .HasColumnName("dsobservacao");
            entity.Property(e => e.Dstelefone1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("dstelefone1");
            entity.Property(e => e.Dstelefone2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("dstelefone2");
            entity.Property(e => e.Dstelefone3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("dstelefone3");
            entity.Property(e => e.Dtagendamento).HasColumnName("dtagendamento");
            entity.Property(e => e.Dtatendimento)
                .HasColumnType("datetime")
                .HasColumnName("dtatendimento");
            entity.Property(e => e.Dtausente)
                .HasColumnType("datetime")
                .HasColumnName("dtausente");
            entity.Property(e => e.Dtcancelamento)
                .HasColumnType("datetime")
                .HasColumnName("dtcancelamento");
            entity.Property(e => e.Dtconfirmacao)
                .HasColumnType("datetime")
                .HasColumnName("dtconfirmacao");
            entity.Property(e => e.Dtfinalizado)
                .HasColumnType("datetime")
                .HasColumnName("dtfinalizado");
            entity.Property(e => e.Dtnascimento)
                .HasColumnType("datetime")
                .HasColumnName("dtnascimento");
            entity.Property(e => e.Florigem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("E")
                .IsFixedLength()
                .HasComment("[I]nterno (via sistema) ou [E]xterno (Via Portal)")
                .HasColumnName("florigem");
            entity.Property(e => e.Flstatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("flstatus");
            entity.Property(e => e.Horafinal).HasColumnName("horafinal");
            entity.Property(e => e.Horainicial).HasColumnName("horainicial");
            entity.Property(e => e.Idservico).HasColumnName("idservico");
            entity.Property(e => e.Idusuario).HasColumnName("idusuario");
            entity.Property(e => e.Idusuarioatendimento).HasColumnName("idusuarioatendimento");
            entity.Property(e => e.Idusuarioausente).HasColumnName("idusuarioausente");
            entity.Property(e => e.Idusuariocancelou).HasColumnName("idusuariocancelou");
            entity.Property(e => e.Idusuarioconfirmou).HasColumnName("idusuarioconfirmou");
            entity.Property(e => e.Idusuariofinalizou).HasColumnName("idusuariofinalizou");
            entity.Property(e => e.Nmsolicitante)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("nmsolicitante");
            entity.Property(e => e.Nrcpf)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("nrcpf");
            entity.Property(e => e.Nrprocesso).HasColumnName("nrprocesso");
            entity.Property(e => e.Nrprocessoano).HasColumnName("nrprocessoano");
        });

        modelBuilder.Entity<Tbatendedataindisponivel>(entity =>
        {
            entity.HasKey(e => e.Iddataindisponivel);

            entity.ToTable("tbatendedataindisponivel");

            entity.Property(e => e.Iddataindisponivel)
                .ValueGeneratedNever()
                .HasColumnName("iddataindisponivel");
            entity.Property(e => e.Data).HasColumnName("data");
            entity.Property(e => e.Diainteiro).HasColumnName("diainteiro");
            entity.Property(e => e.Horafinal).HasColumnName("horafinal");
            entity.Property(e => e.Horainicial).HasColumnName("horainicial");
            entity.Property(e => e.Idservico).HasColumnName("idservico");
        });

        modelBuilder.Entity<Tbatendelocal>(entity =>
        {
            entity.HasKey(e => e.Idlocal);

            entity.ToTable("tbatendelocal");

            entity.Property(e => e.Idlocal)
                .ValueGeneratedNever()
                .HasColumnName("idlocal");
            entity.Property(e => e.Dsendereco)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dsendereco");
            entity.Property(e => e.Flpermiteatendretroativo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("S")
                .IsFixedLength()
                .HasComment("S: Permite atendimento retroativo\r\nN: Não permite atendimento retroativo")
                .HasColumnName("flpermiteatendretroativo");
            entity.Property(e => e.Fltipoacesso)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("((1))")
                .IsFixedLength()
                .HasComment("1 - GERAL\r\n2 - RESTRIÇÃO")
                .HasColumnName("fltipoacesso");
            entity.Property(e => e.Nmlocal)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("nmlocal");
            entity.Property(e => e.Nrlatitude)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nrlatitude");
            entity.Property(e => e.Nrlongitude)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nrlongitude");
        });

        modelBuilder.Entity<Tbatendemapaagendamento>(entity =>
        {
            entity.HasKey(e => e.Idmapa);

            entity.ToTable("tbatendemapaagendamento");

            entity.Property(e => e.Idmapa)
                .ValueGeneratedNever()
                .HasColumnName("idmapa");
            entity.Property(e => e.Ativo).HasColumnName("ativo");
            entity.Property(e => e.Dsmotivo)
                .HasMaxLength(3000)
                .IsUnicode(false)
                .HasColumnName("dsmotivo");
            entity.Property(e => e.Hrfinal).HasColumnName("hrfinal");
            entity.Property(e => e.Hrinicial).HasColumnName("hrinicial");
            entity.Property(e => e.Iddiasemana).HasColumnName("iddiasemana");
            entity.Property(e => e.Idservico).HasColumnName("idservico");
            entity.Property(e => e.Nratendimentossimultaneo).HasColumnName("nratendimentossimultaneo");
            entity.Property(e => e.Nrprocesso).HasColumnName("nrprocesso");
            entity.Property(e => e.Nrprocessoano).HasColumnName("nrprocessoano");
        });

        modelBuilder.Entity<Tbatendeservico>(entity =>
        {
            entity.HasKey(e => e.Idservico);

            entity.ToTable("tbatendeservico");

            entity.Property(e => e.Idservico)
                .ValueGeneratedNever()
                .HasColumnName("idservico");
            entity.Property(e => e.Anexo).HasColumnName("anexo");
            entity.Property(e => e.Dsmsgemail)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("Obrigado seu agendamento foi realizado com sucesso. Um e-mail foi enviado com informações sobre o agendamento.")
                .HasComment("Mensagem enviada por email")
                .HasColumnName("dsmsgemail");
            entity.Property(e => e.Dsorientacoes)
                .IsUnicode(false)
                .HasColumnName("dsorientacoes");
            entity.Property(e => e.Dtperiodofim)
                .HasComment("Indica que o agendamento terminará nesta data.")
                .HasColumnName("dtperiodofim");
            entity.Property(e => e.Dtperiodoinicio)
                .HasComment("Indica que o agendamento irá ser realizado a partir desta data.")
                .HasColumnName("dtperiodoinicio");
            entity.Property(e => e.Flatendimento)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("L")
                .IsFixedLength()
                .HasComment("Indica se o atendimento para o agendamento será [P]resencial ou [O]nline")
                .HasColumnName("flatendimento");
            entity.Property(e => e.Flexigedadosprocesso)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("N")
                .IsFixedLength()
                .HasColumnName("flexigedadosprocesso");
            entity.Property(e => e.Idlocal).HasColumnName("idlocal");
            entity.Property(e => e.Nmservico)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nmservico");
            entity.Property(e => e.Nrduracaoatendimento)
                .HasComment("Tempo de duração do atendimento em minutos.")
                .HasColumnName("nrduracaoatendimento");
            entity.Property(e => e.Nrproximasdatas)
                .HasComment("Quantos dias para frente pode ser liberado a agenda.")
                .HasColumnName("nrproximasdatas");
        });

        modelBuilder.Entity<Tbatendeusuariolocal>(entity =>
        {
            entity.HasKey(e => e.Idusuariolocal);

            entity.ToTable("tbatendeusuariolocal");

            entity.Property(e => e.Idusuariolocal)
                .ValueGeneratedNever()
                .HasColumnName("idusuariolocal");
            entity.Property(e => e.Idlocal).HasColumnName("idlocal");
            entity.Property(e => e.Idusuario).HasColumnName("idusuario");
        });

        modelBuilder.Entity<Tbautodeclaracao>(entity =>
        {
            entity.HasKey(e => e.Idautodeclaracao);

            entity.ToTable("tbautodeclaracao");

            entity.Property(e => e.Idautodeclaracao)
                .ValueGeneratedNever()
                .HasColumnName("idautodeclaracao");
            entity.Property(e => e.Dsautodeclaracao)
                .IsUnicode(false)
                .HasColumnName("dsautodeclaracao");
            entity.Property(e => e.Flativo).HasColumnName("flativo");
            entity.Property(e => e.Nmtituloautodeclaracao)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("nmtituloautodeclaracao");
        });

        modelBuilder.Entity<Tbb>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbb");

            entity.Property(e => e.EmprSituacaoId).HasColumnName("EmprSituacaoID");
            entity.Property(e => e.MovSitCnpj)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MovSitCNPJ");
            entity.Property(e => e.MovSitData).HasColumnType("datetime");
            entity.Property(e => e.MovSitId).HasColumnName("MovSitID");
            entity.Property(e => e.MovSitMotivo)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.MovSitObservacao)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MovSitProtocoloAnt)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.MovSitRazaoSocial)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MovSitTipo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Tbbairro>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbbairro");

            entity.Property(e => e.Flbairroslc303)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("flbairroslc303");
            entity.Property(e => e.Fzfonetizado)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("fzfonetizado");
            entity.Property(e => e.Idbairro).HasColumnName("idbairro");
            entity.Property(e => e.Idcidade).HasColumnName("idcidade");
            entity.Property(e => e.Idregiao).HasColumnName("idregiao");
            entity.Property(e => e.Nmbairro)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nmbairro");
        });

        modelBuilder.Entity<Tbcategorium>(entity =>
        {
            entity.HasKey(e => e.Idcategoria);

            entity.ToTable("tbcategoria");

            entity.Property(e => e.Idcategoria)
                .ValueGeneratedNever()
                .HasColumnName("idcategoria");
            entity.Property(e => e.Descricao)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("descricao");
            entity.Property(e => e.Nome)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("nome");
        });

        modelBuilder.Entity<Tbcelepardebitosdividaativa>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbcelepardebitosdividaativa", tb =>
                {
                    tb.HasTrigger("trgIntegraDividaAtivaFoztrans");
                    tb.HasTrigger("trgIntegraDividaAtivaFoztransBaixas");
                });

            entity.Property(e => e.Autoformatado)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("autoformatado");
            entity.Property(e => e.Coniddividaintegrado).HasColumnName("coniddividaintegrado");
            entity.Property(e => e.Conidintegrado)
                .HasComment("ID do contribuinte que foi integrado a divida.")
                .HasColumnName("conidintegrado");
            entity.Property(e => e.Dtbaixapagamento).HasColumnName("dtbaixapagamento");
            entity.Property(e => e.Dtinclusao)
                .HasColumnType("datetime")
                .HasColumnName("dtinclusao");
            entity.Property(e => e.Dtinfracao).HasColumnName("dtinfracao");
            entity.Property(e => e.Dtinscricaoda).HasColumnName("dtinscricaoda");
            entity.Property(e => e.Dtvencimento).HasColumnName("dtvencimento");
            entity.Property(e => e.Flconidnovo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Indica se o contribuinte foi criado pela integração (Novo = S)")
                .HasColumnName("flconidnovo");
            entity.Property(e => e.Iddividaativa).HasColumnName("iddividaativa");
            entity.Property(e => e.Idintegracaomunicipio).HasColumnName("idintegracaomunicipio");
            entity.Property(e => e.Idusuarioinclusao).HasColumnName("idusuarioinclusao");
            entity.Property(e => e.Nomedevedor)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("nomedevedor");
            entity.Property(e => e.Numdocumento).HasColumnName("numdocumento");
            entity.Property(e => e.Tipodocumento).HasColumnName("tipodocumento");
            entity.Property(e => e.Vlrnotificadodivida)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("vlrnotificadodivida");
            entity.Property(e => e.Vlrpagamento)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("vlrpagamento");
        });

        modelBuilder.Entity<Tbcidade>(entity =>
        {
            entity.HasKey(e => e.Idcidade).HasName("PK_tbcidade_1");

            entity.ToTable("tbcidade");

            entity.Property(e => e.Idcidade)
                .ValueGeneratedNever()
                .HasColumnName("idcidade");
            entity.Property(e => e.Cdibgecodigo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("cdibgecodigo");
            entity.Property(e => e.Dssiglauf)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("dssiglauf");
            entity.Property(e => e.Fzfonetizado)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("fzfonetizado");
            entity.Property(e => e.Idpais).HasColumnName("idpais");
            entity.Property(e => e.Nmcidade)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("nmcidade");
        });

        modelBuilder.Entity<TbconsultapreviaCme>(entity =>
        {
            entity.HasKey(e => e.Idconsultacme);

            entity.ToTable("tbconsultapreviaCME", tb => tb.HasTrigger("trgAtualizaSituacaoConsultaPrevia"));

            entity.Property(e => e.Idconsultacme)
                .ValueGeneratedNever()
                .HasColumnName("idconsultacme");
            entity.Property(e => e.Dsparecer)
                .IsUnicode(false)
                .HasComment("Parecer do Servidor que efetuou a geração.")
                .HasColumnName("dsparecer");
            entity.Property(e => e.Dtgeracao)
                .HasComment("Data da Geração do CME Municipal (Automática)")
                .HasColumnType("datetime")
                .HasColumnName("dtgeracao");
            entity.Property(e => e.EmprCme)
                .HasComment("Número do CME Gerado.")
                .HasColumnName("EmprCME");
            entity.Property(e => e.Idconsulta)
                .HasComment("ID da Consulta Prévia")
                .HasColumnName("idconsulta");
        });

        modelBuilder.Entity<Tbconsultapreviaautodeclaracao>(entity =>
        {
            entity.HasKey(e => new { e.Idconsulta, e.Idautodeclaracao });

            entity.ToTable("tbconsultapreviaautodeclaracao");

            entity.Property(e => e.Idconsulta).HasColumnName("idconsulta");
            entity.Property(e => e.Idautodeclaracao).HasColumnName("idautodeclaracao");
            entity.Property(e => e.Dtaceite)
                .HasColumnType("datetime")
                .HasColumnName("dtaceite");
            entity.Property(e => e.Idusuarioaceite).HasColumnName("idusuarioaceite");
        });

        modelBuilder.Entity<Tbconsultapreviadocumento>(entity =>
        {
            entity.HasKey(e => new { e.Idconsulta, e.Iddocumento });

            entity.ToTable("tbconsultapreviadocumento", tb => tb.HasTrigger("trgAtualizaSituacaoConsultaPreviaDocumento"));

            entity.Property(e => e.Idconsulta).HasColumnName("idconsulta");
            entity.Property(e => e.Iddocumento).HasColumnName("iddocumento");
            entity.Property(e => e.Flobrigatorio).HasColumnName("flobrigatorio");

            entity.HasOne(d => d.IdconsultaNavigation).WithMany(p => p.Tbconsultapreviadocumentos)
                .HasForeignKey(d => d.Idconsulta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tbconsultapreviadocumento_tbconsultaprevia");

            entity.HasOne(d => d.IddocumentoNavigation).WithMany(p => p.Tbconsultapreviadocumentos)
                .HasForeignKey(d => d.Iddocumento)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tbconsultapreviadocumento_TribAtivDocumentos");
        });

        modelBuilder.Entity<Tbconsultapreviadocumentoanalise>(entity =>
        {
            entity.HasKey(e => e.Idanalisedocumento);

            entity.ToTable("tbconsultapreviadocumentoanalise", tb => tb.HasTrigger("trgAtualizaSituacaoConsultaPreviaAnaliseDocumentos"));

            entity.Property(e => e.Idanalisedocumento)
                .ValueGeneratedNever()
                .HasColumnName("idanalisedocumento");
            entity.Property(e => e.Byanexo).HasColumnName("byanexo");
            entity.Property(e => e.Contenttype)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("contenttype");
            entity.Property(e => e.Data)
                .IsUnicode(false)
                .HasColumnName("data");
            entity.Property(e => e.Dsparecer)
                .IsUnicode(false)
                .HasColumnName("dsparecer");
            entity.Property(e => e.Dtparecer)
                .HasColumnType("datetime")
                .HasColumnName("dtparecer");
            entity.Property(e => e.Flparecer)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("Aguardando")
                .HasColumnName("flparecer");
            entity.Property(e => e.Idconsulta).HasColumnName("idconsulta");
            entity.Property(e => e.Iddocumento).HasColumnName("iddocumento");
            entity.Property(e => e.Idusuarioparecer).HasColumnName("idusuarioparecer");
        });

        modelBuilder.Entity<Tbconsultapreviadocumentoresposta>(entity =>
        {
            entity.HasKey(e => e.Idconsultadocumento);

            entity.ToTable("tbconsultapreviadocumentorespostas");

            entity.Property(e => e.Idconsultadocumento)
                .ValueGeneratedNever()
                .HasColumnName("idconsultadocumento");
            entity.Property(e => e.Atividade)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Idconsulta).HasColumnName("idconsulta");
            entity.Property(e => e.Iddocumento).HasColumnName("iddocumento");
            entity.Property(e => e.Idpergunta).HasColumnName("idpergunta");
            entity.Property(e => e.Idresposta).HasColumnName("idresposta");

            entity.HasOne(d => d.AtividadeNavigation).WithMany(p => p.Tbconsultapreviadocumentoresposta)
                .HasForeignKey(d => d.Atividade)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tbconsultapreviadocumentorespostas_TribAtivAtividade");

            entity.HasOne(d => d.IdconsultaNavigation).WithMany(p => p.Tbconsultapreviadocumentoresposta)
                .HasForeignKey(d => d.Idconsulta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tbconsultapreviadocumentorespostas_tbconsultaprevia");

            entity.HasOne(d => d.IdperguntaNavigation).WithMany(p => p.Tbconsultapreviadocumentoresposta)
                .HasForeignKey(d => d.Idpergunta)
                .HasConstraintName("FK_tbconsultapreviadocumentorespostas_tbtribativperguntas");

            entity.HasOne(d => d.IdrespostaNavigation).WithMany(p => p.Tbconsultapreviadocumentoresposta)
                .HasForeignKey(d => d.Idresposta)
                .HasConstraintName("FK_tbconsultapreviadocumentorespostas_tbtribativrespostas");
        });

        modelBuilder.Entity<Tbconsultapreviagraurisco>(entity =>
        {
            entity.HasKey(e => new { e.Idconsulta, e.Atividade, e.SetorId });

            entity.ToTable("tbconsultapreviagraurisco");

            entity.Property(e => e.Idconsulta).HasColumnName("idconsulta");
            entity.Property(e => e.Atividade)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("atividade");
            entity.Property(e => e.SetorId).HasColumnName("SetorID");
            entity.Property(e => e.Idrisco).HasColumnName("idrisco");

            entity.HasOne(d => d.AtividadeNavigation).WithMany(p => p.Tbconsultapreviagrauriscos)
                .HasForeignKey(d => d.Atividade)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tbconsultapreviagraurisco_TribAtivAtividade");

            entity.HasOne(d => d.IdconsultaNavigation).WithMany(p => p.Tbconsultapreviagrauriscos)
                .HasForeignKey(d => d.Idconsulta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tbconsultapreviagraurisco_tbconsultaprevia");

            entity.HasOne(d => d.IdriscoNavigation).WithMany(p => p.Tbconsultapreviagrauriscos)
                .HasForeignKey(d => d.Idrisco)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tbconsultapreviagraurisco_tbtribgraurisco");

            entity.HasOne(d => d.Setor).WithMany(p => p.Tbconsultapreviagrauriscos)
                .HasForeignKey(d => d.SetorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tbconsultapreviagraurisco_TribAtivSetorLicenciamento");
        });

        modelBuilder.Entity<Tbconsultapreviagrauriscoanalise>(entity =>
        {
            entity.HasKey(e => e.Idanalisegraurisco);

            entity.ToTable("tbconsultapreviagrauriscoanalise", tb => tb.HasTrigger("trgAtualizaSituacaoConsultaPreviaAnaliseRisco"));

            entity.Property(e => e.Idanalisegraurisco)
                .ValueGeneratedNever()
                .HasColumnName("idanalisegraurisco");
            entity.Property(e => e.Atividade)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("atividade");
            entity.Property(e => e.Dsparecer)
                .IsUnicode(false)
                .HasColumnName("dsparecer");
            entity.Property(e => e.Dtparecer)
                .HasColumnType("datetime")
                .HasColumnName("dtparecer");
            entity.Property(e => e.Flparecer)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Aceito, Em Exigencia, Negado")
                .HasColumnName("flparecer");
            entity.Property(e => e.Idconsulta).HasColumnName("idconsulta");
            entity.Property(e => e.Idrisco).HasColumnName("idrisco");
            entity.Property(e => e.Idusuarioparecer).HasColumnName("idusuarioparecer");
            entity.Property(e => e.SetorId).HasColumnName("SetorID");
        });

        modelBuilder.Entity<Tbconsultapreviagrauriscoresposta>(entity =>
        {
            entity.HasKey(e => e.Idconsultagraurisco).HasName("PK_tbcosultapreviagrauriscorespostas");

            entity.ToTable("tbconsultapreviagrauriscorespostas");

            entity.Property(e => e.Idconsultagraurisco)
                .ValueGeneratedNever()
                .HasColumnName("idconsultagraurisco");
            entity.Property(e => e.Atividade)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("atividade");
            entity.Property(e => e.Idconsulta).HasColumnName("idconsulta");
            entity.Property(e => e.Idpergunta).HasColumnName("idpergunta");
            entity.Property(e => e.Idresposta).HasColumnName("idresposta");
            entity.Property(e => e.Idrisco).HasColumnName("idrisco");
            entity.Property(e => e.SetorId).HasColumnName("SetorID");

            entity.HasOne(d => d.AtividadeNavigation).WithMany(p => p.Tbconsultapreviagrauriscoresposta)
                .HasForeignKey(d => d.Atividade)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tbcosultapreviagrauriscorespostas_TribAtivAtividade");

            entity.HasOne(d => d.IdconsultaNavigation).WithMany(p => p.Tbconsultapreviagrauriscoresposta)
                .HasForeignKey(d => d.Idconsulta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tbcosultapreviagrauriscorespostas_tbconsultaprevia");

            entity.HasOne(d => d.IdperguntaNavigation).WithMany(p => p.Tbconsultapreviagrauriscoresposta)
                .HasForeignKey(d => d.Idpergunta)
                .HasConstraintName("FK_tbcosultapreviagrauriscorespostas_tbtribativperguntas");

            entity.HasOne(d => d.IdrespostaNavigation).WithMany(p => p.Tbconsultapreviagrauriscoresposta)
                .HasForeignKey(d => d.Idresposta)
                .HasConstraintName("FK_tbcosultapreviagrauriscorespostas_tbtribativrespostas");

            entity.HasOne(d => d.IdriscoNavigation).WithMany(p => p.Tbconsultapreviagrauriscoresposta)
                .HasForeignKey(d => d.Idrisco)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tbcosultapreviagrauriscorespostas_tbtribgraurisco");

            entity.HasOne(d => d.Setor).WithMany(p => p.Tbconsultapreviagrauriscoresposta)
                .HasForeignKey(d => d.SetorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tbcosultapreviagrauriscorespostas_TribAtivSetorLicenciamento");
        });

        modelBuilder.Entity<Tbconsultapreviazoneamentoresposta>(entity =>
        {
            entity.HasKey(e => e.Idconsultazoneamento);

            entity.ToTable("tbconsultapreviazoneamentorespostas");

            entity.Property(e => e.Idconsultazoneamento)
                .ValueGeneratedNever()
                .HasColumnName("idconsultazoneamento");
            entity.Property(e => e.Atividade)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Idconsulta).HasColumnName("idconsulta");
            entity.Property(e => e.Idpergunta).HasColumnName("idpergunta");
            entity.Property(e => e.Idresposta).HasColumnName("idresposta");
            entity.Property(e => e.ZotlId).HasColumnName("zotlID");

            entity.HasOne(d => d.AtividadeNavigation).WithMany(p => p.Tbconsultapreviazoneamentoresposta)
                .HasForeignKey(d => d.Atividade)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tbconsultapreviazoneamentorespostas_TribAtivAtividade");

            entity.HasOne(d => d.IdconsultaNavigation).WithMany(p => p.Tbconsultapreviazoneamentoresposta)
                .HasForeignKey(d => d.Idconsulta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tbconsultapreviazoneamentorespostas_tbconsultaprevia");

            entity.HasOne(d => d.IdperguntaNavigation).WithMany(p => p.Tbconsultapreviazoneamentoresposta)
                .HasForeignKey(d => d.Idpergunta)
                .HasConstraintName("FK_tbconsultapreviazoneamentorespostas_tbtribativperguntas");

            entity.HasOne(d => d.IdrespostaNavigation).WithMany(p => p.Tbconsultapreviazoneamentoresposta)
                .HasForeignKey(d => d.Idresposta)
                .HasConstraintName("FK_tbconsultapreviazoneamentorespostas_tbtribativrespostas");

            entity.HasOne(d => d.Zotl).WithMany(p => p.Tbconsultapreviazoneamentoresposta)
                .HasForeignKey(d => d.ZotlId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tbconsultapreviazoneamentorespostas_tribZonaTipoLiberacao");
        });

        modelBuilder.Entity<Tbconsultaprevium>(entity =>
        {
            entity.HasKey(e => e.Idconsulta);

            entity.ToTable("tbconsultaprevia");

            entity.Property(e => e.Idconsulta)
                .ValueGeneratedNever()
                .HasColumnName("idconsulta");
            entity.Property(e => e.Dsendereco)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dsendereco");
            entity.Property(e => e.Dstelefonecontato)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dstelefonecontato");
            entity.Property(e => e.Dtconsulta)
                .HasColumnType("datetime")
                .HasColumnName("dtconsulta");
            entity.Property(e => e.Flcontador)
                .HasDefaultValue(false)
                .HasComment("Indica se a consulta está sendo realizada por um contador.")
                .HasColumnName("flcontador");
            entity.Property(e => e.Fldomiciliotributario).HasColumnName("fldomiciliotributario");
            entity.Property(e => e.Flsituacao)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("Deferida")
                .HasComment("Situação da Consulta: Deferida, Indeferida, Aguardando Análise, Constituida")
                .HasColumnName("flsituacao");
            entity.Property(e => e.Idtipoempresa).HasColumnName("idtipoempresa");
            entity.Property(e => e.Idusuarioinclusao).HasColumnName("idusuarioinclusao");
            entity.Property(e => e.Nmempresa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("nmempresa");
            entity.Property(e => e.Nmsolicitante)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("nmsolicitante");
            entity.Property(e => e.Nrcep)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("nrcep");
            entity.Property(e => e.Nrcpfcnpj)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("nrcpfcnpj");
            entity.Property(e => e.Nrcpfcnpjsolicitante)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("nrcpfcnpjsolicitante");
            entity.Property(e => e.Nrinscricaoimobiliaria)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("nrinscricaoimobiliaria");
            entity.Property(e => e.Nrprotocolo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("nrprotocolo");
            entity.Property(e => e.Vlareacoberta)
                .HasColumnType("decimal(8, 2)")
                .HasColumnName("vlareacoberta");
            entity.Property(e => e.Zozoid).HasColumnName("zozoid");
        });

        modelBuilder.Entity<TbdoctosPermissionarioTaxiAto>(entity =>
        {
            entity.HasKey(e => e.PermTaxiAtosId);

            entity.ToTable("tbdoctos_PermissionarioTaxiAtos");

            entity.Property(e => e.PermTaxiAtosId).ValueGeneratedNever();
            entity.Property(e => e.PermTaxiAtosObs)
                .HasMaxLength(125)
                .IsUnicode(false);
            entity.Property(e => e.PessoaCpf)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PessoaCPF");
            entity.Property(e => e.PessoaDtNascto).HasColumnType("smalldatetime");
            entity.Property(e => e.PessoaNome)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Nome do Permissionario cfe docto Elvis. Por diversas razoes muitos nomes nao são coincidentes. Acentos, Cedilhas, Brancos, erro digitacao, etc.");
            entity.Property(e => e.TbdoctosReferenciaId).HasColumnName("tbdoctosReferenciaId");
            entity.Property(e => e.TermoPermDiarioOficial).HasComment("Numero do Diario Oficial do Municipio no qual foi publicado do Termo de Permissao");
            entity.Property(e => e.TermoPermDtDocto).HasColumnType("smalldatetime");
            entity.Property(e => e.TermoPermDtPublicacao).HasColumnType("smalldatetime");
        });

        modelBuilder.Entity<TbdoctosReferencium>(entity =>
        {
            entity.HasKey(e => e.ReferenciaId);

            entity.ToTable("tbdoctos_Referencia");

            entity.Property(e => e.ReferenciaId).ValueGeneratedNever();
            entity.Property(e => e.DoctoAbaNome)
                .HasMaxLength(125)
                .IsUnicode(false);
            entity.Property(e => e.DoctoDataEnvio).HasColumnType("smalldatetime");
            entity.Property(e => e.DoctoDataImplantacao).HasColumnType("smalldatetime");
            entity.Property(e => e.DoctoNome)
                .HasMaxLength(125)
                .IsUnicode(false);
            entity.Property(e => e.ReferenciaObs)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblLixo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_lixo");

            entity.Property(e => e.Cmc)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("cmc");
        });

        modelBuilder.Entity<TblogservicoRedesim>(entity =>
        {
            entity.HasKey(e => e.Idlog);

            entity.ToTable("tblogservicoREDESIM");

            entity.Property(e => e.Idlog).HasColumnName("idlog");
            entity.Property(e => e.Dtlog)
                .HasColumnType("datetime")
                .HasColumnName("dtlog");
            entity.Property(e => e.Fltipo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("A - Seriviço ativo")
                .HasColumnName("fltipo");
        });

        modelBuilder.Entity<Tbpai>(entity =>
        {
            entity.HasKey(e => e.Idpais);

            entity.ToTable("tbpais");

            entity.Property(e => e.Idpais)
                .ValueGeneratedNever()
                .HasColumnName("idpais");
            entity.Property(e => e.Dssigla)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("dssigla");
            entity.Property(e => e.Nmnacionalidade)
                .HasMaxLength(125)
                .IsUnicode(false)
                .HasColumnName("nmnacionalidade");
            entity.Property(e => e.Nmpais)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("nmpais");
        });

        modelBuilder.Entity<Tbparametro>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbparametro");

            entity.Property(e => e.Dsparametro)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasColumnName("dsparametro");
            entity.Property(e => e.Dsvalor)
                .HasMaxLength(4098)
                .IsUnicode(false)
                .HasColumnName("dsvalor");
            entity.Property(e => e.Fladmin)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("fladmin");
            entity.Property(e => e.Flvalores)
                .IsUnicode(false)
                .HasColumnName("flvalores");
            entity.Property(e => e.Nmparametro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nmparametro");
        });

        modelBuilder.Entity<Tbprocuracaoeletronica>(entity =>
        {
            entity.HasKey(e => e.Idprocuracaoeletronica);

            entity.ToTable("tbprocuracaoeletronica");

            entity.Property(e => e.Idprocuracaoeletronica)
                .ValueGeneratedNever()
                .HasColumnName("idprocuracaoeletronica");
            entity.Property(e => e.Dtconcessao)
                .HasColumnType("datetime")
                .HasColumnName("dtconcessao");
            entity.Property(e => e.Dtrevogacao)
                .HasColumnType("datetime")
                .HasColumnName("dtrevogacao");
            entity.Property(e => e.Idusuario).HasColumnName("idusuario");
            entity.Property(e => e.Idusuarioautorizado).HasColumnName("idusuarioautorizado");
        });

        modelBuilder.Entity<Tbrenato>(entity =>
        {
            entity.HasKey(e => e.Idtabela);

            entity.ToTable("tbrenato");

            entity.Property(e => e.Idtabela).HasColumnName("idtabela");
            entity.Property(e => e.Inscricao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("inscricao");
        });

        modelBuilder.Entity<Tbrevisaodivergencium>(entity =>
        {
            entity.HasKey(e => e.Iddivergencia);

            entity.ToTable("tbrevisaodivergencia");

            entity.Property(e => e.Iddivergencia)
                .ValueGeneratedNever()
                .HasColumnName("iddivergencia");
            entity.Property(e => e.Dsdivergencia)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dsdivergencia");
        });

        modelBuilder.Entity<Tbservico>(entity =>
        {
            entity.HasKey(e => e.Idservico);

            entity.ToTable("tbservico");

            entity.Property(e => e.Idservico)
                .ValueGeneratedNever()
                .HasColumnName("idservico");
            entity.Property(e => e.Ativo).HasColumnName("ativo");
            entity.Property(e => e.Controller)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("controller");
            entity.Property(e => e.Descricao)
                .IsUnicode(false)
                .HasColumnName("descricao");
            entity.Property(e => e.Icone)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("icone");
            entity.Property(e => e.Idcategoria).HasColumnName("idcategoria");
            entity.Property(e => e.Link)
                .IsUnicode(false)
                .HasColumnName("link");
            entity.Property(e => e.Nome)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("nome");
            entity.Property(e => e.Publico).HasColumnName("publico");

            entity.HasOne(d => d.IdcategoriaNavigation).WithMany(p => p.Tbservicos)
                .HasForeignKey(d => d.Idcategoria)
                .HasConstraintName("FK_tbservico_tbcategoria");
        });

        modelBuilder.Entity<Tbservicousuario>(entity =>
        {
            entity.HasKey(e => new { e.Idusuario, e.Idservico });

            entity.ToTable("tbservicousuario");

            entity.Property(e => e.Idusuario).HasColumnName("idusuario");
            entity.Property(e => e.Idservico).HasColumnName("idservico");
        });

        modelBuilder.Entity<Tbsisautonum>(entity =>
        {
            entity.HasKey(e => new { e.Nmtabela, e.Flativo });

            entity.ToTable("tbsisautonum");

            entity.Property(e => e.Nmtabela)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nmtabela");
            entity.Property(e => e.Flativo)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flativo");
            entity.Property(e => e.Nratual).HasColumnName("nratual");
            entity.Property(e => e.Nrinicio).HasColumnName("nrinicio");
            entity.Property(e => e.Nrlimite).HasColumnName("nrlimite");
        });

        modelBuilder.Entity<Tbtemp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbtemp");

            entity.Property(e => e.Cmc).HasColumnName("cmc");
            entity.Property(e => e.Doc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("doc");
        });

        modelBuilder.Entity<TbtribZonaZoneamentoAtividadePergunta>(entity =>
        {
            entity.HasKey(e => new { e.ZozoId, e.Atividade, e.ZotlId, e.Idpergunta, e.Idresposta }).HasName("PK_tbtribZonaZoneamentoAtividadePerguntass");

            entity.ToTable("tbtribZonaZoneamentoAtividadePerguntas");

            entity.Property(e => e.ZozoId)
                .HasComment("ID do Zoneamento")
                .HasColumnName("zozoID");
            entity.Property(e => e.Atividade)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Código da Atividade");
            entity.Property(e => e.ZotlId)
                .HasComment("Tipo da liberação.")
                .HasColumnName("zotlID");
            entity.Property(e => e.Idpergunta)
                .HasComment("ID da pergunta.")
                .HasColumnName("idpergunta");
            entity.Property(e => e.Idresposta)
                .HasComment("ID da resposta")
                .HasColumnName("idresposta");
            entity.Property(e => e.Flacao)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("Avanca")
                .HasComment("Após respondido a pergunta, qual ação deve ser tomada. Avança ou Encerra o questionário.")
                .HasColumnName("flacao");
            entity.Property(e => e.Flexigedocumentacao).HasColumnName("flexigedocumentacao");
            entity.Property(e => e.Nrordem)
                .HasComment("Ordem da pergunta para atividade informada.")
                .HasColumnName("nrordem");

            entity.HasOne(d => d.AtividadeNavigation).WithMany(p => p.TbtribZonaZoneamentoAtividadePergunta)
                .HasForeignKey(d => d.Atividade)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tbtribZonaZoneamentoAtividadePerguntas_TribAtivAtividade");

            entity.HasOne(d => d.IdperguntaNavigation).WithMany(p => p.TbtribZonaZoneamentoAtividadePergunta)
                .HasForeignKey(d => d.Idpergunta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tbtribZonaZoneamentoAtividadePerguntas_tbtribativperguntas");

            entity.HasOne(d => d.IdrespostaNavigation).WithMany(p => p.TbtribZonaZoneamentoAtividadePergunta)
                .HasForeignKey(d => d.Idresposta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tbtribZonaZoneamentoAtividadePerguntas_tbtribativrespostas");

            entity.HasOne(d => d.Zotl).WithMany(p => p.TbtribZonaZoneamentoAtividadePergunta)
                .HasForeignKey(d => d.ZotlId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tbtribZonaZoneamentoAtividadePerguntas_tribZonaTipoLiberacao");

            entity.HasOne(d => d.Zozo).WithMany(p => p.TbtribZonaZoneamentoAtividadePergunta)
                .HasForeignKey(d => d.ZozoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tbtribZonaZoneamentoAtividadePerguntas_tribZonaZoneamento");
        });

        modelBuilder.Entity<Tbtribativpergunta>(entity =>
        {
            entity.HasKey(e => e.Idpergunta).HasName("PK_TribAtivPerguntas");

            entity.ToTable("tbtribativperguntas");

            entity.Property(e => e.Idpergunta)
                .ValueGeneratedNever()
                .HasComment("Identificação do registro.")
                .HasColumnName("idpergunta");
            entity.Property(e => e.CoIdentificadorPergunta)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("co_identificador_pergunta");
            entity.Property(e => e.Dspergunta)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasComment("Descrição da pergunta")
                .HasColumnName("dspergunta");
            entity.Property(e => e.Dssecretaria)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dssecretaria");
            entity.Property(e => e.Flperguntacnaeproibido)
                .HasComment("Indica que a pergunta será exibida quando o resultado da Consulta Prévia der PROIBIDO.")
                .HasColumnName("flperguntacnaeproibido");
            entity.Property(e => e.Nrpergunta)
                .HasComment("Número da pergunta (Se houver)")
                .HasColumnName("nrpergunta");
        });

        modelBuilder.Entity<Tbtribativresposta>(entity =>
        {
            entity.HasKey(e => e.Idresposta);

            entity.ToTable("tbtribativrespostas");

            entity.Property(e => e.Idresposta)
                .ValueGeneratedNever()
                .HasColumnName("idresposta");
            entity.Property(e => e.Dsresposta)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsresposta");
        });

        modelBuilder.Entity<Tbtribgraurisco>(entity =>
        {
            entity.HasKey(e => e.Idrisco);

            entity.ToTable("tbtribgraurisco");

            entity.Property(e => e.Idrisco)
                .ValueGeneratedNever()
                .HasColumnName("idrisco");
            entity.Property(e => e.Dsrisco)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("dsrisco");
            entity.Property(e => e.Nrprioridade).HasColumnName("nrprioridade");
        });

        modelBuilder.Entity<Tbtribtipoempresa>(entity =>
        {
            entity.HasKey(e => e.Idtipoempresa);

            entity.ToTable("tbtribtipoempresa");

            entity.Property(e => e.Idtipoempresa)
                .ValueGeneratedNever()
                .HasColumnName("idtipoempresa");
            entity.Property(e => e.Dsinformacao)
                .IsUnicode(false)
                .HasColumnName("dsinformacao");
            entity.Property(e => e.Dslegislacao)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dslegislacao");
            entity.Property(e => e.Dstipoempresa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dstipoempresa");
            entity.Property(e => e.Fldomiciliotributario)
                .HasDefaultValue(false)
                .HasColumnName("fldomiciliotributario");
            entity.Property(e => e.Flinscricaoobrigatorio)
                .HasDefaultValue(false)
                .HasColumnName("flinscricaoobrigatorio");
            entity.Property(e => e.Flzoneamentoobrigatorio)
                .HasDefaultValue(false)
                .HasColumnName("flzoneamentoobrigatorio");
        });

        modelBuilder.Entity<Tbtribtipoempresadocumento>(entity =>
        {
            entity.HasKey(e => new { e.Idtipoempresa, e.Iddocumento });

            entity.ToTable("tbtribtipoempresadocumento");

            entity.Property(e => e.Idtipoempresa).HasColumnName("idtipoempresa");
            entity.Property(e => e.Iddocumento).HasColumnName("iddocumento");
            entity.Property(e => e.Flativo).HasColumnName("flativo");

            entity.HasOne(d => d.IddocumentoNavigation).WithMany(p => p.Tbtribtipoempresadocumentos)
                .HasForeignKey(d => d.Iddocumento)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tbtribtipoempresadocumento_TribAtivDocumentos");

            entity.HasOne(d => d.IdtipoempresaNavigation).WithMany(p => p.Tbtribtipoempresadocumentos)
                .HasForeignKey(d => d.Idtipoempresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tbtribtipoempresadocumento_tbtribtipoempresa");
        });

        modelBuilder.Entity<Tbwhatsdestino>(entity =>
        {
            entity.ToTable("tbwhatsdestino");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Flativo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flativo");
            entity.Property(e => e.Nrtelefone)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("nrtelefone");
        });

        modelBuilder.Entity<Tbwhatsmensagem>(entity =>
        {
            entity.HasKey(e => e.Idmensagem);

            entity.ToTable("tbwhatsmensagem");

            entity.Property(e => e.Idmensagem).HasColumnName("idmensagem");
            entity.Property(e => e.Chatid).HasColumnName("chatid");
            entity.Property(e => e.Dsmensagem)
                .HasMaxLength(2048)
                .IsUnicode(false)
                .HasColumnName("dsmensagem");
            entity.Property(e => e.Dsservico)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dsservico");
            entity.Property(e => e.Dtinclusao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtinclusao");
            entity.Property(e => e.Flenvio)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flenvio");
            entity.Property(e => e.Idservico).HasColumnName("idservico");
        });

        modelBuilder.Entity<Tbwssolicitacaoconsultaprevium>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbwssolicitacaoconsultaprevia");

            entity.Property(e => e.CoProtocoloRedesim)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("co_protocolo_redesim");
            entity.Property(e => e.Iddadosconsultaprevia).HasColumnName("iddadosconsultaprevia");
            entity.Property(e => e.Json)
                .IsUnicode(false)
                .HasColumnName("json");
        });

        modelBuilder.Entity<Tbwssolicitacaodadosempresa>(entity =>
        {
            entity.HasKey(e => e.Iddadosempresa);

            entity.ToTable("tbwssolicitacaodadosempresa");

            entity.Property(e => e.Iddadosempresa)
                .ValueGeneratedNever()
                .HasColumnName("iddadosempresa");
            entity.Property(e => e.CoProtocoloRedesim)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("co_protocolo_redesim");
            entity.Property(e => e.Json)
                .IsUnicode(false)
                .HasColumnName("json");
        });

        modelBuilder.Entity<Telefone>(entity =>
        {
            entity.HasKey(e => e.Foneid);

            entity.ToTable("Telefone");

            entity.Property(e => e.Foneid).HasColumnName("foneid");
            entity.Property(e => e.Conid).HasColumnName("conid");
            entity.Property(e => e.Numero)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("numero");
        });

        modelBuilder.Entity<Temp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Temp");

            entity.Property(e => e.Cmc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CMC");
            entity.Property(e => e.Novo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOVO");
            entity.Property(e => e.Pub)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PUB");
        });

        modelBuilder.Entity<Temp2>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Temp2");

            entity.Property(e => e.Cmc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CMC");
            entity.Property(e => e.Pub)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PUB");
        });

        modelBuilder.Entity<TempAjuizadum>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tempAjuizada");

            entity.Property(e => e.IdDivida).HasColumnName("idDivida");
        });

        modelBuilder.Entity<TempAlteracaoMovimento>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tempAlteracaoMovimento");

            entity.Property(e => e.Emprcmc).HasColumnName("emprcmc");
            entity.Property(e => e.Movdata)
                .HasColumnType("datetime")
                .HasColumnName("movdata");
            entity.Property(e => e.SituacaoId).HasColumnName("SituacaoID");
            entity.Property(e => e.SituacaoIdanterior).HasColumnName("SituacaoIDAnterior");
        });

        modelBuilder.Entity<TempBonificacao2015>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tempBonificacao2015");

            entity.Property(e => e.InscricaoImobiliaria)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TempCadBem>(entity =>
        {
            entity.HasKey(e => e.Codigo);

            entity.ToTable("tempCadBem");

            entity.Property(e => e.Codigo)
                .ValueGeneratedNever()
                .HasColumnName("codigo");
            entity.Property(e => e.CodSetor).HasColumnName("codSetor");
            entity.Property(e => e.Descricaobem)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("descricaobem");
            entity.Property(e => e.Imagem)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("imagem");

            entity.HasOne(d => d.CodSetorNavigation).WithMany(p => p.TempCadBems)
                .HasForeignKey(d => d.CodSetor)
                .HasConstraintName("FK_tempCadBem_tempSetorBem");
        });

        modelBuilder.Entity<TempCalculaVilaBidloteamento5>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tempCalculaVilaBIDLoteamento5");

            entity.Property(e => e.InscricaoImobiliaria)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TempCalcular>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TempCalcular");

            entity.Property(e => e.InscricaoImobiliaria)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TempCalcularDenovo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TempCalcularDenovo");

            entity.Property(e => e.InscricaoImobiliaria)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TempCalculoEmpresa>(entity =>
        {
            entity.HasKey(e => e.EmprCmc);

            entity.ToTable("tempCalculoEmpresa");

            entity.Property(e => e.EmprCmc)
                .ValueGeneratedNever()
                .HasColumnName("emprCMC");
            entity.Property(e => e.Aa)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("AA");
            entity.Property(e => e.Ac)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("AC");
        });

        modelBuilder.Entity<TempCertidaoAutomatica>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TempCertidaoAutomatica");

            entity.Property(e => e.CertNegId).HasColumnName("certNegID");
            entity.Property(e => e.InscricaoImobiliaria)
                .HasMaxLength(14)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TempCnaemodificado>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TempCNAEModificado");

            entity.Property(e => e.Antigo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Novo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TempEndereco>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tempEndereco");

            entity.Property(e => e.Inscricaoimobiliaria)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("inscricaoimobiliaria");
        });

        modelBuilder.Entity<TempFozhabitaImovei>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("temp_fozhabita_imoveis");

            entity.Property(e => e.Column0).HasColumnName("Column 0");
            entity.Property(e => e.Column1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 1");
            entity.Property(e => e.Column2).HasColumnName("Column 2");
            entity.Property(e => e.Column3)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("Column 3");
            entity.Property(e => e.Column4)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 4");
            entity.Property(e => e.Column5)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 5");
            entity.Property(e => e.Column6)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("Column 6");
        });

        modelBuilder.Entity<TempHorario>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TempHorario");

            entity.Property(e => e.Atividade)
                .HasMaxLength(60)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DataHor).HasColumnType("datetime");
            entity.Property(e => e.HorFim)
                .HasMaxLength(6)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.HorIni)
                .HasMaxLength(6)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NomeSubLocal)
                .HasMaxLength(60)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Situacao)
                .HasMaxLength(16)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TempHorarioSemana>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TempHorarioSemana");

            entity.Property(e => e.Atividade)
                .HasMaxLength(60)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DataHor).HasColumnType("datetime");
            entity.Property(e => e.HorFim)
                .HasMaxLength(6)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.HorIni)
                .HasMaxLength(6)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NomeSubLocal)
                .HasMaxLength(60)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Situacao)
                .HasMaxLength(16)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TempImportInscBxSanepar>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TempImportInscBxSanepar");

            entity.Property(e => e.Inscricao).HasMaxLength(255);
        });

        modelBuilder.Entity<TempInscricao>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tempInscricao");

            entity.Property(e => e.Inscricaoimobiliaria)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("inscricaoimobiliaria");
        });

        modelBuilder.Entity<TempIptu2011>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tempIPTU2011");

            entity.Property(e => e.Edificacaoid).HasColumnName("edificacaoid");
            entity.Property(e => e.Incidencia).HasColumnName("incidencia");
            entity.Property(e => e.Inscricao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("inscricao");
            entity.Property(e => e.Tipobxid).HasColumnName("tipobxid");
            entity.Property(e => e.Tipobxnome)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tipobxnome");
            entity.Property(e => e.Tipotribid).HasColumnName("tipotribid");
            entity.Property(e => e.Tipotribno)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("tipotribno");
            entity.Property(e => e.Valor)
                .HasColumnType("money")
                .HasColumnName("valor");
        });

        modelBuilder.Entity<TempLancIssfixo2011>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tempLancISSFixo2011");

            entity.Property(e => e.Ano).HasColumnName("ano");
            entity.Property(e => e.Cmc).HasColumnName("CMC");
            entity.Property(e => e.Desconto)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Tipo)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TempLimpezaPublica>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TempLimpezaPublica");

            entity.Property(e => e.Area).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.InscricaoImobiliaria)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TempLivroDividaAtiva>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tempLivroDividaAtiva");

            entity.Property(e => e.ConIddivida).HasColumnName("ConIDDivida");
            entity.Property(e => e.DataInclusao).HasColumnType("datetime");
            entity.Property(e => e.DivEmpId).HasColumnName("DivEmpID");
            entity.Property(e => e.ImoIddivida).HasColumnName("ImoIDDivida");
            entity.Property(e => e.LivroDaanoTermo).HasColumnName("LivroDAAnoTermo");
            entity.Property(e => e.LivroDadataCancelamento)
                .HasColumnType("datetime")
                .HasColumnName("LivroDADataCancelamento");
            entity.Property(e => e.LivroDadataInscricao)
                .HasColumnType("datetime")
                .HasColumnName("LivroDADataInscricao");
            entity.Property(e => e.LivroDafolha).HasColumnName("LivroDAFolha");
            entity.Property(e => e.LivroDaid)
                .ValueGeneratedOnAdd()
                .HasColumnName("LivroDAID");
            entity.Property(e => e.LivroDamotivo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("LivroDAMotivo");
            entity.Property(e => e.LivroDamultaDa)
                .HasColumnType("money")
                .HasColumnName("LivroDAMultaDA");
            entity.Property(e => e.LivroDanumero).HasColumnName("LivroDANumero");
            entity.Property(e => e.LivroDanumeroTermo).HasColumnName("LivroDANumeroTermo");
            entity.Property(e => e.LivroDaseq).HasColumnName("LivroDASeq");
            entity.Property(e => e.LivroDasituacao)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("LivroDASituacao");
            entity.Property(e => e.LivroDausuarioCancelamento)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("LivroDAUsuarioCancelamento");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TempLogCdum>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tempLogCDA");

            entity.Property(e => e.BancoNome)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.DataHora).HasColumnType("datetime");
            entity.Property(e => e.EnderecoIp)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EnderecoIP");
            entity.Property(e => e.Iddivida).HasColumnName("IDDIVIDA");
            entity.Property(e => e.Idtipodivida).HasColumnName("IDTIPODIVIDA");
            entity.Property(e => e.LoDaId)
                .ValueGeneratedOnAdd()
                .HasColumnName("LoDaID");
            entity.Property(e => e.ObjetoOcorrencia).HasColumnType("text");
            entity.Property(e => e.Operacao)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TabelaAlias)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.TabelaNome)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Usuario)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TempLote02>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TempLote02");

            entity.Property(e => e.Cmc).HasColumnName("CMC");
            entity.Property(e => e.Data)
                .HasColumnType("datetime")
                .HasColumnName("DATA");
            entity.Property(e => e.M2)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Pub)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PUB");
            entity.Property(e => e.Sit)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SIT");
        });

        modelBuilder.Entity<TempMaioresDevedoresContribuinte>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tempMaioresDevedoresContribuinte");

            entity.Property(e => e.Bairro)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.Cidade)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CorrecaoMonetaria).HasColumnType("money");
            entity.Property(e => e.EndNumero)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Endereco)
                .HasMaxLength(75)
                .IsUnicode(false);
            entity.Property(e => e.Inscricao)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Juros).HasColumnType("money");
            entity.Property(e => e.Multa).HasColumnType("money");
            entity.Property(e => e.MultaDividaAtiva).HasColumnType("money");
            entity.Property(e => e.Nome)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Telefone)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.TelefoneCelular)
                .HasMaxLength(11)
                .IsUnicode(false);
            entity.Property(e => e.TelefoneComercial)
                .HasMaxLength(11)
                .IsUnicode(false);
            entity.Property(e => e.TelefoneResidencial)
                .HasMaxLength(11)
                .IsUnicode(false);
            entity.Property(e => e.ValorPrincipal).HasColumnType("money");
        });

        modelBuilder.Entity<TempProcuradorium>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tempProcuradoria");

            entity.Property(e => e.IdDivida)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("idDivida");
        });

        modelBuilder.Entity<TempRel>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TempRel");

            entity.Property(e => e.InscricaoImobiliaria)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TempRelResumoUtilizaco>(entity =>
        {
            entity.HasKey(e => e.Faixa);

            entity.Property(e => e.Faixa).ValueGeneratedNever();
            entity.Property(e => e.Ate).HasColumnType("money");
            entity.Property(e => e.De).HasColumnType("money");
        });

        modelBuilder.Entity<TempResumoTributo>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.DescricaoBaixa)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.DescricaoTributo)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Soma).HasColumnType("money");
            entity.Property(e => e.TipoBxId).HasColumnName("TipoBxID");
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
        });

        modelBuilder.Entity<TempRocada2011>(entity =>
        {
            entity.ToTable("tempRocada2011");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Inscr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("inscr");
        });

        modelBuilder.Entity<TempSerIturEmpresasSemCmcativ>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tempSerITurEmpresasSemCMCAtiv");

            entity.Property(e => e.Atividade)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.EmprAtivDataFim).HasColumnType("datetime");
            entity.Property(e => e.EmprAtivDataIni).HasColumnType("datetime");
            entity.Property(e => e.EmprAtivPrincipal)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EmprId).HasColumnName("EmprID");
        });

        modelBuilder.Entity<TempSetorBem>(entity =>
        {
            entity.HasKey(e => e.CodSetor);

            entity.ToTable("tempSetorBem");

            entity.Property(e => e.CodSetor)
                .ValueGeneratedNever()
                .HasColumnName("codSetor");
            entity.Property(e => e.NomeSetor)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("nomeSetor");
        });

        modelBuilder.Entity<TempSisObra>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TempSisObra");

            entity.Property(e => e.Cep)
                .HasMaxLength(255)
                .HasColumnName("CEP");
            entity.Property(e => e.IdDocumento).HasColumnName("idDocumento");
        });

        modelBuilder.Entity<TempTaxasVigilancium>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tempTaxasVigilancia");

            entity.Property(e => e.Cmc).HasColumnName("cmc");
            entity.Property(e => e.Data)
                .HasColumnType("datetime")
                .HasColumnName("data");
            entity.Property(e => e.Doc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("doc");
            entity.Property(e => e.Procedimento)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("procedimento");
            entity.Property(e => e.Razao)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("razao");
        });

        modelBuilder.Entity<TempTempTribFiscReclamaco>(entity =>
        {
            entity.HasKey(e => e.ReclId);

            entity.Property(e => e.ReclId)
                .ValueGeneratedNever()
                .HasColumnName("ReclID");
            entity.Property(e => e.Assunto)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.DataInclusao).HasColumnType("datetime");
            entity.Property(e => e.Finalizado)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.RecTransversal1)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.RecTransversal2)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.ReclBairro)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ReclComplemento)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.ReclDados)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ReclLogradouro)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.ReclNumero)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ReclRetorno)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ReclStatus)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ReclTelefoneContato)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TempTransRemovido>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tempTransRemovidos");

            entity.Property(e => e.Conid).HasColumnName("conid");
            entity.Property(e => e.Cpf)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("cpf");
            entity.Property(e => e.Nome)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("nome");
        });

        modelBuilder.Entity<TempTribAtivServico>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tempTribAtivServicos");

            entity.Property(e => e.Atividade)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ServId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ServID");
        });

        modelBuilder.Entity<TempTribAtivTributosEmpresa>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tempTribAtivTributosEmpresas");

            entity.Property(e => e.Atividade)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GeraDividaAutomaticaNoAlvara)
                .HasMaxLength(512)
                .IsUnicode(false);
            entity.Property(e => e.IncideNosDomicilioTributario)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ParamCalcId).HasColumnName("ParamCalcID");
            entity.Property(e => e.PeriodoIncidencia)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.QtdeUf)
                .HasColumnType("money")
                .HasColumnName("QtdeUF");
            entity.Property(e => e.Tcid).HasColumnName("TCID");
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
        });

        modelBuilder.Entity<TempTribEdificacoesEndereco>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TempTribEdificacoesEndereco");

            entity.Property(e => e.CaixaPostal)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Cep)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("CEP");
            entity.Property(e => e.CidadeId).HasColumnName("CidadeID");
            entity.Property(e => e.Complemento)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.Correspondencia)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.EnderecoId).HasColumnName("EnderecoID");
            entity.Property(e => e.Idloteamento).HasColumnName("IDLoteamento");
            entity.Property(e => e.LocalizacaoImovel)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LogradId).HasColumnName("LogradID");
            entity.Property(e => e.Numero)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TempTribEmpresasAtiv>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tempTribEmpresasAtiv");

            entity.Property(e => e.Atividade)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.EmprAtivDataFim).HasColumnType("datetime");
            entity.Property(e => e.EmprAtivDataInI).HasColumnType("datetime");
            entity.Property(e => e.EmprAtivPrincipal)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TempTribEmpresasMovSituacao>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tempTribEmpresasMovSituacao");

            entity.Property(e => e.EmprSituacaoId).HasColumnName("EmprSituacaoID");
            entity.Property(e => e.MovSitCnpj)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MovSitCNPJ");
            entity.Property(e => e.MovSitData).HasColumnType("datetime");
            entity.Property(e => e.MovSitId).HasColumnName("MovSitID");
            entity.Property(e => e.MovSitMotivo)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.MovSitObservacao)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MovSitProtocoloAnt)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.MovSitRazaoSocial)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MovSitTipo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TempVilmar>(entity =>
        {
            entity.HasKey(e => e.EdificacaoId);

            entity.ToTable("TempVilmar");

            entity.Property(e => e.EdificacaoId)
                .ValueGeneratedNever()
                .HasColumnName("EdificacaoID");
        });

        modelBuilder.Entity<TempVistoriasBombeiros2003>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tempVistoriasBombeiros2003");

            entity.Property(e => e.CnpjCpf)
                .HasMaxLength(255)
                .HasColumnName("CNPJ/CPF");
            entity.Property(e => e.DtEmissão)
                .HasColumnType("smalldatetime")
                .HasColumnName("Dt#Emissão");
            entity.Property(e => e.F7).HasMaxLength(255);
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.NumCmc).HasColumnName("Num CMC");
            entity.Property(e => e.Situação).HasMaxLength(255);
            entity.Property(e => e.Tipo).HasMaxLength(255);
        });

        modelBuilder.Entity<TempVistoriasRenovacaoAlvara2003>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tempVistoriasRenovacaoAlvara2003");

            entity.Property(e => e.Cmc).HasColumnName("CMC");
            entity.Property(e => e.CnpjCpf)
                .HasMaxLength(255)
                .HasColumnName("CNPJ/CPF");
            entity.Property(e => e.F7).HasMaxLength(255);
            entity.Property(e => e.Id)
                .HasColumnType("money")
                .HasColumnName("ID");
            entity.Property(e => e.Situação).HasMaxLength(255);
            entity.Property(e => e.Tipo).HasMaxLength(255);
            entity.Property(e => e.Vistoria).HasColumnName("vistoria");
        });

        modelBuilder.Entity<TempVistoriasSaude2003>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tempVistoriasSaude2003");

            entity.Property(e => e.Cmc).HasColumnName("CMC");
            entity.Property(e => e.Endereco)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Nome)
                .HasMaxLength(200)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TempVoltarVencimento>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TempVoltarVencimento");

            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.ImoDivAno).HasColumnName("imoDivAno");
            entity.Property(e => e.ImoDivVencimento).HasMaxLength(255);
            entity.Property(e => e.ImoIddivida).HasColumnName("ImoIDDivida");
            entity.Property(e => e.Script).HasMaxLength(255);
            entity.Property(e => e.VencimentoFormatado)
                .HasColumnType("datetime")
                .HasColumnName("Vencimento Formatado");
        });

        modelBuilder.Entity<TempZonaCnae>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TempZonaCNAE");

            entity.Property(e => e.Cnae)
                .HasMaxLength(255)
                .HasColumnName("CNAE");
            entity.Property(e => e.Descricao).HasMaxLength(255);
            entity.Property(e => e.EbS).HasColumnName("EB\"S");
            entity.Property(e => e.Zc).HasColumnName("ZC");
            entity.Property(e => e.Zcc).HasColumnName("ZCC");
            entity.Property(e => e.Zce).HasColumnName("ZCE");
            entity.Property(e => e.Zcs1).HasColumnName("ZCS1");
            entity.Property(e => e.Zcs2).HasColumnName("ZCS2");
            entity.Property(e => e.Zcs3).HasColumnName("ZCS3");
            entity.Property(e => e.Zcsp).HasColumnName("ZCSP");
            entity.Property(e => e.Ze1).HasColumnName("ZE1");
            entity.Property(e => e.Ze2).HasColumnName("ZE2");
            entity.Property(e => e.Zeis).HasColumnName("ZEIS");
            entity.Property(e => e.Zep).HasColumnName("ZEP");
            entity.Property(e => e.Zfa).HasColumnName("ZFA");
            entity.Property(e => e.Zfc).HasColumnName("ZFC");
            entity.Property(e => e.Zfi).HasColumnName("ZFI");
            entity.Property(e => e.Zi).HasColumnName("ZI");
            entity.Property(e => e.Zie).HasColumnName("ZIE");
            entity.Property(e => e.Zm).HasColumnName("ZM");
            entity.Property(e => e.Zpp).HasColumnName("ZPP");
            entity.Property(e => e.Zr1).HasColumnName("ZR1");
            entity.Property(e => e.Zr2).HasColumnName("ZR2");
            entity.Property(e => e.Zr3).HasColumnName("ZR3");
            entity.Property(e => e.Zr4).HasColumnName("ZR4");
            entity.Property(e => e.Zr5).HasColumnName("ZR5");
            entity.Property(e => e.Zt1).HasColumnName("ZT1");
            entity.Property(e => e.Zt2).HasColumnName("ZT2");
            entity.Property(e => e.Zt3).HasColumnName("ZT3");
            entity.Property(e => e.Zt4).HasColumnName("ZT4");
        });

        modelBuilder.Entity<TempZonaCnae2>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TempZonaCNAE2");

            entity.Property(e => e.Cnae)
                .HasMaxLength(255)
                .HasColumnName("CNAE");
            entity.Property(e => e.Descricao).HasMaxLength(255);
            entity.Property(e => e.EbS).HasColumnName("EB\"S");
            entity.Property(e => e.Zc).HasColumnName("ZC");
            entity.Property(e => e.Zcc).HasColumnName("ZCC");
            entity.Property(e => e.Zce).HasColumnName("ZCE");
            entity.Property(e => e.Zcs1).HasColumnName("ZCS1");
            entity.Property(e => e.Zcs2).HasColumnName("ZCS2");
            entity.Property(e => e.Zcs3).HasColumnName("ZCS3");
            entity.Property(e => e.Zcsp).HasColumnName("ZCSP");
            entity.Property(e => e.Ze1).HasColumnName("ZE1");
            entity.Property(e => e.Ze2).HasColumnName("ZE2");
            entity.Property(e => e.Zeis).HasColumnName("ZEIS");
            entity.Property(e => e.Zep)
                .HasMaxLength(255)
                .HasColumnName("ZEP");
            entity.Property(e => e.Zfa)
                .HasMaxLength(255)
                .HasColumnName("ZFA");
            entity.Property(e => e.Zfc)
                .HasMaxLength(255)
                .HasColumnName("ZFC");
            entity.Property(e => e.Zfi)
                .HasMaxLength(255)
                .HasColumnName("ZFI");
            entity.Property(e => e.Zi).HasColumnName("ZI");
            entity.Property(e => e.Zie)
                .HasMaxLength(255)
                .HasColumnName("ZIE");
            entity.Property(e => e.Zm).HasColumnName("ZM");
            entity.Property(e => e.Zpp)
                .HasMaxLength(255)
                .HasColumnName("ZPP");
            entity.Property(e => e.Zr1).HasColumnName("ZR1");
            entity.Property(e => e.Zr2).HasColumnName("ZR2");
            entity.Property(e => e.Zr3).HasColumnName("ZR3");
            entity.Property(e => e.Zr4).HasColumnName("ZR4");
            entity.Property(e => e.Zr5).HasColumnName("ZR5");
            entity.Property(e => e.Zt1).HasColumnName("ZT1");
            entity.Property(e => e.Zt2).HasColumnName("ZT2");
            entity.Property(e => e.Zt3).HasColumnName("ZT3");
            entity.Property(e => e.Zt4).HasColumnName("ZT4");
        });

        modelBuilder.Entity<TempZonaCnae20>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TempZonaCNAE20");

            entity.Property(e => e.Cnae)
                .HasMaxLength(255)
                .HasColumnName("CNAE");
            entity.Property(e => e.Descricao).HasMaxLength(255);
            entity.Property(e => e.EbS).HasColumnName("EB\"S");
            entity.Property(e => e.Zc).HasColumnName("ZC");
            entity.Property(e => e.Zcc).HasColumnName("ZCC");
            entity.Property(e => e.Zce).HasColumnName("ZCE");
            entity.Property(e => e.Zcs1).HasColumnName("ZCS1");
            entity.Property(e => e.Zcs2).HasColumnName("ZCS2");
            entity.Property(e => e.Zcs3).HasColumnName("ZCS3");
            entity.Property(e => e.Zcsp).HasColumnName("ZCSP");
            entity.Property(e => e.Ze1).HasColumnName("ZE1");
            entity.Property(e => e.Ze2).HasColumnName("ZE2");
            entity.Property(e => e.Zeis).HasColumnName("ZEIS");
            entity.Property(e => e.Zep).HasColumnName("ZEP");
            entity.Property(e => e.Zfa).HasColumnName("ZFA");
            entity.Property(e => e.Zfc).HasColumnName("ZFC");
            entity.Property(e => e.Zfi).HasColumnName("ZFI");
            entity.Property(e => e.Zi).HasColumnName("ZI");
            entity.Property(e => e.Zie).HasColumnName("ZIE");
            entity.Property(e => e.Zm).HasColumnName("ZM");
            entity.Property(e => e.Zpp).HasColumnName("ZPP");
            entity.Property(e => e.Zr1).HasColumnName("ZR1");
            entity.Property(e => e.Zr2).HasColumnName("ZR2");
            entity.Property(e => e.Zr3).HasColumnName("ZR3");
            entity.Property(e => e.Zr4).HasColumnName("ZR4");
            entity.Property(e => e.Zr5).HasColumnName("ZR5");
            entity.Property(e => e.Zt1).HasColumnName("ZT1");
            entity.Property(e => e.Zt2).HasColumnName("ZT2");
            entity.Property(e => e.Zt3).HasColumnName("ZT3");
            entity.Property(e => e.Zt4).HasColumnName("ZT4");
        });

        modelBuilder.Entity<Tempalvaraempresa>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tempalvaraempresa");

            entity.Property(e => e.AlvAreaAberta).HasColumnType("money");
            entity.Property(e => e.AlvAreaConstruida).HasColumnType("money");
            entity.Property(e => e.AlvAtivContratoSoc)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.AlvBairro)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.AlvCargoAss)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AlvCnpjcpf)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AlvCNPJCPF");
            entity.Property(e => e.AlvComplemento)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.AlvData).HasColumnType("datetime");
            entity.Property(e => e.AlvDataFinal).HasColumnType("datetime");
            entity.Property(e => e.AlvDataInicial).HasColumnType("datetime");
            entity.Property(e => e.AlvDepartamento)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.AlvEndereco)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.AlvMsgRodape)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.AlvNomeAss)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AlvNomeFantasia)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.AlvNomeRespTecnico)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.AlvNumRegRespTecnico)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.AlvNumeroLograd)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.AlvProtocolo)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.AlvRazaoSocial)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.AlvRecalcular)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AlvRestricoes).HasColumnType("text");
            entity.Property(e => e.AlvSecretaria)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.AlvTexto).HasColumnType("text");
            entity.Property(e => e.AlvTipoAlvara)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AlvTitulo)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.AlvaraId).HasColumnName("AlvaraID");
            entity.Property(e => e.DataInclusao).HasColumnType("datetime");
            entity.Property(e => e.Idmoeda).HasColumnName("IDMoeda");
            entity.Property(e => e.ServId).HasColumnName("ServID");
            entity.Property(e => e.TalvId).HasColumnName("TAlvID");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Tempbktbdidiarioarrecadacao>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tempbktbdidiarioarrecadacao");

            entity.Property(e => e.CdReceita)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("cdReceita");
            entity.Property(e => e.DsHistorico)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("dsHistorico");
            entity.Property(e => e.DsLoginInclusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsLoginInclusao");
            entity.Property(e => e.DtArrecadacao)
                .HasColumnType("datetime")
                .HasColumnName("dtArrecadacao");
            entity.Property(e => e.IdArrecadacao).ValueGeneratedOnAdd();
            entity.Property(e => e.NmContribuinte)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nmContribuinte");
            entity.Property(e => e.NrAnoArrecadacao).HasColumnName("nrAnoArrecadacao");
            entity.Property(e => e.NrAnoPlanoContas).HasColumnName("nrAnoPlanoContas");
            entity.Property(e => e.NrArrecadacao).HasColumnName("nrArrecadacao");
            entity.Property(e => e.NrDocContribuinte)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("nrDocContribuinte");
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
            entity.Property(e => e.TpCredito)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tpCredito");
            entity.Property(e => e.TpDocContribuinte)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("tpDocContribuinte");
            entity.Property(e => e.VlArrecadacao)
                .HasColumnType("money")
                .HasColumnName("vlArrecadacao");
        });

        modelBuilder.Entity<TempboletoClassificacao>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMPBoletoClassificacao");

            entity.Property(e => e.BoletoClassificacao)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("boletoClassificacao");
        });

        modelBuilder.Entity<TempboletoConsistencium>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMPBoletoConsistencia");

            entity.Property(e => e.BoletoConsistencia)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("boletoConsistencia");
        });

        modelBuilder.Entity<Tempcomp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tempcomp");

            entity.Property(e => e.CompDivImoValor).HasColumnType("money");
            entity.Property(e => e.ImoIddivida).HasColumnName("ImoIDDivida");
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
        });

        modelBuilder.Entity<Tempdebug>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tempdebug");

            entity.Property(e => e.A).HasColumnName("a");
        });

        modelBuilder.Entity<Tempexcluir>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tempexcluir");

            entity.Property(e => e.Vistid).HasColumnName("vistid");
        });

        modelBuilder.Entity<TempextratoRosi17122010>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMPExtratoRosi17122010");

            entity.Property(e => e.Acresc)
                .HasColumnType("money")
                .HasColumnName("acresc");
            entity.Property(e => e.Ano).HasColumnName("ano");
            entity.Property(e => e.Baixa).HasColumnName("baixa");
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Juros)
                .HasColumnType("money")
                .HasColumnName("juros");
            entity.Property(e => e.Parcela).HasColumnName("parcela");
            entity.Property(e => e.Princ)
                .HasColumnType("money")
                .HasColumnName("princ");
            entity.Property(e => e.Tipo).HasColumnName("tipo");
            entity.Property(e => e.Total)
                .HasColumnType("money")
                .HasColumnName("total");
            entity.Property(e => e.Venc)
                .HasColumnType("datetime")
                .HasColumnName("venc");
        });

        modelBuilder.Entity<TempfissAtividadesDocto>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tempfissAtividadesDoctos");

            entity.Property(e => e.AtDoObs).HasColumnType("text");
            entity.Property(e => e.Atividade)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DocId).HasColumnName("DocID");
        });

        modelBuilder.Entity<TempfozHabitaCadastro>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMPFozHabitaCadastros");

            entity.Property(e => e.Cpf)
                .HasMaxLength(255)
                .HasColumnName("CPF");
            entity.Property(e => e.Datacontrato)
                .HasMaxLength(255)
                .HasColumnName("DATACONTRATO");
            entity.Property(e => e.DtTemp)
                .HasMaxLength(255)
                .HasColumnName("dtTemp");
            entity.Property(e => e.Endereco)
                .HasMaxLength(255)
                .HasColumnName("endereco");
            entity.Property(e => e.Inscricao)
                .HasMaxLength(255)
                .HasColumnName("INSCRICAO");
            entity.Property(e => e.NomeRazaoSocial).HasMaxLength(255);
            entity.Property(e => e.Rg).HasColumnName("RG");
            entity.Property(e => e.Tipo)
                .HasMaxLength(255)
                .HasColumnName("TIPO");
        });

        modelBuilder.Entity<TempfozhabitaImovei1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tempfozhabita_imoveis");

            entity.Property(e => e.Contrato)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("contrato");
            entity.Property(e => e.Cpf)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cpf");
            entity.Property(e => e.Endereco)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("endereco");
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Inscricao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("inscricao");
            entity.Property(e => e.Nome)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("nome");
            entity.Property(e => e.Rg)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("rg");
        });

        modelBuilder.Entity<TemplogFozhabitum>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("templog_fozhabita");

            entity.Property(e => e.Column0)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 0");
            entity.Property(e => e.Column1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 1");
            entity.Property(e => e.Column2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 2");
            entity.Property(e => e.Column3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 3");
            entity.Property(e => e.Column4)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 4");
            entity.Property(e => e.Column5)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 5");
        });

        modelBuilder.Entity<TemptribAtividadeTipoAlvaraTributo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("temptribAtividadeTipoAlvaraTributos");

            entity.Property(e => e.Atividade)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.TalvId).HasColumnName("TAlvID");
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
        });

        modelBuilder.Entity<TemptribZonaZoneamentoAtividade>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("temptribZonaZoneamentoAtividade");

            entity.Property(e => e.Atividade)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ZotlId).HasColumnName("zotlID");
            entity.Property(e => e.ZozoId).HasColumnName("zozoID");
        });

        modelBuilder.Entity<Temptribdiveventosdc>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("temptribdiveventosdc");

            entity.Property(e => e.Coniddivida).HasColumnName("coniddivida");
            entity.Property(e => e.DivEmpId).HasColumnName("DivEmpID");
            entity.Property(e => e.DsAcao)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("dsAcao");
            entity.Property(e => e.DsErro)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("dsErro");
            entity.Property(e => e.DsLogin)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("dsLogin");
            entity.Property(e => e.DtEvento)
                .HasColumnType("datetime")
                .HasColumnName("dtEvento");
            entity.Property(e => e.DtInclusao)
                .HasColumnType("datetime")
                .HasColumnName("dtInclusao");
            entity.Property(e => e.DtProcessaemnto).HasColumnName("dtProcessaemnto");
            entity.Property(e => e.FlProcessado).HasColumnName("flProcessado");
            entity.Property(e => e.IdLeiAto).HasColumnName("idLeiAto");
            entity.Property(e => e.IdObjeto).HasColumnName("idObjeto");
            entity.Property(e => e.ImoIddivida).HasColumnName("ImoIDDivida");
            entity.Property(e => e.NmObjeto).HasColumnName("nmObjeto");
            entity.Property(e => e.NrGuid)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("nrGuid");
            entity.Property(e => e.TpEvento)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("tpEvento");
            entity.Property(e => e.VlEvento).HasColumnName("vlEvento");
        });

        modelBuilder.Entity<TemptribdividasimoaJuizadum>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMPTRIBDIVIDASIMOaJUIZADA");

            entity.Property(e => e.AutoInfrId).HasColumnName("AutoInfrID");
            entity.Property(e => e.Correcao).HasColumnType("money");
            entity.Property(e => e.DataCalculo).HasColumnType("datetime");
            entity.Property(e => e.EdiId).HasColumnName("ediID");
            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.Idmoeda).HasColumnName("IDMoeda");
            entity.Property(e => e.ImoDivBxVlrCorrecao).HasColumnType("money");
            entity.Property(e => e.ImoDivBxVlrDesconto).HasColumnType("money");
            entity.Property(e => e.ImoDivBxVlrJuros).HasColumnType("money");
            entity.Property(e => e.ImoDivBxVlrMulta).HasColumnType("money");
            entity.Property(e => e.ImoDivBxVlrMultaDa)
                .HasColumnType("money")
                .HasColumnName("ImoDivBxVlrMultaDA");
            entity.Property(e => e.ImoDivDataBaixa).HasColumnType("datetime");
            entity.Property(e => e.ImoDivDataBloqCorrecao).HasColumnType("datetime");
            entity.Property(e => e.ImoDivDataBloqJuros).HasColumnType("datetime");
            entity.Property(e => e.ImoDivDataBloqMulta).HasColumnType("datetime");
            entity.Property(e => e.ImoDivDataGeracao).HasColumnType("datetime");
            entity.Property(e => e.ImoDivDataUltimaCorrecao).HasColumnType("datetime");
            entity.Property(e => e.ImoDivDescDivida).HasColumnType("money");
            entity.Property(e => e.ImoDivMotivoBaixa).IsUnicode(false);
            entity.Property(e => e.ImoDivObs).IsUnicode(false);
            entity.Property(e => e.ImoDivOrigemLancamento)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ImoDivParcelaUnica)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ImoDivSaiBoleto)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ImoDivTipoLancamentoIptu)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ImoDivTipoLancamentoIPTU");
            entity.Property(e => e.ImoDivValor).HasColumnType("money");
            entity.Property(e => e.ImoDivValorBaixa).HasColumnType("money");
            entity.Property(e => e.ImoDivValorBkp).HasColumnType("money");
            entity.Property(e => e.ImoDivValorHistorico).HasColumnType("money");
            entity.Property(e => e.ImoDivVencimento).HasColumnType("datetime");
            entity.Property(e => e.ImoDivVlrUltimaCorrecao).HasColumnType("money");
            entity.Property(e => e.ImoIddivida).HasColumnName("ImoIDDivida");
            entity.Property(e => e.Juros).HasColumnType("money");
            entity.Property(e => e.Multa).HasColumnType("money");
            entity.Property(e => e.MultaDividaAtiva).HasColumnType("money");
            entity.Property(e => e.TipoBxId).HasColumnName("TipoBxID");
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Testada>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("testadas");

            entity.Property(e => e.Distrito).HasColumnName("distrito");
            entity.Property(e => e.LadoSecao)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("lado_secao");
            entity.Property(e => e.Logradouro).HasColumnName("logradouro");
            entity.Property(e => e.Lote).HasColumnName("lote");
            entity.Property(e => e.Medida)
                .HasColumnType("money")
                .HasColumnName("medida");
            entity.Property(e => e.NumeroTestada).HasColumnName("numero_testada");
            entity.Property(e => e.Quadra).HasColumnName("quadra");
            entity.Property(e => e.Secao).HasColumnName("secao");
            entity.Property(e => e.Setor).HasColumnName("setor");
            entity.Property(e => e.Unidade).HasColumnName("unidade");
        });

        modelBuilder.Entity<TextoPadraoDespacho>(entity =>
        {
            entity.HasKey(e => e.TextoPadDespId);

            entity.ToTable("TextoPadraoDespacho");

            entity.Property(e => e.TextoPadDespId)
                .ValueGeneratedNever()
                .HasComment("Identificação do Texto Padrão do Despacho");
            entity.Property(e => e.TextoPadrao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Descrição do texto padrão do despacho");
        });

        modelBuilder.Entity<TipoBaixa>(entity =>
        {
            entity.HasKey(e => e.TipoBaixaId).HasName("PK_ModalidadesBaixa");

            entity.ToTable("TipoBaixa");

            entity.Property(e => e.TipoBaixaId).HasColumnName("TipoBaixaID");
            entity.Property(e => e.TbcodTribunal).HasColumnName("TBCodTribunal");
            entity.Property(e => e.TipoBaixaNome)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<TipoConcessao>(entity =>
        {
            entity.HasKey(e => e.IdTipoConcessao);

            entity.ToTable("TipoConcessao");

            entity.Property(e => e.IdTipoConcessao)
                .ValueGeneratedNever()
                .HasColumnName("idTipoConcessao");
            entity.Property(e => e.TipoConcessao1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tipoConcessao");
        });

        modelBuilder.Entity<TipoImovel>(entity =>
        {
            entity.HasKey(e => e.TpImovelId);

            entity.ToTable("TipoImovel");

            entity.Property(e => e.TpImovelId)
                .ValueGeneratedNever()
                .HasColumnName("TpImovelID");
            entity.Property(e => e.TpImovelDesc)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TipoLicitacao>(entity =>
        {
            entity.HasKey(e => e.TplId);

            entity.ToTable("TipoLicitacao");

            entity.Property(e => e.TplId).ValueGeneratedNever();
            entity.Property(e => e.TplDescricao)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.TplPadraoTce)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength()
                .HasColumnName("tplPadraoTCE");
        });

        modelBuilder.Entity<TipoProcesso>(entity =>
        {
            entity.HasKey(e => e.TipoProId);

            entity.ToTable("TipoProcesso");

            entity.Property(e => e.TipoProId)
                .ValueGeneratedNever()
                .HasColumnName("TipoProID");
            entity.Property(e => e.TipoProDiasTramite)
                .HasDefaultValue(0)
                .HasComment("dias previstos para a tramitação do processo");
            entity.Property(e => e.TipoProNome)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValue("");

            entity.HasMany(d => d.DocProDocs).WithMany(p => p.DocProTipos)
                .UsingEntity<Dictionary<string, object>>(
                    "ConfigDocProcesso",
                    r => r.HasOne<Documento>().WithMany()
                        .HasForeignKey("DocProDocId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_ConfigDocProcessos_Documentos"),
                    l => l.HasOne<TipoProcesso>().WithMany()
                        .HasForeignKey("DocProTipoId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_ConfigDocProcessos_TipoProcesso"),
                    j =>
                    {
                        j.HasKey("DocProTipoId", "DocProDocId");
                        j.ToTable("ConfigDocProcessos");
                        j.IndexerProperty<int>("DocProTipoId").HasColumnName("DocProTipoID");
                        j.IndexerProperty<int>("DocProDocId").HasColumnName("DocProDocID");
                    });
        });

        modelBuilder.Entity<TipoSaidum>(entity =>
        {
            entity.HasKey(e => e.Tsid);

            entity.Property(e => e.Tsid)
                .ValueGeneratedNever()
                .HasColumnName("TSId");
            entity.Property(e => e.TsbaixaEst)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TSBaixaEst");
            entity.Property(e => e.TscalculaKm)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TSCalculaKm");
            entity.Property(e => e.Tsdescricao)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("TSDescricao");
        });

        modelBuilder.Entity<TipologrBrasilium>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tipologrBRASILIA");

            entity.Property(e => e.Abreviatura)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("abreviatura");
            entity.Property(e => e.Descricao)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("descricao");
            entity.Property(e => e.Nome)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("nome");
            entity.Property(e => e.Tipologrbrid).HasColumnName("tipologrbrid");
        });

        modelBuilder.Entity<TiposDocumento>(entity =>
        {
            entity.HasKey(e => e.IdtipoDocumento);

            entity.ToTable("TiposDocumento");

            entity.Property(e => e.IdtipoDocumento).HasColumnName("IDTipoDocumento");
            entity.Property(e => e.NomeDocumento)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TiposDocumentosOficiai>(entity =>
        {
            entity.HasKey(e => e.IdtipoDoc).HasName("PK_TiposDocumentos");

            entity.Property(e => e.IdtipoDoc)
                .ValueGeneratedNever()
                .HasColumnName("IDTipoDoc");
            entity.Property(e => e.NomeDoc)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TmpBonificacao>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpBonificacao");

            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.Host)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Usuario)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TmpContrib5Uffi>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpContrib5UFFI");

            entity.Property(e => e.ConCnpjcpf)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ConCNPJCPF");
            entity.Property(e => e.ConNome)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ValorCorrigido).HasColumnType("decimal(38, 4)");
            entity.Property(e => e.ValorOriginal).HasColumnType("money");
        });

        modelBuilder.Entity<TmpContribIsencao>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpContribIsencao");

            entity.Property(e => e.Concnpjcpf)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("concnpjcpf");
        });

        modelBuilder.Entity<TmpContribuitesImobiliaria>(entity =>
        {
            entity.HasKey(e => e.Conid).HasName("PK__TmpContribuites___6ED0223E");

            entity.ToTable("TmpContribuites_Imobiliarias");

            entity.Property(e => e.Conid)
                .ValueGeneratedNever()
                .HasColumnName("conid");
            entity.Property(e => e.Concnpjcpf)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("concnpjcpf");
            entity.Property(e => e.Connome)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("connome");
            entity.Property(e => e.Connomefantasia)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("connomefantasia");
            entity.Property(e => e.Qtdeimo).HasColumnName("qtdeimo");
        });

        modelBuilder.Entity<TmpCragiig>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpCRAGIIG");

            entity.Property(e => e.Cda)
                .HasMaxLength(255)
                .HasColumnName("CDA");
            entity.Property(e => e.DataAutorizacao).HasMaxLength(255);
            entity.Property(e => e.DataCancelamento).HasMaxLength(255);
            entity.Property(e => e.DataDesistência).HasMaxLength(255);
            entity.Property(e => e.Devedor).HasMaxLength(255);
            entity.Property(e => e.Documento).HasMaxLength(255);
            entity.Property(e => e.Ocorrência).HasMaxLength(255);
            entity.Property(e => e.Ordem).HasColumnName("ordem");
        });

        modelBuilder.Entity<TmpCruza>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpCruza");

            entity.Property(e => e.ConCnpjcpf)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("ConCNPJCPF");
            entity.Property(e => e.ConNome)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.InscricaoImobiliaria)
                .HasMaxLength(14)
                .IsUnicode(false);
            entity.Property(e => e.Proprietario)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Relogios).HasColumnName("relogios");
            entity.Property(e => e.Responsavel)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TmpDiviComposicaoBugadum>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpDiviComposicaoBugada");

            entity.Property(e => e.ImoIddivida).HasColumnName("ImoIDDivida");
        });

        modelBuilder.Entity<TmpDividasCancelar5Uffi>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpDividasCancelar5UFFI");

            entity.Property(e => e.Cadastro)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ConCnpjcpf)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ConCNPJCPF");
            entity.Property(e => e.ConNome)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.IdDivida).HasColumnName("idDivida");
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
            entity.Property(e => e.TipoTribNome)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Valor).HasColumnType("money");
            entity.Property(e => e.ValorCorrigido).HasColumnType("money");
        });

        modelBuilder.Entity<TmpDividasCancelar5UffiNew>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpDividasCancelar5UFFI_New");

            entity.Property(e => e.Cadastro)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ConCnpjcpf)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ConCNPJCPF");
            entity.Property(e => e.ConNome)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.IdDivida).HasColumnName("idDivida");
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
            entity.Property(e => e.TipoTribNome)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Valor).HasColumnType("money");
            entity.Property(e => e.ValorCorrigido).HasColumnType("money");
        });

        modelBuilder.Entity<TmpDividasEmpresa>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TmpDividasEmpresa");

            entity.Property(e => e.ConCnpjcpf)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("ConCNPJCPF");
            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.ConNome)
                .HasMaxLength(120)
                .IsUnicode(false);
            entity.Property(e => e.Tipo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
            entity.Property(e => e.TipoTribNome)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ValorDivAtualizado).HasColumnType("money");
            entity.Property(e => e.Vencimento).HasColumnType("datetime");
        });

        modelBuilder.Entity<TmpDividasRelReginaldo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_Dividas_relReginaldo");

            entity.Property(e => e.ImoIddivida).HasColumnName("ImoIDDivida");
        });

        modelBuilder.Entity<TmpEmpresa>(entity =>
        {
            entity.HasKey(e => e.EmprCmc).HasName("PK_EmprCMC");

            entity.ToTable("TmpEmpresa");

            entity.HasIndex(e => e.ConId, "IX_TmpEmpresa").HasFillFactor(90);

            entity.Property(e => e.EmprCmc).ValueGeneratedNever();
            entity.Property(e => e.ConCnpjcpf)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("ConCNPJCPF");
            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.ConNome)
                .HasMaxLength(120)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TmpImportarVistoria>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpImportarVistorias");

            entity.Property(e => e.Cmc)
                .HasMaxLength(255)
                .HasColumnName("CMC");
            entity.Property(e => e.Data).HasColumnType("datetime");
            entity.Property(e => e.Documento)
                .HasMaxLength(255)
                .HasColumnName("documento");
            entity.Property(e => e.EmprCmc).HasColumnName("EmprCMC");
            entity.Property(e => e.Procedimento)
                .HasMaxLength(255)
                .HasColumnName("procedimento");
            entity.Property(e => e.RazãoSocial)
                .HasMaxLength(255)
                .HasColumnName("Razão social");
        });

        modelBuilder.Entity<TmpInscricaoFracaoIdeal>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_Inscricao_FracaoIdeal");

            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
        });

        modelBuilder.Entity<TmpInscricaoGrafica>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Tmp_inscricao_grafica");

            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
        });

        modelBuilder.Entity<TmpInscricaoSuspensao>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpInscricaoSuspensao");

            entity.Property(e => e.Inscricao)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NrAno).HasColumnName("nrAno");
        });

        modelBuilder.Entity<TmpIptu>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpIPTU");

            entity.Property(e => e.Baixa)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.InscricaoImobiliaria)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Tributo)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Valor2010).HasColumnType("money");
            entity.Property(e => e.Valor2011).HasColumnType("money");
            entity.Property(e => e.Valor2012).HasColumnType("money");
            entity.Property(e => e.Valor2013).HasColumnType("money");
        });

        modelBuilder.Entity<TmpLancamento16>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpLancamento16");

            entity.Property(e => e.Ano).HasMaxLength(255);
            entity.Property(e => e.Atividade).HasMaxLength(255);
            entity.Property(e => e.Bairro).HasMaxLength(255);
            entity.Property(e => e.Cep)
                .HasMaxLength(255)
                .HasColumnName("CEP");
            entity.Property(e => e.Cme)
                .HasMaxLength(255)
                .HasColumnName("CME");
            entity.Property(e => e.Cnpj)
                .HasMaxLength(255)
                .HasColumnName("CNPJ");
            entity.Property(e => e.Divdesconto)
                .HasColumnType("decimal(12, 3)")
                .HasColumnName("divdesconto");
            entity.Property(e => e.Divnovodesconto)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("divnovodesconto");
            entity.Property(e => e.Divvalor)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("divvalor");
            entity.Property(e => e.Divvalortotal)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("divvalortotal");
            entity.Property(e => e.Divvalortotalnovo)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("divvalortotalnovo");
            entity.Property(e => e.F20).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.Logradouro).HasMaxLength(255);
            entity.Property(e => e.Mes).HasMaxLength(255);
            entity.Property(e => e.NDeParcelas)
                .HasMaxLength(255)
                .HasColumnName("N# de Parcelas");
            entity.Property(e => e.NomeFantasia)
                .HasMaxLength(255)
                .HasColumnName("Nome Fantasia");
            entity.Property(e => e.Numero).HasMaxLength(255);
            entity.Property(e => e.Numparcela).HasColumnName("numparcela");
            entity.Property(e => e.RazãoSocial)
                .HasMaxLength(255)
                .HasColumnName("Razão Social");
            entity.Property(e => e.Situacao).HasMaxLength(255);
            entity.Property(e => e.Tipo).HasMaxLength(255);
            entity.Property(e => e.Tipobxid).HasColumnName("tipobxid");
            entity.Property(e => e.Tipotribiddesconto).HasColumnName("tipotribiddesconto");
            entity.Property(e => e.ValorTotal).HasColumnName("Valor Total");
            entity.Property(e => e.Vencimento).HasMaxLength(255);
        });

        modelBuilder.Entity<TmpLancamento316>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpLancamento316");

            entity.Property(e => e.Ano).HasMaxLength(255);
            entity.Property(e => e.Atividade).HasMaxLength(255);
            entity.Property(e => e.Bairro).HasMaxLength(255);
            entity.Property(e => e.Cep)
                .HasMaxLength(255)
                .HasColumnName("CEP");
            entity.Property(e => e.Cme)
                .HasMaxLength(255)
                .HasColumnName("CME");
            entity.Property(e => e.Cnpj)
                .HasMaxLength(255)
                .HasColumnName("CNPJ");
            entity.Property(e => e.Divdesconto)
                .HasColumnType("decimal(12, 3)")
                .HasColumnName("divdesconto");
            entity.Property(e => e.Divnovodesconto)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("divnovodesconto");
            entity.Property(e => e.Divvalor)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("divvalor");
            entity.Property(e => e.Divvalortotal)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("divvalortotal");
            entity.Property(e => e.Divvalortotalnovo)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("divvalortotalnovo");
            entity.Property(e => e.F20).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.Logradouro).HasMaxLength(255);
            entity.Property(e => e.Mes).HasMaxLength(255);
            entity.Property(e => e.NDeParcelas)
                .HasMaxLength(255)
                .HasColumnName("N# de Parcelas");
            entity.Property(e => e.NomeFantasia)
                .HasMaxLength(255)
                .HasColumnName("Nome Fantasia");
            entity.Property(e => e.Numero).HasMaxLength(255);
            entity.Property(e => e.Numparcela).HasColumnName("numparcela");
            entity.Property(e => e.RazãoSocial)
                .HasMaxLength(255)
                .HasColumnName("Razão Social");
            entity.Property(e => e.Situacao).HasMaxLength(255);
            entity.Property(e => e.Tipo).HasMaxLength(255);
            entity.Property(e => e.Tipobxid).HasColumnName("tipobxid");
            entity.Property(e => e.Tipotribiddesconto).HasColumnName("tipotribiddesconto");
            entity.Property(e => e.ValorTotal).HasColumnName("Valor Total");
            entity.Property(e => e.Vencimento).HasMaxLength(255);
        });

        modelBuilder.Entity<TmpLancamento6>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpLancamento6");

            entity.Property(e => e.Ano).HasMaxLength(255);
            entity.Property(e => e.Atividade).HasMaxLength(255);
            entity.Property(e => e.Bairro).HasMaxLength(255);
            entity.Property(e => e.Cep)
                .HasMaxLength(255)
                .HasColumnName("CEP");
            entity.Property(e => e.Cme)
                .HasMaxLength(255)
                .HasColumnName("CME");
            entity.Property(e => e.Cnpj)
                .HasMaxLength(255)
                .HasColumnName("CNPJ");
            entity.Property(e => e.Desc)
                .HasMaxLength(255)
                .HasColumnName("DESC");
            entity.Property(e => e.Divdesconto)
                .HasColumnType("decimal(12, 3)")
                .HasColumnName("divdesconto");
            entity.Property(e => e.Divnovodesconto)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("divnovodesconto");
            entity.Property(e => e.Divvalor)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("divvalor");
            entity.Property(e => e.Divvalortotal)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("divvalortotal");
            entity.Property(e => e.F20).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.F21).HasMaxLength(255);
            entity.Property(e => e.Logradouro).HasMaxLength(255);
            entity.Property(e => e.Mes).HasMaxLength(255);
            entity.Property(e => e.NDeParcelas)
                .HasMaxLength(255)
                .HasColumnName("N# de Parcelas");
            entity.Property(e => e.NomeFantasia)
                .HasMaxLength(255)
                .HasColumnName("Nome Fantasia");
            entity.Property(e => e.Numero).HasMaxLength(255);
            entity.Property(e => e.Numparcela).HasColumnName("numparcela");
            entity.Property(e => e.RazãoSocial)
                .HasMaxLength(255)
                .HasColumnName("Razão Social");
            entity.Property(e => e.Situacao).HasMaxLength(255);
            entity.Property(e => e.Tipo).HasMaxLength(255);
            entity.Property(e => e.Tipobxid).HasColumnName("tipobxid");
            entity.Property(e => e.Tipotribiddesconto).HasColumnName("tipotribiddesconto");
            entity.Property(e => e.ValorTotal).HasColumnName("Valor Total");
            entity.Property(e => e.Vencimento).HasMaxLength(255);
        });

        modelBuilder.Entity<TmpLogsistema>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Tmp_logsistema");

            entity.Property(e => e.CnpjCpfInscricao)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Contribuinte)
                .HasMaxLength(278)
                .IsUnicode(false);
            entity.Property(e => e.LoSiData).HasColumnType("datetime");
            entity.Property(e => e.LoSiHost)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LoSiOcorrencia)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.LoSiTipoOcorrencia)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LoSiUsuario)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogId)
                .ValueGeneratedOnAdd()
                .HasColumnName("LogID");
        });

        modelBuilder.Entity<TmpSimuladoIptu2015>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpSimuladoIPTU2015");

            entity.Property(e => e.Edifedificacaoenglobamento).HasColumnName("edifedificacaoenglobamento");
            entity.Property(e => e.Incidencia).HasColumnName("incidencia");
            entity.Property(e => e.Inscricaoimobiliaria)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SimuAno).HasColumnName("simuAno");
            entity.Property(e => e.SimuId).HasColumnName("simuId");
            entity.Property(e => e.Valor).HasColumnType("money");
        });

        modelBuilder.Entity<TmpTestetbDivDiarioArrecadacao>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpTestetbDivDiarioArrecadacao");

            entity.Property(e => e.BxBanco)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("bxBanco");
            entity.Property(e => e.CdReceita)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("cdReceita");
            entity.Property(e => e.DsHistorico)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("dsHistorico");
            entity.Property(e => e.DsLoginInclusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsLoginInclusao");
            entity.Property(e => e.DtArrecadacao)
                .HasColumnType("datetime")
                .HasColumnName("dtArrecadacao");
            entity.Property(e => e.IdArrecadacao).ValueGeneratedOnAdd();
            entity.Property(e => e.NmContribuinte)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("nmContribuinte");
            entity.Property(e => e.NrAnoArrecadacao).HasColumnName("nrAnoArrecadacao");
            entity.Property(e => e.NrAnoPlanoContas).HasColumnName("nrAnoPlanoContas");
            entity.Property(e => e.NrArrecadacao).HasColumnName("nrArrecadacao");
            entity.Property(e => e.NrDocContribuinte)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("nrDocContribuinte");
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
            entity.Property(e => e.TpCredito)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tpCredito");
            entity.Property(e => e.TpDocContribuinte)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("tpDocContribuinte");
            entity.Property(e => e.VlArrecadacao)
                .HasColumnType("money")
                .HasColumnName("vlArrecadacao");
        });

        modelBuilder.Entity<TmpTribAdvertencium>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpTribAdvertencia");

            entity.Property(e => e.Inscricao)
                .HasMaxLength(14)
                .IsUnicode(false);
            entity.Property(e => e.Motivo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Protocolo)
                .HasMaxLength(8)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TmpTribAtivTributosEmpresa>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpTribAtivTributosEmpresas");

            entity.Property(e => e.Atividade)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GeraDividaAutomaticaNoAlvara)
                .HasMaxLength(512)
                .IsUnicode(false);
            entity.Property(e => e.IncideNosDomicilioTributario)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ParamCalcId).HasColumnName("ParamCalcID");
            entity.Property(e => e.PeriodoIncidencia)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.QtdeUf)
                .HasColumnType("money")
                .HasColumnName("QtdeUF");
            entity.Property(e => e.Tcid).HasColumnName("TCID");
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
        });

        modelBuilder.Entity<TmpTribConsultaPrevium>(entity =>
        {
            entity.HasKey(e => e.Idconsulta);

            entity.ToTable("tmpTribConsultaPrevia");

            entity.Property(e => e.Idconsulta).HasColumnName("idconsulta");
            entity.Property(e => e.Atividade)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("atividade");
            entity.Property(e => e.Inscricaoimobiliaria)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("inscricaoimobiliaria");
            entity.Property(e => e.Pergunta).HasColumnName("pergunta");
            entity.Property(e => e.Resposta)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("resposta");
        });

        modelBuilder.Entity<TmpTribEdificacoes2015>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpTribEdificacoes2015");

            entity.Property(e => e.AcabExtId).HasColumnName("AcabExtID");
            entity.Property(e => e.AcabIntId).HasColumnName("AcabIntID");
            entity.Property(e => e.AgrupaId).HasColumnName("AgrupaID");
            entity.Property(e => e.CategId).HasColumnName("CategID");
            entity.Property(e => e.CobertId).HasColumnName("CobertID");
            entity.Property(e => e.DataInclusao).HasColumnType("datetime");
            entity.Property(e => e.DenoId).HasColumnName("DenoID");
            entity.Property(e => e.EdifAlvara)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EdifAreaCoberta).HasColumnType("money");
            entity.Property(e => e.EdifAreaConstruida).HasColumnType("money");
            entity.Property(e => e.EdifBloco)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EdifCaracteristica)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.EdifCentroGrauLat)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("edifCentroGrauLat");
            entity.Property(e => e.EdifCentroGrauLon)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("edifCentroGrauLon");
            entity.Property(e => e.EdifCep)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("edifCEP");
            entity.Property(e => e.EdifComplemento)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.EdifContinuacaoTerreno)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EdifDtInicioConstrucao).HasColumnType("datetime");
            entity.Property(e => e.EdifDtMatricula)
                .HasColumnType("datetime")
                .HasColumnName("edifDtMatricula");
            entity.Property(e => e.EdifDtParalizacaoConstrucao).HasColumnType("datetime");
            entity.Property(e => e.EdifDtUltTransfPropriedade).HasColumnType("datetime");
            entity.Property(e => e.EdifEconomia)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EdifFracaoIdealEdificacao).HasColumnType("numeric(19, 6)");
            entity.Property(e => e.EdifMatricula)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EdifMotivoAlteracao)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("edifMotivoAlteracao");
            entity.Property(e => e.EdifNumAptoSalaLoja)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.EdifNumeracao)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.EdifObs).HasColumnType("text");
            entity.Property(e => e.EdifSituacao)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.EletricaId).HasColumnName("EletricaID");
            entity.Property(e => e.EsquadriasId).HasColumnName("EsquadriasID");
            entity.Property(e => e.EstConservId).HasColumnName("EstConservID");
            entity.Property(e => e.EstrutId).HasColumnName("EstrutID");
            entity.Property(e => e.ForroId).HasColumnName("ForroID");
            entity.Property(e => e.Idloteamento).HasColumnName("IDLoteamento");
            entity.Property(e => e.Idplanta).HasColumnName("IDPlanta");
            entity.Property(e => e.InciId).HasColumnName("InciID");
            entity.Property(e => e.InscricaoImobiliaria)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.InscricaoImobiliariaGeo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("InscricaoImobiliariaGEO");
            entity.Property(e => e.LogradId).HasColumnName("LogradID");
            entity.Property(e => e.NumeroCadastroCanadas).HasColumnName("NumeroCadastroCANADAS");
            entity.Property(e => e.OcupaId).HasColumnName("OcupaID");
            entity.Property(e => e.ParedeId).HasColumnName("ParedeID");
            entity.Property(e => e.PisoId).HasColumnName("PisoID");
            entity.Property(e => e.PosicaoId).HasColumnName("PosicaoID");
            entity.Property(e => e.ProcId).HasColumnName("ProcID");
            entity.Property(e => e.SituacaoId).HasColumnName("SituacaoID");
            entity.Property(e => e.TerrenoId).HasColumnName("TerrenoID");
            entity.Property(e => e.TipoConId).HasColumnName("TipoConID");
            entity.Property(e => e.UsoId).HasColumnName("UsoID");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UtilizId).HasColumnName("UtilizID");
            entity.Property(e => e.ValorVenalCalculo).HasColumnType("money");
            entity.Property(e => e.ValorVenalEdificacao).HasColumnType("money");
            entity.Property(e => e.ValorVenalTerrenoParaEdificacao).HasColumnType("money");
        });

        modelBuilder.Entity<TmpTribEdificacoes2021>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpTribEdificacoes2021");

            entity.Property(e => e.AcabExtId).HasColumnName("AcabExtID");
            entity.Property(e => e.AcabIntId).HasColumnName("AcabIntID");
            entity.Property(e => e.AgrupaId).HasColumnName("AgrupaID");
            entity.Property(e => e.CategId).HasColumnName("CategID");
            entity.Property(e => e.CobertId).HasColumnName("CobertID");
            entity.Property(e => e.DataInclusao).HasColumnType("datetime");
            entity.Property(e => e.DenoId).HasColumnName("DenoID");
            entity.Property(e => e.Dsobservacao)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dsobservacao");
            entity.Property(e => e.EdifAlvara)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EdifAreaCoberta).HasColumnType("money");
            entity.Property(e => e.EdifAreaConstruida).HasColumnType("money");
            entity.Property(e => e.EdifBloco)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EdifCaracteristica)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.EdifCentroGrauLat)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("edifCentroGrauLat");
            entity.Property(e => e.EdifCentroGrauLon)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("edifCentroGrauLon");
            entity.Property(e => e.EdifCep)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("edifCEP");
            entity.Property(e => e.EdifComplemento)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.EdifContinuacaoTerreno)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EdifDataAtualizacaoEndereco).HasColumnType("datetime");
            entity.Property(e => e.EdifDtInicioConstrucao).HasColumnType("datetime");
            entity.Property(e => e.EdifDtMatricula)
                .HasColumnType("datetime")
                .HasColumnName("edifDtMatricula");
            entity.Property(e => e.EdifDtParalizacaoConstrucao).HasColumnType("datetime");
            entity.Property(e => e.EdifDtUltTransfPropriedade).HasColumnType("datetime");
            entity.Property(e => e.EdifEconomia)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EdifFracaoIdealEdificacao).HasColumnType("numeric(19, 6)");
            entity.Property(e => e.EdifMatricula)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EdifMotivoAlteracao)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("edifMotivoAlteracao");
            entity.Property(e => e.EdifNumAptoSalaLoja)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.EdifNumeracao)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.EdifObs).HasColumnType("text");
            entity.Property(e => e.EdifSituacao)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.EdifUsuarioAtualizacaoEndereco)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.EletricaId).HasColumnName("EletricaID");
            entity.Property(e => e.EsquadriasId).HasColumnName("EsquadriasID");
            entity.Property(e => e.EstConservId).HasColumnName("EstConservID");
            entity.Property(e => e.EstrutId).HasColumnName("EstrutID");
            entity.Property(e => e.Flconferido).HasColumnName("flconferido");
            entity.Property(e => e.ForroId).HasColumnName("ForroID");
            entity.Property(e => e.Idloteamento).HasColumnName("IDLoteamento");
            entity.Property(e => e.Idplanta).HasColumnName("IDPlanta");
            entity.Property(e => e.Idusuariorevisao).HasColumnName("idusuariorevisao");
            entity.Property(e => e.InciId).HasColumnName("InciID");
            entity.Property(e => e.InscricaoImobiliaria)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.InscricaoImobiliariaGeo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("InscricaoImobiliariaGEO");
            entity.Property(e => e.LogradId).HasColumnName("LogradID");
            entity.Property(e => e.NumeroCadastroCanadas).HasColumnName("NumeroCadastroCANADAS");
            entity.Property(e => e.OcupaId).HasColumnName("OcupaID");
            entity.Property(e => e.ParedeId).HasColumnName("ParedeID");
            entity.Property(e => e.PisoId).HasColumnName("PisoID");
            entity.Property(e => e.PosicaoId).HasColumnName("PosicaoID");
            entity.Property(e => e.ProcId).HasColumnName("ProcID");
            entity.Property(e => e.SituacaoId).HasColumnName("SituacaoID");
            entity.Property(e => e.TerrenoId).HasColumnName("TerrenoID");
            entity.Property(e => e.TipoConId).HasColumnName("TipoConID");
            entity.Property(e => e.TmpIdlogradouro).HasColumnName("tmp_idlogradouro");
            entity.Property(e => e.TmpIdzoneamento).HasColumnName("tmp_idzoneamento");
            entity.Property(e => e.UsoId).HasColumnName("UsoID");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UtilizId).HasColumnName("UtilizID");
            entity.Property(e => e.ValorVenalCalculo).HasColumnType("money");
            entity.Property(e => e.ValorVenalEdificacao).HasColumnType("money");
            entity.Property(e => e.ValorVenalTerrenoParaEdificacao).HasColumnType("money");
        });

        modelBuilder.Entity<TmpTribEdificacoes2023>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpTribEdificacoes2023");

            entity.Property(e => e.AcabExtId).HasColumnName("AcabExtID");
            entity.Property(e => e.AcabIntId).HasColumnName("AcabIntID");
            entity.Property(e => e.AgrupaId).HasColumnName("AgrupaID");
            entity.Property(e => e.CategId).HasColumnName("CategID");
            entity.Property(e => e.CobertId).HasColumnName("CobertID");
            entity.Property(e => e.DataInclusao).HasColumnType("datetime");
            entity.Property(e => e.DenoId).HasColumnName("DenoID");
            entity.Property(e => e.Dsobservacao)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dsobservacao");
            entity.Property(e => e.EdifAlvara)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EdifAreaCoberta).HasColumnType("money");
            entity.Property(e => e.EdifAreaConstruida).HasColumnType("money");
            entity.Property(e => e.EdifBloco)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EdifCaracteristica)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.EdifCentroGrauLat)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("edifCentroGrauLat");
            entity.Property(e => e.EdifCentroGrauLon)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("edifCentroGrauLon");
            entity.Property(e => e.EdifCep)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("edifCEP");
            entity.Property(e => e.EdifComplemento)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.EdifContinuacaoTerreno)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EdifDataAtualizacaoEndereco).HasColumnType("datetime");
            entity.Property(e => e.EdifDtInicioConstrucao).HasColumnType("datetime");
            entity.Property(e => e.EdifDtMatricula)
                .HasColumnType("datetime")
                .HasColumnName("edifDtMatricula");
            entity.Property(e => e.EdifDtParalizacaoConstrucao).HasColumnType("datetime");
            entity.Property(e => e.EdifDtUltTransfPropriedade).HasColumnType("datetime");
            entity.Property(e => e.EdifEconomia)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EdifFracaoIdealEdificacao).HasColumnType("numeric(19, 6)");
            entity.Property(e => e.EdifMatricula)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EdifMotivoAlteracao)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("edifMotivoAlteracao");
            entity.Property(e => e.EdifNumAptoSalaLoja)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.EdifNumeracao)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.EdifObs).HasColumnType("text");
            entity.Property(e => e.EdifSituacao)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.EdifUsuarioAtualizacaoEndereco)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.EletricaId).HasColumnName("EletricaID");
            entity.Property(e => e.EsquadriasId).HasColumnName("EsquadriasID");
            entity.Property(e => e.EstConservId).HasColumnName("EstConservID");
            entity.Property(e => e.EstrutId).HasColumnName("EstrutID");
            entity.Property(e => e.Flconferido).HasColumnName("flconferido");
            entity.Property(e => e.ForroId).HasColumnName("ForroID");
            entity.Property(e => e.Idloteamento).HasColumnName("IDLoteamento");
            entity.Property(e => e.Idplanta).HasColumnName("IDPlanta");
            entity.Property(e => e.Idusuariorevisao).HasColumnName("idusuariorevisao");
            entity.Property(e => e.InciId).HasColumnName("InciID");
            entity.Property(e => e.InscricaoImobiliaria)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.InscricaoImobiliariaGeo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("InscricaoImobiliariaGEO");
            entity.Property(e => e.LogradId).HasColumnName("LogradID");
            entity.Property(e => e.NumeroCadastroCanadas).HasColumnName("NumeroCadastroCANADAS");
            entity.Property(e => e.OcupaId).HasColumnName("OcupaID");
            entity.Property(e => e.ParedeId).HasColumnName("ParedeID");
            entity.Property(e => e.PisoId).HasColumnName("PisoID");
            entity.Property(e => e.PosicaoId).HasColumnName("PosicaoID");
            entity.Property(e => e.ProcId).HasColumnName("ProcID");
            entity.Property(e => e.SituacaoId).HasColumnName("SituacaoID");
            entity.Property(e => e.TerrenoId).HasColumnName("TerrenoID");
            entity.Property(e => e.TipoConId).HasColumnName("TipoConID");
            entity.Property(e => e.TmpIdlogradouro).HasColumnName("tmp_idlogradouro");
            entity.Property(e => e.TmpIdzoneamento).HasColumnName("tmp_idzoneamento");
            entity.Property(e => e.UsoId).HasColumnName("UsoID");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UtilizId).HasColumnName("UtilizID");
            entity.Property(e => e.ValorVenalCalculo).HasColumnType("money");
            entity.Property(e => e.ValorVenalEdificacao).HasColumnType("money");
            entity.Property(e => e.ValorVenalTerrenoParaEdificacao).HasColumnType("money");
        });

        modelBuilder.Entity<TmpTribEmpresasAtivAtributo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpTribEmpresasAtivAtributos");

            entity.Property(e => e.Atividade)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.AtividadeAtributoId).ValueGeneratedOnAdd();
            entity.Property(e => e.DsValor)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsValor");
        });

        modelBuilder.Entity<TmpTribEmpresasTipoAlvaraTributo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpTribEmpresasTipoAlvaraTributos");

            entity.Property(e => e.EmprCmc).HasColumnName("EmprCMC");
            entity.Property(e => e.TalvId).HasColumnName("TAlvID");
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
        });

        modelBuilder.Entity<TmpTribEmpresasTributo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpTribEmpresasTributos");

            entity.Property(e => e.DataInclusao).HasColumnType("datetime");
            entity.Property(e => e.EmprCmc).HasColumnName("EmprCMC");
            entity.Property(e => e.GeraDividaAutomaticaNoAlvara)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.HostInclusao)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.IncideNosDomicilioTributario)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.IsenDataFim).HasColumnType("datetime");
            entity.Property(e => e.IsenDataIni).HasColumnType("datetime");
            entity.Property(e => e.IsenMotivo)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Isento)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ParamCalcId).HasColumnName("ParamCalcID");
            entity.Property(e => e.PeriodoIncidencia)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.QtdeBaseCalculo).HasColumnType("money");
            entity.Property(e => e.QtdeUf)
                .HasColumnType("money")
                .HasColumnName("QtdeUF");
            entity.Property(e => e.QtdeUnidMed).HasColumnType("money");
            entity.Property(e => e.Tcid).HasColumnName("TCID");
            entity.Property(e => e.TipoBxId).HasColumnName("TipoBxID");
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TmpTribIntegraContabil>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpTribIntegraContabil");

            entity.Property(e => e.CdReceita)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("cdReceita");
            entity.Property(e => e.ContaCantabil2)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DtArrecadacao)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dtArrecadacao");
            entity.Property(e => e.VlrArrecadado).HasColumnType("money");
        });

        modelBuilder.Entity<TmpTribNotificacaoDivida>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpTribNotificacaoDividas");

            entity.Property(e => e.BoleNossoNumero)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("boleNossoNumero");
            entity.Property(e => e.ComDesconto)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ConIddivida).HasColumnName("ConIDDivida");
            entity.Property(e => e.DataInclusao).HasColumnType("datetime");
            entity.Property(e => e.DivEmpId).HasColumnName("DivEmpID");
            entity.Property(e => e.Entregue)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Host)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("host");
            entity.Property(e => e.ImoIddivida).HasColumnName("ImoIDDivida");
            entity.Property(e => e.NotificacaoData).HasColumnType("datetime");
            entity.Property(e => e.NotificacaoId)
                .ValueGeneratedOnAdd()
                .HasColumnName("NotificacaoID");
            entity.Property(e => e.TextoId).HasColumnName("TextoID");
            entity.Property(e => e.TextoIdcapa).HasColumnName("TextoIDCapa");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TmpTribProtocoloAlteracao>(entity =>
        {
            entity.HasKey(e => e.ProtAltId).HasName("PK__Tmp_TribProtocol__4BA6E192");

            entity.ToTable("Tmp_TribProtocoloAlteracao");

            entity.Property(e => e.ProtAltId).HasColumnName("ProtAltID");
            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.Data).HasColumnType("datetime");
            entity.Property(e => e.DataInclusao).HasColumnType("datetime");
            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.EmprCmc).HasColumnName("EmprCMC");
            entity.Property(e => e.MotivoAlteracao)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ProtAltIdtabela).HasColumnName("ProtAltIDTabela");
            entity.Property(e => e.ProtAltTabela)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Protocolo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Usuario)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TmpTribTerreno2015>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpTribTerreno2015");

            entity.Property(e => e.AreaAbertaCoberta).HasColumnType("money");
            entity.Property(e => e.AreaUsoComum).HasColumnType("money");
            entity.Property(e => e.CalcaId).HasColumnName("CalcaID");
            entity.Property(e => e.FundoId).HasColumnName("FundoID");
            entity.Property(e => e.InciId).HasColumnName("InciID");
            entity.Property(e => e.JuriId).HasColumnName("JuriID");
            entity.Property(e => e.LimTid).HasColumnName("LimTID");
            entity.Property(e => e.LocQid).HasColumnName("LocQID");
            entity.Property(e => e.LoteCondominio)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LoteLoteamento)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.NumeroCadastroCanadas).HasColumnName("NumeroCadastroCANADAS");
            entity.Property(e => e.PatrId).HasColumnName("PatrID");
            entity.Property(e => e.PedoId).HasColumnName("PedoID");
            entity.Property(e => e.QuadraId).HasColumnName("QuadraID");
            entity.Property(e => e.QuadraLoteamento)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.TerrAreaTerreno).HasColumnType("money");
            entity.Property(e => e.TerrLote)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.TerrObs).HasColumnType("text");
            entity.Property(e => e.TerrReferenciaAnterior)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TerrenoId).HasColumnName("TerrenoID");
            entity.Property(e => e.TipoCondominio)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TopoId).HasColumnName("TopoID");
            entity.Property(e => e.ValorVenalTerreno).HasColumnType("money");
            entity.Property(e => e.VegeId).HasColumnName("VegeID");
        });

        modelBuilder.Entity<TmpTribTerreno2021>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpTribTerreno2021");

            entity.Property(e => e.AreaAbertaCoberta).HasColumnType("money");
            entity.Property(e => e.AreaUsoComum).HasColumnType("money");
            entity.Property(e => e.CalcaId).HasColumnName("CalcaID");
            entity.Property(e => e.FundoId).HasColumnName("FundoID");
            entity.Property(e => e.InciId).HasColumnName("InciID");
            entity.Property(e => e.JuriId).HasColumnName("JuriID");
            entity.Property(e => e.LimTid).HasColumnName("LimTID");
            entity.Property(e => e.LocQid).HasColumnName("LocQID");
            entity.Property(e => e.LoteCondominio)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LoteLoteamento)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.NumeroCadastroCanadas).HasColumnName("NumeroCadastroCANADAS");
            entity.Property(e => e.PatrId).HasColumnName("PatrID");
            entity.Property(e => e.PedoId).HasColumnName("PedoID");
            entity.Property(e => e.QuadraId).HasColumnName("QuadraID");
            entity.Property(e => e.QuadraLoteamento)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.TerrAreaTerreno).HasColumnType("money");
            entity.Property(e => e.TerrLote)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.TerrObs).HasColumnType("text");
            entity.Property(e => e.TerrReferenciaAnterior)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TerrenoId).HasColumnName("TerrenoID");
            entity.Property(e => e.TipoCondominio)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TopoId).HasColumnName("TopoID");
            entity.Property(e => e.ValorVenalTerreno).HasColumnType("money");
            entity.Property(e => e.VegeId).HasColumnName("VegeID");
        });

        modelBuilder.Entity<TmpTribTerreno2023>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpTribTerreno2023");

            entity.Property(e => e.AreaAbertaCoberta).HasColumnType("money");
            entity.Property(e => e.AreaUsoComum).HasColumnType("money");
            entity.Property(e => e.CalcaId).HasColumnName("CalcaID");
            entity.Property(e => e.FundoId).HasColumnName("FundoID");
            entity.Property(e => e.InciId).HasColumnName("InciID");
            entity.Property(e => e.JuriId).HasColumnName("JuriID");
            entity.Property(e => e.LimTid).HasColumnName("LimTID");
            entity.Property(e => e.LocQid).HasColumnName("LocQID");
            entity.Property(e => e.LoteCondominio)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LoteLoteamento)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.NumeroCadastroCanadas).HasColumnName("NumeroCadastroCANADAS");
            entity.Property(e => e.PatrId).HasColumnName("PatrID");
            entity.Property(e => e.PedoId).HasColumnName("PedoID");
            entity.Property(e => e.QuadraId).HasColumnName("QuadraID");
            entity.Property(e => e.QuadraLoteamento)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.TerrAreaTerreno).HasColumnType("money");
            entity.Property(e => e.TerrLote)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.TerrObs).HasColumnType("text");
            entity.Property(e => e.TerrReferenciaAnterior)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TerrenoId).HasColumnName("TerrenoID");
            entity.Property(e => e.TipoCondominio)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TopoId).HasColumnName("TopoID");
            entity.Property(e => e.ValorVenalTerreno).HasColumnType("money");
            entity.Property(e => e.VegeId).HasColumnName("VegeID");
        });

        modelBuilder.Entity<TmpVencimentoCon>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpVencimentoCon");

            entity.Property(e => e.Iddivida).HasColumnName("IDDivida");
            entity.Property(e => e.Vencimento).HasColumnType("datetime");
        });

        modelBuilder.Entity<TmpVencimentoEmp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpVencimentoEmp");

            entity.Property(e => e.Iddivida).HasColumnName("IDDivida");
            entity.Property(e => e.Vencimento).HasColumnType("datetime");
        });

        modelBuilder.Entity<TmpVencimentoImo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpVencimentoImo");

            entity.Property(e => e.Iddivida).HasColumnName("IDDivida");
            entity.Property(e => e.Vencimento).HasColumnType("datetime");
        });

        modelBuilder.Entity<TmpVistorias2013>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_Vistorias2013");

            entity.Property(e => e.Cmc).HasColumnName("CMC");
            entity.Property(e => e.Doc)
                .HasMaxLength(255)
                .HasColumnName("DOC");
            entity.Property(e => e.Procedimento)
                .HasMaxLength(255)
                .HasColumnName("procedimento");
            entity.Property(e => e.RazãoSocial)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("Razão social");
        });

        modelBuilder.Entity<TmpVistoriasNr>(entity =>
        {
            entity.HasKey(e => e.NrVistoria);

            entity.ToTable("tmp_vistoriasNr");

            entity.Property(e => e.NrVistoria).HasColumnName("nrVistoria");
            entity.Property(e => e.Cmc).HasColumnName("cmc");
        });

        modelBuilder.Entity<TmpVistoriasO>(entity =>
        {
            entity.HasKey(e => e.IdVistoria).HasName("PK_tmp_VistoriasOs_1");

            entity.ToTable("tmp_VistoriasOs");

            entity.Property(e => e.Cmc).HasColumnName("cmc");
            entity.Property(e => e.Data).HasColumnName("data");
        });

        modelBuilder.Entity<TmpbaixaDeducao>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TMPBaixaDeducao");

            entity.Property(e => e.BaixaId).HasColumnName("BaixaID");
            entity.Property(e => e.IdDeducao).HasColumnName("idDeducao");
            entity.Property(e => e.NmBaixa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nmBaixa");
            entity.Property(e => e.NmDeducao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nmDeducao");
        });

        modelBuilder.Entity<Tmpcnpj1002>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TMPCnpj1002");

            entity.Property(e => e.Cnpj)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cnpj");
        });

        modelBuilder.Entity<Tmpevento>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpeventos");

            entity.Property(e => e.Imoiddivida).HasColumnName("imoiddivida");
        });

        modelBuilder.Entity<TmplancamentoIsento16>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmplancamentoIsento16");

            entity.Property(e => e.Ano).HasMaxLength(255);
            entity.Property(e => e.Atividade).HasMaxLength(255);
            entity.Property(e => e.Bairro).HasMaxLength(255);
            entity.Property(e => e.Cep)
                .HasMaxLength(255)
                .HasColumnName("CEP");
            entity.Property(e => e.Cme)
                .HasMaxLength(255)
                .HasColumnName("CME");
            entity.Property(e => e.Cnpj)
                .HasMaxLength(255)
                .HasColumnName("CNPJ");
            entity.Property(e => e.Divdesconto)
                .HasColumnType("decimal(12, 3)")
                .HasColumnName("divdesconto");
            entity.Property(e => e.Divnovodesconto)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("divnovodesconto");
            entity.Property(e => e.Divvalor)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("divvalor");
            entity.Property(e => e.Divvalortotal)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("divvalortotal");
            entity.Property(e => e.Divvalortotalnovo)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("divvalortotalnovo");
            entity.Property(e => e.F20).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.Logradouro).HasMaxLength(255);
            entity.Property(e => e.Mes).HasMaxLength(255);
            entity.Property(e => e.NDeParcelas)
                .HasMaxLength(255)
                .HasColumnName("N# de Parcelas");
            entity.Property(e => e.NomeFantasia)
                .HasMaxLength(255)
                .HasColumnName("Nome Fantasia");
            entity.Property(e => e.Numero).HasMaxLength(255);
            entity.Property(e => e.Numparcela).HasColumnName("numparcela");
            entity.Property(e => e.RazãoSocial)
                .HasMaxLength(255)
                .HasColumnName("Razão Social");
            entity.Property(e => e.Situacao).HasMaxLength(255);
            entity.Property(e => e.Tipo).HasMaxLength(255);
            entity.Property(e => e.Tipobxid).HasColumnName("tipobxid");
            entity.Property(e => e.Tipotribiddesconto).HasColumnName("tipotribiddesconto");
            entity.Property(e => e.ValorTotal).HasColumnName("Valor Total");
            entity.Property(e => e.Vencimento).HasMaxLength(255);
        });

        modelBuilder.Entity<TmplancamentoIsento316>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmplancamentoIsento316");

            entity.Property(e => e.Ano).HasMaxLength(255);
            entity.Property(e => e.Atividade).HasMaxLength(255);
            entity.Property(e => e.Bairro).HasMaxLength(255);
            entity.Property(e => e.Cep)
                .HasMaxLength(255)
                .HasColumnName("CEP");
            entity.Property(e => e.Cme)
                .HasMaxLength(255)
                .HasColumnName("CME");
            entity.Property(e => e.Cnpj)
                .HasMaxLength(255)
                .HasColumnName("CNPJ");
            entity.Property(e => e.Divdesconto)
                .HasColumnType("decimal(12, 3)")
                .HasColumnName("divdesconto");
            entity.Property(e => e.Divnovodesconto)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("divnovodesconto");
            entity.Property(e => e.Divvalor)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("divvalor");
            entity.Property(e => e.Divvalortotal)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("divvalortotal");
            entity.Property(e => e.Divvalortotalnovo)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("divvalortotalnovo");
            entity.Property(e => e.F20).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.Logradouro).HasMaxLength(255);
            entity.Property(e => e.Mes).HasMaxLength(255);
            entity.Property(e => e.NDeParcelas)
                .HasMaxLength(255)
                .HasColumnName("N# de Parcelas");
            entity.Property(e => e.NomeFantasia)
                .HasMaxLength(255)
                .HasColumnName("Nome Fantasia");
            entity.Property(e => e.Numero).HasMaxLength(255);
            entity.Property(e => e.Numparcela).HasColumnName("numparcela");
            entity.Property(e => e.RazãoSocial)
                .HasMaxLength(255)
                .HasColumnName("Razão Social");
            entity.Property(e => e.Situacao).HasMaxLength(255);
            entity.Property(e => e.Tipo).HasMaxLength(255);
            entity.Property(e => e.Tipobxid).HasColumnName("tipobxid");
            entity.Property(e => e.Tipotribiddesconto).HasColumnName("tipotribiddesconto");
            entity.Property(e => e.ValorTotal).HasColumnName("Valor Total");
            entity.Property(e => e.Vencimento).HasMaxLength(255);
        });

        modelBuilder.Entity<TmplancamentoIsento6>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmplancamentoIsento6");

            entity.Property(e => e.Ano).HasMaxLength(255);
            entity.Property(e => e.Atividade).HasMaxLength(255);
            entity.Property(e => e.Bairro).HasMaxLength(255);
            entity.Property(e => e.Cep)
                .HasMaxLength(255)
                .HasColumnName("CEP");
            entity.Property(e => e.Cme)
                .HasMaxLength(255)
                .HasColumnName("CME");
            entity.Property(e => e.Cnpj)
                .HasMaxLength(255)
                .HasColumnName("CNPJ");
            entity.Property(e => e.Desc)
                .HasMaxLength(255)
                .HasColumnName("DESC");
            entity.Property(e => e.Desconto).HasMaxLength(255);
            entity.Property(e => e.Divdesconto)
                .HasColumnType("decimal(12, 3)")
                .HasColumnName("divdesconto");
            entity.Property(e => e.Divnovodesconto)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("divnovodesconto");
            entity.Property(e => e.Divvalor)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("divvalor");
            entity.Property(e => e.Divvalortotal)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("divvalortotal");
            entity.Property(e => e.Divvalortotalnovo)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("divvalortotalnovo");
            entity.Property(e => e.F20).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.Logradouro).HasMaxLength(255);
            entity.Property(e => e.Mes).HasMaxLength(255);
            entity.Property(e => e.NDeParcelas)
                .HasMaxLength(255)
                .HasColumnName("N# de Parcelas");
            entity.Property(e => e.NomeFantasia)
                .HasMaxLength(255)
                .HasColumnName("Nome Fantasia");
            entity.Property(e => e.Numero).HasMaxLength(255);
            entity.Property(e => e.Numparcela).HasColumnName("numparcela");
            entity.Property(e => e.RazãoSocial)
                .HasMaxLength(255)
                .HasColumnName("Razão Social");
            entity.Property(e => e.Situacao).HasMaxLength(255);
            entity.Property(e => e.Tipo).HasMaxLength(255);
            entity.Property(e => e.Tipobxid).HasColumnName("tipobxid");
            entity.Property(e => e.Tipotribiddesconto).HasColumnName("tipotribiddesconto");
            entity.Property(e => e.Valor).HasMaxLength(255);
            entity.Property(e => e.ValorTotal)
                .HasMaxLength(255)
                .HasColumnName("Valor Total");
            entity.Property(e => e.Vencimento).HasMaxLength(255);
        });

        modelBuilder.Entity<Tmprefazer>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmprefazer");

            entity.Property(e => e.ConIddivida).HasColumnName("ConIDDivida");
            entity.Property(e => e.DivEmpId).HasColumnName("DivEmpID");
            entity.Property(e => e.DsAcao)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("dsAcao");
            entity.Property(e => e.DsErro)
                .IsUnicode(false)
                .HasColumnName("dsErro");
            entity.Property(e => e.DsLogin)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsLogin");
            entity.Property(e => e.DtEvento)
                .HasColumnType("datetime")
                .HasColumnName("dtEvento");
            entity.Property(e => e.DtInclusao)
                .HasColumnType("datetime")
                .HasColumnName("dtInclusao");
            entity.Property(e => e.DtProcessamento)
                .HasColumnType("datetime")
                .HasColumnName("dtProcessamento");
            entity.Property(e => e.FlProcessado).HasColumnName("flProcessado");
            entity.Property(e => e.IdEvento).ValueGeneratedOnAdd();
            entity.Property(e => e.IdObjeto).HasColumnName("idObjeto");
            entity.Property(e => e.ImoIddivida).HasColumnName("ImoIDDivida");
            entity.Property(e => e.NmObjeto)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("nmObjeto");
            entity.Property(e => e.NrGuid)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nrGuid");
            entity.Property(e => e.TpEvento)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("tpEvento");
            entity.Property(e => e.VlEvento)
                .HasColumnType("money")
                .HasColumnName("vlEvento");
        });

        modelBuilder.Entity<TmpsislogdadosCon>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpsislogdadosCon");

            entity.Property(e => e.Datahora)
                .HasColumnType("datetime")
                .HasColumnName("datahora");
            entity.Property(e => e.Iddivida).HasColumnName("iddivida");
            entity.Property(e => e.Objetoocorrencia)
                .HasColumnType("text")
                .HasColumnName("objetoocorrencia");
            entity.Property(e => e.Vencimento)
                .HasColumnType("datetime")
                .HasColumnName("vencimento");
        });

        modelBuilder.Entity<TmpsislogdadosEmp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpsislogdadosEmp");

            entity.Property(e => e.Datahora)
                .HasColumnType("datetime")
                .HasColumnName("datahora");
            entity.Property(e => e.Iddivida).HasColumnName("iddivida");
            entity.Property(e => e.Objetoocorrencia)
                .HasColumnType("text")
                .HasColumnName("objetoocorrencia");
            entity.Property(e => e.Vencimento)
                .HasColumnType("datetime")
                .HasColumnName("vencimento");
        });

        modelBuilder.Entity<TmpsislogdadosImo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpsislogdadosImo");

            entity.Property(e => e.Datahora)
                .HasColumnType("datetime")
                .HasColumnName("datahora");
            entity.Property(e => e.Iddivida).HasColumnName("iddivida");
            entity.Property(e => e.Objetoocorrencia)
                .HasColumnType("text")
                .HasColumnName("objetoocorrencia");
            entity.Property(e => e.Vencimento)
                .HasColumnType("datetime")
                .HasColumnName("vencimento");
        });

        modelBuilder.Entity<TmptribAtividadeTipoAlvaraTributo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmptribAtividadeTipoAlvaraTributos");

            entity.Property(e => e.Atividade)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.TalvId).HasColumnName("TAlvID");
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
        });

        modelBuilder.Entity<TmptribDivEvento>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmptribDivEventos");

            entity.Property(e => e.ConIddivida).HasColumnName("ConIDDivida");
            entity.Property(e => e.DivEmpId).HasColumnName("DivEmpID");
            entity.Property(e => e.DsAcao)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("dsAcao");
            entity.Property(e => e.DsErro)
                .IsUnicode(false)
                .HasColumnName("dsErro");
            entity.Property(e => e.DsLogin)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsLogin");
            entity.Property(e => e.DtEvento)
                .HasColumnType("datetime")
                .HasColumnName("dtEvento");
            entity.Property(e => e.DtInclusao)
                .HasColumnType("datetime")
                .HasColumnName("dtInclusao");
            entity.Property(e => e.DtProcessamento)
                .HasColumnType("datetime")
                .HasColumnName("dtProcessamento");
            entity.Property(e => e.FlProcessado).HasColumnName("flProcessado");
            entity.Property(e => e.IdEvento).ValueGeneratedOnAdd();
            entity.Property(e => e.IdObjeto).HasColumnName("idObjeto");
            entity.Property(e => e.ImoIddivida).HasColumnName("ImoIDDivida");
            entity.Property(e => e.NmObjeto)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("nmObjeto");
            entity.Property(e => e.NrGuid)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nrGuid");
            entity.Property(e => e.TpEvento)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("tpEvento");
            entity.Property(e => e.VlEvento)
                .HasColumnType("money")
                .HasColumnName("vlEvento");
        });

        modelBuilder.Entity<TribAcabamentoExterno>(entity =>
        {
            entity.HasKey(e => e.AcabExtId);

            entity.ToTable("TribAcabamentoExterno", tb => tb.HasTrigger("TgTribAcabamentoExternoUpdate"));

            entity.Property(e => e.AcabExtId).HasColumnName("AcabExtID");
            entity.Property(e => e.AcabExtFator).HasColumnType("money");
            entity.Property(e => e.AcabExtNome)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribAcabamentoInterno>(entity =>
        {
            entity.HasKey(e => e.AcabIntId);

            entity.ToTable("TribAcabamentoInterno", tb => tb.HasTrigger("TgTribAcabamentoInternoUpdate"));

            entity.Property(e => e.AcabIntId).HasColumnName("AcabIntID");
            entity.Property(e => e.AcabIntFator).HasColumnType("money");
            entity.Property(e => e.AcabIntNome)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribAcompAntTipoMotivo>(entity =>
        {
            entity.HasKey(e => e.AcoTipoId);

            entity.ToTable("TribAcompAntTipoMotivo");

            entity.Property(e => e.AcoTipoId)
                .ValueGeneratedNever()
                .HasColumnName("AcoTipoID");
            entity.Property(e => e.AcoTipoDescricao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<TribAcompAnterior>(entity =>
        {
            entity.HasKey(e => e.AcoId);

            entity.ToTable("TribAcompAnterior");

            entity.HasIndex(e => e.ConId, "IX_ConID").HasFillFactor(90);

            entity.HasIndex(e => e.EdificacaoId, "IX_EdificacaoID").HasFillFactor(90);

            entity.HasIndex(e => e.EmprCmc, "IX_EmprCmc").HasFillFactor(90);

            entity.HasIndex(e => new { e.EmprCmc, e.AcoId, e.AcoTipoId }, "_dta_index_TribAcompAnterior_5_138795902__K3_K1_K5_6_7_8_9_10").HasFillFactor(90);

            entity.Property(e => e.AcoId).HasColumnName("AcoID");
            entity.Property(e => e.AcoAtendido)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength();
            entity.Property(e => e.AcoData).HasColumnType("datetime");
            entity.Property(e => e.AcoObservacao)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.AcoTipoDoc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Notificação Fiscal, Auto de Infração, Outros, Termo de Inicio, Devolução, Retenção, Editais, P-Apreensão e Vistoria ");
            entity.Property(e => e.AcoTipoId).HasColumnName("AcoTipoID");
            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.DataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");

            entity.HasOne(d => d.AcoTipo).WithMany(p => p.TribAcompAnteriors)
                .HasForeignKey(d => d.AcoTipoId)
                .HasConstraintName("FK_TribAcompAnterior_TribAcompAntTipoMotivo");

            entity.HasOne(d => d.Edificacao).WithMany(p => p.TribAcompAnteriors)
                .HasForeignKey(d => d.EdificacaoId)
                .HasConstraintName("FK_TribAcompAnterior_TribEdificacoes");

            entity.HasOne(d => d.EmprCmcNavigation).WithMany(p => p.TribAcompAnteriors)
                .HasForeignKey(d => d.EmprCmc)
                .HasConstraintName("FK_TribAcompAnterior_TribEmpresas");
        });

        modelBuilder.Entity<TribAcrescimo>(entity =>
        {
            entity.HasKey(e => e.AcrescId);

            entity.ToTable("TribAcrescimo");

            entity.Property(e => e.AcrescId)
                .ValueGeneratedNever()
                .HasColumnName("AcrescID");
            entity.Property(e => e.AcrescAte).HasColumnType("datetime");
            entity.Property(e => e.AcrescCorrigirDividasAte)
                .HasComment("Apos esta data o sistema não irá calcular correção para as dividas (axo)")
                .HasColumnType("datetime");
            entity.Property(e => e.AcrescDe).HasColumnType("datetime");
            entity.Property(e => e.AcrescJuros).HasColumnType("money");
            entity.Property(e => e.AcrescMoedaCorrecao)
                .HasDefaultValue((short)1)
                .HasComment("Moeda utilizada na Correção dos Acrescimos");
            entity.Property(e => e.AcrescMulta).HasColumnType("money");
            entity.Property(e => e.AcrescMulta30).HasColumnType("money");
            entity.Property(e => e.AcrescMulta60).HasColumnType("money");
            entity.Property(e => e.AcrescMultaDa)
                .HasColumnType("money")
                .HasColumnName("AcrescMultaDA");
            entity.Property(e => e.AcrescMultaPropDiasVencido)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Sim")
                .IsFixedLength()
                .HasComment("Informa se a multa é proporcional aos dias vencido (so multa e nao multa 30/60)");
            entity.Property(e => e.AcrescTipoCorrecao)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.AcrescTipoJuros)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("Mensal")
                .HasComment("Tipo de Juros = 'Mensal' ou Diário");
        });

        modelBuilder.Entity<TribAdvertencia>(entity =>
        {
            entity.HasKey(e => e.AdvertId);

            entity.HasIndex(e => e.NumeroDoc, "IX_TribAdvertencias_NumeroDoc");

            entity.Property(e => e.AdvertId).HasColumnName("AdvertID");
            entity.Property(e => e.Data).HasColumnType("datetime");
            entity.Property(e => e.Motivo).HasColumnType("text");
            entity.Property(e => e.NrProcessoNumAno)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("nrProcessoNumAno");
            entity.Property(e => e.NumeroDoc)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ProcId)
                .HasComment("Código de Identificação do Processo")
                .HasColumnName("ProcID");
            entity.Property(e => e.Situacao)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("TRAMITE")
                .HasComment("Situação da Advertencia: TRAMITE/CONCLUIDO");
            entity.Property(e => e.TipoAdvertId).HasColumnName("TipoAdvertID");
            entity.Property(e => e.Usuario)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Proc).WithMany(p => p.TribAdvertencia)
                .HasForeignKey(d => d.ProcId)
                .HasConstraintName("FK_TribAdvertencias_Processos");

            entity.HasOne(d => d.TipoAdvert).WithMany(p => p.TribAdvertencia)
                .HasForeignKey(d => d.TipoAdvertId)
                .HasConstraintName("FK_TribAdvertencias_TribAdvertenciaTipoOrigem");
        });

        modelBuilder.Entity<TribAdvertenciaTipoOrigem>(entity =>
        {
            entity.HasKey(e => e.TipoAdvertId).HasName("PK_Table_1");

            entity.ToTable("TribAdvertenciaTipoOrigem");

            entity.Property(e => e.TipoAdvertId).HasColumnName("TipoAdvertID");
            entity.Property(e => e.TipoAdvertOrigem)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribAdvertenciasDiv>(entity =>
        {
            entity.HasKey(e => e.AdvertIddiv);

            entity.ToTable("TribAdvertenciasDiv");

            entity.HasIndex(e => e.AdvertId, "IX_TribAdvertenciasDiv_AdvertID");

            entity.HasIndex(e => e.AdvertId, "IX_TribAdvertenciasDiv_AdvertID_inc_ConIDDivida");

            entity.HasIndex(e => e.AdvertId, "IX_TribAdvertenciasDiv_AdvertID_inc_DivEmpID");

            entity.HasIndex(e => e.AdvertId, "IX_TribAdvertenciasDiv_AdvertID_inc_ImoIDDivida");

            entity.HasIndex(e => e.AdvertSuspensao, "IX_TribAdvertenciasDiv_AdvertSuspensao_inc_ImoIDDivida");

            entity.HasIndex(e => e.ConIddivida, "IX_TribAdvertenciasDiv_ConIDDivida").HasFillFactor(90);

            entity.HasIndex(e => new { e.ConIddivida, e.AdvertIddiv, e.AdvertId }, "IX_TribAdvertenciasDiv_ConIDDivida_AdvertIDDiv_AdvertID").HasFillFactor(90);

            entity.HasIndex(e => e.DivEmpId, "IX_TribAdvertenciasDiv_DivEmpID").HasFillFactor(90);

            entity.HasIndex(e => new { e.DivEmpId, e.AdvertIddiv, e.AdvertId }, "IX_TribAdvertenciasDiv_DivEmpID_AdvertIDDiv_AdvertID").HasFillFactor(90);

            entity.HasIndex(e => e.ImoIddivida, "IX_TribAdvertenciasDiv_ImoIDDivida").HasFillFactor(90);

            entity.HasIndex(e => new { e.ImoIddivida, e.AdvertIddiv, e.AdvertId }, "IX_TribAdvertenciasDiv_ImoIDDivida_AdvertIDDiv_AdvertID").HasFillFactor(90);

            entity.HasIndex(e => new { e.ImoIddivida, e.AdvertIddiv }, "IX_TribAdvertenciasDiv_ImoIDDivida_AdvertIDDiv_inc_SaiDAM");

            entity.HasIndex(e => e.SaiDam, "IX_TribAdvertenciasDiv_SaiDAM").HasFillFactor(90);

            entity.Property(e => e.AdvertIddiv).HasColumnName("AdvertIDDiv");
            entity.Property(e => e.AdvertId).HasColumnName("AdvertID");
            entity.Property(e => e.AdvertSuspensao)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasDefaultValue("OPERACIONAL");
            entity.Property(e => e.ConIddivida).HasColumnName("ConIDDivida");
            entity.Property(e => e.DivEmpId).HasColumnName("DivEmpID");
            entity.Property(e => e.ImoIddivida)
                .HasComment("Código de identificação da dívida.")
                .HasColumnName("ImoIDDivida");
            entity.Property(e => e.SaiDam)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength()
                .HasColumnName("SaiDAM");

            entity.HasOne(d => d.Advert).WithMany(p => p.TribAdvertenciasDivs)
                .HasForeignKey(d => d.AdvertId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribAdvertenciasDiv_TribAdvertencias");

            entity.HasOne(d => d.ConIddividaNavigation).WithMany(p => p.TribAdvertenciasDivs)
                .HasForeignKey(d => d.ConIddivida)
                .HasConstraintName("FK_TribAdvertenciasDiv_TribDividasContribuinte");

            entity.HasOne(d => d.DivEmp).WithMany(p => p.TribAdvertenciasDivs)
                .HasForeignKey(d => d.DivEmpId)
                .HasConstraintName("FK_TribAdvertenciasDiv_TribDividasEmpresas");

            entity.HasOne(d => d.ImoIddividaNavigation).WithMany(p => p.TribAdvertenciasDivs)
                .HasForeignKey(d => d.ImoIddivida)
                .HasConstraintName("FK_TribAdvertenciasDiv_TribDividasImo");
        });

        modelBuilder.Entity<TribAdvertenciasDivMov>(entity =>
        {
            entity.HasKey(e => e.AdverMovId).HasName("PK_TribAdvertenciaDivMov");

            entity.ToTable("TribAdvertenciasDivMov");

            entity.HasIndex(e => e.AdvertId, "IX_TribAdvertenciasDivMov_AdvertID");

            entity.HasIndex(e => new { e.ImoIddivida, e.TipoMov, e.DataMov }, "IX_TribAdvertenciasDivMov_ImoIDDivida_TipoMov_DataMov");

            entity.Property(e => e.AdverMovId).HasColumnName("AdverMovID");
            entity.Property(e => e.AdvertId).HasColumnName("AdvertID");
            entity.Property(e => e.ConIddivida).HasColumnName("ConIDDivida");
            entity.Property(e => e.DataMov).HasColumnType("datetime");
            entity.Property(e => e.DivEmpId).HasColumnName("DivEmpID");
            entity.Property(e => e.ImoIddivida).HasColumnName("ImoIDDivida");
            entity.Property(e => e.TipoMov)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("Incluido")
                .IsFixedLength();
            entity.Property(e => e.Usuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");

            entity.HasOne(d => d.Advert).WithMany(p => p.TribAdvertenciasDivMovs)
                .HasForeignKey(d => d.AdvertId)
                .HasConstraintName("FK_TribAdvertenciasDivMov_TribAdvertencias");
        });

        modelBuilder.Entity<TribAgrupamento>(entity =>
        {
            entity.HasKey(e => e.AgrupaId);

            entity.ToTable("TribAgrupamento", tb => tb.HasTrigger("TgTribAgrupamentoUpdate"));

            entity.Property(e => e.AgrupaId).HasColumnName("AgrupaID");
            entity.Property(e => e.AgrupaFator).HasColumnType("money");
            entity.Property(e => e.AgrupaNome)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribAinfarquivo>(entity =>
        {
            entity.HasKey(e => e.IdAinfarquivo).HasName("PK__TribAINF__6695C81164B606B2");

            entity.ToTable("TribAINFArquivo");

            entity.Property(e => e.IdAinfarquivo).HasColumnName("IdAINFArquivo");
            entity.Property(e => e.DataInclusao).HasColumnType("datetime");
            entity.Property(e => e.Filler)
                .HasMaxLength(13)
                .IsUnicode(false);
            entity.Property(e => e.NomeArquivo)
                .HasMaxLength(256)
                .IsUnicode(false);
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(60)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribAinfarquivoDetalhe>(entity =>
        {
            entity.HasKey(e => e.IdainfarquivoDetalhes).HasName("PK__TribAINF__6C5D8E9268869796");

            entity.ToTable("TribAINFArquivoDetalhes");

            entity.Property(e => e.IdainfarquivoDetalhes).HasColumnName("IDAINFArquivoDetalhes");
            entity.Property(e => e.AutoInfracao)
                .HasMaxLength(29)
                .IsUnicode(false);
            entity.Property(e => e.Bairro)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Cep)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("CEP");
            entity.Property(e => e.ChaveCt)
                .HasMaxLength(26)
                .IsUnicode(false)
                .HasColumnName("ChaveCT");
            entity.Property(e => e.Cnae)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CNAE");
            entity.Property(e => e.Cnpj)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("CNPJ");
            entity.Property(e => e.Complemento)
                .HasMaxLength(156)
                .IsUnicode(false);
            entity.Property(e => e.DataInclusao).HasColumnType("datetime");
            entity.Property(e => e.FundamentacaoLegalAcrescimos)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.FundamentacaoLegalPrincipal)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.IdAinfarquivo).HasColumnName("IdAINFArquivo");
            entity.Property(e => e.IsImportado)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Logradouro)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.Municipio)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Nome)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Numero)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.Tipologradouro)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.Uajurisdicao)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("UAjurisdicao");
            entity.Property(e => e.Uf)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("UF");
            entity.Property(e => e.Umv)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("UMV");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.ValorMultaOficio).HasColumnType("money");
            entity.Property(e => e.ValorPrincipal).HasColumnType("money");

            entity.HasOne(d => d.IdAinfarquivoNavigation).WithMany(p => p.TribAinfarquivoDetalhes)
                .HasForeignKey(d => d.IdAinfarquivo)
                .HasConstraintName("FK__TribAINFA__IdAIN__6A6EE008");
        });

        modelBuilder.Entity<TribAinfarquivoDividasLancada>(entity =>
        {
            entity.HasKey(e => e.IdAinfarquivoDividas).HasName("PK__TribAINF__1E675CA76D4B4CB3");

            entity.ToTable("TribAINFArquivoDividasLancadas");

            entity.Property(e => e.IdAinfarquivoDividas).HasColumnName("IdAINFArquivoDividas");
            entity.Property(e => e.ConIddivida).HasColumnName("ConIDDivida");
            entity.Property(e => e.DivEmpId).HasColumnName("DivEmpID");
            entity.Property(e => e.IdAinfarquivo).HasColumnName("IdAINFArquivo");
            entity.Property(e => e.IdainfarquivoDetalhes).HasColumnName("IDAINFArquivoDetalhes");

            entity.HasOne(d => d.ConIddividaNavigation).WithMany(p => p.TribAinfarquivoDividasLancada)
                .HasForeignKey(d => d.ConIddivida)
                .HasConstraintName("FK__TribAINFA__ConID__721001D0");

            entity.HasOne(d => d.DivEmp).WithMany(p => p.TribAinfarquivoDividasLancada)
                .HasForeignKey(d => d.DivEmpId)
                .HasConstraintName("FK__TribAINFA__DivEm__711BDD97");

            entity.HasOne(d => d.IdAinfarquivoNavigation).WithMany(p => p.TribAinfarquivoDividasLancada)
                .HasForeignKey(d => d.IdAinfarquivo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__TribAINFA__IdAIN__6F339525");

            entity.HasOne(d => d.IdainfarquivoDetalhesNavigation).WithMany(p => p.TribAinfarquivoDividasLancada)
                .HasForeignKey(d => d.IdainfarquivoDetalhes)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__TribAINFA__IDAIN__7027B95E");
        });

        modelBuilder.Entity<TribAlvArea>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TribAlvArea");

            entity.Property(e => e.Dsarea)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("dsarea");
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Vlarea)
                .HasColumnType("money")
                .HasColumnName("vlarea");
        });

        modelBuilder.Entity<TribAlvCalculo>(entity =>
        {
            entity.HasKey(e => e.IdCalculo);

            entity.ToTable("tribAlvCalculo");

            entity.HasIndex(e => e.IdDocumento, "IX_tribAlvCalculo_idDocumento");

            entity.Property(e => e.IdCalculo).HasColumnName("idCalculo");
            entity.Property(e => e.DsMotivo)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("dsMotivo");
            entity.Property(e => e.IdDocumento).HasColumnName("idDocumento");
            entity.Property(e => e.IdFormula).HasColumnName("idFormula");
            entity.Property(e => e.IdTomador).HasColumnName("idTomador");
            entity.Property(e => e.NrNota)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nrNota");
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
            entity.Property(e => e.VlAliquota)
                .HasColumnType("money")
                .HasColumnName("vlAliquota");
            entity.Property(e => e.VlCalculo)
                .HasColumnType("money")
                .HasColumnName("vlCalculo");
            entity.Property(e => e.VlFormula)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("vlFormula");
            entity.Property(e => e.VlNota)
                .HasColumnType("money")
                .HasColumnName("vlNota");
            entity.Property(e => e.VlTotalArea)
                .HasColumnType("money")
                .HasColumnName("vlTotalArea");

            entity.HasOne(d => d.IdDocumentoNavigation).WithMany(p => p.TribAlvCalculos)
                .HasForeignKey(d => d.IdDocumento)
                .HasConstraintName("FK_tribAlvCalculo_tribAlvDocumento");

            entity.HasOne(d => d.IdFormulaNavigation).WithMany(p => p.TribAlvCalculos)
                .HasForeignKey(d => d.IdFormula)
                .HasConstraintName("FK_tribAlvCalculo_tribAlvFormula");

            entity.HasOne(d => d.TipoTrib).WithMany(p => p.TribAlvCalculos)
                .HasForeignKey(d => d.TipoTribId)
                .HasConstraintName("FK__tribAlvCa__TipoT__19A10078");
        });

        modelBuilder.Entity<TribAlvDividum>(entity =>
        {
            entity.HasKey(e => new { e.IdDocumento, e.ConIdDivida });

            entity.ToTable("tribAlvDivida");

            entity.Property(e => e.IdDocumento).HasColumnName("idDocumento");
            entity.Property(e => e.ConIdDivida).HasColumnName("conIdDivida");
            entity.Property(e => e.DsTipoDivida)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("dsTipoDivida");

            entity.HasOne(d => d.ConIdDividaNavigation).WithMany(p => p.TribAlvDivida)
                .HasForeignKey(d => d.ConIdDivida)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tribAlvDivida_TribDividasContribuinte");

            entity.HasOne(d => d.IdDocumentoNavigation).WithMany(p => p.TribAlvDivida)
                .HasForeignKey(d => d.IdDocumento)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tribAlvDivida_tribAlvDocumento");
        });

        modelBuilder.Entity<TribAlvDocumento>(entity =>
        {
            entity.HasKey(e => e.IdDocumento);

            entity.ToTable("tribAlvDocumento");

            entity.HasIndex(e => new { e.NrAno, e.NrSequencia }, "IX_tribAlvDocumento_nrAno_nrSequencia");

            entity.HasIndex(e => new { e.NrAno, e.NrSequencia, e.DsTipoDocumento }, "IX_tribAlvDocumento_nrAno_nrSequencia_dsTipoDocumento");

            entity.HasIndex(e => e.NrInscricao, "IX_tribAlvDocumento_nrInscricao").HasFillFactor(90);

            entity.HasIndex(e => e.NrPropCpfcnpj, "IX_tribAlvDocumento_nrPropCPFCNPJ");

            entity.HasIndex(e => new { e.NrPropCpfcnpj, e.NrProtocolo }, "IX_tribAlvDocumento_nrPropCPFCNPJ_nrProtocolo");

            entity.HasIndex(e => e.NrSequencia, "IX_tribAlvDocumento_nrSequencia");

            entity.Property(e => e.IdDocumento).HasColumnName("idDocumento");
            entity.Property(e => e.CepObra)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("cepObra");
            entity.Property(e => e.CepProprietario)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("cepProprietario");
            entity.Property(e => e.Dispensado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dispensado");
            entity.Property(e => e.DsArea)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("dsArea");
            entity.Property(e => e.DsAvaliacaoIssqn)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("dsAvaliacaoISSQN");
            entity.Property(e => e.DsDescAreaConstrucao)
                .IsUnicode(false)
                .HasColumnName("dsDescAreaConstrucao");
            entity.Property(e => e.DsInscricaoEstatual)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("dsInscricaoEstatual");
            entity.Property(e => e.DsMotivoCancelamento)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("dsMotivoCancelamento");
            entity.Property(e => e.DsObra)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("dsObra");
            entity.Property(e => e.DsObraEndereco)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("dsObraEndereco");
            entity.Property(e => e.DsObservacao)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("dsObservacao");
            entity.Property(e => e.DsPropEndereco)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dsPropEndereco");
            entity.Property(e => e.DsPropFone)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("dsPropFone");
            entity.Property(e => e.DsTexto)
                .IsUnicode(false)
                .HasColumnName("dsTexto");
            entity.Property(e => e.DsTipoDocumento)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("dsTipoDocumento");
            entity.Property(e => e.DsTitulo)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("dsTitulo");
            entity.Property(e => e.DsUsuarioExclusao)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("dsUsuarioExclusao");
            entity.Property(e => e.DsUsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsUsuarioInclusao");
            entity.Property(e => e.DtDocumento).HasColumnName("dtDocumento");
            entity.Property(e => e.DtExclusaoAlvara)
                .HasColumnType("datetime")
                .HasColumnName("dtExclusaoAlvara");
            entity.Property(e => e.FlComValor)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flComValor");
            entity.Property(e => e.FlOutorga)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flOutorga");
            entity.Property(e => e.FlTipoAlvara)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flTipoAlvara");
            entity.Property(e => e.IdCpfcnpjExecucao).HasColumnName("idCPFCNPJ_Execucao");
            entity.Property(e => e.IdCpfcnpjProjeto).HasColumnName("idCPFCNPJ_Projeto");
            entity.Property(e => e.IdDocumentoOrigem).HasColumnName("idDocumentoOrigem");
            entity.Property(e => e.ImDocumento).HasColumnName("imDocumento");
            entity.Property(e => e.NmProprietario)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("nmProprietario");
            entity.Property(e => e.NrAno).HasColumnName("nrAno");
            entity.Property(e => e.NrAnoOrigem).HasColumnName("nrAnoOrigem");
            entity.Property(e => e.NrAreaTerreno)
                .HasColumnType("money")
                .HasColumnName("nrAreaTerreno");
            entity.Property(e => e.NrArt)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nrART");
            entity.Property(e => e.NrCmcExecucao).HasColumnName("nrCMC_Execucao");
            entity.Property(e => e.NrCmcProjeto).HasColumnName("nrCMC_Projeto");
            entity.Property(e => e.NrCreaExecucao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nrCREA_Execucao");
            entity.Property(e => e.NrCreaProjeto)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nrCREA_Projeto");
            entity.Property(e => e.NrInscricao)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("nrInscricao");
            entity.Property(e => e.NrLote)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("nrLote");
            entity.Property(e => e.NrNossoNumero)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nrNossoNumero");
            entity.Property(e => e.NrProcessoAno).HasColumnName("nrProcessoAno");
            entity.Property(e => e.NrProcessoSequencia).HasColumnName("nrProcessoSequencia");
            entity.Property(e => e.NrPropCpfcnpj)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("nrPropCPFCNPJ");
            entity.Property(e => e.NrProtocolo).HasColumnName("nrProtocolo");
            entity.Property(e => e.NrQuadra)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("nrQuadra");
            entity.Property(e => e.NrSequencia).HasColumnName("nrSequencia");
            entity.Property(e => e.NrSequenciaOrigem).HasColumnName("nrSequenciaOrigem");
            entity.Property(e => e.RefAnterior)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("refAnterior");
            entity.Property(e => e.Situacao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("situacao");
            entity.Property(e => e.TpRespObraExecucao)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("tpRespObraExecucao");
            entity.Property(e => e.TpRespObraProjeto)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("tpRespObraProjeto");
            entity.Property(e => e.VlAreaInfracionadaTerreno)
                .HasColumnType("money")
                .HasColumnName("vlAreaInfracionadaTerreno");
            entity.Property(e => e.VlTaxaOutorga)
                .HasColumnType("money")
                .HasColumnName("vlTaxaOutorga");
            entity.Property(e => e.VlTotalAreaConstrucao)
                .HasColumnType("money")
                .HasColumnName("vlTotalAreaConstrucao");
            entity.Property(e => e.VlVenalTerreno)
                .HasColumnType("money")
                .HasColumnName("vlVenalTerreno");
        });

        modelBuilder.Entity<TribAlvDocumentoAreaConstrucao>(entity =>
        {
            entity.HasKey(e => e.IdDocumentoAreaConstrucao);

            entity.ToTable("TribAlvDocumentoAreaConstrucao");

            entity.HasIndex(e => e.IdDocumento, "IX_TribAlvDocumentoAreaConstrucao_idDocumento");

            entity.HasIndex(e => new { e.IdDocumento, e.IdDocumentoAreaConstrucao }, "IX_TribAlvDocumentoAreaConstrucao_idDocumento_idDocumentoAreaConstrucao_inc_dsTipoConstr_dsTipoMat_tpAreaComp_nrAreaCompAb");

            entity.Property(e => e.IdDocumentoAreaConstrucao).HasColumnName("idDocumentoAreaConstrucao");
            entity.Property(e => e.DsTipoArea)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsTipoArea");
            entity.Property(e => e.DsTipoConstrucao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsTipoConstrucao");
            entity.Property(e => e.DsTipoMaterial)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsTipoMaterial");
            entity.Property(e => e.IdDocumento).HasColumnName("idDocumento");
            entity.Property(e => e.NrAreaCompAberta)
                .HasColumnType("money")
                .HasColumnName("nrAreaCompAberta");
            entity.Property(e => e.NrAreaCompCoberta)
                .HasColumnType("money")
                .HasColumnName("nrAreaCompCoberta");
            entity.Property(e => e.NrAreaConstrucao)
                .HasColumnType("money")
                .HasColumnName("nrAreaConstrucao");
            entity.Property(e => e.NrUndiadesBloco).HasColumnName("nrUndiadesBloco");
            entity.Property(e => e.StUnidadeMedida)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("stUnidadeMedida");
            entity.Property(e => e.TpAreaComplementar)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tpAreaComplementar");

            entity.HasOne(d => d.IdDocumentoNavigation).WithMany(p => p.TribAlvDocumentoAreaConstrucaos)
                .HasForeignKey(d => d.IdDocumento)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribAlvDocumentoAreaConstrucao_tribAlvDocumento");
        });

        modelBuilder.Entity<TribAlvDocumentoAreaConstrucaoExterno>(entity =>
        {
            entity.HasKey(e => e.IdDocumentoAreaConstrucao);

            entity.ToTable("TribAlvDocumentoAreaConstrucaoExterno");

            entity.HasIndex(e => e.IdDocumento, "IX_TribAlvDocumentoAreaConstrucaoExterno_idDocumento");

            entity.Property(e => e.IdDocumentoAreaConstrucao).HasColumnName("idDocumentoAreaConstrucao");
            entity.Property(e => e.DsTipoArea)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsTipoArea");
            entity.Property(e => e.DsTipoConstrucao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsTipoConstrucao");
            entity.Property(e => e.DsTipoMaterial)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsTipoMaterial");
            entity.Property(e => e.IdDocumento).HasColumnName("idDocumento");
            entity.Property(e => e.NrAreaConstrucao)
                .HasColumnType("money")
                .HasColumnName("nrAreaConstrucao");
        });

        modelBuilder.Entity<TribAlvDocumentoComplemento>(entity =>
        {
            entity.HasKey(e => e.IdDocumento);

            entity.ToTable("tribAlvDocumentoComplemento");

            entity.HasIndex(e => e.IdTipoLogradObra, "IX_tribAlvDocumentoComplemento_idTipoLogradObra");

            entity.Property(e => e.IdDocumento)
                .ValueGeneratedNever()
                .HasColumnName("idDocumento");
            entity.Property(e => e.DtFimObra)
                .HasColumnType("smalldatetime")
                .HasColumnName("dtFimObra");
            entity.Property(e => e.DtInicioObra)
                .HasColumnType("smalldatetime")
                .HasColumnName("dtInicioObra");
            entity.Property(e => e.IdBairroObra).HasColumnName("idBairroObra");
            entity.Property(e => e.IdBairroProprietario).HasColumnName("idBairroProprietario");
            entity.Property(e => e.IdBairroResponsavel).HasColumnName("idBairroResponsavel");
            entity.Property(e => e.IdCidadeObra).HasColumnName("idCidadeObra");
            entity.Property(e => e.IdCidadeProprietario).HasColumnName("idCidadeProprietario");
            entity.Property(e => e.IdCidadeResponsavel).HasColumnName("idCidadeResponsavel");
            entity.Property(e => e.IdContribuinteProprietario).HasColumnName("idContribuinteProprietario");
            entity.Property(e => e.IdContribuinteResponsavel).HasColumnName("idContribuinteResponsavel");
            entity.Property(e => e.IdLogradouroObra).HasColumnName("idLogradouroObra");
            entity.Property(e => e.IdLogradouroProprietario).HasColumnName("idLogradouroProprietario");
            entity.Property(e => e.IdLogradouroResponsavel).HasColumnName("idLogradouroResponsavel");
            entity.Property(e => e.IdTipoLogradObra).HasColumnName("idTipoLogradObra");
            entity.Property(e => e.IdTipoLogradProp).HasColumnName("idTipoLogradProp");
            entity.Property(e => e.IdTipoLogradResp).HasColumnName("idTipoLogradResp");
            entity.Property(e => e.IdTipoResponsavelObra).HasColumnName("idTipoResponsavelObra");
            entity.Property(e => e.NmObra)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("nmObra");
            entity.Property(e => e.NrLote).HasColumnName("nrLote");
            entity.Property(e => e.NrPavimentos).HasColumnName("nrPavimentos");
            entity.Property(e => e.NrQuadra).HasColumnName("nrQuadra");
            entity.Property(e => e.NrUnidades).HasColumnName("nrUnidades");
            entity.Property(e => e.RefAnterior)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("refAnterior");
            entity.Property(e => e.StCepobra)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("stCEPObra");
            entity.Property(e => e.StCepproprietario)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("stCEPProprietario");
            entity.Property(e => e.StCepresponsavel)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("stCEPResponsavel");
            entity.Property(e => e.StComplementoEndObra)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("stComplementoEndObra");
            entity.Property(e => e.StComplementoEndProprietario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("stComplementoEndProprietario");
            entity.Property(e => e.StComplementoEndResponsavel)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("stComplementoEndResponsavel");
            entity.Property(e => e.StEmailObra)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("stEmailObra");
            entity.Property(e => e.StNumeroEndObra)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("stNumeroEndObra");
            entity.Property(e => e.StNumeroEndProprietario)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("stNumeroEndProprietario");
            entity.Property(e => e.StNumeroEndResponsavel)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("stNumeroEndResponsavel");
            entity.Property(e => e.StTelefoneObra)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("stTelefoneObra");
            entity.Property(e => e.StUnidadeMedida)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("stUnidadeMedida");
            entity.Property(e => e.TpResponsavelObra)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tpResponsavelObra");

            entity.HasOne(d => d.IdTipoResponsavelObraNavigation).WithMany(p => p.TribAlvDocumentoComplementos)
                .HasForeignKey(d => d.IdTipoResponsavelObra)
                .HasConstraintName("FK_TribAlvTipoResponsavel");
        });

        modelBuilder.Entity<TribAlvDocumentoExterno>(entity =>
        {
            entity.HasKey(e => e.IdDocumento);

            entity.ToTable("tribAlvDocumentoExterno");

            entity.Property(e => e.IdDocumento).HasColumnName("idDocumento");
            entity.Property(e => e.CdDocumento)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("cdDocumento");
            entity.Property(e => e.CepObra)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("cepObra");
            entity.Property(e => e.CepProprietario)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("cepProprietario");
            entity.Property(e => e.ConIdExecucao).HasColumnName("ConID_Execucao");
            entity.Property(e => e.ConIdProjeto).HasColumnName("ConID_Projeto");
            entity.Property(e => e.ConIdRequerente).HasColumnName("ConID_Requerente");
            entity.Property(e => e.DsAreaConstrucao)
                .IsUnicode(false)
                .HasColumnName("dsAreaConstrucao");
            entity.Property(e => e.DsMotivoRecusa)
                .IsUnicode(false)
                .HasColumnName("dsMotivoRecusa");
            entity.Property(e => e.DsObra)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("dsObra");
            entity.Property(e => e.DsObraEmail)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dsObraEmail");
            entity.Property(e => e.DsObraEndereco)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("dsObraEndereco");
            entity.Property(e => e.DsObraFone)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsObraFone");
            entity.Property(e => e.DsObservacao)
                .IsUnicode(false)
                .HasColumnName("dsObservacao");
            entity.Property(e => e.DsPropEndereco)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dsPropEndereco");
            entity.Property(e => e.DsTipoDocOrigem)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsTipoDocOrigem");
            entity.Property(e => e.DsTipoDocumento)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("dsTipoDocumento");
            entity.Property(e => e.DsTipoResponsavel)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("dsTipoResponsavel");
            entity.Property(e => e.DtInicioObra).HasColumnName("dtInicioObra");
            entity.Property(e => e.DtRegistro)
                .HasColumnType("datetime")
                .HasColumnName("dtRegistro");
            entity.Property(e => e.DtUltimaAlteracao)
                .HasColumnType("datetime")
                .HasColumnName("dtUltimaAlteracao");
            entity.Property(e => e.FlSituacao)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flSituacao");
            entity.Property(e => e.IdAlvaraInterno).HasColumnName("idAlvaraInterno");
            entity.Property(e => e.NmProprietario)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("nmProprietario");
            entity.Property(e => e.NmResponsavel)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("nmResponsavel");
            entity.Property(e => e.NrAnoOrigem).HasColumnName("nrAnoOrigem");
            entity.Property(e => e.NrAreaTerreno)
                .HasColumnType("money")
                .HasColumnName("nrAreaTerreno");
            entity.Property(e => e.NrCreaExecucao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nrCREA_Execucao");
            entity.Property(e => e.NrCreaProjeto)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nrCREA_Projeto");
            entity.Property(e => e.NrInscricao)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("nrInscricao");
            entity.Property(e => e.NrLote)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("nrLote");
            entity.Property(e => e.NrNumOrigem).HasColumnName("nrNumOrigem");
            entity.Property(e => e.NrPavimentos).HasColumnName("nrPavimentos");
            entity.Property(e => e.NrProcessoAno).HasColumnName("nrProcessoAno");
            entity.Property(e => e.NrProcessoSequencia).HasColumnName("nrProcessoSequencia");
            entity.Property(e => e.NrPropCpfcnpj)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("nrPropCPFCNPJ");
            entity.Property(e => e.NrQuadra)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("nrQuadra");
            entity.Property(e => e.NrRespCpfcnpj)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("nrRespCPFCNPJ");
            entity.Property(e => e.NrUnidades).HasColumnName("nrUnidades");
            entity.Property(e => e.RefAnterior)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("refAnterior");
            entity.Property(e => e.VlTotalAreaConstrucao)
                .HasColumnType("money")
                .HasColumnName("vlTotalAreaConstrucao");
            entity.Property(e => e.VlVenalTerreno)
                .HasColumnType("money")
                .HasColumnName("vlVenalTerreno");
        });

        modelBuilder.Entity<TribAlvDocumentoLog>(entity =>
        {
            entity.HasKey(e => e.IdLog);

            entity.ToTable("tribAlvDocumentoLog");

            entity.HasIndex(e => e.IdDocumento, "IX_tribAlvDocumentoLog_idDocumento");

            entity.Property(e => e.IdLog).HasColumnName("idLog");
            entity.Property(e => e.CepObra)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("cepObra");
            entity.Property(e => e.CepProprietario)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("cepProprietario");
            entity.Property(e => e.DsArea)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("dsArea");
            entity.Property(e => e.DsAvaliacaoIssqn)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("dsAvaliacaoISSQN");
            entity.Property(e => e.DsMotivo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dsMotivo");
            entity.Property(e => e.DsObra)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("dsObra");
            entity.Property(e => e.DsObraEndereco)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("dsObraEndereco");
            entity.Property(e => e.DsObservacao)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("dsObservacao");
            entity.Property(e => e.DsPropEndereco)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dsPropEndereco");
            entity.Property(e => e.DsPropFone)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("dsPropFone");
            entity.Property(e => e.DsUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsUsuario");
            entity.Property(e => e.DtLog)
                .HasColumnType("datetime")
                .HasColumnName("dtLog");
            entity.Property(e => e.IdDocumento).HasColumnName("idDocumento");
            entity.Property(e => e.NmProprietario)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("nmProprietario");
            entity.Property(e => e.NrAreaTerreno)
                .HasColumnType("money")
                .HasColumnName("nrAreaTerreno");
            entity.Property(e => e.NrCmcExecucao).HasColumnName("nrCMC_Execucao");
            entity.Property(e => e.NrCmcProjeto).HasColumnName("nrCMC_Projeto");
            entity.Property(e => e.NrCreaExecucao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nrCREA_Execucao");
            entity.Property(e => e.NrCreaProjeto)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nrCREA_Projeto");
            entity.Property(e => e.NrInscricao)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("nrInscricao");
            entity.Property(e => e.NrLote)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("nrLote");
            entity.Property(e => e.NrPropCpfcnpj)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("nrPropCPFCNPJ");
            entity.Property(e => e.NrQuadra)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("nrQuadra");
            entity.Property(e => e.VlTotalAreaConstrucao)
                .HasColumnType("money")
                .HasColumnName("vlTotalAreaConstrucao");
        });

        modelBuilder.Entity<TribAlvFormula>(entity =>
        {
            entity.HasKey(e => e.IdFormula);

            entity.ToTable("tribAlvFormula");

            entity.Property(e => e.IdFormula).HasColumnName("idFormula");
            entity.Property(e => e.DsFormula)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasColumnName("dsFormula");
            entity.Property(e => e.DsTipoMaoObra)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("dsTipoMaoObra");
            entity.Property(e => e.IdTipoBaixaLancamento).HasColumnName("idTipoBaixaLancamento");
            entity.Property(e => e.IdTipoCalculo).HasColumnName("idTipoCalculo");
            entity.Property(e => e.NrFormula).HasColumnName("nrFormula");
            entity.Property(e => e.VlFormula)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("vlFormula");

            entity.HasOne(d => d.IdTipoBaixaLancamentoNavigation).WithMany(p => p.TribAlvFormulas)
                .HasForeignKey(d => d.IdTipoBaixaLancamento)
                .HasConstraintName("FK_tribAlvFormula_TribTipoBaixa");

            entity.HasOne(d => d.IdTipoCalculoNavigation).WithMany(p => p.TribAlvFormulas)
                .HasForeignKey(d => d.IdTipoCalculo)
                .HasConstraintName("FK_tribAlvFormula_tribAlvTipoCalculo");
        });

        modelBuilder.Entity<TribAlvTipoCalculo>(entity =>
        {
            entity.HasKey(e => e.IdTipoCalculo);

            entity.ToTable("tribAlvTipoCalculo");

            entity.Property(e => e.IdTipoCalculo).HasColumnName("idTipoCalculo");
            entity.Property(e => e.DsTipoCalculo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsTipoCalculo");

            entity.HasOne(d => d.TipoTrib).WithMany(p => p.TribAlvTipoCalculos)
                .HasForeignKey(d => d.TipoTribId)
                .HasConstraintName("FK_tribAlvTipoCalculo_TribTipoTributos");
        });

        modelBuilder.Entity<TribAlvTipoResponsavel>(entity =>
        {
            entity.ToTable("TribAlvTipoResponsavel");

            entity.Property(e => e.DsSiglaSisObra)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsSiglaSisObra");
            entity.Property(e => e.Nome)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribAlvaraConstrucao>(entity =>
        {
            entity.HasKey(e => e.AlvaraId);

            entity.ToTable("TribAlvaraConstrucao");

            entity.Property(e => e.AlvaraId)
                .ValueGeneratedNever()
                .HasColumnName("AlvaraID");
            entity.Property(e => e.AlavaraDataSituacao).HasColumnType("datetime");
            entity.Property(e => e.AlavaraTipo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AlvaraData).HasColumnType("datetime");
            entity.Property(e => e.AlvaraMetragem).HasColumnType("money");
            entity.Property(e => e.AlvaraSituacao)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("Em construção")
                .IsFixedLength();
            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.StatusAprovacao)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.Edificacao).WithMany(p => p.TribAlvaraConstrucaos)
                .HasForeignKey(d => d.EdificacaoId)
                .HasConstraintName("FK_TribAlvaraConstrucao_TribEdificacoes");
        });

        modelBuilder.Entity<TribAlvaraConstrucaoContribuinte>(entity =>
        {
            entity.HasKey(e => new { e.Numero, e.ConId });

            entity.Property(e => e.ConId).HasColumnName("ConID");

            entity.HasOne(d => d.Con).WithMany(p => p.TribAlvaraConstrucaoContribuintes)
                .HasForeignKey(d => d.ConId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribAlvaraConstrucaoContribuintes_Contribuintes");
        });

        modelBuilder.Entity<TribAlvaraConstrucaoDividasContrib>(entity =>
        {
            entity.HasKey(e => new { e.Numero, e.ConIddivida });

            entity.ToTable("TribAlvaraConstrucaoDividasContrib");

            entity.Property(e => e.ConIddivida).HasColumnName("ConIDDivida");

            entity.HasOne(d => d.ConIddividaNavigation).WithMany(p => p.TribAlvaraConstrucaoDividasContribs)
                .HasForeignKey(d => d.ConIddivida)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribAlvaraConstrucaoDividasContrib_TribDividasContribuinte");
        });

        modelBuilder.Entity<TribAlvaraConstrucaoDividasImovei>(entity =>
        {
            entity.HasKey(e => new { e.Numero, e.ImolDdivida });

            entity.Property(e => e.ImolDdivida).HasColumnName("ImolDDivida");

            entity.HasOne(d => d.ImolDdividaNavigation).WithMany(p => p.TribAlvaraConstrucaoDividasImoveis)
                .HasForeignKey(d => d.ImolDdivida)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribAlvaraConstrucaoDividasImoveis_TribDividasImo");
        });

        modelBuilder.Entity<TribAlvaraConstrucaoEdificaco>(entity =>
        {
            entity.HasKey(e => new { e.Numero, e.EdificacaoId });

            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.DataCad).HasColumnType("datetime");
        });

        modelBuilder.Entity<TribAlvaraConstrucaoParam>(entity =>
        {
            entity.HasKey(e => new { e.Numero, e.TparamId, e.ParamId });

            entity.ToTable("TribAlvaraConstrucaoParam");

            entity.Property(e => e.TparamId).HasColumnName("TParamID");
            entity.Property(e => e.ParamId).HasColumnName("ParamID");

            entity.HasOne(d => d.TribParamCalculo).WithMany(p => p.TribAlvaraConstrucaoParams)
                .HasForeignKey(d => new { d.TparamId, d.ParamId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribAlvaraConstrucaoParam_TribParamCalculos");
        });

        modelBuilder.Entity<TribAlvaraConstrucaoProfissional>(entity =>
        {
            entity.HasKey(e => e.IdalvaraProf);

            entity.ToTable("TribAlvaraConstrucaoProfissional");

            entity.Property(e => e.IdalvaraProf)
                .ValueGeneratedNever()
                .HasColumnName("IDAlvaraProf");
            entity.Property(e => e.Artdata)
                .HasColumnType("datetime")
                .HasColumnName("ARTData");
            entity.Property(e => e.Artnum)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ARTNum");
            entity.Property(e => e.DataCad).HasColumnType("datetime");
            entity.Property(e => e.DtInicio).HasColumnType("datetime");
            entity.Property(e => e.DtPrevTermino).HasColumnType("datetime");
            entity.Property(e => e.IdcontribCategProf).HasColumnName("IDContribCategProf");

            entity.HasOne(d => d.IdcontribCategProfNavigation).WithMany(p => p.TribAlvaraConstrucaoProfissionals)
                .HasForeignKey(d => d.IdcontribCategProf)
                .HasConstraintName("FK_TribAlvaraConstrucaoProfissional_TribContribCategProf1");
        });

        modelBuilder.Entity<TribAlvaraEmpresa>(entity =>
        {
            entity.HasKey(e => e.AlvaraId).HasName("PK_TribAlvara");

            entity.HasIndex(e => e.EmprCmc, "IX_EmprCmc").HasFillFactor(90);

            entity.HasIndex(e => new { e.AlvaraId, e.EmprCmc }, "_dta_index_TribAlvaraEmpresas_5_1369821850__K1_K8_3_4_5_6").HasFillFactor(90);

            entity.HasIndex(e => new { e.EmprCmc, e.AlvaraId }, "_dta_index_TribAlvaraEmpresas_5_1369821850__K8_K1_2_3_4_5_7_9_10_11").HasFillFactor(90);

            entity.Property(e => e.AlvaraId)
                .ValueGeneratedNever()
                .HasColumnName("AlvaraID");
            entity.Property(e => e.AlvAreaAberta)
                .HasDefaultValue(0m)
                .HasColumnType("money");
            entity.Property(e => e.AlvAreaConstruida)
                .HasDefaultValue(0m)
                .HasColumnType("money");
            entity.Property(e => e.AlvAtivContratoSoc)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.AlvBairro)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.AlvCargoAss)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AlvCnae)
                .IsUnicode(false)
                .HasColumnName("AlvCNAE");
            entity.Property(e => e.AlvCnpjcpf)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AlvCNPJCPF");
            entity.Property(e => e.AlvComplemento)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.AlvData).HasColumnType("datetime");
            entity.Property(e => e.AlvDataFinal).HasColumnType("datetime");
            entity.Property(e => e.AlvDataInicial).HasColumnType("datetime");
            entity.Property(e => e.AlvDepartamento)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.AlvEndereco)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.AlvMsgRodape)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.AlvNomeAss)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AlvNomeFantasia)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.AlvNomeRespTecnico)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.AlvNumRegRespTecnico)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.AlvNumeroLograd)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.AlvProtocolo)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.AlvRazaoSocial)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.AlvRecalcular)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength()
                .HasComment("Informa se as taxas serão recalculadas ou não");
            entity.Property(e => e.AlvRestricoes).HasColumnType("text");
            entity.Property(e => e.AlvSecretaria)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.AlvTexto).HasColumnType("text");
            entity.Property(e => e.AlvTipoAlvara)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Inicial / Renovação / Alteração");
            entity.Property(e => e.AlvTitulo)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.DataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Idmoeda).HasColumnName("IDMoeda");
            entity.Property(e => e.ServId).HasColumnName("ServID");
            entity.Property(e => e.TalvId).HasColumnName("TAlvID");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");

            entity.HasOne(d => d.EmprCmcNavigation).WithMany(p => p.TribAlvaraEmpresas)
                .HasForeignKey(d => d.EmprCmc)
                .HasConstraintName("FK_TribAlvaraEmpresas_TribEmpresas");
        });

        modelBuilder.Entity<TribAlvaraEmpresaslog>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TribAlvaraEmpresaslog");

            entity.Property(e => e.AlvDataFimAntes).HasColumnType("datetime");
            entity.Property(e => e.AlvDataFimDepois).HasColumnType("datetime");
            entity.Property(e => e.AlvaraId).HasColumnName("AlvaraID");
            entity.Property(e => e.Dtinclusao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtinclusao");
            entity.Property(e => e.EmprCmc).HasColumnName("EmprCMC");
        });

        modelBuilder.Entity<TribAlvaraRenovacao>(entity =>
        {
            entity.HasKey(e => e.RenovaId);

            entity.ToTable("TribAlvaraRenovacao");

            entity.HasIndex(e => e.AlvaraId, "IX_AlvaraID").HasFillFactor(90);

            entity.Property(e => e.RenovaId).HasColumnName("RenovaID");
            entity.Property(e => e.AlvaraId).HasColumnName("AlvaraID");
            entity.Property(e => e.RenoDataFinal).HasColumnType("datetime");
            entity.Property(e => e.RenoDataInicial).HasColumnType("datetime");
            entity.Property(e => e.RenoTipoAlvara)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.Alvara).WithMany(p => p.TribAlvaraRenovacaos)
                .HasForeignKey(d => d.AlvaraId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_TribAlvaraRenovacao_TribAlvaraEmpresas");
        });

        modelBuilder.Entity<TribAlvaraRenovacaoDivida>(entity =>
        {
            entity.HasKey(e => new { e.AlvaraId, e.DivEmpId });

            entity.Property(e => e.AlvaraId).HasColumnName("AlvaraID");
            entity.Property(e => e.DivEmpId).HasColumnName("DivEmpID");
            entity.Property(e => e.DataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");

            entity.HasOne(d => d.Alvara).WithMany(p => p.TribAlvaraRenovacaoDivida)
                .HasForeignKey(d => d.AlvaraId)
                .HasConstraintName("FK_TribAlvaraRenovacaoDividas_TribAlvaraEmpresas");

            entity.HasOne(d => d.DivEmp).WithMany(p => p.TribAlvaraRenovacaoDivida)
                .HasForeignKey(d => d.DivEmpId)
                .HasConstraintName("FK_TribAlvaraRenovacaoDividas_TribDividasEmpresas");
        });

        modelBuilder.Entity<TribAlvaraTermoDispenca>(entity =>
        {
            entity.HasKey(e => e.AlvTermId).HasName("PK__TribAlva__A65DC7DE7486EC67");

            entity.ToTable("TribAlvaraTermoDispenca");

            entity.Property(e => e.AlvTermId).HasColumnName("alvTermID");
            entity.Property(e => e.AlvTermAno).HasColumnName("alvTermAno");
            entity.Property(e => e.AlvTermAtividade)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasColumnName("alvTermAtividade");
            entity.Property(e => e.AlvTermComplementoLograd)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("alvTermComplementoLograd");
            entity.Property(e => e.AlvTermDataInclusao).HasColumnName("alvTermDataInclusao");
            entity.Property(e => e.AlvTermDataInicial).HasColumnName("alvTermDataInicial");
            entity.Property(e => e.AlvTermDatafinal).HasColumnName("alvTermDATAFinal");
            entity.Property(e => e.AlvTermNumProtocolo)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("alvTermNumProtocolo");
            entity.Property(e => e.AlvTermNumero).HasColumnName("alvTermNumero");
            entity.Property(e => e.AlvTermNumeroLograd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("alvTermNumeroLograd");
            entity.Property(e => e.AlvTermRestricao)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasColumnName("alvTermRestricao");
            entity.Property(e => e.AlvTermUsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("alvTermUsuarioInclusao");
            entity.Property(e => e.Cep)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CEP");
            entity.Property(e => e.Conid).HasColumnName("conid");
            entity.Property(e => e.LogradId).HasColumnName("LogradID");

            entity.HasOne(d => d.Bairro).WithMany(p => p.TribAlvaraTermoDispencas)
                .HasForeignKey(d => d.BairroId)
                .HasConstraintName("FK__TribAlvar__Bairr__794BA184");

            entity.HasOne(d => d.Cidade).WithMany(p => p.TribAlvaraTermoDispencas)
                .HasForeignKey(d => d.CidadeId)
                .HasConstraintName("FK__TribAlvar__Cidad__7A3FC5BD");

            entity.HasOne(d => d.Con).WithMany(p => p.TribAlvaraTermoDispencas)
                .HasForeignKey(d => d.Conid)
                .HasConstraintName("FK__TribAlvar__conid__766F34D9");

            entity.HasOne(d => d.Lograd).WithMany(p => p.TribAlvaraTermoDispencas)
                .HasForeignKey(d => d.LogradId)
                .HasConstraintName("FK__TribAlvar__Logra__78577D4B");

            entity.HasOne(d => d.Objeto).WithMany(p => p.TribAlvaraTermoDispencas)
                .HasForeignKey(d => d.ObjetoId)
                .HasConstraintName("FK__TribAlvar__Objet__77635912");
        });

        modelBuilder.Entity<TribAmostraMercado>(entity =>
        {
            entity.HasKey(e => e.AmostraId).HasName("PK__TribAmos__64EC6DB00C8FEF32");

            entity.ToTable("TribAmostraMercado");

            entity.Property(e => e.AmostraId).HasColumnName("AmostraID");
            entity.Property(e => e.AmostraAreaConstruida).HasColumnType("money");
            entity.Property(e => e.AmostraAreaTerreno).HasColumnType("money");
            entity.Property(e => e.AmostraCondominio)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.AmostraNumero)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.AmostraTipo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.AmostraValor).HasColumnType("money");
            entity.Property(e => e.DataInclusao)
                .HasColumnType("datetime")
                .HasColumnName("dataInclusao");
            entity.Property(e => e.Idloteamento).HasColumnName("IDLoteamento");
            entity.Property(e => e.LogradId).HasColumnName("LogradID");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("usuarioInclusao");

            entity.HasOne(d => d.IdloteamentoNavigation).WithMany(p => p.TribAmostraMercados)
                .HasForeignKey(d => d.Idloteamento)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__TribAmost__IDLot__0E7837A4");

            entity.HasOne(d => d.Lograd).WithMany(p => p.TribAmostraMercados)
                .HasForeignKey(d => d.LogradId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__TribAmost__Logra__0F6C5BDD");
        });

        modelBuilder.Entity<TribAmostraMercadoItbi>(entity =>
        {
            entity.HasKey(e => e.IdamostraMercadoItbi).HasName("PK__TribAmos__F6B3568B2B9AF118");

            entity.ToTable("TribAmostraMercadoITBI");

            entity.Property(e => e.IdamostraMercadoItbi).HasColumnName("IDAmostraMercadoITBI");
            entity.Property(e => e.AmostraId).HasColumnName("AmostraID");
            entity.Property(e => e.DataInclusao).HasColumnName("dataInclusao");
            entity.Property(e => e.Itbiid).HasColumnName("ITBIID");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("usuarioInclusao");

            entity.HasOne(d => d.Amostra).WithMany(p => p.TribAmostraMercadoItbis)
                .HasForeignKey(d => d.AmostraId)
                .HasConstraintName("FK__TribAmost__Amost__2D83398A");

            entity.HasOne(d => d.Itbi).WithMany(p => p.TribAmostraMercadoItbis)
                .HasForeignKey(d => d.Itbiid)
                .HasConstraintName("FK__TribAmost__ITBII__2E775DC3");
        });

        modelBuilder.Entity<TribArqMortoBoleto>(entity =>
        {
            entity.HasIndex(e => e.NossoNumero, "IX_NossoNumero").HasFillFactor(90);

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.AnoDivida).HasDefaultValue((short)0);
            entity.Property(e => e.BoleOrigem)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("boleOrigem");
            entity.Property(e => e.BoleValorCorrecao)
                .HasDefaultValue(0m)
                .HasColumnType("money")
                .HasColumnName("boleValorCorrecao");
            entity.Property(e => e.BoleValorDesconto)
                .HasDefaultValue(0m)
                .HasComment("Valor do desconto do boleto bancário.")
                .HasColumnType("money")
                .HasColumnName("boleValorDesconto");
            entity.Property(e => e.BoleValorJuros)
                .HasDefaultValue(0m)
                .HasColumnType("money")
                .HasColumnName("boleValorJuros");
            entity.Property(e => e.BoleValorMulta)
                .HasDefaultValue(0m)
                .HasColumnType("money")
                .HasColumnName("boleValorMulta");
            entity.Property(e => e.BoleValorPrinc)
                .HasDefaultValue(0m)
                .HasComment("Valor do bloqueto bancário.")
                .HasColumnType("money")
                .HasColumnName("boleValorPrinc");
            entity.Property(e => e.Cgccpf)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CGCCPF");
            entity.Property(e => e.Cmc).HasColumnName("CMC");
            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.ConIddivida)
                .HasDefaultValue(0)
                .HasColumnName("ConIDDivida");
            entity.Property(e => e.DataBoleto)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime");
            entity.Property(e => e.DataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DataVencimento)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime");
            entity.Property(e => e.EdificacaoId)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("EdificacaoID");
            entity.Property(e => e.EmpIddivida)
                .HasDefaultValue(0)
                .HasColumnName("EmpIDDivida");
            entity.Property(e => e.ImoIddivida)
                .HasDefaultValue(0)
                .HasColumnName("ImoIDDivida");
            entity.Property(e => e.MesDivida).HasDefaultValue((short)0);
            entity.Property(e => e.NossoNumero)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.Parcela).HasDefaultValue(0);
            entity.Property(e => e.SubDivida).HasDefaultValue(0);
            entity.Property(e => e.TipoTribId)
                .HasDefaultValue(0)
                .HasColumnName("TipoTribID");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");
        });

        modelBuilder.Entity<TribArquivoEmpresaPendenciasSn>(entity =>
        {
            entity.HasKey(e => e.IdDetalheEventoEmpresa).HasName("PK_tribArquivoEmpresaPendenciasSN_1");

            entity.ToTable("tribArquivoEmpresaPendenciasSN");

            entity.Property(e => e.IdDetalheEventoEmpresa).HasColumnName("idDetalheEventoEmpresa");
            entity.Property(e => e.DsObservacao)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("dsObservacao");
            entity.Property(e => e.DtEvetno)
                .HasColumnType("datetime")
                .HasColumnName("dtEvetno");
            entity.Property(e => e.IdEventoEmpresa).HasColumnName("idEventoEmpresa");
            entity.Property(e => e.NrAto)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("nrAto");
            entity.Property(e => e.NrCnpj)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("nrCNPJ");
            entity.Property(e => e.NrEvento).HasColumnName("nrEvento");
            entity.Property(e => e.NrProtocolo)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("nrProtocolo");
        });

        modelBuilder.Entity<TribArquivoPendenciasSn>(entity =>
        {
            entity.HasKey(e => e.IdEventoEmpresa);

            entity.ToTable("tribArquivoPendenciasSN");

            entity.Property(e => e.IdEventoEmpresa).HasColumnName("idEventoEmpresa");
            entity.Property(e => e.DsArquivo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsArquivo");
            entity.Property(e => e.DsLogin)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsLogin");
            entity.Property(e => e.DtArquivo)
                .HasColumnType("datetime")
                .HasColumnName("dtArquivo");
        });

        modelBuilder.Entity<TribArquivoSiafi>(entity =>
        {
            entity.HasKey(e => e.IdDetalhe);

            entity.ToTable("TribArquivoSIAFI");

            entity.Property(e => e.IdDetalhe).HasColumnName("idDetalhe");
            entity.Property(e => e.ConIddivida).HasColumnName("ConIDDivida");
            entity.Property(e => e.ConvenioId).HasColumnName("ConvenioID");
            entity.Property(e => e.DataEstorno).HasColumnType("datetime");
            entity.Property(e => e.DsObservacao)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("dsObservacao");
            entity.Property(e => e.DtBaixa)
                .HasColumnType("datetime")
                .HasColumnName("dtBaixa");
            entity.Property(e => e.DtDocumento)
                .HasColumnType("datetime")
                .HasColumnName("dtDocumento");
            entity.Property(e => e.DtEmissaoNota)
                .HasColumnType("datetime")
                .HasColumnName("dtEmissaoNota");
            entity.Property(e => e.DtVencimento)
                .HasColumnType("datetime")
                .HasColumnName("dtVencimento");
            entity.Property(e => e.EmprIddivida).HasColumnName("EmprIDDivida");
            entity.Property(e => e.MotivoEstorno)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.NmArquivo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nmArquivo");
            entity.Property(e => e.NrCnpjtomador)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nrCNPJTomador");
            entity.Property(e => e.NrCompetencia)
                .HasMaxLength(6)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nrCompetencia");
            entity.Property(e => e.NrCpfcnpjprestador)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("nrCPFCNPJPrestador");
            entity.Property(e => e.NrDocumento)
                .HasMaxLength(18)
                .IsUnicode(false)
                .HasColumnName("nrDocumento");
            entity.Property(e => e.NrNotaFiscal)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("nrNotaFiscal");
            entity.Property(e => e.NrSequencia).HasColumnName("nrSequencia");
            entity.Property(e => e.NrSerie)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("nrSerie");
            entity.Property(e => e.TpSiafi)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tpSIAFI");
            entity.Property(e => e.UsuarioEstorno)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VlAliquota)
                .HasColumnType("money")
                .HasColumnName("vlAliquota");
            entity.Property(e => e.VlBaseCalculo)
                .HasColumnType("money")
                .HasColumnName("vlBaseCalculo");
            entity.Property(e => e.VlJuros)
                .HasColumnType("money")
                .HasColumnName("vlJuros");
            entity.Property(e => e.VlMulta)
                .HasColumnType("money")
                .HasColumnName("vlMulta");
            entity.Property(e => e.VlNotaFiscal)
                .HasColumnType("money")
                .HasColumnName("vlNotaFiscal");
            entity.Property(e => e.VlPrincipal)
                .HasColumnType("money")
                .HasColumnName("vlPrincipal");
        });

        modelBuilder.Entity<TribAssinaturaTiposDocumento>(entity =>
        {
            entity.HasKey(e => e.IdDocumento);

            entity.ToTable("TribAssinaturaTiposDocumento");

            entity.Property(e => e.IdDocumento).HasColumnName("idDocumento");
            entity.Property(e => e.NmDocumento)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nmDocumento");
            entity.Property(e => e.VlIdentificador)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vlIdentificador");
        });

        modelBuilder.Entity<TribAssinaturasServidor>(entity =>
        {
            entity.HasKey(e => new { e.ServId, e.IdDocumento });

            entity.ToTable("TribAssinaturasServidor");

            entity.Property(e => e.ServId).HasColumnName("ServID");
            entity.Property(e => e.IdDocumento).HasColumnName("idDocumento");
            entity.Property(e => e.DtFim).HasColumnName("dtFim");
            entity.Property(e => e.DtInicial).HasColumnName("dtInicial");
            entity.Property(e => e.NmCargo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nmCargo");
            entity.Property(e => e.NrSequencia).HasColumnName("nrSequencia");
        });

        modelBuilder.Entity<TribAtivAtividade>(entity =>
        {
            entity.HasKey(e => e.Atividade).HasName("PK_AtribAtivAtividade");

            entity.ToTable("TribAtivAtividade", tb =>
                {
                    tb.HasTrigger("TgTribAtivAtividadeInsert");
                    tb.HasTrigger("TgTribAtivAtividadeUpdate");
                });

            entity.HasIndex(e => e.Atividade, "IX_TribAtivAtividade_Atividade_inc_AtividadeDenom").HasFillFactor(90);

            entity.Property(e => e.Atividade)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.AtCnae)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Sim")
                .IsFixedLength()
                .HasComment("Marca se a atividade é padrão da tabela CNAE.")
                .HasColumnName("AtCNAE");
            entity.Property(e => e.AtRequisitos)
                .HasComment("Explicar os requisitos necessários para abertura de um empresa com a atividade.")
                .HasColumnType("text");
            entity.Property(e => e.AtSetId).HasColumnName("AtSetID");
            entity.Property(e => e.AtivClasse)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AtivVedadaSimplesNacional)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AtividadeAutonomo)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength();
            entity.Property(e => e.AtividadeCodAntigo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.AtividadeDenom)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.AtividadeEnquadrMicroEmpr)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength()
                .HasComment("informa se esta atividade deve ou não ser enquadrada como micro empresa");
            entity.Property(e => e.AtividadeRisco)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AtividadeUffiacresc)
                .HasDefaultValue(0m)
                .HasComment("Este campo foi criado pois existe no SMTR. (michimi)")
                .HasColumnType("money")
                .HasColumnName("AtividadeUFFIAcresc");
            entity.Property(e => e.DataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");

            entity.HasOne(d => d.AtSet).WithMany(p => p.TribAtivAtividades)
                .HasForeignKey(d => d.AtSetId)
                .HasConstraintName("FK_TribAtivAtividade_TribAtivSetor");

            entity.HasOne(d => d.AtivClasseNavigation).WithMany(p => p.TribAtivAtividades)
                .HasForeignKey(d => d.AtivClasse)
                .HasConstraintName("FK_TribAtivAtividade_TribAtivClasse");

            entity.HasMany(d => d.Servs).WithMany(p => p.Atividades)
                .UsingEntity<Dictionary<string, object>>(
                    "TribAtivServico",
                    r => r.HasOne<TribTiposServico>().WithMany()
                        .HasForeignKey("ServId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_TribAtivServicos_TribTiposServicos"),
                    l => l.HasOne<TribAtivAtividade>().WithMany()
                        .HasForeignKey("Atividade")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_TribAtivServicos_TribAtivAtividade"),
                    j =>
                    {
                        j.HasKey("Atividade", "ServId");
                        j.ToTable("TribAtivServicos");
                        j.IndexerProperty<string>("Atividade")
                            .HasMaxLength(10)
                            .IsUnicode(false);
                        j.IndexerProperty<string>("ServId")
                            .HasMaxLength(20)
                            .IsUnicode(false)
                            .HasColumnName("ServID");
                    });
        });

        modelBuilder.Entity<TribAtivAtividadeDocumento>(entity =>
        {
            entity.HasKey(e => new { e.Atividade, e.Idtipoempresa, e.IdDocumento }).HasName("PK_TribAtivAtividadeDocumento_1");

            entity.ToTable("TribAtivAtividadeDocumento");

            entity.Property(e => e.Atividade)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Idtipoempresa)
                .HasDefaultValue((short)1)
                .HasColumnName("idtipoempresa");
            entity.Property(e => e.IdDocumento).HasColumnName("idDocumento");

            entity.HasOne(d => d.AtividadeNavigation).WithMany(p => p.TribAtivAtividadeDocumentos)
                .HasForeignKey(d => d.Atividade)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribAtivAtividadeDocumento_TribAtivAtividade");

            entity.HasOne(d => d.IdDocumentoNavigation).WithMany(p => p.TribAtivAtividadeDocumentos)
                .HasForeignKey(d => d.IdDocumento)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribAtivAtividadeDocumento_TribAtivDocumentos");

            entity.HasOne(d => d.IdtipoempresaNavigation).WithMany(p => p.TribAtivAtividadeDocumentos)
                .HasForeignKey(d => d.Idtipoempresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribAtivAtividadeDocumento_tbtribtipoempresa");
        });

        modelBuilder.Entity<TribAtivAtividadeGrauRisco>(entity =>
        {
            entity.HasKey(e => new { e.Atividade, e.SetorId }).HasName("PK_TribAtivAtividadeGrauRisco1");

            entity.ToTable("TribAtivAtividadeGrauRisco");

            entity.Property(e => e.Atividade)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SetorId).HasColumnName("SetorID");
            entity.Property(e => e.Idrisco).HasColumnName("idrisco");

            entity.HasOne(d => d.AtividadeNavigation).WithMany(p => p.TribAtivAtividadeGrauRiscos)
                .HasForeignKey(d => d.Atividade)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribAtivAtividadeGrauRisco_TribAtivAtividade");

            entity.HasOne(d => d.IdriscoNavigation).WithMany(p => p.TribAtivAtividadeGrauRiscos)
                .HasForeignKey(d => d.Idrisco)
                .HasConstraintName("FK_TribAtivAtividadeGrauRisco_tbtribgraurisco");

            entity.HasOne(d => d.Setor).WithMany(p => p.TribAtivAtividadeGrauRiscos)
                .HasForeignKey(d => d.SetorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribAtivAtividadeGrauRisco_TribAtivSetorLicenciamento");
        });

        modelBuilder.Entity<TribAtivAtividadeGrauRiscoOld>(entity =>
        {
            entity.HasKey(e => new { e.Atividade, e.SetorId }).HasName("PK_TribAtivAtividadeGrauRisco");

            entity.ToTable("TribAtivAtividadeGrauRisco_old");

            entity.Property(e => e.Atividade)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SetorId).HasColumnName("SetorID");
            entity.Property(e => e.Risco)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribAtivAtividadeGrauRiscoPergunta>(entity =>
        {
            entity.HasKey(e => new { e.Atividade, e.SetorId, e.Idpergunta, e.Idresposta });

            entity.Property(e => e.Atividade)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SetorId).HasColumnName("SetorID");
            entity.Property(e => e.Idpergunta).HasColumnName("idpergunta");
            entity.Property(e => e.Idresposta).HasColumnName("idresposta");
            entity.Property(e => e.Idrisco).HasColumnName("idrisco");

            entity.HasOne(d => d.AtividadeNavigation).WithMany(p => p.TribAtivAtividadeGrauRiscoPergunta)
                .HasForeignKey(d => d.Atividade)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribAtivAtividadeGrauRiscoPerguntas_TribAtivAtividade");

            entity.HasOne(d => d.IdperguntaNavigation).WithMany(p => p.TribAtivAtividadeGrauRiscoPergunta)
                .HasForeignKey(d => d.Idpergunta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribAtivAtividadeGrauRiscoPerguntas_tbtribativperguntas");

            entity.HasOne(d => d.IdrespostaNavigation).WithMany(p => p.TribAtivAtividadeGrauRiscoPergunta)
                .HasForeignKey(d => d.Idresposta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribAtivAtividadeGrauRiscoPerguntas_tbtribativrespostas");

            entity.HasOne(d => d.IdriscoNavigation).WithMany(p => p.TribAtivAtividadeGrauRiscoPergunta)
                .HasForeignKey(d => d.Idrisco)
                .HasConstraintName("FK_TribAtivAtividadeGrauRiscoPerguntas_tbtribgraurisco");

            entity.HasOne(d => d.Setor).WithMany(p => p.TribAtivAtividadeGrauRiscoPergunta)
                .HasForeignKey(d => d.SetorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribAtivAtividadeGrauRiscoPerguntas_TribAtivSetorLicenciamento");
        });

        modelBuilder.Entity<TribAtivAtividadePergunta>(entity =>
        {
            entity.HasKey(e => new { e.Atividade, e.Idtipoempresa, e.Idpergunta, e.Idresposta, e.Iddocumento }).HasName("PK_TribAtivAtividadePerguntas_1");

            entity.Property(e => e.Atividade)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Idtipoempresa)
                .HasDefaultValue((short)1)
                .HasColumnName("idtipoempresa");
            entity.Property(e => e.Idpergunta).HasColumnName("idpergunta");
            entity.Property(e => e.Idresposta).HasColumnName("idresposta");
            entity.Property(e => e.Iddocumento).HasColumnName("iddocumento");

            entity.HasOne(d => d.IddocumentoNavigation).WithMany(p => p.TribAtivAtividadePergunta)
                .HasForeignKey(d => d.Iddocumento)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribAtivAtividadePerguntas_TribAtivDocumentos");

            entity.HasOne(d => d.IdperguntaNavigation).WithMany(p => p.TribAtivAtividadePergunta)
                .HasForeignKey(d => d.Idpergunta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribAtivAtividadePerguntas_tbtribativperguntas");

            entity.HasOne(d => d.IdrespostaNavigation).WithMany(p => p.TribAtivAtividadePergunta)
                .HasForeignKey(d => d.Idresposta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribAtivAtividadePerguntas_tbtribativrespostas");

            entity.HasOne(d => d.IdtipoempresaNavigation).WithMany(p => p.TribAtivAtividadePergunta)
                .HasForeignKey(d => d.Idtipoempresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribAtivAtividadePerguntas_tbtribtipoempresa");
        });

        modelBuilder.Entity<TribAtivClasse>(entity =>
        {
            entity.HasKey(e => e.AtivClasse);

            entity.ToTable("TribAtivClasse");

            entity.Property(e => e.AtivClasse)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AtivClasseDenom)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.AtivGrupo)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.AtivGrupoNavigation).WithMany(p => p.TribAtivClasses)
                .HasForeignKey(d => d.AtivGrupo)
                .HasConstraintName("FK_TribAtivClasse_TribAtivGrupo");
        });

        modelBuilder.Entity<TribAtivDivisao>(entity =>
        {
            entity.HasKey(e => e.AtivDiv);

            entity.ToTable("TribAtivDivisao");

            entity.Property(e => e.AtivDiv)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AtivDivDenom)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.AtivSecao)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.AtivSecaoNavigation).WithMany(p => p.TribAtivDivisaos)
                .HasForeignKey(d => d.AtivSecao)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribAtivDivisao_TribAtivSecao");
        });

        modelBuilder.Entity<TribAtivDocumento>(entity =>
        {
            entity.HasKey(e => e.Iddocumento);

            entity.Property(e => e.Iddocumento)
                .ValueGeneratedNever()
                .HasColumnName("iddocumento");
            entity.Property(e => e.Dsdocumento)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dsdocumento");
            entity.Property(e => e.Flobrigatorio).HasColumnName("flobrigatorio");
            entity.Property(e => e.Idautodeclaracao).HasColumnName("idautodeclaracao");
            entity.Property(e => e.Nmdocumento)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasComment("Nome do documento que deverá ser apresentado ao Município.")
                .HasColumnName("nmdocumento");
            entity.Property(e => e.SetorId)
                .HasDefaultValue((short)1)
                .HasColumnName("SetorID");
        });

        modelBuilder.Entity<TribAtivDocumentosDispensado>(entity =>
        {
            entity.HasKey(e => new { e.Iddocumento, e.Iddocumentodispensado });

            entity.ToTable("TribAtivDocumentosDispensado");

            entity.Property(e => e.Iddocumento).HasColumnName("iddocumento");
            entity.Property(e => e.Iddocumentodispensado).HasColumnName("iddocumentodispensado");
            entity.Property(e => e.Dsmotivo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dsmotivo");

            entity.HasOne(d => d.IddocumentoNavigation).WithMany(p => p.TribAtivDocumentosDispensadoIddocumentoNavigations)
                .HasForeignKey(d => d.Iddocumento)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribAtivDocumentosDispensado_TribAtivDocumentos");

            entity.HasOne(d => d.IddocumentodispensadoNavigation).WithMany(p => p.TribAtivDocumentosDispensadoIddocumentodispensadoNavigations)
                .HasForeignKey(d => d.Iddocumentodispensado)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribAtivDocumentosDispensado_TribAtivDocumentos1");
        });

        modelBuilder.Entity<TribAtivGrupo>(entity =>
        {
            entity.HasKey(e => e.AtivGrupo);

            entity.ToTable("TribAtivGrupo");

            entity.Property(e => e.AtivGrupo)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AtivDiv)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AtivGrupoDenom)
                .HasMaxLength(255)
                .IsUnicode(false);

            entity.HasOne(d => d.AtivDivNavigation).WithMany(p => p.TribAtivGrupos)
                .HasForeignKey(d => d.AtivDiv)
                .HasConstraintName("FK_TribAtivGrupo_TribAtivDivisao");

            entity.HasMany(d => d.TipoEstabs).WithMany(p => p.AtivGrupos)
                .UsingEntity<Dictionary<string, object>>(
                    "SerIturGrupoCnaetipoEstabelecimento",
                    r => r.HasOne<SerIturTipoEstabelecimento>().WithMany()
                        .HasForeignKey("TipoEstabId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_SerITurGrupoCNAETipoEstabelecimento_SerITurTipoEstabelecimento"),
                    l => l.HasOne<TribAtivGrupo>().WithMany()
                        .HasForeignKey("AtivGrupo")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_SerITurGrupoCNAETipoEstabelecimento_TribAtivGrupo"),
                    j =>
                    {
                        j.HasKey("AtivGrupo", "TipoEstabId");
                        j.ToTable("SerITurGrupoCNAETipoEstabelecimento");
                        j.IndexerProperty<string>("AtivGrupo")
                            .HasMaxLength(4)
                            .IsUnicode(false)
                            .IsFixedLength();
                        j.IndexerProperty<int>("TipoEstabId").HasColumnName("TipoEstabID");
                    });
        });

        modelBuilder.Entity<TribAtivPergunta>(entity =>
        {
            entity.HasKey(e => e.PerguntaNumero).HasName("PK_Perguntas");

            entity.Property(e => e.PerguntaNumero)
                .ValueGeneratedNever()
                .HasColumnName("Pergunta_Numero");
            entity.Property(e => e.Pergunta)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribAtivSecao>(entity =>
        {
            entity.HasKey(e => e.AtivSecao);

            entity.ToTable("TribAtivSecao");

            entity.Property(e => e.AtivSecao)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AtivSecaoDenom)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribAtivSetor>(entity =>
        {
            entity.HasKey(e => e.AtSetId);

            entity.ToTable("TribAtivSetor");

            entity.Property(e => e.AtSetId)
                .ValueGeneratedNever()
                .HasColumnName("AtSetID");
            entity.Property(e => e.AtSetDescricao)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribAtivSetorLicenciamento>(entity =>
        {
            entity.HasKey(e => e.SetorId);

            entity.ToTable("TribAtivSetorLicenciamento");

            entity.Property(e => e.SetorId)
                .ValueGeneratedNever()
                .HasColumnName("SetorID");
            entity.Property(e => e.AssuntoId)
                .HasComment("Assunto que será usado para criação do Protocolo Digital")
                .HasColumnName("AssuntoID");
            entity.Property(e => e.AssuntoIdmeidomicTrib)
                .HasComment("Assunto que será usado para criação do Protocolo Digital quando se tratar de MEI Domicilio Tributário")
                .HasColumnName("AssuntoIDMEIDomicTrib");
            entity.Property(e => e.AssuntoIdmeiestab).HasColumnName("AssuntoIDMEIEstab");
            entity.Property(e => e.SetorNome)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.UnidadeId).HasColumnName("UnidadeID");
        });

        modelBuilder.Entity<TribAtivSetorLicenciamentousuario>(entity =>
        {
            entity.HasKey(e => new { e.Idusuario, e.SetorId });

            entity.ToTable("TribAtivSetorLicenciamentousuario");

            entity.Property(e => e.Idusuario).HasColumnName("idusuario");
            entity.Property(e => e.SetorId).HasColumnName("SetorID");
            entity.Property(e => e.Dtinclusao)
                .HasColumnType("datetime")
                .HasColumnName("dtinclusao");
            entity.Property(e => e.Idusuarioinclusao).HasColumnName("idusuarioinclusao");
        });

        modelBuilder.Entity<TribAtivSetorTributo>(entity =>
        {
            entity.HasKey(e => new { e.AtSetId, e.TipoTribId, e.Tcid });

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("TgTribAtivSetorTributosDelete");
                    tb.HasTrigger("TgTribAtivSetorTributosInsert");
                    tb.HasTrigger("TgTribAtivSetorTributosUpdate");
                });

            entity.Property(e => e.AtSetId).HasColumnName("AtSetID");
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
            entity.Property(e => e.Tcid)
                .HasDefaultValue(1)
                .HasColumnName("TCID");
            entity.Property(e => e.GeraDividaAutomaticaNoAlvara)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Incide no Alvara Inicial/Renovação ou ambos");
            entity.Property(e => e.IncideNosDomicilioTributario)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength()
                .HasComment("Informa se o tributo incide nas Empresas Não Estabelecidas");
            entity.Property(e => e.PeriodoIncidencia)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Incide Mensal/Anual");
            entity.Property(e => e.QtdeUf)
                .HasComment("Quantidade UF para este tributo dentro da atividade")
                .HasColumnType("money")
                .HasColumnName("QtdeUF");

            entity.HasOne(d => d.AtSet).WithMany(p => p.TribAtivSetorTributos)
                .HasForeignKey(d => d.AtSetId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribAtivSetorTributos_TribAtivSetor");

            entity.HasOne(d => d.TipoTrib).WithMany(p => p.TribAtivSetorTributos)
                .HasForeignKey(d => d.TipoTribId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribAtivSetorTributos_TribTipoTributos");
        });

        modelBuilder.Entity<TribAtivTributosEmpresa>(entity =>
        {
            entity.HasKey(e => new { e.Atividade, e.TipoTribId });

            entity.Property(e => e.Atividade)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
            entity.Property(e => e.GeraDividaAutomaticaNoAlvara)
                .HasMaxLength(512)
                .IsUnicode(false);
            entity.Property(e => e.IncideNosDomicilioTributario)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength()
                .HasComment("Informa se o tributo incide nas Empresas Não Estabelecidas");
            entity.Property(e => e.ParamCalcId)
                .HasDefaultValue(1)
                .HasColumnName("ParamCalcID");
            entity.Property(e => e.PeriodoIncidencia)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.QtdeUf)
                .HasComment("Quantidade UF para este tributo dentro da atividade")
                .HasColumnType("money")
                .HasColumnName("QtdeUF");
            entity.Property(e => e.Tcid)
                .HasDefaultValue(1)
                .HasColumnName("TCID");

            entity.HasOne(d => d.AtividadeNavigation).WithMany(p => p.TribAtivTributosEmpresas)
                .HasForeignKey(d => d.Atividade)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribAtivTributosEmpresas_TribAtivAtividade");

            entity.HasOne(d => d.ParamCalc).WithMany(p => p.TribAtivTributosEmpresas)
                .HasForeignKey(d => d.ParamCalcId)
                .HasConstraintName("FK_TribAtivTributosEmpresas_TribEmpresasParamCalc");

            entity.HasOne(d => d.Tc).WithMany(p => p.TribAtivTributosEmpresas)
                .HasForeignKey(d => d.Tcid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribAtivTributosEmpresas_TribTiposBaseCalculo");

            entity.HasOne(d => d.TipoTrib).WithMany(p => p.TribAtivTributosEmpresas)
                .HasForeignKey(d => d.TipoTribId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribAtivTributosEmpresas_TribTipoTributos");
        });

        modelBuilder.Entity<TribAtividadeTipoAlvaraTributo>(entity =>
        {
            entity.HasKey(e => new { e.Atividade, e.TipoTribId, e.TalvId });

            entity.ToTable("tribAtividadeTipoAlvaraTributos");

            entity.Property(e => e.Atividade)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
            entity.Property(e => e.TalvId).HasColumnName("TAlvID");

            entity.HasOne(d => d.AtividadeNavigation).WithMany(p => p.TribAtividadeTipoAlvaraTributos)
                .HasForeignKey(d => d.Atividade)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tribAtividadeTipoAlvaraTributos_TribAtivAtividade");

            entity.HasOne(d => d.Talv).WithMany(p => p.TribAtividadeTipoAlvaraTributos)
                .HasForeignKey(d => d.TalvId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tribAtividadeTipoAlvaraTributos_TribEmpresasTiposAlvara");

            entity.HasOne(d => d.TipoTrib).WithMany(p => p.TribAtividadeTipoAlvaraTributos)
                .HasForeignKey(d => d.TipoTribId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tribAtividadeTipoAlvaraTributos_TribTipoTributos");

            entity.HasOne(d => d.TribAtivTributosEmpresa).WithMany(p => p.TribAtividadeTipoAlvaraTributos)
                .HasForeignKey(d => new { d.Atividade, d.TipoTribId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tribAtividadeTipoAlvaraTributos_TribAtivTributosEmpresas");
        });

        modelBuilder.Entity<TribAutorizacaoBlocosNf>(entity =>
        {
            entity.HasKey(e => e.AutNfid);

            entity.ToTable("TribAutorizacaoBlocosNF");

            entity.Property(e => e.AutNfid)
                .ValueGeneratedNever()
                .HasColumnName("AutNFID");
            entity.Property(e => e.AutDtAutorizacao).HasColumnType("datetime");
            entity.Property(e => e.AutDtConclusao).HasColumnType("datetime");
            entity.Property(e => e.AutJustificativa)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.AutNfate)
                .HasDefaultValue(0)
                .HasColumnName("AutNFAte");
            entity.Property(e => e.AutNfdata)
                .HasColumnType("datetime")
                .HasColumnName("AutNFData");
            entity.Property(e => e.AutNfdataCancelamento)
                .HasColumnType("datetime")
                .HasColumnName("AutNFDataCancelamento");
            entity.Property(e => e.AutNfdataVencimento)
                .HasColumnType("datetime")
                .HasColumnName("AutNFDataVencimento");
            entity.Property(e => e.AutNfde)
                .HasDefaultValue(0)
                .HasColumnName("AutNFDe");
            entity.Property(e => e.AutNfnumLivro)
                .HasComment("Numero do Livro quando for o caso")
                .HasColumnName("AutNFNumLivro");
            entity.Property(e => e.AutNfobservacao)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AutNFObservacao");
            entity.Property(e => e.AutNfqtdeBlocos).HasColumnName("AutNFQtdeBlocos");
            entity.Property(e => e.AutNfserie)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength()
                .HasColumnName("AutNFSerie");
            entity.Property(e => e.AutNftipoDoc)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("Notas Fiscais")
                .IsFixedLength()
                .HasComment("Notas Fiscais ou Livro")
                .HasColumnName("AutNFTipoDoc");
            entity.Property(e => e.AutStatus)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ConId)
                .HasDefaultValue(0L)
                .HasComment("Informar o identificação da grafica no cadastro de contribuintes")
                .HasColumnName("ConID");
            entity.Property(e => e.ConIdgrafica).HasColumnName("ConIDGrafica");
            entity.Property(e => e.DataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");

            entity.HasOne(d => d.Con).WithMany(p => p.TribAutorizacaoBlocosNfCons)
                .HasForeignKey(d => d.ConId)
                .HasConstraintName("FK_TribAutorizacaoBlocosNF_Contribuintes");

            entity.HasOne(d => d.ConIdgraficaNavigation).WithMany(p => p.TribAutorizacaoBlocosNfConIdgraficaNavigations)
                .HasForeignKey(d => d.ConIdgrafica)
                .HasConstraintName("FK_TribAutorizacaoBlocosNF_ContribuintesGrafica");

            entity.HasOne(d => d.EmprCmcNavigation).WithMany(p => p.TribAutorizacaoBlocosNfs)
                .HasForeignKey(d => d.EmprCmc)
                .HasConstraintName("FK_TribAutorizacaoBlocosNF_TribEmpresas");
        });

        modelBuilder.Entity<TribAutosInfracao>(entity =>
        {
            entity.HasKey(e => e.AutoInfrId);

            entity.ToTable("TribAutosInfracao", tb =>
                {
                    tb.HasTrigger("TgTribAutosInfracaoINSERT");
                    tb.HasTrigger("TgTribAutosInfracaoUPDATE");
                });

            entity.HasIndex(e => e.ConId, "IX_ConID").HasFillFactor(90);

            entity.HasIndex(e => e.EdificacaoId, "IX_EdificacaoID").HasFillFactor(90);

            entity.HasIndex(e => e.EmprCmc, "IX_EmprCmc").HasFillFactor(90);

            entity.HasIndex(e => new { e.EmprCmc, e.AutInfrRemovido, e.AutoInfrId, e.TipoTribId }, "_dta_index_TribAutosInfracao_5_1890977963__K2_K20_K1_K5_4_6_7_8_9_12_13_22").HasFillFactor(90);

            entity.Property(e => e.AutoInfrId).HasColumnName("AutoInfrID");
            entity.Property(e => e.AutInfrAno).HasDefaultValue(0);
            entity.Property(e => e.AutInfrDataAuto).HasColumnType("datetime");
            entity.Property(e => e.AutInfrDataNotif).HasColumnType("datetime");
            entity.Property(e => e.AutInfrDesObs)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.AutInfrDesconto)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Sim")
                .IsFixedLength()
                .HasComment("Marca se o auto de infração ira gerar dívidas com parcela única e desconto.");
            entity.Property(e => e.AutInfrFiscalizado)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.AutInfrInfracao)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.AutInfrLegislacao)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.AutInfrMoeda)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength();
            entity.Property(e => e.AutInfrPercDescPagto)
                .HasDefaultValue(0m)
                .HasColumnType("money");
            entity.Property(e => e.AutInfrPercDescPagtoAntecipado)
                .HasComment("Percentual de desconto para pagamento antecipado.")
                .HasColumnType("money");
            entity.Property(e => e.AutInfrQtdeDiasPagto).HasDefaultValue(0);
            entity.Property(e => e.AutInfrQtdeDiasPagtoAntecipado).HasDefaultValue(0);
            entity.Property(e => e.AutInfrRemovido)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength();
            entity.Property(e => e.AutInfrValor)
                .HasDefaultValue(0m)
                .HasColumnType("money");
            entity.Property(e => e.AutInfrVencPgtoAntecipado)
                .HasComment("Vencimento para pagamento antecipado da divida.")
                .HasColumnType("datetime");
            entity.Property(e => e.AutInfrVencimento).HasColumnType("datetime");
            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.Idmoeda).HasColumnName("IDMoeda");
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");

            entity.HasOne(d => d.Con).WithMany(p => p.TribAutosInfracaos)
                .HasForeignKey(d => d.ConId)
                .HasConstraintName("FK_TribAutosInfracao_Contribuintes");

            entity.HasOne(d => d.Edificacao).WithMany(p => p.TribAutosInfracaos)
                .HasForeignKey(d => d.EdificacaoId)
                .HasConstraintName("FK_TribAutosInfracao_TribEdificacoes");

            entity.HasOne(d => d.EmprCmcNavigation).WithMany(p => p.TribAutosInfracaos)
                .HasForeignKey(d => d.EmprCmc)
                .HasConstraintName("FK_TribAutosInfracao_TribEmpresas");

            entity.HasOne(d => d.IdmoedaNavigation).WithMany(p => p.TribAutosInfracaos)
                .HasForeignKey(d => d.Idmoeda)
                .HasConstraintName("FK_TribAutosInfracao_Moedas");
        });

        modelBuilder.Entity<TribBaixaArquivoSuperSimple>(entity =>
        {
            entity.HasKey(e => e.ArquivoId);

            entity.Property(e => e.ArquivoId)
                .ValueGeneratedNever()
                .HasColumnName("ArquivoID");
            entity.Property(e => e.Convenio)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DataCredito).HasColumnType("datetime");
            entity.Property(e => e.DataGeracao).HasColumnType("datetime");
            entity.Property(e => e.DataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");
            entity.Property(e => e.ValorTotal).HasColumnType("money");
        });

        modelBuilder.Entity<TribBaixaConteudoArquivo>(entity =>
        {
            entity.HasKey(e => e.ConteudoBaixaId);

            entity.ToTable("TribBaixaConteudoArquivo");

            entity.HasIndex(e => new { e.DataBaixa, e.ConvenioId }, "IX_TribBaixaConteudoArquivo").HasFillFactor(90);

            entity.HasIndex(e => e.BoleNossoNumero, "IX_TribBaixaConteudoArquivo_1").HasFillFactor(90);

            entity.Property(e => e.ConteudoBaixaId).HasColumnName("ConteudoBaixaID");
            entity.Property(e => e.BoleArquivo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("boleArquivo");
            entity.Property(e => e.BoleDataInclusao)
                .HasColumnType("datetime")
                .HasColumnName("boleDataInclusao");
            entity.Property(e => e.BoleErro)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("boleErro");
            entity.Property(e => e.BoleNossoNumero)
                .HasMaxLength(17)
                .IsUnicode(false)
                .HasColumnName("boleNossoNumero");
            entity.Property(e => e.BoleUsuarioInclusao)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("boleUsuarioInclusao");
            entity.Property(e => e.ConvenioId).HasColumnName("ConvenioID");
            entity.Property(e => e.DataBaixa).HasColumnType("datetime");
            entity.Property(e => e.DataVencimento).HasColumnType("datetime");
            entity.Property(e => e.ValorBoleto).HasColumnType("money");
        });

        modelBuilder.Entity<TribBaixaDetalhesArquivoSuperSimple>(entity =>
        {
            entity.HasKey(e => e.DetalheId);

            entity.HasIndex(e => e.ArquivoId, "IX_ArquivoID")
                .IsDescending()
                .HasFillFactor(90);

            entity.HasIndex(e => e.IdentificacaoGuia, "IX_IdentificacaoGuia").HasFillFactor(90);

            entity.HasIndex(e => e.ConIddivida, "IX_TribBaixaDetalhesArquivoSuperSimples_ConIDDivida").HasFillFactor(90);

            entity.HasIndex(e => e.EmpIddivida, "IX_TribBaixaDetalhesArquivoSuperSimples_EmpIDDivida").HasFillFactor(90);

            entity.Property(e => e.DetalheId).HasColumnName("DetalheID");
            entity.Property(e => e.AgenciaRec)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ArquivoId).HasColumnName("ArquivoID");
            entity.Property(e => e.AutentBanco)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.BancoRec)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cnpjcontrib)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("CNPJContrib");
            entity.Property(e => e.Competencia)
                .HasMaxLength(6)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ConIddivida).HasColumnName("ConIDDivida");
            entity.Property(e => e.DataArrecad).HasColumnType("datetime");
            entity.Property(e => e.DataVencimento).HasColumnType("datetime");
            entity.Property(e => e.EmpIddivida).HasColumnName("EmpIDDivida");
            entity.Property(e => e.IdentificacaoGuia)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Obs)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.OperacaoBaixa)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("NovaDivida,AlteracaoValor,BaixaFiss");
            entity.Property(e => e.Receita)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Situacao)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ValorAutenticado).HasColumnType("money");
            entity.Property(e => e.ValorJuros).HasColumnType("money");
            entity.Property(e => e.ValorMulta).HasColumnType("money");
            entity.Property(e => e.ValorPrincipal).HasColumnType("money");

            entity.HasOne(d => d.Arquivo).WithMany(p => p.TribBaixaDetalhesArquivoSuperSimples)
                .HasForeignKey(d => d.ArquivoId)
                .HasConstraintName("FK_TribBaixaDetalhesArquivoSuperSimples_TribBaixaArquivoSuperSimples");
        });

        modelBuilder.Entity<TribBaixaDevolucao>(entity =>
        {
            entity.HasKey(e => e.BaDeId);

            entity.ToTable("tribBaixaDevolucao");

            entity.HasIndex(e => e.ConId, "IX_ConID").HasFillFactor(90);

            entity.HasIndex(e => e.ProcId, "IX_ProcID").HasFillFactor(90);

            entity.Property(e => e.BaDeId).HasColumnName("BaDeID");
            entity.Property(e => e.BaDeDataBaixa).HasColumnType("datetime");
            entity.Property(e => e.BaDeDataDevolucao).HasColumnType("datetime");
            entity.Property(e => e.BaDeDataInclusao).HasColumnType("datetime");
            entity.Property(e => e.BaDeMotivo).IsUnicode(false);
            entity.Property(e => e.BaDeSituacao)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BaDeUsuario)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BaDeUsuarioBaixa)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BaDeValor)
                .HasComment("Valor deve ser atualizado por trigger na entidade tribBaixaDevolucaoDividas")
                .HasColumnType("money");
            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.ConvenioId).HasColumnName("ConvenioID");
            entity.Property(e => e.NrAnoDespesa).HasColumnName("nrAnoDespesa");
            entity.Property(e => e.NrDespesa).HasColumnName("nrDespesa");
            entity.Property(e => e.ProcId)
                .HasComment("Código de Identificação do Processo")
                .HasColumnName("ProcID");

            entity.HasOne(d => d.Con).WithMany(p => p.TribBaixaDevolucaos)
                .HasForeignKey(d => d.ConId)
                .HasConstraintName("FK_tribBaixaDevolucao_Contribuintes");
        });

        modelBuilder.Entity<TribBaixaDevolucaoCompensacao>(entity =>
        {
            entity.HasKey(e => e.BaDeCompId);

            entity.ToTable("TribBaixaDevolucaoCompensacao");

            entity.HasIndex(e => e.BaDeId, "IX_TribBaixaDevolucaoCompensacao_BaDeID");

            entity.Property(e => e.BaDeCompId).HasColumnName("BaDeCompID");
            entity.Property(e => e.BaDeId).HasColumnName("BaDeID");
            entity.Property(e => e.BaiId).HasColumnName("BaiID");
            entity.Property(e => e.CompCorrMonetaria).HasColumnType("money");
            entity.Property(e => e.CompDesconto).HasColumnType("money");
            entity.Property(e => e.CompJuros).HasColumnType("money");
            entity.Property(e => e.CompMulta).HasColumnType("money");
            entity.Property(e => e.CompMultaDa)
                .HasColumnType("money")
                .HasColumnName("CompMultaDA");
            entity.Property(e => e.CompPrincipal).HasColumnType("money");
            entity.Property(e => e.CompTotalDivida).HasColumnType("money");
            entity.Property(e => e.CompValor).HasColumnType("money");
            entity.Property(e => e.ConIddivida).HasColumnName("ConIDDivida");
            entity.Property(e => e.DivEmpId).HasColumnName("DivEmpID");
            entity.Property(e => e.ImoIddivida).HasColumnName("ImoIDDivida");

            entity.HasOne(d => d.BaDe).WithMany(p => p.TribBaixaDevolucaoCompensacaos)
                .HasForeignKey(d => d.BaDeId)
                .HasConstraintName("FK_TribBaixaDevolucaoCompensacao_tribBaixaDevolucao");
        });

        modelBuilder.Entity<TribBaixaDevolucaoDivida>(entity =>
        {
            entity.HasKey(e => e.DeDiId);

            entity.HasIndex(e => e.BaDeId, "IX_BaDeID").HasFillFactor(90);

            entity.HasIndex(e => e.ConIddivida, "IX_ConIDDivida").HasFillFactor(90);

            entity.HasIndex(e => e.DivEmpId, "IX_DivEmpID").HasFillFactor(90);

            entity.HasIndex(e => e.ImoIddivida, "IX_ImoIDDivida").HasFillFactor(90);

            entity.Property(e => e.DeDiId).HasColumnName("DeDiID");
            entity.Property(e => e.BaDeId).HasColumnName("BaDeID");
            entity.Property(e => e.BaiId).HasColumnName("BaiID");
            entity.Property(e => e.ConIddivida).HasColumnName("ConIDDivida");
            entity.Property(e => e.ConIddividaNova).HasColumnName("ConIDDividaNova");
            entity.Property(e => e.DeDiDataInclusao)
                .HasComment("Data da inclusão do registro.")
                .HasColumnType("datetime");
            entity.Property(e => e.DeDiGerarNovaDivida)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Marca se a devolução vai gerar nova dívida.");
            entity.Property(e => e.DeDiUsuarioInclusao)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("Nome do usuário que incluiu o registro.");
            entity.Property(e => e.DeDiValor).HasColumnType("money");
            entity.Property(e => e.DivEmpId).HasColumnName("DivEmpID");
            entity.Property(e => e.DivEmpIdnova).HasColumnName("DivEmpIDNova");
            entity.Property(e => e.ImoIddivida).HasColumnName("ImoIDDivida");
            entity.Property(e => e.ImoIddividaNova).HasColumnName("ImoIDDividaNova");

            entity.HasOne(d => d.BaDe).WithMany(p => p.TribBaixaDevolucaoDivida)
                .HasForeignKey(d => d.BaDeId)
                .HasConstraintName("FK_TribBaixaDevolucaoDividas_tribBaixaDevolucao");
        });

        modelBuilder.Entity<TribBaixaDevolucaoDividasComp>(entity =>
        {
            entity.HasKey(e => new { e.DeDiId, e.TipoTribId });

            entity.ToTable("TribBaixaDevolucaoDividasComp");

            entity.Property(e => e.DeDiId).HasColumnName("DeDiID");
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
            entity.Property(e => e.CdReceita)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("cdReceita");
            entity.Property(e => e.DeCoValor).HasColumnType("money");
            entity.Property(e => e.DeCoValorAcrescimo).HasColumnType("money");
            entity.Property(e => e.DeCoValorCompensado).HasColumnType("money");

            entity.HasOne(d => d.DeDi).WithMany(p => p.TribBaixaDevolucaoDividasComps)
                .HasForeignKey(d => d.DeDiId)
                .HasConstraintName("FK_TribBaixaDevolucaoDividasComp_TribBaixaDevolucaoDividas");

            entity.HasOne(d => d.TipoTrib).WithMany(p => p.TribBaixaDevolucaoDividasComps)
                .HasForeignKey(d => d.TipoTribId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribBaixaDevolucaoDividasComp_TribTipoTributos");
        });

        modelBuilder.Entity<TribBaixaMovimento>(entity =>
        {
            entity.HasKey(e => e.Idbaixa);

            entity.ToTable("tribBaixaMovimento", tb => tb.HasTrigger("TgTribBaixaMovimentoInsert"));

            entity.HasIndex(e => e.ConIddivida, "IX_ConIDDivida").HasFillFactor(90);

            entity.HasIndex(e => e.DivEmpId, "IX_DivEmpID").HasFillFactor(90);

            entity.HasIndex(e => e.ImoIddivida, "IX_ImoIDDivida").HasFillFactor(90);

            entity.Property(e => e.Idbaixa).HasColumnName("IDBaixa");
            entity.Property(e => e.ConIddivida).HasColumnName("ConIDDivida");
            entity.Property(e => e.DivEmpId).HasColumnName("DivEmpID");
            entity.Property(e => e.ImoIddivida).HasColumnName("ImoIDDivida");
            entity.Property(e => e.MoBaDataBaixa).HasColumnType("datetime");
            entity.Property(e => e.MoBaDataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Data do sistema que foi efetuado a movimentação")
                .HasColumnType("datetime");
            entity.Property(e => e.MoBaHost)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValueSql("(host_name())")
                .HasComment("Nome da maquina que fez a baixa.");
            entity.Property(e => e.MoBaUsuario)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())")
                .HasComment("Usuário que incluiu a baixa");
            entity.Property(e => e.MoBaValorBaixa).HasColumnType("money");
            entity.Property(e => e.TipoBxId).HasColumnName("TipoBxID");

            entity.HasOne(d => d.ConIddividaNavigation).WithMany(p => p.TribBaixaMovimentos)
                .HasForeignKey(d => d.ConIddivida)
                .HasConstraintName("FK_tribBaixaMovimento_TribDividasContribuinte");

            entity.HasOne(d => d.DivEmp).WithMany(p => p.TribBaixaMovimentos)
                .HasForeignKey(d => d.DivEmpId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_tribBaixaMovimento_TribDividasEmpresas");

            entity.HasOne(d => d.ImoIddividaNavigation).WithMany(p => p.TribBaixaMovimentos)
                .HasForeignKey(d => d.ImoIddivida)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_tribBaixaMovimento_TribDividasImo");
        });

        modelBuilder.Entity<TribBoleto>(entity =>
        {
            entity.HasKey(e => e.BoleNossoNumero);

            entity.HasIndex(e => e.ConvenioId, "IX_ConvenioId").HasFillFactor(90);

            entity.HasIndex(e => e.ConId, "IX_TribBoletos_ConID").HasFillFactor(90);

            entity.HasIndex(e => e.LeiDescId, "IX_TribBoletos_LeiDescID");

            entity.HasIndex(e => e.BoleData, "IX_boleData").HasFillFactor(90);

            entity.HasIndex(e => new { e.BoleNossoNumero, e.BoleData, e.BoleVencimento, e.BoleValorPrinc, e.BoleValorDesconto, e.BoleValorJuros, e.BoleValorMulta, e.BoleValorCorrecao, e.BoleValorBoleto }, "ix_TribBoletos_NossoNumero_Data_Vencimento_ValorPrinc_ValorDesconto_ValorJuros_ValorMulta_boleValorCorrecao_ValorBoleto").HasFillFactor(90);

            entity.Property(e => e.BoleNossoNumero)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("boleNossoNumero");
            entity.Property(e => e.BoleCodBarra)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("boleCodBarra");
            entity.Property(e => e.BoleData)
                .HasColumnType("datetime")
                .HasColumnName("boleData");
            entity.Property(e => e.BoleDataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Data da inclusão do registro.")
                .HasColumnType("datetime")
                .HasColumnName("boleDataInclusao");
            entity.Property(e => e.BoleIp)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("boleIp");
            entity.Property(e => e.BoleLinhaDigitavel)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("boleLinhaDigitavel");
            entity.Property(e => e.BoleMoeda)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Código da moeda que foi gerado o boleto.")
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("boleMoeda");
            entity.Property(e => e.BoleOrigem)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("boleOrigem");
            entity.Property(e => e.BoleUsuarioInclusao)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())")
                .HasComment("Nome do usuário que incluiu o registro.")
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("boleUsuarioInclusao");
            entity.Property(e => e.BoleValorBoleto)
                .HasComputedColumnSql("([boleValorPrinc] - [boleValorDesconto] + [boleValorJuros] + [boleValorMulta] + [boleValorMultaDA] + [boleValorCorrecao])", false)
                .HasComment("Contém o valor do boleto, somado todos os campos.")
                .HasColumnType("money")
                .HasColumnName("boleValorBoleto");
            entity.Property(e => e.BoleValorCorrecao)
                .HasDefaultValue(0m)
                .HasColumnType("money")
                .HasColumnName("boleValorCorrecao");
            entity.Property(e => e.BoleValorDesconto)
                .HasComment("Valor do desconto do boleto bancário.")
                .HasColumnType("money")
                .HasColumnName("boleValorDesconto");
            entity.Property(e => e.BoleValorJuros)
                .HasDefaultValue(0m)
                .HasColumnType("money")
                .HasColumnName("boleValorJuros");
            entity.Property(e => e.BoleValorMulta)
                .HasDefaultValue(0m)
                .HasColumnType("money")
                .HasColumnName("boleValorMulta");
            entity.Property(e => e.BoleValorMultaDa)
                .HasComment("Valor da multa de dívida ativa.")
                .HasColumnType("money")
                .HasColumnName("boleValorMultaDA");
            entity.Property(e => e.BoleValorPrinc)
                .HasDefaultValue(0m)
                .HasComment("Valor do bloqueto bancário.")
                .HasColumnType("money")
                .HasColumnName("boleValorPrinc");
            entity.Property(e => e.BoleVencimento)
                .HasColumnType("datetime")
                .HasColumnName("boleVencimento");
            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.LeiDescId).HasColumnName("LeiDescID");
        });

        modelBuilder.Entity<TribBoletosBarra>(entity =>
        {
            entity.HasKey(e => e.Bolenossonumero);

            entity.ToTable("tribBoletosBarra");

            entity.Property(e => e.Bolenossonumero)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("bolenossonumero");
            entity.Property(e => e.BoleCodigoBarra)
                .HasColumnType("image")
                .HasColumnName("boleCodigoBarra");
        });

        modelBuilder.Entity<TribBoletosDivida>(entity =>
        {
            entity.HasKey(e => e.BoleDivId);

            entity.ToTable("tribBoletosDividas", tb =>
                {
                    tb.HasTrigger("TgTribBoletosDividasDELETE");
                    tb.HasTrigger("TgTribBoletosDividasInsert");
                    tb.HasTrigger("TgTribBoletosDividasUpdate");
                });

            entity.HasIndex(e => e.ConIddivida, "IX_ConIDDivida").HasFillFactor(90);

            entity.HasIndex(e => e.EmpIddivida, "IX_EmpIDDivida").HasFillFactor(90);

            entity.HasIndex(e => e.ImoIddivida, "IX_ImoIDDivida").HasFillFactor(90);

            entity.HasIndex(e => e.BoleNossoNumero, "IX_boleNossoNumero").HasFillFactor(90);

            entity.HasIndex(e => e.BoleNossoNumero, "IX_tribBoletosDividas_boleNossoNumero").HasFillFactor(90);

            entity.HasIndex(e => new { e.BoleNossoNumero, e.BoleValorDesconto }, "IX_tribBoletosDividas_boleNossoNumero_boleValorDesconto_inc_VlPrinc_VlJur_VlMul_VlCor_VlMDA");

            entity.HasIndex(e => e.BoleValorDesconto, "IX_tribBoletosDividas_boleValorDesconto_inc_NossoNum_VlPrinc_VlJur_VlMul_VlCor_VlMDA");

            entity.HasIndex(e => e.BoleValorDesconto, "IX_tribBoletosDividas_boleValorDesconto_inc_boleNossoNumero");

            entity.HasIndex(e => e.ImoIddivida, "_dta_index_tribBoletosDividas_8_120647773__K2_5").HasFillFactor(90);

            entity.HasIndex(e => new { e.EmpIddivida, e.BoleDivId, e.ImoIddivida, e.BoleNossoNumero, e.ConIddivida }, "_dta_index_tribBoletosDividas_8_120647773__K4_K1_K2_K5_K3").HasFillFactor(90);

            entity.HasIndex(e => new { e.BoleNossoNumero, e.ConIddivida, e.ImoIddivida }, "_dta_index_tribBoletosDividas_8_120647773__K5_K3_K2").HasFillFactor(90);

            entity.HasIndex(e => new { e.BoleNossoNumero, e.EmpIddivida }, "_dta_index_tribBoletosDividas_8_120647773__K5_K4").HasFillFactor(90);

            entity.HasIndex(e => new { e.BoleNossoNumero, e.ImoIddivida, e.EmpIddivida, e.ConIddivida, e.BoleValorPagoDivida, e.BoleValorApagar }, "_dta_index_tribBoletosDividas_9_120647773__K5_K2_K4_K3_K13_K14").HasFillFactor(90);

            entity.HasIndex(e => new { e.BoleNossoNumero, e.ConIddivida, e.BoleValorPagoDivida, e.BoleValorApagar }, "_dta_index_tribBoletosDividas_9_120647773__K5_K3_K13_K14").HasFillFactor(90);

            entity.HasIndex(e => new { e.BoleNossoNumero, e.EmpIddivida, e.BoleValorPagoDivida, e.BoleValorApagar }, "_dta_index_tribBoletosDividas_9_120647773__K5_K4_K13_K14").HasFillFactor(90);

            entity.HasIndex(e => new { e.ConIddivida, e.BoleNossoNumero }, "ix_tribBoletosDividas_ConIDDivida_boleNossoNumero").HasFillFactor(90);

            entity.Property(e => e.BoleDivId).HasColumnName("boleDivID");
            entity.Property(e => e.BoleNossoNumero)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Código de identificação do boleto bancário.")
                .HasColumnName("boleNossoNumero");
            entity.Property(e => e.BoleValorApagar)
                .HasColumnType("money")
                .HasColumnName("boleValorApagar");
            entity.Property(e => e.BoleValorBoletoDivida)
                .HasComputedColumnSql("([boleValorPrinc] - [boleValorDesconto] + [boleValorJuros] + [boleValorMulta] + [boleValorMultaDA] + [boleValorCorrecao])", false)
                .HasColumnType("money")
                .HasColumnName("boleValorBoletoDivida");
            entity.Property(e => e.BoleValorCorrecao)
                .HasDefaultValue(0m)
                .HasColumnType("money")
                .HasColumnName("boleValorCorrecao");
            entity.Property(e => e.BoleValorDesconto)
                .HasDefaultValue(0m)
                .HasComment("Valor do desconto do boleto bancário.")
                .HasColumnType("money")
                .HasColumnName("boleValorDesconto");
            entity.Property(e => e.BoleValorJuros)
                .HasDefaultValue(0m)
                .HasColumnType("money")
                .HasColumnName("boleValorJuros");
            entity.Property(e => e.BoleValorMulta)
                .HasDefaultValue(0m)
                .HasColumnType("money")
                .HasColumnName("boleValorMulta");
            entity.Property(e => e.BoleValorMultaDa)
                .HasDefaultValue(0m)
                .HasColumnType("money")
                .HasColumnName("boleValorMultaDA");
            entity.Property(e => e.BoleValorOriginal)
                .HasColumnType("money")
                .HasColumnName("boleValorOriginal");
            entity.Property(e => e.BoleValorPagoDivida)
                .HasComment("Valor pago da divida gerado pela trigger na entidade tribDividasBaixa.")
                .HasColumnType("money")
                .HasColumnName("boleValorPagoDivida");
            entity.Property(e => e.BoleValorPrinc)
                .HasDefaultValue(0m)
                .HasComment("Valor do bloqueto bancário.")
                .HasColumnType("money")
                .HasColumnName("boleValorPrinc");
            entity.Property(e => e.ConIddivida).HasColumnName("ConIDDivida");
            entity.Property(e => e.EmpIddivida).HasColumnName("EmpIDDivida");
            entity.Property(e => e.ImoIddivida)
                .HasComment("Código de identificação da dívida.")
                .HasColumnName("ImoIDDivida");

            entity.HasOne(d => d.BoleNossoNumeroNavigation).WithMany(p => p.TribBoletosDivida)
                .HasForeignKey(d => d.BoleNossoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tribBoletosDividas_TribBoletos");

            entity.HasOne(d => d.ConIddividaNavigation).WithMany(p => p.TribBoletosDivida)
                .HasForeignKey(d => d.ConIddivida)
                .HasConstraintName("FK_tribBoletosDividas_TribDividasContribuinte");

            entity.HasOne(d => d.EmpIddividaNavigation).WithMany(p => p.TribBoletosDivida)
                .HasForeignKey(d => d.EmpIddivida)
                .HasConstraintName("FK_tribBoletosDividas_TribDividasEmpresas");

            entity.HasOne(d => d.ImoIddividaNavigation).WithMany(p => p.TribBoletosDivida)
                .HasForeignKey(d => d.ImoIddivida)
                .HasConstraintName("FK_tribBoletosDividas_TribDividasImo");
        });

        modelBuilder.Entity<TribBoletosErro>(entity =>
        {
            entity.HasKey(e => e.BoletoErroId);

            entity.ToTable(tb => tb.HasTrigger("TgTribBoletosErrosDelete"));

            entity.HasIndex(e => e.DataBaixa, "IX_TribBoletosErros_DataBaixa");

            entity.HasIndex(e => new { e.DataBaixa, e.ConvenioId, e.BxBanco }, "IX_TribBoletosErros_DataBaixa_ConvenioID_bxBanco");

            entity.HasIndex(e => new { e.BoleArquivo, e.BoleDataInclusao }, "IX_TribBoletosErros_boleArquivo_boleDataInclusao");

            entity.HasIndex(e => e.BoleNossoNumero, "IX_boleNossoNumero").HasFillFactor(90);

            entity.Property(e => e.BoletoErroId).HasColumnName("BoletoErroID");
            entity.Property(e => e.BoleArquivo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("boleArquivo");
            entity.Property(e => e.BoleDataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("boleDataInclusao");
            entity.Property(e => e.BoleErro)
                .IsUnicode(false)
                .HasColumnName("boleErro");
            entity.Property(e => e.BoleNossoNumero)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("boleNossoNumero");
            entity.Property(e => e.BoleUsuarioInclusao)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())")
                .HasColumnName("boleUsuarioInclusao");
            entity.Property(e => e.BxBanco)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("bxBanco");
            entity.Property(e => e.ConvenioId).HasColumnName("ConvenioID");
            entity.Property(e => e.DataBaixa).HasColumnType("datetime");
            entity.Property(e => e.DataVencimento).HasColumnType("datetime");
            entity.Property(e => e.ValorBoleto).HasColumnType("money");
        });

        modelBuilder.Entity<TribBoletosErrosbk>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TribBoletosErrosbk");

            entity.Property(e => e.BoleArquivo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("boleArquivo");
            entity.Property(e => e.BoleDataInclusao)
                .HasColumnType("datetime")
                .HasColumnName("boleDataInclusao");
            entity.Property(e => e.BoleErro)
                .IsUnicode(false)
                .HasColumnName("boleErro");
            entity.Property(e => e.BoleNossoNumero)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("boleNossoNumero");
            entity.Property(e => e.BoleUsuarioInclusao)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("boleUsuarioInclusao");
            entity.Property(e => e.BoletoErroId)
                .ValueGeneratedOnAdd()
                .HasColumnName("BoletoErroID");
            entity.Property(e => e.ConvenioId).HasColumnName("ConvenioID");
            entity.Property(e => e.DataBaixa).HasColumnType("datetime");
            entity.Property(e => e.DataVencimento).HasColumnType("datetime");
            entity.Property(e => e.ValorBoleto).HasColumnType("money");
        });

        modelBuilder.Entity<TribBoletosParaArquivo>(entity =>
        {
            entity.HasNoKey();

            entity.HasIndex(e => e.ConIddivida, "IX_TribBoletosParaArquivos_ConIDDivida").HasFillFactor(90);

            entity.HasIndex(e => e.DivEmpId, "IX_TribBoletosParaArquivos_DivEmpID").HasFillFactor(90);

            entity.HasIndex(e => e.ImoIddivida, "IX_TribBoletosParaArquivos_ImoIDDivida").HasFillFactor(90);

            entity.HasIndex(e => new { e.ImoIddivida, e.BoleNossoNumero }, "IX_TribBoletosParaArquivos_ImoIDDivida_boleNossoNumero");

            entity.HasIndex(e => e.BoleDataInclusao, "IX_TribBoletosParaArquivos_boleDataInclusao_inc_boleNossoNumero_ImoIDDivida").HasFillFactor(90);

            entity.HasIndex(e => e.BoleNossoNumero, "IX_TribBoletosParaArquivos_boleNossoNumero").HasFillFactor(90);

            entity.Property(e => e.BoleDataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Data da inclusão do registro.")
                .HasColumnType("datetime")
                .HasColumnName("boleDataInclusao");
            entity.Property(e => e.BoleNossoNumero)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("boleNossoNumero");
            entity.Property(e => e.BoleUsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())")
                .HasComment("Nome do usuário que incluiu o registro.")
                .HasColumnName("boleUsuarioInclusao");
            entity.Property(e => e.ConIddivida).HasColumnName("ConIDDivida");
            entity.Property(e => e.DivEmpId).HasColumnName("DivEmpID");
            entity.Property(e => e.ImoIddivida)
                .HasComment("Código de identificação da dívida.")
                .HasColumnName("ImoIDDivida");
        });

        modelBuilder.Entity<TribBoletosQrcode>(entity =>
        {
            entity.HasKey(e => e.Bolenossonumero);

            entity.ToTable("TribBoletosQRCode");

            entity.Property(e => e.Bolenossonumero)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("bolenossonumero");
            entity.Property(e => e.BoleQrcode)
                .HasColumnType("image")
                .HasColumnName("boleQRCode");
        });

        modelBuilder.Entity<TribBonificacao>(entity =>
        {
            entity.HasKey(e => new { e.EdificacaoId, e.BonificAno });

            entity.ToTable("TribBonificacao", tb => tb.HasTrigger("TgTribBonificacaoInsertUpdate"));

            entity.HasIndex(e => e.BonificAno, "IX_TribBonificacao_BonificAno").HasFillFactor(90);

            entity.HasIndex(e => e.EdificacaoId, "IX_TribBonificacao_EdificacaoId").HasFillFactor(90);

            entity.HasIndex(e => new { e.EdificacaoId, e.BonificAno }, "IX_TribBonificacao_PK").HasFillFactor(90);

            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.BonifcAnosConsecutivos).HasDefaultValue((short)0);
            entity.Property(e => e.BonificAnos).HasDefaultValue((short)0);
            entity.Property(e => e.Host)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValueSql("(host_name())")
                .HasComment("Nome da maquina que fez a baixa.");
            entity.Property(e => e.Usuario)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())")
                .HasComment("Usuário que incluiu a baixa");

            entity.HasOne(d => d.Edificacao).WithMany(p => p.TribBonificacaos)
                .HasForeignKey(d => d.EdificacaoId)
                .HasConstraintName("FK_TribBonificacao_TribEdificacoes");
        });

        modelBuilder.Entity<TribCalcInf>(entity =>
        {
            entity.HasKey(e => new { e.AnoCalculo, e.EdificacaoId });

            entity.ToTable("TribCalcInf");

            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.Aliquota).HasColumnType("money");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");
            entity.Property(e => e.Vigesimo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TribCalcInfTributo>(entity =>
        {
            entity.HasKey(e => new { e.AnoCalculo, e.EdificacaoId, e.TipoTribId });

            entity.ToTable("TribCalcInfTributo");

            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
            entity.Property(e => e.Valor).HasColumnType("money");
        });

        modelBuilder.Entity<TribCalcadum>(entity =>
        {
            entity.HasKey(e => e.CalcaId);

            entity.ToTable(tb => tb.HasTrigger("TgTribCalcadaUpdate"));

            entity.Property(e => e.CalcaId).HasColumnName("CalcaID");
            entity.Property(e => e.CalcaFator)
                .HasDefaultValue(0m)
                .HasColumnType("money");
            entity.Property(e => e.CalcaNome)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<TribCalculoSimulado>(entity =>
        {
            entity.HasKey(e => e.SimuId);

            entity.ToTable("TribCalculoSimulado");

            entity.Property(e => e.SimuId).HasColumnName("SimuID");
            entity.Property(e => e.SimuData).HasColumnType("datetime");
            entity.Property(e => e.SimuDescricao)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.SimuPasta)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribCalculoSimuladoLanc>(entity =>
        {
            entity.HasKey(e => e.LancId);

            entity.ToTable("TribCalculoSimuladoLanc");

            entity.Property(e => e.LancId).HasColumnName("LancID");
            entity.Property(e => e.InscricaoImobiliaria)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LancValor).HasColumnType("money");
            entity.Property(e => e.SimuId).HasColumnName("SimuID");

            entity.HasOne(d => d.Simu).WithMany(p => p.TribCalculoSimuladoLancs)
                .HasForeignKey(d => d.SimuId)
                .HasConstraintName("FK_TribCalculoSimuladoLanc_TribCalculoSimulado");
        });

        modelBuilder.Entity<TribCartaHabitacao>(entity =>
        {
            entity.HasKey(e => e.Idcarta);

            entity.ToTable("TribCartaHabitacao");

            entity.Property(e => e.Idcarta)
                .ValueGeneratedNever()
                .HasColumnName("IDCarta");
            entity.Property(e => e.DataEmissao).HasColumnType("datetime");
            entity.Property(e => e.IdparamAssinatura).HasColumnName("IDParamAssinatura");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasMany(d => d.Procs).WithMany(p => p.Idcarta)
                .UsingEntity<Dictionary<string, object>>(
                    "TribCartaHabitacaoProcesso",
                    r => r.HasOne<Processo>().WithMany()
                        .HasForeignKey("ProcId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_TribCartaHabitacaoProcessos_Processos"),
                    l => l.HasOne<TribCartaHabitacao>().WithMany()
                        .HasForeignKey("Idcarta")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_TribCartaHabitacaoProcessos_TribCartaHabitacao"),
                    j =>
                    {
                        j.HasKey("Idcarta", "ProcId");
                        j.ToTable("TribCartaHabitacaoProcessos");
                        j.IndexerProperty<long>("Idcarta").HasColumnName("IDCarta");
                        j.IndexerProperty<long>("ProcId").HasColumnName("ProcID");
                    });
        });

        modelBuilder.Entity<TribCartaHabitacaoAlvaraConstr>(entity =>
        {
            entity.HasKey(e => new { e.Idcarta, e.Numero });

            entity.ToTable("TribCartaHabitacaoAlvaraConstr");

            entity.Property(e => e.Idcarta).HasColumnName("IDCarta");

            entity.HasOne(d => d.IdcartaNavigation).WithMany(p => p.TribCartaHabitacaoAlvaraConstrs)
                .HasForeignKey(d => d.Idcarta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribCartaHabitacaoAlvaraConstr_TribCartaHabitacao");
        });

        modelBuilder.Entity<TribCategProfissional>(entity =>
        {
            entity.HasKey(e => e.IdcategProf);

            entity.ToTable("TribCategProfissional");

            entity.Property(e => e.IdcategProf)
                .ValueGeneratedNever()
                .HasColumnName("IDCategProf");
            entity.Property(e => e.IdorgaoClasse).HasColumnName("IDOrgaoClasse");
            entity.Property(e => e.NomeCategProf)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.IdorgaoClasseNavigation).WithMany(p => p.TribCategProfissionals)
                .HasForeignKey(d => d.IdorgaoClasse)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribCategProfissional_TribOrgaosClasse");
        });

        modelBuilder.Entity<TribCategoriaEdificacao>(entity =>
        {
            entity.HasKey(e => e.CategId);

            entity.ToTable("TribCategoriaEdificacao");

            entity.Property(e => e.CategId).HasColumnName("CategID");
            entity.Property(e => e.CategAte).HasDefaultValue(0);
            entity.Property(e => e.CategDe).HasDefaultValue(0);
            entity.Property(e => e.CategNome)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<TribCausasMorte>(entity =>
        {
            entity.HasKey(e => e.CausaMorteId);

            entity.Property(e => e.CausaMorteId).HasColumnName("CausaMorteID");
            entity.Property(e => e.CausaMorteAlias)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CausaMorteDescr)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribCbo>(entity =>
        {
            entity.HasKey(e => e.IdCbo);

            entity.ToTable("tribCBO");

            entity.Property(e => e.IdCbo).HasColumnName("idCBO");
            entity.Property(e => e.DsCbo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dsCBO");
            entity.Property(e => e.NrCbo)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("nrCBO");
        });

        modelBuilder.Entity<TribCertidao>(entity =>
        {
            entity.HasKey(e => e.CertId);

            entity.ToTable("TribCertidao");

            entity.HasIndex(e => e.CertForcada, "_dta_index_TribCertidao_5_697417904__K7").HasFillFactor(90);

            entity.Property(e => e.CertId)
                .ValueGeneratedNever()
                .HasColumnName("CertID");
            entity.Property(e => e.CertData).HasColumnType("datetime");
            entity.Property(e => e.CertDataInclusao).HasColumnType("datetime");
            entity.Property(e => e.CertForcada)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CertInscricaoId).HasColumnName("CertInscricaoID");
            entity.Property(e => e.CertInscricaoTipo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CertObjeto).HasMaxLength(4000);
            entity.Property(e => e.CertTempCertNegId).HasColumnName("CertTempCertNegID");
            entity.Property(e => e.CertTipoCertidao)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CertUsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CertValidade).HasColumnType("datetime");
        });

        modelBuilder.Entity<TribCertidaoDacontribuinte>(entity =>
        {
            entity.HasKey(e => e.IdCertidaoDacontribuite);

            entity.ToTable("TribCertidaoDAContribuintes");

            entity.HasIndex(e => e.IdVersao, "IX_TribCertidaoDAContribuintes_idVersao");

            entity.HasIndex(e => e.IdVersao, "IX_TribCertidaoDAContribuintes_idVersao_inc_CertidaoDAID_ConID");

            entity.HasIndex(e => new { e.IdVersao, e.TpContribuinte, e.NmContribuinte, e.CertidaoDaid, e.ConId, e.NrCnpjcpf, e.TpLogradouro, e.NmLogradouro, e.NrPredial, e.NmLoteamento, e.NrCep, e.NmCidade, e.DsUf, e.DsComplemento }, "IX_TribCertidaoDAContribuintes_idVersao_tpContr_nmContr_CertID_ConID_nrCNPJ_tpLograd");

            entity.HasIndex(e => new { e.CertidaoDaid, e.NmContribuinte, e.NrCnpjcpf }, "_dta_index_TribCertidaoDAContribuintes").HasFillFactor(90);

            entity.HasIndex(e => new { e.CertidaoDaid, e.NmContribuinte, e.NrCnpjcpf }, "_dta_index_TribCertidaoDAContribuintes_tpcontribuinte").HasFillFactor(90);

            entity.Property(e => e.IdCertidaoDacontribuite).HasColumnName("IdCertidaoDAContribuite");
            entity.Property(e => e.CertidaoDaid).HasColumnName("CertidaoDAID");
            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.DsComplemento)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dsComplemento");
            entity.Property(e => e.DsUf)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dsUF");
            entity.Property(e => e.IdVersao).HasColumnName("idVersao");
            entity.Property(e => e.NmCidade)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nmCidade");
            entity.Property(e => e.NmContribuinte)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("nmContribuinte");
            entity.Property(e => e.NmFantasia)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("nmFantasia");
            entity.Property(e => e.NmLogradouro)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nmLogradouro");
            entity.Property(e => e.NmLoteamento)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nmLoteamento");
            entity.Property(e => e.NrCep)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nrCEP");
            entity.Property(e => e.NrCnpjcpf)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("nrCNPJCPF");
            entity.Property(e => e.NrPredial)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("nrPredial");
            entity.Property(e => e.TpContribuinte)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tpContribuinte");
            entity.Property(e => e.TpLogradouro)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("tpLogradouro");
        });

        modelBuilder.Entity<TribCertidaoDadivida>(entity =>
        {
            entity.HasKey(e => e.CertidaoDaidDivida);

            entity.ToTable("TribCertidaoDADividas");

            entity.HasIndex(e => new { e.TipoBxId, e.LivroDaid, e.CertidaoDaid, e.IdVersao }, "IX_TribCertidaoDADividas_TipoBxId_LivroDAID_CertidaoDAID_idVersao_inc_vlPrinc_vlTot");

            entity.HasIndex(e => new { e.TipoBxId, e.IdVersao, e.CertidaoDaid, e.LivroDaid }, "IX_TribCertidaoDADividas_TipoBxId_idVersao_CertidaoDAID_LivroDAID_inc_vlPrincipal_vlTotal");

            entity.HasIndex(e => new { e.IdVersao, e.TipoTribId }, "IX_TribCertidaoDADividas_idVersao_TipoTribID");

            entity.HasIndex(e => e.CertidaoDaid, "_dta_index_TribCertidaoDADividas").HasFillFactor(90);

            entity.Property(e => e.CertidaoDaidDivida).HasColumnName("CertidaoDAIdDivida");
            entity.Property(e => e.CertidaoDaid).HasColumnName("CertidaoDAID");
            entity.Property(e => e.DtVencimento)
                .HasColumnType("datetime")
                .HasColumnName("dtVencimento");
            entity.Property(e => e.IdVersao).HasColumnName("idVersao");
            entity.Property(e => e.LivroDaid)
                .HasComment("Numero do lançamento da divida em da")
                .HasColumnName("LivroDAID");
            entity.Property(e => e.NrAno).HasColumnName("nrAno");
            entity.Property(e => e.NrMes).HasColumnName("nrMes");
            entity.Property(e => e.NrParcela).HasColumnName("nrParcela");
            entity.Property(e => e.TipoBxNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
            entity.Property(e => e.TipoTribNome)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.VlCorrecao)
                .HasColumnType("money")
                .HasColumnName("vlCorrecao");
            entity.Property(e => e.VlJuros)
                .HasColumnType("money")
                .HasColumnName("vlJuros");
            entity.Property(e => e.VlMda)
                .HasColumnType("money")
                .HasColumnName("vlMDA");
            entity.Property(e => e.VlMulta)
                .HasColumnType("money")
                .HasColumnName("vlMulta");
            entity.Property(e => e.VlPrincipal)
                .HasColumnType("money")
                .HasColumnName("vlPrincipal");
            entity.Property(e => e.VlTotal)
                .HasColumnType("money")
                .HasColumnName("vlTotal");
        });

        modelBuilder.Entity<TribCertidaoDaempresa>(entity =>
        {
            entity.HasKey(e => e.IdCertidaoDaempresa);

            entity.ToTable("TribCertidaoDAEmpresas");

            entity.HasIndex(e => e.IdVersao, "IX_TribCertidaoDAEmpresas_idVersao");

            entity.HasIndex(e => new { e.IdVersao, e.IdCertidaoDaempresa }, "IX_TribCertidaoDAEmpresas_idVersao_IdCertidaoDAEmpresa_inc_CertID_EmprCMC_nrCNPJ_dsSit");

            entity.Property(e => e.IdCertidaoDaempresa).HasColumnName("IdCertidaoDAEmpresa");
            entity.Property(e => e.CertidaoDaid).HasColumnName("CertidaoDAID");
            entity.Property(e => e.DsComplemento)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dsComplemento");
            entity.Property(e => e.DsSituacao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsSituacao");
            entity.Property(e => e.DsUf)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dsUF");
            entity.Property(e => e.EmprCmc).HasColumnName("EmprCMC");
            entity.Property(e => e.IdVersao).HasColumnName("idVersao");
            entity.Property(e => e.NmCidade)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nmCidade");
            entity.Property(e => e.NmFantasia)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("nmFantasia");
            entity.Property(e => e.NmLogradouro)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nmLogradouro");
            entity.Property(e => e.NmLoteamento)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nmLoteamento");
            entity.Property(e => e.NmRazaoSocial)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("nmRazaoSocial");
            entity.Property(e => e.NrCep)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nrCEP");
            entity.Property(e => e.NrCnpjcpf)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("nrCNPJCPF");
            entity.Property(e => e.NrPredial)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("nrPredial");
            entity.Property(e => e.TpLograouro)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("tpLograouro");
        });

        modelBuilder.Entity<TribCertidaoDaimovel>(entity =>
        {
            entity.HasKey(e => e.IdCertidaoDaimovel);

            entity.ToTable("TribCertidaoDAImovel");

            entity.HasIndex(e => e.IdVersao, "IX_TribCertidaoDAImovel_idVersao");

            entity.HasIndex(e => new { e.IdVersao, e.CertidaoDaid, e.IdCertidaoDaimovel, e.EdificacaoId }, "IX_TribCertidaoDAImovel_idVersao_CertidaoDAID_IdCertidaoDAImovel_EdificacaoID");

            entity.HasIndex(e => new { e.IdVersao, e.IdCertidaoDaimovel }, "IX_TribCertidaoDAImovel_idVersao_IdCertidaoDAImovel_inc_CertID_EdifID_nrInsr_dsRef");

            entity.HasIndex(e => new { e.CertidaoDaid, e.NrInscricao }, "_dta_index_TribCertidaoDAImovel").HasFillFactor(90);

            entity.Property(e => e.IdCertidaoDaimovel).HasColumnName("IdCertidaoDAImovel");
            entity.Property(e => e.CertidaoDaid).HasColumnName("CertidaoDAID");
            entity.Property(e => e.DsComplemento)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dsComplemento");
            entity.Property(e => e.DsRefAnterior)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsRefAnterior");
            entity.Property(e => e.DsUf)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dsUF");
            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.IdVersao).HasColumnName("idVersao");
            entity.Property(e => e.NmCidade)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nmCidade");
            entity.Property(e => e.NmLogradouro)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nmLogradouro");
            entity.Property(e => e.NmLoteamento)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nmLoteamento");
            entity.Property(e => e.NrCep)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nrCEP");
            entity.Property(e => e.NrInscricao)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("nrInscricao");
            entity.Property(e => e.NrPredial)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("nrPredial");
            entity.Property(e => e.TpLograouro)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("tpLograouro");
        });

        modelBuilder.Entity<TribCertidaoDaimportacao>(entity =>
        {
            entity.HasKey(e => new { e.CertidaoDaid, e.CertidaoDaiddestino });

            entity.ToTable("TribCertidaoDAImportacao");

            entity.Property(e => e.CertidaoDaid).HasColumnName("CertidaoDAID");
            entity.Property(e => e.CertidaoDaiddestino).HasColumnName("CertidaoDAIDDestino");
        });

        modelBuilder.Entity<TribCertidaoDalivro>(entity =>
        {
            entity.HasKey(e => e.IdCertidaoLivro);

            entity.ToTable("TribCertidaoDALivro");

            entity.HasIndex(e => e.CertidaoDaid, "IX_TribCertidaoDALivro_CertidaoDAID").HasFillFactor(90);

            entity.HasIndex(e => new { e.CertidaoDaid, e.LivroDaid }, "IX_TribCertidaoDALivro_CertidaoDAID_LivroDAID");

            entity.HasIndex(e => new { e.CertidaoDaid, e.IdCertidaoLivro, e.LivroDaid }, "IX_TribCertidaoDALivro_CertidaoDAID_idCertidaoLivro_LivroDAID").HasFillFactor(90);

            entity.HasIndex(e => e.LivroDaid, "IX_TribCertidaoDALivro_LivroDAID").HasFillFactor(90);

            entity.HasIndex(e => new { e.LivroDaid, e.IdCertidaoLivro, e.CertidaoDaid }, "IX_TribCertidaoDALivro_LivroDAID_idCertidaoLivro_CertidaoDAID").HasFillFactor(90);

            entity.Property(e => e.IdCertidaoLivro).HasColumnName("idCertidaoLivro");
            entity.Property(e => e.CertidaoDaid).HasColumnName("CertidaoDAID");
            entity.Property(e => e.LivroDaid).HasColumnName("LivroDAID");

            entity.HasOne(d => d.CertidaoDa).WithMany(p => p.TribCertidaoDalivros)
                .HasForeignKey(d => d.CertidaoDaid)
                .HasConstraintName("FK_TribCertidaoDALivro_TribCertidaoDA");

            entity.HasOne(d => d.LivroDa).WithMany(p => p.TribCertidaoDalivros)
                .HasForeignKey(d => d.LivroDaid)
                .HasConstraintName("FK_TribCertidaoDALivro_TribLivroDividaAtiva");
        });

        modelBuilder.Entity<TribCertidaoDaversao>(entity =>
        {
            entity.HasKey(e => e.IdVersaoCda);

            entity.ToTable("TribCertidaoDAVersao");

            entity.HasIndex(e => new { e.CertidaoDaid, e.FlOriginal }, "IX_TribCertidaoDAVersao_CertidaoDAID_flOriginal");

            entity.Property(e => e.IdVersaoCda).HasColumnName("idVersaoCDA");
            entity.Property(e => e.CertidaoDaid).HasColumnName("CertidaoDAID");
            entity.Property(e => e.DsLogin)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsLogin");
            entity.Property(e => e.DtVersao)
                .HasColumnType("datetime")
                .HasColumnName("dtVersao");
            entity.Property(e => e.FlOriginal).HasColumnName("flOriginal");

            entity.HasOne(d => d.CertidaoDa).WithMany(p => p.TribCertidaoDaversaos)
                .HasForeignKey(d => d.CertidaoDaid)
                .HasConstraintName("FK_TribCertidaoDAVersao_TribCertidaoDA");
        });

        modelBuilder.Entity<TribCertidaoDum>(entity =>
        {
            entity.HasKey(e => e.CertidaoDaid);

            entity.ToTable("TribCertidaoDA", tb =>
                {
                    tb.HasTrigger("TgTribCertidaoDADelete");
                    tb.HasTrigger("TgTribCertidaoDAInsert");
                    tb.HasTrigger("TgTribCertidaoDAUpdate");
                });

            entity.HasIndex(e => new { e.CertidaoDadata, e.LivroDaid, e.CertidaoDaano, e.CertidaoDanumero, e.CertidaoDasituacao }, "IDX_CertidaoDAData_LivroDAID_CertidaoDAAno_CertidaoDANumero").HasFillFactor(90);

            entity.HasIndex(e => new { e.CertidaoDaano, e.CertidaoDanumero }, "IX_CertidaoDAAno_CertidaoDANumero").HasFillFactor(90);

            entity.HasIndex(e => e.CertidaoDadata, "IX_CertidaoDAData").HasFillFactor(90);

            entity.HasIndex(e => e.CertidaoDanumProcesso, "IX_CertidaoDANumProcesso").HasFillFactor(90);

            entity.HasIndex(e => e.LivroDaid, "IX_LivroDAID").HasFillFactor(90);

            entity.HasIndex(e => new { e.CertidaoDaano, e.CertidaoDasituacao, e.CertidaoDanumero }, "IX_TribCertidaoDA_CertidaoDAAno_CertidaoDASituacao_CertidaoDANumero");

            entity.HasIndex(e => new { e.CertidaoDaid, e.CertidaoDanumero }, "IX_TribCertidaoDA_CertidaoDAID_CertidaoDANumero_inc_Data_Sit_NumProc_Vara").HasFillFactor(90);

            entity.HasIndex(e => new { e.CertidaoDaid, e.CertidaoDasituacao }, "IX_TribCertidaoDA_CertidaoDAID_CertidaoDASituacao_inc_CertidaoDANumero_CertidaoDAAno").HasFillFactor(90);

            entity.HasIndex(e => new { e.CertidaoDanumero, e.CertidaoDaano }, "IX_TribCertidaoDA_CertidaoDANumero_CertidaoDAAno");

            entity.HasIndex(e => new { e.CertidaoDanumero, e.CertidaoDaano, e.LivroDaid }, "IX_TribCertidaoDA_CertidaoDANumero_CertidaoDAAno_LivroDAID");

            entity.HasIndex(e => new { e.CertidaoDasituacao, e.CertidaoDaanoCancelamento, e.CertidaoDanumeroCancelamento }, "IX_TribCertidaoDA_CertidaoDASituacao_CertidaoDAAnoCancelamento_CertidaoDANumeroCancelamento");

            entity.HasIndex(e => new { e.CertidaoDasituacao, e.LivroDaid }, "IX_TribCertidaoDA_CertidaoDASituacao_LivroDAID").HasFillFactor(90);

            entity.HasIndex(e => new { e.LivroDaid, e.CertidaoDanumProcesso, e.CertidaoDavaraCivel, e.CertidaoDanumero, e.CertidaoDaano, e.CertidaoDadata, e.CertidaoDaobsAjuizamento }, "IX_TribCertidaoDA_LivroDAID_NumProc_VaraCivel_Num_Ano_Data_ObsAjuiza").HasFillFactor(90);

            entity.HasIndex(e => new { e.CertidaoDadata, e.CertidaoDaid, e.CertidaoDaano, e.CertidaoDanumero, e.CertidaoDasituacao }, "_dta_index_TribCertidaoDA").HasFillFactor(90);

            entity.HasIndex(e => new { e.CertidaoDaid, e.CertidaoDanumero, e.CertidaoDaano, e.CertidaoDadata, e.CertidaoDasituacao, e.CertidaoDanumProcesso, e.CertidaoDavaraCivel }, "_dta_index_TribCertidaoDA_5_43459529__K1_K2_K3_K4_K5_K9_K10").HasFillFactor(90);

            entity.HasIndex(e => new { e.CertidaoDaid, e.CertidaoDanumero, e.CertidaoDaano, e.CertidaoDasituacao, e.CertidaoDadata, e.CertidaoDanumProcesso, e.CertidaoDavaraCivel }, "_dta_index_TribCertidaoDA_5_43459529__K1_K2_K3_K5_K4_K9_K10").HasFillFactor(90);

            entity.HasIndex(e => new { e.CertidaoDasituacao, e.LivroDaid, e.CertidaoDanumero, e.CertidaoDaano }, "_dta_index_TribCertidaoDA_9_43459529__K5_K6_K2_K3").HasFillFactor(90);

            entity.Property(e => e.CertidaoDaid).HasColumnName("CertidaoDAID");
            entity.Property(e => e.CertidaoDaano).HasColumnName("CertidaoDAAno");
            entity.Property(e => e.CertidaoDaanoCancelamento).HasColumnName("CertidaoDAAnoCancelamento");
            entity.Property(e => e.CertidaoDadata)
                .HasColumnType("datetime")
                .HasColumnName("CertidaoDAData");
            entity.Property(e => e.CertidaoDadataAjuizamento)
                .HasComment("Data que a certidão foi encaminhada ao forum para processo de ajuizamento.")
                .HasColumnType("datetime")
                .HasColumnName("CertidaoDADataAjuizamento");
            entity.Property(e => e.CertidaoDadataCancelamento)
                .HasColumnType("datetime")
                .HasColumnName("CertidaoDADataCancelamento");
            entity.Property(e => e.CertidaoDanumProcesso)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Número do processo no forum.")
                .HasColumnName("CertidaoDANumProcesso");
            entity.Property(e => e.CertidaoDanumero).HasColumnName("CertidaoDANumero");
            entity.Property(e => e.CertidaoDanumeroCancelamento).HasColumnName("CertidaoDANumeroCancelamento");
            entity.Property(e => e.CertidaoDaobsAjuizamento)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasComment("Observações sobre o ajuizamento.")
                .HasColumnName("CertidaoDAObsAjuizamento");
            entity.Property(e => e.CertidaoDasituacao)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("Normal")
                .HasComment("Marca a situação da inscrição na certidão Normal ou Cancelada para casos de extorno da divida da certidão.")
                .HasColumnName("CertidaoDASituacao");
            entity.Property(e => e.CertidaoDatextoIdcancelamento).HasColumnName("CertidaoDATextoIDCancelamento");
            entity.Property(e => e.CertidaoDavaraCivel)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Vara Cível que o processo foi protocolado. ex. 1º Vara, 2º Vara e etc...")
                .HasColumnName("CertidaoDAVaraCivel");
            entity.Property(e => e.DataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DsTexto)
                .IsUnicode(false)
                .HasColumnName("dsTexto");
            entity.Property(e => e.DsTextoSuperior)
                .IsUnicode(false)
                .HasColumnName("dsTextoSuperior");
            entity.Property(e => e.DsTitulo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dsTitulo");
            entity.Property(e => e.Host)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValueSql("(host_name())")
                .HasComment("Nome da maquina que fez a baixa.");
            entity.Property(e => e.LivroDaid).HasColumnName("LivroDAID");
            entity.Property(e => e.TextoId)
                .HasComment("Texto da certidão.")
                .HasColumnName("TextoID");
            entity.Property(e => e.Usuario)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())")
                .HasComment("Usuário que incluiu a baixa");

            entity.HasOne(d => d.LivroDa).WithMany(p => p.TribCertidaoDa)
                .HasForeignKey(d => d.LivroDaid)
                .HasConstraintName("FK_TribCertidaoDA_TribLivroDividaAtiva");

            entity.HasOne(d => d.Texto).WithMany(p => p.TribCertidaoDa)
                .HasForeignKey(d => d.TextoId)
                .HasConstraintName("FK_TribCertidaoDA_TribTextos");

            entity.HasMany(d => d.Servs).WithMany(p => p.CertidaoDa)
                .UsingEntity<Dictionary<string, object>>(
                    "TribCertidaoDaassinatura",
                    r => r.HasOne<Servidore>().WithMany()
                        .HasForeignKey("ServId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_ServID"),
                    l => l.HasOne<TribCertidaoDum>().WithMany()
                        .HasForeignKey("CertidaoDaid")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("fk_CertidaoDAID"),
                    j =>
                    {
                        j.HasKey("CertidaoDaid", "ServId");
                        j.ToTable("TribCertidaoDAAssinatura");
                        j.IndexerProperty<long>("CertidaoDaid").HasColumnName("CertidaoDAID");
                        j.IndexerProperty<long>("ServId").HasColumnName("ServID");
                    });
        });

        modelBuilder.Entity<TribCertidaoItbi>(entity =>
        {
            entity.HasKey(e => e.CertItbiid);

            entity.ToTable("TribCertidaoITBI");

            entity.Property(e => e.CertItbiid)
                .ValueGeneratedNever()
                .HasColumnName("CertITBIID");
            entity.Property(e => e.CertItbiano).HasColumnName("CertITBIAno");
            entity.Property(e => e.CertItbichave).HasColumnName("CertITBIChave");
            entity.Property(e => e.CertItbinumero).HasColumnName("CertITBINumero");
            entity.Property(e => e.CertItbiobjeto)
                .HasMaxLength(3000)
                .HasColumnName("CertITBIObjeto");
            entity.Property(e => e.DataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");
        });

        modelBuilder.Entity<TribCertidaoValorMenorUffi>(entity =>
        {
            entity.HasKey(e => e.ConId);

            entity.ToTable("TribCertidaoValorMenorUFFI");

            entity.Property(e => e.ConId)
                .ValueGeneratedNever()
                .HasColumnName("ConID");
            entity.Property(e => e.Valor).HasColumnType("money");
        });

        modelBuilder.Entity<TribCertidoesNegativa>(entity =>
        {
            entity.HasKey(e => e.CertNegId);

            entity.Property(e => e.CertNegId)
                .ValueGeneratedNever()
                .HasColumnName("CertNegID");
            entity.Property(e => e.CertNegAreaCoberta).HasColumnType("money");
            entity.Property(e => e.CertNegAreaConstruida).HasColumnType("money");
            entity.Property(e => e.CertNegAreaConstruidaUnid).HasColumnType("money");
            entity.Property(e => e.CertNegAreaTerrNaoTributada).HasColumnType("money");
            entity.Property(e => e.CertNegAreaTerreno).HasColumnType("money");
            entity.Property(e => e.CertNegAreaUsoComum).HasColumnType("money");
            entity.Property(e => e.CertNegAtivPrincCmc)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CertNegAtivPrincCMC");
            entity.Property(e => e.CertNegAtivPrincCmcdenom)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CertNegAtivPrincCMCDenom");
            entity.Property(e => e.CertNegBairro)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("Nome do bairro do endereço.");
            entity.Property(e => e.CertNegCidade)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("Nome da cidade do endereço.");
            entity.Property(e => e.CertNegCmc)
                .HasDefaultValue(0L)
                .HasComment("Número do CMC do contribuinte no caso de pessoa juridica ou física.")
                .HasColumnName("CertNegCMC");
            entity.Property(e => e.CertNegCnpjcpf)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength()
                .HasColumnName("CertNegCNPJCPF");
            entity.Property(e => e.CertNegCoeficiente).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.CertNegComplemento)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("Complemento do endereço.");
            entity.Property(e => e.CertNegDataEmissao).HasColumnType("datetime");
            entity.Property(e => e.CertNegDe)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("informar se é de Imovel, Pessoa Juridica  ou Pessoa Fisica")
                .HasColumnName("CertNegDE");
            entity.Property(e => e.CertNegDenominacaoPredial)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.CertNegFinalidade)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.CertNegForcada)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength()
                .HasComment("Marca se a certidão foi emitida de maneira forçada.");
            entity.Property(e => e.CertNegInscricao)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("Numero da inscrição imobiliária do imóvel.");
            entity.Property(e => e.CertNegInstrNormativa)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CertNegLogradouro)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("Colocar o nome do logradouro já com seu tipo (RUA, AV. TVA e etc.).");
            entity.Property(e => e.CertNegMatricula)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CertNegNome)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("Neste campo será gravado o nome do contriuinte do imóvel, pessoa física ou jurídica.");
            entity.Property(e => e.CertNegNomeResp)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("Nome do responsável pelo imóvel para impressão da certidão por inscrição.");
            entity.Property(e => e.CertNegNumPredial)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("Número predial do endereço do imovel no caso de certidão por inscrição. Nos casos de certidão pessoa fisica ou juridica, colocar o endereço do contribuinte.");
            entity.Property(e => e.CertNegObs)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasComment("Observações sobre a certidão negativa.");
            entity.Property(e => e.CertNegOrigem)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.CertNegPagina)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CertNegPossuiDividaContribMelhoria)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.CertNegRefAnterior)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CertNegRequerente)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.CertNegSituacao)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("Grava a Situação da empresa");
            entity.Property(e => e.CertNegTexto).HasColumnType("text");
            entity.Property(e => e.CertNegTipoCertidao)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.CertNegTitulo)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("Informar se é positiva, negativa ou positiva com efeito negativo");
            entity.Property(e => e.CertNegUf)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength()
                .HasComment("Sigla da UF - Unidade Federativa do endereço.")
                .HasColumnName("CertNegUF");
            entity.Property(e => e.CertNegUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");
            entity.Property(e => e.CertNegValidaAte).HasColumnType("datetime");
            entity.Property(e => e.CertNegValorVenal).HasColumnType("money");
            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.TribCertidoesNegativas)
                .HasMaxLength(3)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribClassificaReceita2013>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TribClassificaReceita2013");

            entity.Property(e => e.ClreDataBaixa)
                .HasColumnType("datetime")
                .HasColumnName("clreDataBaixa");
            entity.Property(e => e.ClreReceita)
                .HasMaxLength(12)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("clreReceita");
            entity.Property(e => e.ClreTipo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("clreTipo");
            entity.Property(e => e.ClreValor)
                .HasColumnType("money")
                .HasColumnName("clreValor");
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
        });

        modelBuilder.Entity<TribClassificaReceitaIntegra>(entity =>
        {
            entity.HasKey(e => new { e.DtClassifica, e.IdConvenio, e.IdBanco }).HasName("PK_TribClassificaReceitaIntegra_1");

            entity.ToTable("TribClassificaReceitaIntegra");

            entity.HasIndex(e => new { e.FlSituacao, e.IdBanco }, "IX_TribClassificaReceitaIntegra_flSituacao_idBanco").HasFillFactor(90);

            entity.Property(e => e.DtClassifica).HasColumnName("dtClassifica");
            entity.Property(e => e.IdConvenio).HasColumnName("idConvenio");
            entity.Property(e => e.IdBanco)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("idBanco");
            entity.Property(e => e.FlSituacao)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flSituacao");
        });

        modelBuilder.Entity<TribClassificaReceitum>(entity =>
        {
            entity.HasKey(e => new { e.ClreDataBaixa, e.TipoTribId, e.ClreReceita, e.ConvenioId, e.ClreTipo, e.IdBanco, e.IdTipoOperacaoReceita }).HasName("PK_TribClassificaReceita_1");

            entity.Property(e => e.ClreDataBaixa)
                .HasColumnType("datetime")
                .HasColumnName("clreDataBaixa");
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
            entity.Property(e => e.ClreReceita)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("clreReceita");
            entity.Property(e => e.ConvenioId).HasDefaultValue(3);
            entity.Property(e => e.ClreTipo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("clreTipo");
            entity.Property(e => e.IdBanco)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("idBanco");
            entity.Property(e => e.ClreValor)
                .HasComment("Valor da receita.")
                .HasColumnType("money")
                .HasColumnName("clreValor");

            entity.HasOne(d => d.Convenio).WithMany(p => p.TribClassificaReceita)
                .HasForeignKey(d => d.ConvenioId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribClassificaReceita_ConvenioBanco");

            entity.HasOne(d => d.TipoTrib).WithMany(p => p.TribClassificaReceita)
                .HasForeignKey(d => d.TipoTribId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribClassificaReceita_TribTipoTributos");
        });

        modelBuilder.Entity<TribClassificaoReceitaDetalhadum>(entity =>
        {
            entity.HasKey(e => e.DetId);

            entity.HasIndex(e => new { e.ClreDataBaixa, e.ClreReceita }, "IX_TribClassificaoReceitaDetalhada").HasFillFactor(90);

            entity.HasIndex(e => e.NossoNumero, "IX_TribClassificaoReceitaDetalhada_1").HasFillFactor(90);

            entity.Property(e => e.DetId).HasColumnName("DetID");
            entity.Property(e => e.Classificando)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ClreDataBaixa)
                .HasColumnType("datetime")
                .HasColumnName("clreDataBaixa");
            entity.Property(e => e.ClreReceita)
                .HasMaxLength(12)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("clreReceita");
            entity.Property(e => e.ClreValor)
                .HasComment("Valor da receita.")
                .HasColumnType("money")
                .HasColumnName("clreValor");
            entity.Property(e => e.ConIddivida).HasColumnName("ConIDDivida");
            entity.Property(e => e.ConvenioId).HasDefaultValue(3);
            entity.Property(e => e.EmpIddivida).HasColumnName("EmpIDDivida");
            entity.Property(e => e.ImoIddivida).HasColumnName("ImoIDDivida");
            entity.Property(e => e.NossoNumero)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
        });

        modelBuilder.Entity<TribCmedificacaoProcesso>(entity =>
        {
            entity.HasKey(e => new { e.CmprocId, e.EdificacaoId });

            entity.ToTable("TribCMEdificacaoProcesso");

            entity.Property(e => e.CmprocId).HasColumnName("CMProcID");
            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.CmprocEdifAceitaObra)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CMProcEdifAceitaObra");
            entity.Property(e => e.CmprocEdifEdital)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CMProcEdifEdital");
            entity.Property(e => e.CmprocEdifNumeroOficio)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CMProcEdifNumeroOficio");
            entity.Property(e => e.CmprocEdifPavimentacao)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CMProcEdifPavimentacao");
            entity.Property(e => e.CmprocEdifQtdeParc).HasColumnName("CMProcEdifQtdeParc");
            entity.Property(e => e.CmprocEdifSituacao)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CMProcEdifSituacao");
            entity.Property(e => e.CmprocEdifTestadasMetragem)
                .HasColumnType("money")
                .HasColumnName("CMProcEdifTestadasMetragem");
            entity.Property(e => e.CmprocEdifValor)
                .HasColumnType("money")
                .HasColumnName("CMProcEdifValor");
            entity.Property(e => e.ConId).HasColumnName("ConID");

            entity.HasOne(d => d.Cmproc).WithMany(p => p.TribCmedificacaoProcessos)
                .HasForeignKey(d => d.CmprocId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribCMEdificacaoProcesso_TribCMProcesso");

            entity.HasOne(d => d.Con).WithMany(p => p.TribCmedificacaoProcessos)
                .HasForeignKey(d => d.ConId)
                .HasConstraintName("FK_TribCMEdificacaoProcesso_Contribuintes");

            entity.HasOne(d => d.Edificacao).WithMany(p => p.TribCmedificacaoProcessos)
                .HasForeignKey(d => d.EdificacaoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribCMEdificacaoProcesso_TribEdificacoes");
        });

        modelBuilder.Entity<TribCmoficio>(entity =>
        {
            entity.HasKey(e => e.OficioId);

            entity.ToTable("TribCMOficios");

            entity.Property(e => e.OficioId)
                .ValueGeneratedNever()
                .HasColumnName("OficioID");
            entity.Property(e => e.OficioData).HasColumnType("datetime");
            entity.Property(e => e.OficioTipo)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Edi).WithMany(p => p.TribCmoficios)
                .HasForeignKey(d => d.EdiId)
                .HasConstraintName("FK_TribCMOficios_tribEditalLanc");

            entity.HasOne(d => d.Edificacao).WithMany(p => p.TribCmoficios)
                .HasForeignKey(d => d.EdificacaoId)
                .HasConstraintName("FK_TribCMOficios_TribEdificacoes");
        });

        modelBuilder.Entity<TribCmprocesso>(entity =>
        {
            entity.HasKey(e => e.CmprocId);

            entity.ToTable("TribCMProcesso");

            entity.Property(e => e.CmprocId)
                .ValueGeneratedNever()
                .HasColumnName("CMProcID");
            entity.Property(e => e.CmprocAno).HasColumnName("CMProcAno");
            entity.Property(e => e.CmprocContaCorrente)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CMProcContaCorrente");
            entity.Property(e => e.CmprocData)
                .HasColumnType("datetime")
                .HasColumnName("CMProcData");
            entity.Property(e => e.CmprocDataConclusao)
                .HasColumnType("datetime")
                .HasColumnName("CMProcDataConclusao");
            entity.Property(e => e.CmprocDataLicitacao)
                .HasColumnType("datetime")
                .HasColumnName("CMProcDataLicitacao");
            entity.Property(e => e.CmprocExtensao)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CMProcExtensao");
            entity.Property(e => e.CmprocExtensaoTestada)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CMProcExtensaoTestada");
            entity.Property(e => e.CmprocIntervaloRua)
                .HasColumnType("text")
                .HasColumnName("CMProcIntervaloRua");
            entity.Property(e => e.CmprocNumero)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CMProcNumero");
            entity.Property(e => e.CmprocQtdeParc).HasColumnName("CMProcQtdeParc");
            entity.Property(e => e.CmprocSituacao)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CMProcSituacao");
            entity.Property(e => e.CmprocValorM2)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CMProcValorM2");
            entity.Property(e => e.CmprocValorOutros)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CMProcValorOutros");
            entity.Property(e => e.CmprocValorPgtoPref)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CMProcValorPgtoPref");
            entity.Property(e => e.CmprocValorTotalObra)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CMProcValorTotalObra");
            entity.Property(e => e.CmprocValorTrans)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CMProcValorTrans");
            entity.Property(e => e.CmtipoConstId).HasColumnName("CMTipoConstID");
            entity.Property(e => e.CmtipoPavId).HasColumnName("CMTipoPavID");
            entity.Property(e => e.EdiId).HasColumnName("ediID");
            entity.Property(e => e.LogradId).HasColumnName("LogradID");

            entity.HasOne(d => d.CmtipoConst).WithMany(p => p.TribCmprocessos)
                .HasForeignKey(d => d.CmtipoConstId)
                .HasConstraintName("FK_TribCMProcesso_TribCMTipoConstrucao");

            entity.HasOne(d => d.CmtipoPav).WithMany(p => p.TribCmprocessos)
                .HasForeignKey(d => d.CmtipoPavId)
                .HasConstraintName("FK_TribCMProcesso_TribCMTipoPavimentacao");

            entity.HasOne(d => d.Edi).WithMany(p => p.TribCmprocessos)
                .HasForeignKey(d => d.EdiId)
                .HasConstraintName("FK_TribCMProcesso_tribEditalLanc");

            entity.HasOne(d => d.Lograd).WithMany(p => p.TribCmprocessos)
                .HasForeignKey(d => d.LogradId)
                .HasConstraintName("FK_TribCMProcesso_Logradouro");

            entity.HasMany(d => d.ImoIddivida).WithMany(p => p.Cmprocs)
                .UsingEntity<Dictionary<string, object>>(
                    "TribCmprocessoDividum",
                    r => r.HasOne<TribDividasImo>().WithMany()
                        .HasForeignKey("ImoIddivida")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_TribCMProcessoDivida_TribDividasImo"),
                    l => l.HasOne<TribCmprocesso>().WithMany()
                        .HasForeignKey("CmprocId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_TribCMProcessoDivida_TribCMProcesso"),
                    j =>
                    {
                        j.HasKey("CmprocId", "ImoIddivida");
                        j.ToTable("TribCMProcessoDivida");
                        j.IndexerProperty<long>("CmprocId").HasColumnName("CMProcID");
                        j.IndexerProperty<long>("ImoIddivida").HasColumnName("ImoIDDivida");
                    });

            entity.HasMany(d => d.TribQuadraLograds).WithMany(p => p.Cmprocs)
                .UsingEntity<Dictionary<string, object>>(
                    "TribCmprocessoSecao",
                    r => r.HasOne<TribQuadraLograd>().WithMany()
                        .HasForeignKey("QuadraId", "LogradId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_TribCMProcessoSecao_TribQuadraLograd"),
                    l => l.HasOne<TribCmprocesso>().WithMany()
                        .HasForeignKey("CmprocId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_TribCMProcessoSecao_TribCMProcesso"),
                    j =>
                    {
                        j.HasKey("CmprocId", "QuadraId", "LogradId");
                        j.ToTable("TribCMProcessoSecao");
                        j.IndexerProperty<long>("CmprocId").HasColumnName("CMProcID");
                        j.IndexerProperty<int>("QuadraId").HasColumnName("QuadraID");
                        j.IndexerProperty<int>("LogradId").HasColumnName("LogradID");
                    });
        });

        modelBuilder.Entity<TribCmprocessoLagrad>(entity =>
        {
            entity.HasKey(e => new { e.CmprocId, e.LogradId });

            entity.ToTable("TribCMProcessoLagrad");

            entity.Property(e => e.CmprocId).HasColumnName("CMProcID");
            entity.Property(e => e.LogradId).HasColumnName("LogradID");
            entity.Property(e => e.CmprocLogradIntervaloRua)
                .HasColumnType("text")
                .HasColumnName("CMProcLogradIntervaloRua");

            entity.HasOne(d => d.Cmproc).WithMany(p => p.TribCmprocessoLagrads)
                .HasForeignKey(d => d.CmprocId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribCMProcessoLagrad_TribCMProcesso");

            entity.HasOne(d => d.Lograd).WithMany(p => p.TribCmprocessoLagrads)
                .HasForeignKey(d => d.LogradId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribCMProcessoLagrad_Logradouro");
        });

        modelBuilder.Entity<TribCmtipoConstrucao>(entity =>
        {
            entity.HasKey(e => e.CmtipoConstId);

            entity.ToTable("TribCMTipoConstrucao");

            entity.Property(e => e.CmtipoConstId)
                .ValueGeneratedNever()
                .HasColumnName("CMTipoConstID");
            entity.Property(e => e.CmtipoConstNome)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CMTipoConstNome");
            entity.Property(e => e.TipoBxId).HasColumnName("TipoBxID");
            entity.Property(e => e.TipoBxIdcancelamento).HasColumnName("TipoBxIDCancelamento");
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
            entity.Property(e => e.TipoTribIdobraConcluida).HasColumnName("TipoTribIDObraConcluida");

            entity.HasOne(d => d.TipoBx).WithMany(p => p.TribCmtipoConstrucaos)
                .HasForeignKey(d => d.TipoBxId)
                .HasConstraintName("FK_TribCMTipoConstrucao_TribTipoBaixa");

            entity.HasOne(d => d.TipoTrib).WithMany(p => p.TribCmtipoConstrucaos)
                .HasForeignKey(d => d.TipoTribId)
                .HasConstraintName("FK_TribCMTipoConstrucao_TribTipoTributos");
        });

        modelBuilder.Entity<TribCmtipoPavimentacao>(entity =>
        {
            entity.HasKey(e => e.CmtipoPavId);

            entity.ToTable("TribCMTipoPavimentacao");

            entity.Property(e => e.CmtipoPavId)
                .ValueGeneratedNever()
                .HasColumnName("CMTipoPavID");
            entity.Property(e => e.CmtipoPavNome)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CMTipoPavNome");
        });

        modelBuilder.Entity<TribCobertura>(entity =>
        {
            entity.HasKey(e => e.CobertId);

            entity.ToTable("TribCobertura", tb => tb.HasTrigger("TgTribCoberturaUpdate"));

            entity.Property(e => e.CobertId).HasColumnName("CobertID");
            entity.Property(e => e.CobertFator).HasColumnType("money");
            entity.Property(e => e.CobertNome)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribCoeficienteTaxasIptu>(entity =>
        {
            entity.HasKey(e => e.TribCoeId);

            entity.ToTable("TribCoeficienteTaxasIPTU");

            entity.Property(e => e.TribCoeId)
                .ValueGeneratedNever()
                .HasColumnName("TribCoeID");
            entity.Property(e => e.Coeficiente).HasColumnType("money");
            entity.Property(e => e.Idmoeda).HasColumnName("IDMoeda");
            entity.Property(e => e.Observacao)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ParametroValor)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
            entity.Property(e => e.ValorLimiteAte).HasColumnType("money");
            entity.Property(e => e.ValorLimiteDe).HasColumnType("money");

            entity.HasOne(d => d.IdmoedaNavigation).WithMany(p => p.TribCoeficienteTaxasIptus)
                .HasForeignKey(d => d.Idmoeda)
                .HasConstraintName("FK_TribCoeficienteTaxasIPTU_Moedas");

            entity.HasOne(d => d.TipoTrib).WithMany(p => p.TribCoeficienteTaxasIptus)
                .HasForeignKey(d => d.TipoTribId)
                .HasConstraintName("FK_TribCoeficienteTaxasIPTU_TribTipoTributos");
        });

        modelBuilder.Entity<TribComposicaoDivContribuinte>(entity =>
        {
            entity.HasKey(e => new { e.ConIddivida, e.TipoTribId });

            entity.ToTable("TribComposicaoDivContribuinte", tb =>
                {
                    tb.HasTrigger("TgTribComposicaoDivContribuinteDelete");
                    tb.HasTrigger("TgTribComposicaoDivContribuinteInsert");
                    tb.HasTrigger("TgTribComposicaoDivContribuinteUpdate");
                });

            entity.Property(e => e.ConIddivida).HasColumnName("ConIDDivida");
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
            entity.Property(e => e.CompDivConValor)
                .HasDefaultValue(0m)
                .HasColumnType("money");

            entity.HasOne(d => d.ConIddividaNavigation).WithMany(p => p.TribComposicaoDivContribuintes)
                .HasForeignKey(d => d.ConIddivida)
                .HasConstraintName("FK_TribComposicaoDivContribuinte_TribDividasContribuinte");

            entity.HasOne(d => d.TipoTrib).WithMany(p => p.TribComposicaoDivContribuintes)
                .HasForeignKey(d => d.TipoTribId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribComposicaoDivContribuinte_TribTipoTributos");
        });

        modelBuilder.Entity<TribComposicaoDivEmpresa>(entity =>
        {
            entity.HasKey(e => new { e.DivEmpId, e.TipoTribId });

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("TgTribComposicaoDivEmpresasInsertDelete");
                    tb.HasTrigger("TgTribComposicaoDivEmpresasInsertUpdate");
                });

            entity.Property(e => e.DivEmpId).HasColumnName("DivEmpID");
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
            entity.Property(e => e.CompDivEmpValor)
                .HasDefaultValue(0m)
                .HasColumnType("money");

            entity.HasOne(d => d.DivEmp).WithMany(p => p.TribComposicaoDivEmpresas)
                .HasForeignKey(d => d.DivEmpId)
                .HasConstraintName("FK_TribComposicaoDivEmpresas_TribDividasEmpresas");

            entity.HasOne(d => d.TipoTrib).WithMany(p => p.TribComposicaoDivEmpresas)
                .HasForeignKey(d => d.TipoTribId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribComposicaoDivEmpresas_TribTipoTributos");
        });

        modelBuilder.Entity<TribComposicaoDivImo>(entity =>
        {
            entity.HasKey(e => new { e.ImoIddivida, e.TipoTribId });

            entity.ToTable("TribComposicaoDivImo", tb =>
                {
                    tb.HasTrigger("TgTribComposicaoDivImoDelete");
                    tb.HasTrigger("TgTribComposicaoDivImoInsert");
                    tb.HasTrigger("TgTribComposicaoDivImoUpdate");
                });

            entity.HasIndex(e => new { e.TipoTribId, e.ImoIddivida }, "IX_TipoTribID_ImoIDDivida").HasFillFactor(90);

            entity.HasIndex(e => new { e.TipoTribId, e.ImoIddivida }, "_dta_index_TribComposicaoDivImo_7_1209875477__K2_K1_3").HasFillFactor(90);

            entity.Property(e => e.ImoIddivida).HasColumnName("ImoIDDivida");
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
            entity.Property(e => e.CompDivImoValor)
                .HasDefaultValue(0m)
                .HasColumnType("money");

            entity.HasOne(d => d.ImoIddividaNavigation).WithMany(p => p.TribComposicaoDivImos)
                .HasForeignKey(d => d.ImoIddivida)
                .HasConstraintName("FK_TribComposicaoDivImo_TribDividasImo");

            entity.HasOne(d => d.TipoTrib).WithMany(p => p.TribComposicaoDivImos)
                .HasForeignKey(d => d.TipoTribId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribComposicaoDivImo_TribTipoTributos");
        });

        modelBuilder.Entity<TribComprovanteSitEmpresa>(entity =>
        {
            entity.HasKey(e => e.CompId);

            entity.ToTable("TribComprovanteSitEmpresa");

            entity.Property(e => e.CompId)
                .ValueGeneratedNever()
                .HasColumnName("CompID");
            entity.Property(e => e.CompAbertInscr).HasColumnType("datetime");
            entity.Property(e => e.CompBairro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.CompCidade)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.CompCmc).HasColumnName("CompCMC");
            entity.Property(e => e.CompCnpjcpf)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CompCNPJCPF");
            entity.Property(e => e.CompData).HasColumnType("datetime");
            entity.Property(e => e.CompEmprAtiv)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.CompEmprAtivDenom)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.CompEndereco)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.CompMovData).HasColumnType("datetime");
            entity.Property(e => e.CompMovId).HasColumnName("CompMovID");
            entity.Property(e => e.CompMovMotivo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.CompMovObs)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.CompMovProtAnt)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.CompNomeFant)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.CompRazSocial)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.CompSitEmpr)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.CompTexto)
                .HasDefaultValue("")
                .HasColumnType("text");
            entity.Property(e => e.CompTitulo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.CompUf)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength()
                .HasColumnName("CompUF");
            entity.Property(e => e.CompUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<TribCondJuridica>(entity =>
        {
            entity.HasKey(e => e.JuriId);

            entity.ToTable("TribCondJuridica", tb => tb.HasTrigger("TgTribCondJuridicaUpdate"));

            entity.Property(e => e.JuriId).HasColumnName("JuriID");
            entity.Property(e => e.JuriFator)
                .HasDefaultValue(0m)
                .HasColumnType("money");
            entity.Property(e => e.JuriNome)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<TribConfigLancHonorario>(entity =>
        {
            entity.HasKey(e => e.LancHonId).HasName("PK_TribConfigLancHonorario");

            entity.Property(e => e.LancHonId)
                .ValueGeneratedNever()
                .HasColumnName("LancHonID");
            entity.Property(e => e.ConsiderarValorAtual)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TipoBxId).HasColumnName("TipoBxID");

            entity.HasOne(d => d.TipoBx).WithMany(p => p.TribConfigLancHonorarios)
                .HasForeignKey(d => d.TipoBxId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribConfigLancHonorario_TribConfigLancHonorario");
        });

        modelBuilder.Entity<TribContador>(entity =>
        {
            entity.HasKey(e => e.ContadorId);

            entity.ToTable("TribContador");

            entity.HasIndex(e => e.ConId, "IX_ConID").HasFillFactor(90);

            entity.Property(e => e.ContadorId)
                .ValueGeneratedNever()
                .HasColumnName("ContadorID");
            entity.Property(e => e.Categoria)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.Crc)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength()
                .HasColumnName("CRC");
            entity.Property(e => e.DataExpirSenha)
                .HasComment("Data de expiração da senha.")
                .HasColumnType("datetime");
            entity.Property(e => e.DataLibSenha)
                .HasComment("Data da liberação de senha para contador.")
                .HasColumnType("datetime");
            entity.Property(e => e.DsLogin)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsLogin");
            entity.Property(e => e.PerDiasExpiracao)
                .HasDefaultValue(0)
                .HasComment("Periodo em dias para expiração do acesso.");
            entity.Property(e => e.Senha).HasMaxLength(50);
            entity.Property(e => e.SituacaoAcesso)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("Bloqueado");

            entity.HasOne(d => d.Con).WithMany(p => p.TribContadors)
                .HasForeignKey(d => d.ConId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribContador_Contribuintes");
        });

        modelBuilder.Entity<TribContribCategProf>(entity =>
        {
            entity.HasKey(e => e.IdcontribCategProf);

            entity.ToTable("TribContribCategProf");

            entity.Property(e => e.IdcontribCategProf)
                .ValueGeneratedNever()
                .HasColumnName("IDContribCategProf");
            entity.Property(e => e.ConId).HasColumnName("conID");
            entity.Property(e => e.IdcategProf).HasColumnName("IDCategProf");
            entity.Property(e => e.NumRegistroCateg)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Uf)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("UF");

            entity.HasOne(d => d.Con).WithMany(p => p.TribContribCategProfs)
                .HasForeignKey(d => d.ConId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribContribCategProf_Contribuintes");

            entity.HasOne(d => d.IdcategProfNavigation).WithMany(p => p.TribContribCategProfs)
                .HasForeignKey(d => d.IdcategProf)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribContribCategProf_TribCategProfissional");
        });

        modelBuilder.Entity<TribContribuintesBloqJuridico>(entity =>
        {
            entity.HasKey(e => e.BloqId);

            entity.ToTable("TribContribuintesBloqJuridico");

            entity.Property(e => e.BloqId)
                .ValueGeneratedNever()
                .HasColumnName("BloqID");
            entity.Property(e => e.BloqCpfcnpj)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("BloqCPFCNPJ");
            entity.Property(e => e.BloqData).HasColumnType("datetime");
            entity.Property(e => e.BloqDataFim).HasColumnType("datetime");
            entity.Property(e => e.BloqDataIni).HasColumnType("datetime");
            entity.Property(e => e.Observacoes)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribConversaoerrosCadEconomico>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TribCONVERSAOErrosCadEconomico");

            entity.Property(e => e.Cmc).HasColumnName("CMC");
            entity.Property(e => e.Erro)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribCub>(entity =>
        {
            entity.HasKey(e => e.IdCub);

            entity.ToTable("tribCUB");

            entity.Property(e => e.IdCub).HasColumnName("idCUB");
            entity.Property(e => e.DtCub)
                .HasColumnType("datetime")
                .HasColumnName("dtCUB");
            entity.Property(e => e.VlCub)
                .HasColumnType("money")
                .HasColumnName("vlCUB");
        });

        modelBuilder.Entity<TribDenominacao>(entity =>
        {
            entity.HasKey(e => e.DenoId);

            entity.ToTable("TribDenominacao");

            entity.HasIndex(e => e.DenoCodigoCanadas, "IX_DenoCodigoCANADAS").HasFillFactor(90);

            entity.Property(e => e.DenoId)
                .ValueGeneratedNever()
                .HasColumnName("DenoID");
            entity.Property(e => e.Datatemp).HasColumnType("datetime");
            entity.Property(e => e.DenoBloco)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("Bloco - Conversão CANADAS");
            entity.Property(e => e.DenoCodigoCanadas)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("Codigo do CANADAS para conversão")
                .HasColumnName("DenoCodigoCANADAS");
            entity.Property(e => e.DenoConstrutora)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("Construtora");
            entity.Property(e => e.DenoDataConstrucao)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DenoElevadores)
                .HasDefaultValue(0)
                .HasComment("Numero de Elevadores");
            entity.Property(e => e.DenoImagem).HasColumnType("image");
            entity.Property(e => e.DenoNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DenoPadrao)
                .HasDefaultValue(0)
                .HasComment("Padrão do Prédio");
            entity.Property(e => e.DenoPavimentos)
                .HasDefaultValue(0)
                .HasComment("Numero de pavimentos (andares)");
        });

        modelBuilder.Entity<TribDepositoJudicial>(entity =>
        {
            entity.HasKey(e => e.DepositoId);

            entity.ToTable("TribDepositoJudicial");

            entity.HasIndex(e => e.ConIddivida, "IX_TribDepositoJudicial_ConIDDivida");

            entity.HasIndex(e => e.EmpIddivida, "IX_TribDepositoJudicial_EmpIDDivida");

            entity.HasIndex(e => e.ImoIddivida, "IX_TribDepositoJudicial_ImoIDDivida");

            entity.HasIndex(e => e.TipoBxId, "IX_TribDepositoJudicial_TipoBxID");

            entity.Property(e => e.DepositoId).ValueGeneratedNever();
            entity.Property(e => e.CertidaoDaano).HasColumnName("CertidaoDAAno");
            entity.Property(e => e.CertidaoDanumero).HasColumnName("CertidaoDANumero");
            entity.Property(e => e.ConIddivida).HasColumnName("ConIDDivida");
            entity.Property(e => e.DtDeposito).HasColumnName("dtDeposito");
            entity.Property(e => e.DtInclusao).HasColumnName("dtInclusao");
            entity.Property(e => e.EmpIddivida).HasColumnName("EmpIDDivida");
            entity.Property(e => e.ImoIddivida).HasColumnName("ImoIDDivida");
            entity.Property(e => e.Login)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TipoBxId).HasColumnName("TipoBxID");
            entity.Property(e => e.VlDeposito).HasColumnType("money");

            entity.HasOne(d => d.ConIddividaNavigation).WithMany(p => p.TribDepositoJudicials)
                .HasForeignKey(d => d.ConIddivida)
                .HasConstraintName("FK_TribDepositoJudicial_TribDividasContribuinte");

            entity.HasOne(d => d.EmpIddividaNavigation).WithMany(p => p.TribDepositoJudicials)
                .HasForeignKey(d => d.EmpIddivida)
                .HasConstraintName("FK_TribDepositoJudicial_TribDividasEmpresas");

            entity.HasOne(d => d.ImoIddividaNavigation).WithMany(p => p.TribDepositoJudicials)
                .HasForeignKey(d => d.ImoIddivida)
                .HasConstraintName("FK_TribDepositoJudicial_TribDividasImo");

            entity.HasOne(d => d.TipoBx).WithMany(p => p.TribDepositoJudicials)
                .HasForeignKey(d => d.TipoBxId)
                .HasConstraintName("FK_TribDepositoJudicial_TribTipoBaixa");
        });

        modelBuilder.Entity<TribDepositoJudicialBaixa>(entity =>
        {
            entity.HasKey(e => e.DepositoBaixaId);

            entity.ToTable("TribDepositoJudicialBaixa");

            entity.HasIndex(e => e.ConIddivida, "IX_TribDepositoJudicialBaixa_ConIDDivida");

            entity.HasIndex(e => e.DepositoId, "IX_TribDepositoJudicialBaixa_DepositoId");

            entity.HasIndex(e => e.EmpIddivida, "IX_TribDepositoJudicialBaixa_EmpIDDivida");

            entity.HasIndex(e => e.ImoIddivida, "IX_TribDepositoJudicialBaixa_ImoIDDivida");

            entity.Property(e => e.DepositoBaixaId).ValueGeneratedNever();
            entity.Property(e => e.ConIddivida).HasColumnName("ConIDDivida");
            entity.Property(e => e.EmpIddivida).HasColumnName("EmpIDDivida");
            entity.Property(e => e.ImoIddivida).HasColumnName("ImoIDDivida");

            entity.HasOne(d => d.ConIddividaNavigation).WithMany(p => p.TribDepositoJudicialBaixas)
                .HasForeignKey(d => d.ConIddivida)
                .HasConstraintName("FK_TribDepositoJudicialBaixa_TribDividasContribuinte");

            entity.HasOne(d => d.Deposito).WithMany(p => p.TribDepositoJudicialBaixas)
                .HasForeignKey(d => d.DepositoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribDepositoJudicialBaixa_TribDepositoJudicial");

            entity.HasOne(d => d.EmpIddividaNavigation).WithMany(p => p.TribDepositoJudicialBaixas)
                .HasForeignKey(d => d.EmpIddivida)
                .HasConstraintName("FK_TribDepositoJudicialBaixa_TribDividasEmpresas");

            entity.HasOne(d => d.ImoIddividaNavigation).WithMany(p => p.TribDepositoJudicialBaixas)
                .HasForeignKey(d => d.ImoIddivida)
                .HasConstraintName("FK_TribDepositoJudicialBaixa_TribDividasImo");
        });

        modelBuilder.Entity<TribDepreciacaoIdade>(entity =>
        {
            entity.HasKey(e => e.DePrecId);

            entity.ToTable("TribDepreciacaoIdade");

            entity.Property(e => e.DePrecId)
                .ValueGeneratedNever()
                .HasColumnName("DePrecID");
            entity.Property(e => e.DePrecAliquota).HasColumnType("money");
            entity.Property(e => e.ParamId).HasColumnName("ParamID");
            entity.Property(e => e.TparamId).HasColumnName("TParamID");

            entity.HasOne(d => d.TribParamCalculo).WithMany(p => p.TribDepreciacaoIdades)
                .HasForeignKey(d => new { d.TparamId, d.ParamId })
                .HasConstraintName("FK_TribDepreciacaoIdade_TribParamCalculos");
        });

        modelBuilder.Entity<TribDiarioArrecadacao>(entity =>
        {
            entity.HasKey(e => e.DiArId);

            entity.ToTable("TribDiarioArrecadacao");

            entity.HasIndex(e => e.CodReceita, "IX_CodReceita").HasFillFactor(90);

            entity.HasIndex(e => e.DiArDataLanc, "IX_DiArDataLanc").HasFillFactor(90);

            entity.HasIndex(e => e.DiArOrigemLanc, "IX_DiArOrigemLanc").HasFillFactor(90);

            entity.HasIndex(e => e.BaiId, "IX_TribDiarioArrecadacao").HasFillFactor(90);

            entity.Property(e => e.DiArId).HasColumnName("DiArID");
            entity.Property(e => e.BaiId).HasColumnName("BaiID");
            entity.Property(e => e.CodReceita)
                .HasMaxLength(12)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DiArDataLanc).HasColumnType("datetime");
            entity.Property(e => e.DiArHistorico)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.DiArNomeContribuinte)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.DiArNumDocumento)
                .HasMaxLength(14)
                .IsUnicode(false);
            entity.Property(e => e.DiArOrigemLanc)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("Automático")
                .HasComment("");
            entity.Property(e => e.DiArTipoOperacao)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DiArValor).HasColumnType("money");
        });

        modelBuilder.Entity<TribDiarioArrecadacaoTemp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TribDiarioArrecadacaoTemp");

            entity.Property(e => e.Arrecadado).HasColumnType("money");
            entity.Property(e => e.CodReceita)
                .HasMaxLength(12)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Data).HasColumnType("datetime");
            entity.Property(e => e.Descricao)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Tipo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribDiarioArrecadacaoTemp2>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TribDiarioArrecadacaoTemp2");

            entity.Property(e => e.ArrecadadoDiario).HasColumnType("money");
            entity.Property(e => e.ArrecadadoTribuario).HasColumnType("money");
            entity.Property(e => e.CodReceita)
                .HasMaxLength(12)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Data).HasColumnType("datetime");
            entity.Property(e => e.Descricao)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribDivEvento>(entity =>
        {
            entity.HasKey(e => e.IdEvento);

            entity.HasIndex(e => e.ConIddivida, "IX_ConIDDivida").HasFillFactor(90);

            entity.HasIndex(e => e.DivEmpId, "IX_DivEmpID").HasFillFactor(90);

            entity.HasIndex(e => e.ImoIddivida, "IX_ImoIDDivida").HasFillFactor(90);

            entity.HasIndex(e => new { e.TpEvento, e.FlProcessado, e.ImoIddivida, e.ConIddivida, e.DivEmpId }, "IX_TribDivEventos").HasFillFactor(90);

            entity.HasIndex(e => new { e.NmObjeto, e.IdObjeto }, "IX_TribDivEventos_1").HasFillFactor(90);

            entity.HasIndex(e => new { e.DtEvento, e.FlProcessado }, "IX_TribDivEventos_dtEvento_flProcessado_inc_IdEvento_tpEvento_dtProcess_dsErro").HasFillFactor(90);

            entity.HasIndex(e => new { e.TpEvento, e.DivEmpId }, "IX_TribDivEventos_tpEvento_DivEmpID").HasFillFactor(90);

            entity.HasIndex(e => new { e.TpEvento, e.ImoIddivida }, "IX_TribDivEventos_tpEvento_ImoIDDivida").HasFillFactor(90);

            entity.HasIndex(e => e.TpEvento, "IX_TribDivEventos_tpEvento_inc_ConIDDivida").HasFillFactor(90);

            entity.Property(e => e.ConIddivida).HasColumnName("ConIDDivida");
            entity.Property(e => e.DivEmpId).HasColumnName("DivEmpID");
            entity.Property(e => e.DsAcao)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("dsAcao");
            entity.Property(e => e.DsErro)
                .IsUnicode(false)
                .HasColumnName("dsErro");
            entity.Property(e => e.DsLogin)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsLogin");
            entity.Property(e => e.DtEvento)
                .HasColumnType("datetime")
                .HasColumnName("dtEvento");
            entity.Property(e => e.DtInclusao)
                .HasColumnType("datetime")
                .HasColumnName("dtInclusao");
            entity.Property(e => e.DtProcessamento)
                .HasColumnType("datetime")
                .HasColumnName("dtProcessamento");
            entity.Property(e => e.FlProcessado).HasColumnName("flProcessado");
            entity.Property(e => e.IdObjeto).HasColumnName("idObjeto");
            entity.Property(e => e.ImoIddivida).HasColumnName("ImoIDDivida");
            entity.Property(e => e.NmObjeto)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("nmObjeto");
            entity.Property(e => e.NrGuid)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nrGuid");
            entity.Property(e => e.TpEvento)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("tpEvento");
            entity.Property(e => e.VlEvento)
                .HasColumnType("money")
                .HasColumnName("vlEvento");
        });

        modelBuilder.Entity<TribDivEventosDcfozHabitum>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TribDivEventosDCFozHabita");

            entity.Property(e => e.ConIddivida).HasColumnName("ConIDDivida");
            entity.Property(e => e.DivEmpId).HasColumnName("DivEmpID");
            entity.Property(e => e.DsAcao)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("dsAcao");
            entity.Property(e => e.DsErro)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("dsErro");
            entity.Property(e => e.DsLogin)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("dsLogin");
            entity.Property(e => e.DtEvento)
                .HasColumnType("datetime")
                .HasColumnName("dtEvento");
            entity.Property(e => e.DtInclusao)
                .HasColumnType("datetime")
                .HasColumnName("dtInclusao");
            entity.Property(e => e.DtProcessamento).HasColumnName("dtProcessamento");
            entity.Property(e => e.FlProcessado).HasColumnName("flProcessado");
            entity.Property(e => e.IdLeiAto).HasColumnName("idLeiATo");
            entity.Property(e => e.IdObjeto).HasColumnName("idObjeto");
            entity.Property(e => e.NmObjeto).HasColumnName("nmObjeto");
            entity.Property(e => e.NrGuid)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("nrGuid");
            entity.Property(e => e.TpEvento)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.VlEvento).HasColumnName("vlEvento");
        });

        modelBuilder.Entity<TribDividasBaixa>(entity =>
        {
            entity.HasKey(e => e.BaiId);

            entity.ToTable("TribDividasBaixa", tb =>
                {
                    tb.HasTrigger("TgTribDividasBaixaDelete");
                    tb.HasTrigger("TgTribDividasBaixaInsert");
                });

            entity.HasIndex(e => new { e.BxData, e.ConvenioId, e.BxorigemBaixa }, "IX_BxData_ConvenioId_BXOrigemBaixa").HasFillFactor(90);

            entity.HasIndex(e => e.ConvenioId, "IX_ConvenioId").HasFillFactor(90);

            entity.HasIndex(e => new { e.BxArquivo, e.DataInclusao }, "IX_TribDividasBaixa_BxArquivo_DataInclusao");

            entity.HasIndex(e => new { e.BxData, e.ConvenioId, e.BxBanco, e.BxArquivo, e.BaiId, e.DataInclusao }, "IX_TribDividasBaixa_BxData_ConvenioID_BxBanco_BxArquivo_BaiID_DataInc");

            entity.HasIndex(e => e.BxData, "IX_TribDividasBaixa_BxData_boleNossoNumero_BxBanco").HasFillFactor(90);

            entity.HasIndex(e => new { e.ConvenioId, e.BxDataExclusao }, "IX_TribDividasBaixa_ConvenioId_BxDataExclusao").HasFillFactor(90);

            entity.HasIndex(e => e.BoleNossoNumero, "IX_boleNossoNumero").HasFillFactor(90);

            entity.HasIndex(e => new { e.BxData, e.ConvenioId, e.BoleNossoNumero, e.BaiId }, "_dta_index_TribDividasBaixa_8_2060130680__K3_K5_K2_K1").HasFillFactor(90);

            entity.HasIndex(e => new { e.BxData, e.BxBanco, e.BoleNossoNumero }, "_dta_index_TribDividasBaixa_8_209852260__K3_K22_K2").HasFillFactor(90);

            entity.HasIndex(e => new { e.BoleNossoNumero, e.BaiId }, "_idx_TribDividasBaixa_BoleNOssoNumero_BaiID").HasFillFactor(90);

            entity.Property(e => e.BaiId).HasColumnName("BaiID");
            entity.Property(e => e.BoleJurosPago)
                .HasComment("Juros cobrado pelo no pagamento da guia de compensação")
                .HasColumnType("money")
                .HasColumnName("boleJurosPago");
            entity.Property(e => e.BoleMultaPago)
                .HasComment("Multa cobrada pelo banco no pagamento da guia de compensação")
                .HasColumnType("money")
                .HasColumnName("boleMultaPago");
            entity.Property(e => e.BoleNossoNumero)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("boleNossoNumero");
            entity.Property(e => e.BoleValorPago)
                .HasComment("Valor do bloqueto bancário.")
                .HasColumnType("money")
                .HasColumnName("boleValorPago");
            entity.Property(e => e.BxArquivo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.BxBanco)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BxData).HasColumnType("datetime");
            entity.Property(e => e.BxDataAlteracao).HasColumnType("datetime");
            entity.Property(e => e.BxDataCredito)
                .HasColumnType("datetime")
                .HasColumnName("bxDataCredito");
            entity.Property(e => e.BxDataExclusao).HasColumnType("datetime");
            entity.Property(e => e.BxExcluido).HasColumnName("bxExcluido");
            entity.Property(e => e.BxMotivoBaixa)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("Motivo da baixa.")
                .HasColumnName("bxMotivoBaixa");
            entity.Property(e => e.BxMotivoExclusao)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.BxUsuarioExclusao)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BxorigemBaixa)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("Automática")
                .HasComment("")
                .HasColumnName("BXOrigemBaixa");
            entity.Property(e => e.DataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Host)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValueSql("(host_name())")
                .HasColumnName("host");
            entity.Property(e => e.TipoBxId).HasColumnName("TipoBxID");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");

            entity.HasOne(d => d.BoleNossoNumeroNavigation).WithMany(p => p.TribDividasBaixas)
                .HasForeignKey(d => d.BoleNossoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribDividasBaixa_TribBoletos");

            entity.HasOne(d => d.Convenio).WithMany(p => p.TribDividasBaixas)
                .HasForeignKey(d => d.ConvenioId)
                .HasConstraintName("FK_TribDividasBaixa_ConvenioBanco");
        });

        modelBuilder.Entity<TribDividasBaixaBoleto>(entity =>
        {
            entity.HasKey(e => new { e.BaiId, e.BoleDivId });

            entity.HasIndex(e => e.BoleDivId, "IX_TribDividasBaixaBoletos_boleDivID").HasFillFactor(90);

            entity.Property(e => e.BaiId).HasColumnName("BaiID");
            entity.Property(e => e.BoleDivId).HasColumnName("boleDivID");
            entity.Property(e => e.BoleValorPagoDivida)
                .HasColumnType("money")
                .HasColumnName("boleValorPagoDivida");
            entity.Property(e => e.BoleValorPagoJuros)
                .HasColumnType("money")
                .HasColumnName("boleValorPagoJuros");
            entity.Property(e => e.BoleValorPagoMulta)
                .HasColumnType("money")
                .HasColumnName("boleValorPagoMulta");

            entity.HasOne(d => d.Bai).WithMany(p => p.TribDividasBaixaBoletos)
                .HasForeignKey(d => d.BaiId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribDividasBaixaBoletos_TribDividasBaixa");

            entity.HasOne(d => d.BoleDiv).WithMany(p => p.TribDividasBaixaBoletos)
                .HasForeignKey(d => d.BoleDivId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribDividasBaixaBoletos_tribBoletosDividas");
        });

        modelBuilder.Entity<TribDividasBkp>(entity =>
        {
            entity.HasKey(e => e.AltId);

            entity.ToTable("TribDividasBkp");

            entity.Property(e => e.AltId).HasColumnName("AltID");
            entity.Property(e => e.DataExclusao).HasColumnType("datetime");
            entity.Property(e => e.DataInclusao).HasColumnType("datetime");
            entity.Property(e => e.ImoDivValorBaixa).HasColumnType("money");
            entity.Property(e => e.ImoIddivida).HasColumnName("ImoIDDivida");
            entity.Property(e => e.TipoBxId).HasColumnName("TipoBxID");
            entity.Property(e => e.Usuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("usuario");
        });

        modelBuilder.Entity<TribDividasBloqueio>(entity =>
        {
            entity.HasKey(e => e.IdBloqueio);

            entity.HasIndex(e => e.ConIddivida, "IX_ConIDDivida").HasFillFactor(90);

            entity.HasIndex(e => e.EmpIddivida, "IX_EmpIDDivida").HasFillFactor(90);

            entity.HasIndex(e => e.ImoIddivida, "IX_ImoIDDivida").HasFillFactor(90);

            entity.Property(e => e.ConIddivida).HasColumnName("ConIDDivida");
            entity.Property(e => e.DsLogin)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsLogin");
            entity.Property(e => e.DsMotivo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dsMotivo");
            entity.Property(e => e.DsMotivoCancelamento)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dsMotivoCancelamento");
            entity.Property(e => e.DtBaseCorrecao)
                .HasColumnType("datetime")
                .HasColumnName("dtBaseCorrecao");
            entity.Property(e => e.DtBloqueio)
                .HasColumnType("datetime")
                .HasColumnName("dtBloqueio");
            entity.Property(e => e.DtBloqueioCorrecao)
                .HasColumnType("datetime")
                .HasColumnName("dtBloqueioCorrecao");
            entity.Property(e => e.DtBloqueioJuros)
                .HasColumnType("datetime")
                .HasColumnName("dtBloqueioJuros");
            entity.Property(e => e.DtBloqueioMda)
                .HasColumnType("datetime")
                .HasColumnName("dtBloqueioMDA");
            entity.Property(e => e.DtBloqueioMulta)
                .HasColumnType("datetime")
                .HasColumnName("dtBloqueioMulta");
            entity.Property(e => e.DtInclusao)
                .HasColumnType("datetime")
                .HasColumnName("dtInclusao");
            entity.Property(e => e.DtNovoVencimento)
                .HasColumnType("datetime")
                .HasColumnName("dtNovoVencimento");
            entity.Property(e => e.DtVelhoVencimento)
                .HasColumnType("datetime")
                .HasColumnName("dtVelhoVencimento");
            entity.Property(e => e.EmpIddivida).HasColumnName("EmpIDDivida");
            entity.Property(e => e.FlCancelado).HasColumnName("flCancelado");
            entity.Property(e => e.ImoIddivida)
                .HasComment("Código de identificação da dívida.")
                .HasColumnName("ImoIDDivida");
            entity.Property(e => e.TpOperacao)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tpOperacao");
        });

        modelBuilder.Entity<TribDividasContribuinte>(entity =>
        {
            entity.HasKey(e => e.ConIddivida);

            entity.ToTable("TribDividasContribuinte", tb =>
                {
                    tb.HasTrigger("TgTribDivContUpdateDataCalculo");
                    tb.HasTrigger("TgTribDividasContribuinteInsert");
                    tb.HasTrigger("TgTribDividasContribuinteUpdate");
                    tb.HasTrigger("TgTribDividasContribuinteUpdateLAST");
                    tb.HasTrigger("TgTribDividasContribuintesNoDelete");
                });

            entity.HasIndex(e => e.AutoInfrId, "IX_AutoInfrID").HasFillFactor(90);

            entity.HasIndex(e => e.ConDivDataBaixa, "IX_ConDivDataBaixa").HasFillFactor(90);

            entity.HasIndex(e => new { e.ConId, e.ConIddivida }, "IX_ConID_ConIDDivida").HasFillFactor(90);

            entity.HasIndex(e => new { e.TipoBxId, e.DataCalculo, e.ConIddivida, e.ConDivVencimento, e.ConDivDataUltimaCorrecao, e.ConDivVlrUltimaCorrecao, e.ConDivDataBloqCorrecao, e.ConDivDataBloqJuros, e.ConDivDataBloqMulta, e.ConDivDataBaixa, e.ConDivTipoDivida, e.TipoTribId, e.Idmoeda, e.ConDivValorHistorico }, "IX_TipoBxID_DataCalculo_ConIDDivida_ConDivVencimento_").HasFillFactor(90);

            entity.HasIndex(e => e.DataCalculo, "IX_TribDivContribuinte_DataCalculo").HasFillFactor(90);

            entity.HasIndex(e => new { e.ConDivAno, e.TipoTribId }, "IX_TribDividasContribuinte_ConDivAno_TipoTribID").HasFillFactor(90);

            entity.HasIndex(e => new { e.ConDivExcluido, e.ConIddivida, e.ConDivDataGeracao, e.TipoBxId, e.ConDivDataBaixa, e.ConId }, "IX_TribDividasContribuinte_ConDivExcluido_ConIDDivida_ConDivDataGeracao_TipoBxID_ConDivDataBaixa_ConID").HasFillFactor(90);

            entity.HasIndex(e => new { e.ConDivExcluido, e.ConIddivida, e.ConId }, "IX_TribDividasContribuinte_ConDivExcluido_ConIDDivida_ConID").HasFillFactor(90);

            entity.HasIndex(e => new { e.ConDivExcluido, e.TipoBxId, e.ConIddivida }, "IX_TribDividasContribuinte_ConDivExcluido_TipoBxID_ConIDDivida");

            entity.HasIndex(e => e.ConDivTipoDivida, "IX_TribDividasContribuinte_ConDivTipoDivida").HasFillFactor(90);

            entity.HasIndex(e => new { e.ConDivTipoDivida, e.ConDivExcluido, e.ConDivValor }, "IX_TribDividasContribuinte_ConDivTipoDivida_ConDivExcluido_ConDivValor_inc_ConIDDivida_dtGeracao_Usuario").HasFillFactor(90);

            entity.HasIndex(e => new { e.ConDivTipoDivida, e.ConDivVencimento, e.ConIddivida, e.ConId }, "IX_TribDividasContribuinte_ConDivTipoDivida_ConDivVencimento_ConIDDivida_ConID_inc_ConDivValor");

            entity.HasIndex(e => new { e.ConDivValor, e.ConId }, "IX_TribDividasContribuinte_ConDivValor_ConID").HasFillFactor(90);

            entity.HasIndex(e => e.ConIddivida, "IX_TribDividasContribuinte_ConIDDivida_inc_ConDivAno_ConDivSubDivida");

            entity.HasIndex(e => new { e.ConId, e.ConDivExcluido }, "IX_TribDividasContribuinte_ConID_ConDivExcluido");

            entity.HasIndex(e => e.TipoBxId, "IX_TribDividasContribuinte_TipoBxID").HasFillFactor(90);

            entity.HasIndex(e => new { e.TipoBxId, e.ConDivDataBaixa }, "IX_TribDividasContribuinte_TipoBxID_ConDivDataBaixa_inc_TipoTribID_ConDivTipoDivida");

            entity.HasIndex(e => new { e.TipoBxId, e.ConDivDataBaixa }, "IX_TribDividasContribuinte_TipoBxID_ConDivDataBaixa_inc_TipoTribID_ConDivTipoDivida_ConDivValorBaixa");

            entity.HasIndex(e => new { e.TipoBxId, e.ConDivDataBaixa }, "IX_TribDividasContribuinte_TipoBxID_ConDivDataBaixa_inc_TipoTribID_Vencto_TipoDivida_VlrBaixa");

            entity.HasIndex(e => new { e.TipoBxId, e.ConDivExcluido, e.ConDivAno, e.ConDivVencimento }, "IX_TribDividasContribuinte_TipoBxID_ConDivExcluido_ConDivAno_ConDivVencimento");

            entity.HasIndex(e => new { e.TipoBxId, e.ConDivParcela, e.ConIddivida }, "IX_TribDividasContribuinte_TipoBxID_ConDivParcela_ConIDDivida");

            entity.HasIndex(e => new { e.TipoBxId, e.ConDivParcela, e.ConIddivida, e.ConDivExcluido }, "IX_TribDividasContribuinte_TipoBxID_ConDivParcela_ConIDDivida_ConDivExcluido");

            entity.HasIndex(e => e.TipoBxId, "IX_TribDividasContribuinte_TipoBxID_inc_ConIDDivida_TipoTribID_Vencto_TipoDivida_DtBloqCorr");

            entity.HasIndex(e => e.TipoBxId, "IX_TribDividasContribuinte_TipoBxID_inc_TipoTribID_Vencto_TipoDivida_VlrBaixa_DivValor");

            entity.HasIndex(e => e.TipoTribId, "IX_TribDividasContribuinte_TipoTribID").HasFillFactor(90);

            entity.HasIndex(e => new { e.TipoTribId, e.TipoBxId, e.ConDivDataBaixa }, "IX_TribDividasContribuinte_TipoTribID_TipoBxID_ConDivDataBaixa_inc_ConDivTipoDivida");

            entity.HasIndex(e => new { e.ConIddivida, e.TipoBxId }, "_dta_index_TribDividasContribuinte_8_821994405__K1_K17_4_7_9_10_11_12_19_37_38_39_40_41");

            entity.HasIndex(e => new { e.ConDivTipoDivida, e.TipoBxId, e.ConDivParcelaUnica, e.ConDivAno, e.ConDivExcluido }, "_dta_index_TribDividasContribuinte_8_821994405__K9_K17_K16_K3_K43_1_4_7_10_11_12_13_14_19_36_37_38_39_40_41").HasFillFactor(90);

            entity.HasIndex(e => new { e.ConIddivida, e.ConDivDataBaixa }, "ix_TribDividasContribuinte_ConIDDivida_ConDivDataBaixa").HasFillFactor(90);

            entity.Property(e => e.ConIddivida)
                .ValueGeneratedNever()
                .HasColumnName("ConIDDivida");
            entity.Property(e => e.AutoInfrId)
                .HasComment("Código do auto de infração.")
                .HasColumnName("AutoInfrID");
            entity.Property(e => e.ConDivBxVlrCorrecao).HasColumnType("money");
            entity.Property(e => e.ConDivBxVlrDesconto).HasColumnType("money");
            entity.Property(e => e.ConDivBxVlrJuros).HasColumnType("money");
            entity.Property(e => e.ConDivBxVlrMulta).HasColumnType("money");
            entity.Property(e => e.ConDivBxVlrMultaDa)
                .HasColumnType("money")
                .HasColumnName("ConDivBxVlrMultaDA");
            entity.Property(e => e.ConDivDataBaixa)
                .HasComment("Data da baixa da dívida.")
                .HasColumnType("datetime");
            entity.Property(e => e.ConDivDataBloqCorrecao).HasColumnType("datetime");
            entity.Property(e => e.ConDivDataBloqJuros).HasColumnType("datetime");
            entity.Property(e => e.ConDivDataBloqMulta).HasColumnType("datetime");
            entity.Property(e => e.ConDivDataGeracao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ConDivDataUltimaCorrecao).HasColumnType("datetime");
            entity.Property(e => e.ConDivDescDivida).HasColumnType("money");
            entity.Property(e => e.ConDivMotivoBaixa)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("Motivo da baixa, gravada por trigger no movimento de baixa e tambem pelos formulários que baixa dividas sem movimento de baixa (ex.: isenção de dividas).");
            entity.Property(e => e.ConDivObs)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("Observações sobre o lançamento da dívida.");
            entity.Property(e => e.ConDivOrigemLancamento)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ConDivParcelaUnica)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength();
            entity.Property(e => e.ConDivSaiBoleto)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Sim")
                .IsFixedLength();
            entity.Property(e => e.ConDivValor).HasColumnType("money");
            entity.Property(e => e.ConDivValorBaixa)
                .HasComment("Valor Baixado da divida")
                .HasColumnType("money");
            entity.Property(e => e.ConDivValorBkp).HasColumnType("money");
            entity.Property(e => e.ConDivValorHistorico).HasColumnType("money");
            entity.Property(e => e.ConDivVencimento).HasColumnType("datetime");
            entity.Property(e => e.ConDivVlrUltimaCorrecao)
                .HasDefaultValue(0m)
                .HasColumnType("money");
            entity.Property(e => e.ConId)
                .HasDefaultValue(0L)
                .HasColumnName("ConID");
            entity.Property(e => e.Correcao).HasColumnType("money");
            entity.Property(e => e.DataCalculo).HasColumnType("datetime");
            entity.Property(e => e.EdiId).HasColumnName("ediID");
            entity.Property(e => e.Idmoeda).HasColumnName("IDMoeda");
            entity.Property(e => e.Juros).HasColumnType("money");
            entity.Property(e => e.Multa).HasColumnType("money");
            entity.Property(e => e.MultaDividaAtiva).HasColumnType("money");
            entity.Property(e => e.TipoBxId).HasColumnName("TipoBxID");
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");

            entity.HasOne(d => d.Con).WithMany(p => p.TribDividasContribuintes)
                .HasForeignKey(d => d.ConId)
                .HasConstraintName("FK_TribDividasContribuinte_Contribuintes");
        });

        modelBuilder.Entity<TribDividasContribuinteProcesso>(entity =>
        {
            entity.HasKey(e => new { e.ProcId, e.ConIddivida });

            entity.ToTable("tribDividasContribuinteProcessos");

            entity.Property(e => e.ProcId)
                .HasComment("Código de Identificação do Processo")
                .HasColumnName("ProcID");
            entity.Property(e => e.ConIddivida).HasColumnName("ConIDDivida");
            entity.Property(e => e.BoleNossoNumero)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("boleNossoNumero");

            entity.HasOne(d => d.ConIddividaNavigation).WithMany(p => p.TribDividasContribuinteProcessos)
                .HasForeignKey(d => d.ConIddivida)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tribDividasContribuinteProcessos_TribDividasContribuinte");

            entity.HasOne(d => d.Proc).WithMany(p => p.TribDividasContribuinteProcessos)
                .HasForeignKey(d => d.ProcId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tribDividasContribuinteProcessos_Processos");
        });

        modelBuilder.Entity<TribDividasEmpresa>(entity =>
        {
            entity.HasKey(e => e.DivEmpId);

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("TgTribDivEmprUpdateDataCalculo");
                    tb.HasTrigger("TgTribDividasEmpresasInsert");
                    tb.HasTrigger("TgTribDividasEmpresasOcorrencias");
                    tb.HasTrigger("TgTribDividasEmpresasUpdate");
                    tb.HasTrigger("TgTribDividasEmpresasUpdateLAST");
                });

            entity.HasIndex(e => e.AutoInfrId, "IX_AutoInfrID").HasFillFactor(90);

            entity.HasIndex(e => new { e.EmprCmc, e.DivEmpId }, "IX_EmprCmc_DivEmpID").HasFillFactor(90);

            entity.HasIndex(e => e.EmprDivDataBaixa, "IX_EmprDivDataBaixa").HasFillFactor(90);

            entity.HasIndex(e => new { e.TipoBxId, e.DataCalculo, e.DivEmpId, e.EmprDivVencimento, e.EmprDivDataUltCorrecao, e.EmprDivVlrUltCorrecao, e.EmprDivDataBloqCorrecao, e.EmprDivDataBloqJuros, e.EmprDivDataBloqMulta, e.EmprDivDataBaixa, e.EmprDivTipoDivida, e.TipoTribId, e.Idmoeda, e.EmprDivValorHistorico }, "IX_TipoBxID_DataCalculo_DivEmpID_EmprDivVencimento_").HasFillFactor(90);

            entity.HasIndex(e => e.TipoTribId, "IX_TipoTribID").HasFillFactor(90);

            entity.HasIndex(e => e.DataCalculo, "IX_TribDivEmpresa_DataCalculo").HasFillFactor(90);

            entity.HasIndex(e => new { e.DivEmpId, e.EmprDivParcela, e.TipoBxId, e.EmprDivExcluido }, "IX_TribDividasEmpresas_DivEmpID_EmprDivParcela_TipoBxID_EmprDivExcluido");

            entity.HasIndex(e => new { e.EmprCmc, e.TipoBxId, e.EmprDivExcluido, e.EmprDivValor }, "IX_TribDividasEmpresas_EmprCmc_TipoBxID_EmprDivExcluido_EmprDivValor").HasFillFactor(90);

            entity.HasIndex(e => new { e.EmprDivAno, e.TipoTribId }, "IX_TribDividasEmpresas_EmprDivAno_TipoTribID").HasFillFactor(90);

            entity.HasIndex(e => new { e.EmprDivExcluido, e.DivEmpId, e.EmprCmc }, "IX_TribDividasEmpresas_EmprDivExcluido_DivEmpID_EmprCMC").HasFillFactor(90);

            entity.HasIndex(e => new { e.EmprDivExcluido, e.DivEmpId }, "IX_TribDividasEmpresas_EmprDivExcluido_DivEmpID_inc_EmprDivAno_EmprDivSubDivida");

            entity.HasIndex(e => e.EmprDivTipoDivida, "IX_TribDividasEmpresas_EmprDivTipoDivida").HasFillFactor(90);

            entity.HasIndex(e => new { e.EmprDivTipoDivida, e.EmprDivExcluido, e.EmprDivValor }, "IX_TribDividasEmpresas_EmprDivTipoDivida_EmprDivExcluido_EmprDivValor_inc_DivEmpID_dtGeracao_Usuario").HasFillFactor(90);

            entity.HasIndex(e => new { e.EmprDivTipoDivida, e.EmprDivVencimento, e.DivEmpId }, "IX_TribDividasEmpresas_EmprDivTipoDivida_EmprDivVencimento_DivEmpID_inc_EmprCMC_EmprDivValor");

            entity.HasIndex(e => new { e.EmprDivTipoDivida, e.TipoBxId, e.EmprDivExcluido, e.EmprDivVencimento }, "IX_TribDividasEmpresas_EmprDivTipoDivida_TipoBxID_EmprDivExcluido_EmprDivVencimento").HasFillFactor(90);

            entity.HasIndex(e => new { e.EmprDivValor, e.DivEmpId, e.EmprDivExcluido, e.EmprDivDataGeracao, e.TipoBxId, e.EmprDivDataBaixa, e.EmprCmc }, "IX_TribDividasEmpresas_EmprDivValor_DivEmpID_EmprDivExcluido_EmprDivDataGeracao_TipoBxID_EmprDivDataBaixa_EmprCmc").HasFillFactor(90);

            entity.HasIndex(e => new { e.EmprDivParcelaUnica, e.TipoBxId, e.EmprDivExcluido, e.EmprDivVencimento }, "IX_TribDividasEmpresas_ParcUn_TpBxID_Excl_Venc_inc_DivEmpID_TipoTrib").HasFillFactor(90);

            entity.HasIndex(e => e.TipoBxId, "IX_TribDividasEmpresas_TipoBxID").HasFillFactor(90);

            entity.HasIndex(e => new { e.TipoBxId, e.DivEmpId, e.EmprDivExcluido, e.EmprDivParcela }, "IX_TribDividasEmpresas_TipoBxID_DivEmpID_EmprDivExcluido_EmprDivParcela");

            entity.HasIndex(e => new { e.TipoBxId, e.EmprDivDataBaixa, e.EmprDivValor, e.EmprDivDataGeracao, e.EmprDivExcluido, e.EmprCmc }, "IX_TribDividasEmpresas_TipoBxID_DtBaixa_Valor_DtGeracao_Excluido_CMC_inc_DivEmpID_Usu").HasFillFactor(90);

            entity.HasIndex(e => new { e.TipoBxId, e.EmprCmc }, "IX_TribDividasEmpresas_TipoBxID_EmprCMC").HasFillFactor(90);

            entity.HasIndex(e => new { e.TipoBxId, e.EmprDivDataBaixa }, "IX_TribDividasEmpresas_TipoBxID_EmprDivDataBaixa_inc_TipoTribID_EmprDivTipoDivida");

            entity.HasIndex(e => new { e.TipoBxId, e.EmprDivDataBaixa }, "IX_TribDividasEmpresas_TipoBxID_EmprDivDataBaixa_inc_TipoTribID_EmprDivTipoDivida_EmprDivValorBaixa");

            entity.HasIndex(e => new { e.TipoBxId, e.EmprDivDataBaixa }, "IX_TribDividasEmpresas_TipoBxID_EmprDivDataBaixa_inc_TipoTribID_Vencto_TipoDivida_VlrBaixa");

            entity.HasIndex(e => new { e.TipoBxId, e.EmprDivExcluido, e.EmprDivAno, e.EmprDivVencimento }, "IX_TribDividasEmpresas_TipoBxID_EmprDivExcluido_EmprDivAno_EmprDivVencimento");

            entity.HasIndex(e => new { e.TipoBxId, e.EmprDivParcela, e.DivEmpId }, "IX_TribDividasEmpresas_TipoBxID_EmprDivParcela_DivEmpID");

            entity.HasIndex(e => e.TipoBxId, "IX_TribDividasEmpresas_TipoBxID_inc_DivEmpID_TipoTribID_Vencto_TipoDivida_DtBloqCorr");

            entity.HasIndex(e => e.TipoBxId, "IX_TribDividasEmpresas_TipoBxID_inc_EmprCmc_TipoTribID_EmprDivValor");

            entity.HasIndex(e => e.TipoBxId, "IX_TribDividasEmpresas_TipoBxID_inc_TipoTribID_Vencto_TipoDivida_VlrBaixa_DivValor");

            entity.HasIndex(e => new { e.TipoTribId, e.TipoBxId }, "IX_TribDividasEmpresas_TipoTribID_TipoBxID_inc_EmprDivTipoDivida");

            entity.HasIndex(e => new { e.EmprDivTipoDivida, e.TipoBxId, e.EmprDivAno, e.EmprDivParcelaUnica, e.EmprDivExcluido }, "_dta_index_TribDividasEmpresas_8_1605997198__K13_K21_K3_K20_K46_1_5_8_14_15_16_17_18_24_39_40_41_42_43_44").HasFillFactor(90);

            entity.HasIndex(e => new { e.DivEmpId, e.TipoBxId }, "_dta_index_TribDividasEmpresas_8_1605997198__K1_K21_5_8_13_14_15_16_24_40_41_42_43_44");

            entity.HasIndex(e => new { e.DivEmpId, e.EmprDivAno, e.EmprDivMes, e.TipoTribId, e.EmprDivParcela, e.EmprDivSubDivida, e.EmprDivQtdeBaixas, e.EmprDivDataBaixa, e.EmprDivValor, e.EmprDivVencimento, e.EmprCmc }, "_dta_index_TribDividasEmpresas_9_444176978__K1_K3_K4_K5_K7_K6_K26_K24_K39_K8_K2").HasFillFactor(90);

            entity.HasIndex(e => e.EmprDivAno, "idx_TribRelDividasAtividade").HasFillFactor(90);

            entity.Property(e => e.DivEmpId)
                .ValueGeneratedNever()
                .HasColumnName("DivEmpID");
            entity.Property(e => e.AutoInfrId)
                .HasComment("Código do auto de infração.")
                .HasColumnName("AutoInfrID");
            entity.Property(e => e.ConDivDescDivida).HasColumnType("money");
            entity.Property(e => e.Correcao).HasColumnType("money");
            entity.Property(e => e.DataCalculo).HasColumnType("datetime");
            entity.Property(e => e.EdiId).HasColumnName("ediID");
            entity.Property(e => e.EmprDataBloqueioSelic).HasColumnType("datetime");
            entity.Property(e => e.EmprDivAliquota)
                .HasDefaultValue(0m)
                .HasColumnType("money");
            entity.Property(e => e.EmprDivAno).HasDefaultValue(0);
            entity.Property(e => e.EmprDivBxVlrCorrecao).HasColumnType("money");
            entity.Property(e => e.EmprDivBxVlrDesconto).HasColumnType("money");
            entity.Property(e => e.EmprDivBxVlrJuros).HasColumnType("money");
            entity.Property(e => e.EmprDivBxVlrMulta).HasColumnType("money");
            entity.Property(e => e.EmprDivBxVlrMultaDa)
                .HasColumnType("money")
                .HasColumnName("EmprDivBxVlrMultaDA");
            entity.Property(e => e.EmprDivDataBaixa)
                .HasComment("Data da baixa da dívida.")
                .HasColumnType("datetime");
            entity.Property(e => e.EmprDivDataBloqCorrecao).HasColumnType("datetime");
            entity.Property(e => e.EmprDivDataBloqJuros).HasColumnType("datetime");
            entity.Property(e => e.EmprDivDataBloqMulta).HasColumnType("datetime");
            entity.Property(e => e.EmprDivDataGeracao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.EmprDivDataUltCorrecao).HasColumnType("datetime");
            entity.Property(e => e.EmprDivMotivoBaixa)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.EmprDivObs)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("Observações sobre o lançamento da dívida.");
            entity.Property(e => e.EmprDivOrigemLancamento)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.EmprDivParcela).HasDefaultValue(0);
            entity.Property(e => e.EmprDivParcelaUnica)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength();
            entity.Property(e => e.EmprDivSaiBoleto)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Sim")
                .IsFixedLength();
            entity.Property(e => e.EmprDivSubDivida).HasDefaultValue(0);
            entity.Property(e => e.EmprDivTipoMoeda)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("Real")
                .IsFixedLength();
            entity.Property(e => e.EmprDivValor).HasColumnType("money");
            entity.Property(e => e.EmprDivValorBaixa).HasColumnType("money");
            entity.Property(e => e.EmprDivValorBkp).HasColumnType("money");
            entity.Property(e => e.EmprDivValorHistorico)
                .HasComment("Criado para atender o modelo das moedas")
                .HasColumnType("money");
            entity.Property(e => e.EmprDivVencimento).HasColumnType("datetime");
            entity.Property(e => e.EmprDivVlrTributavel)
                .HasDefaultValue(0m)
                .HasColumnType("money");
            entity.Property(e => e.EmprDivVlrUltCorrecao)
                .HasDefaultValue(0m)
                .HasColumnType("money");
            entity.Property(e => e.Idmoeda).HasColumnName("IDMoeda");
            entity.Property(e => e.Juros).HasColumnType("money");
            entity.Property(e => e.Multa).HasColumnType("money");
            entity.Property(e => e.MultaDividaAtiva).HasColumnType("money");
            entity.Property(e => e.TipoBxId).HasColumnName("TipoBxID");
            entity.Property(e => e.TipoTribId)
                .HasDefaultValue(0)
                .HasColumnName("TipoTribID");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");

            entity.HasOne(d => d.EmprCmcNavigation).WithMany(p => p.TribDividasEmpresas)
                .HasForeignKey(d => d.EmprCmc)
                .HasConstraintName("FK_TribDividasEmpresas_TribEmpresas");

            entity.HasOne(d => d.TipoTrib).WithMany(p => p.TribDividasEmpresas)
                .HasForeignKey(d => d.TipoTribId)
                .HasConstraintName("FK_TribDividasEmpresas_TribTipoTributos");
        });

        modelBuilder.Entity<TribDividasImo>(entity =>
        {
            entity.HasKey(e => e.ImoIddivida);

            entity.ToTable("TribDividasImo", tb =>
                {
                    tb.HasTrigger("TgTribDivImoUpdateDataCalculo");
                    tb.HasTrigger("TgTribDividasImoDeleteOcorrencias");
                    tb.HasTrigger("TgTribDividasImoInsert");
                    tb.HasTrigger("TgTribDividasImoUpdate");
                    tb.HasTrigger("TgTribDividasImoUpdateLAST");
                });

            entity.HasIndex(e => e.AutoInfrId, "IX_AutoInfrID").HasFillFactor(90);

            entity.HasIndex(e => e.EdificacaoId, "IX_EdificacaoID").HasFillFactor(90);

            entity.HasIndex(e => new { e.EdificacaoId, e.ImoDivAno, e.TipoBxId }, "IX_EdificacaoID_ImoDivAno_TipoBxID").HasFillFactor(90);

            entity.HasIndex(e => new { e.EdificacaoId, e.ImoDivAno, e.TipoBxId, e.ImoDivTipoDivida }, "IX_EdificacaoID_ImoDivAno_TipoBxID_ImoDivTipoDivida").HasFillFactor(90);

            entity.HasIndex(e => new { e.ImoDivAno, e.ImoDivParcelaUnica, e.ImoDivVencimento, e.ImoDivParcela }, "IX_ImoDivAno_ImoDivParcelaUnica_ImoDivVencimento_ImoDivParcela").HasFillFactor(90);

            entity.HasIndex(e => new { e.ImoDivAno, e.ImoDivParcela, e.TipoBxId, e.TipoTribId, e.EdificacaoId }, "IX_ImoDivAno_ImoDivParcela_TipoBxID_EdificacaoID").HasFillFactor(90);

            entity.HasIndex(e => e.ImoDivDataBaixa, "IX_ImoDivDataBaixa").HasFillFactor(90);

            entity.HasIndex(e => e.ImoDivOrigemLancamento, "IX_ImoDivOrigemLancamento").HasFillFactor(90);

            entity.HasIndex(e => new { e.ImoDivParcelaUnica, e.ImoDivAno, e.TipoBxId, e.ImoDivOrigemLancamento, e.TipoTribId, e.EdificacaoId }, "IX_ImoDivParcelaUnica_ImoDivAno_TipoBxID_ImoDivOrigemLancamento_TipoTribID_EdificacaoID").HasFillFactor(90);

            entity.HasIndex(e => e.ImoDivTipoDivida, "IX_ImoDivTipoDivida").HasFillFactor(90);

            entity.HasIndex(e => e.TipoBxId, "IX_TipoBxID").HasFillFactor(90);

            entity.HasIndex(e => new { e.TipoBxId, e.DataCalculo, e.ImoIddivida, e.ImoDivVencimento, e.ImoDivDataUltimaCorrecao, e.ImoDivVlrUltimaCorrecao, e.ImoDivDataBloqCorrecao, e.ImoDivDataBloqJuros, e.ImoDivDataBloqMulta, e.ImoDivDataBaixa, e.ImoDivTipoDivida, e.TipoTribId, e.Idmoeda, e.ImoDivValorHistorico }, "IX_TipoBxID_DataCalculo_ImoIDDivida_ImoDivVencimento_").HasFillFactor(90);

            entity.HasIndex(e => e.TipoTribId, "IX_TipoTribID").HasFillFactor(90);

            entity.HasIndex(e => e.DataCalculo, "IX_TribDivImovel_DataCalculo").HasFillFactor(90);

            entity.HasIndex(e => new { e.EdificacaoId, e.ImoDivTipoDivida, e.TipoBxId, e.ImoDivAno, e.ImoDivVencimento }, "IX_TribDividasImo_EdificacaoID_ImoDivTipoDivida_TipoBxID_ImoDivAno_ImoDivVencimento");

            entity.HasIndex(e => e.EdificacaoId, "IX_TribDividasImo_EdificacaoID_TipoBxID_ImoDivExcluido").HasFillFactor(90);

            entity.HasIndex(e => new { e.EdificacaoId, e.TipoBxId, e.ImoDivExcluido, e.ImoDivAno, e.TipoTribId, e.ImoDivTipoDivida, e.ImoIddivida }, "IX_TribDividasImo_EdificacaoID_TipoBxID_ImoDivExcluido_ImoDivAno_TipoTribID_ImoDivTipoDivida_ImoIDDivida");

            entity.HasIndex(e => new { e.ImoDivAno, e.ImoDivOrigemLancamento, e.ImoDivParcelaUnica, e.ImoDivExcluido, e.TipoBxId }, "IX_TribDividasImo_ImoDivAno_ImoDivOrigemLancamento_ImoDivParcelaUnica_ImoDivExcluido_TipoBxID").HasFillFactor(90);

            entity.HasIndex(e => new { e.ImoDivAno, e.ImoDivOrigemLancamento, e.UsuarioInclusao, e.ImoDivDataGeracao }, "IX_TribDividasImo_ImoDivAno_ImoDivOrigemLancamento_UsuarioInclusao_ImoDivDataGeracao").HasFillFactor(90);

            entity.HasIndex(e => new { e.ImoDivAno, e.TipoBxId, e.TipoTribId, e.EdificacaoId, e.ImoIddivida }, "IX_TribDividasImo_ImoDivAno_TipoBxID_TipoTribID_EdificacaoID_ImoIDDivida").HasFillFactor(90);

            entity.HasIndex(e => new { e.ImoDivAno, e.TipoTribId }, "IX_TribDividasImo_ImoDivAno_TipoTribID").HasFillFactor(90);

            entity.HasIndex(e => new { e.ImoDivDataGeracao, e.EdificacaoId, e.TipoBxId, e.ImoDivDataBaixa, e.ImoDivValor, e.ImoDivExcluido }, "IX_TribDividasImo_ImoDivDataGeracao_EdificacaoID_TipoBxID_ImoDivDataBaixa_ImoDivValor_ImoDivExcluido_inc_ImoIDDivida_UsuarioInc");

            entity.HasIndex(e => new { e.ImoDivExcluido, e.EdificacaoId, e.ImoIddivida }, "IX_TribDividasImo_ImoDivExcluido_EdificacaoID_ImoIDDivida_inc_ImoDivValor");

            entity.HasIndex(e => new { e.ImoDivExcluido, e.ImoIddivida, e.EdificacaoId }, "IX_TribDividasImo_ImoDivExcluido_ImoIDDivida_EdificacaoID").HasFillFactor(90);

            entity.HasIndex(e => new { e.ImoDivExcluido, e.ImoIddivida, e.ImoDivValor, e.ImoDivDataGeracao, e.TipoBxId, e.ImoDivDataBaixa, e.EdificacaoId }, "IX_TribDividasImo_ImoDivExcluido_ImoIDDivida_ImoDivValor_ImoDivDataGeracao_TipoBxID_ImoDivDataBaixa_EdificacaoID").HasFillFactor(90);

            entity.HasIndex(e => new { e.ImoDivExcluido, e.TipoBxId, e.ImoIddivida, e.ImoDivParcela }, "IX_TribDividasImo_ImoDivExcluido_TipoBxID_ImoIDDivida_ImoDivParcela");

            entity.HasIndex(e => e.ImoDivExcluido, "IX_TribDividasImo_ImoDivExcluido_inc_ImoIDDivida_ImoDivTipoDivida");

            entity.HasIndex(e => new { e.ImoDivSubDivida, e.EdiId }, "IX_TribDividasImo_ImoDivSubDivida_ediID_inc_EdificacaoID").HasFillFactor(90);

            entity.HasIndex(e => new { e.ImoDivTipoDivida, e.ImoDivExcluido, e.ImoDivValor }, "IX_TribDividasImo_ImoDivTipoDivida_ImoDivExcluido_ImoDivValor_inc_ImoIDDivida_dtGeracao_Usuario").HasFillFactor(90);

            entity.HasIndex(e => new { e.ImoDivTipoDivida, e.ImoDivVencimento, e.EdificacaoId, e.ImoIddivida }, "IX_TribDividasImo_ImoDivTipoDivida_ImoDivVencimento_EdificacaoID_ImoIDDivida_inc_ImoDivValor");

            entity.HasIndex(e => new { e.TipoBxId, e.EdificacaoId, e.ImoIddivida }, "IX_TribDividasImo_TipoBxID_EdificacaoID_ImoIDDivida");

            entity.HasIndex(e => new { e.TipoBxId, e.ImoDivTipoDivida, e.ImoDivAno, e.ImoDivExcluido, e.ImoIddivida, e.EdificacaoId }, "IX_TribDividasImo_TipoBxID_IDTipoDiv_Ano_DivExcluido_ImoIDDivida_EdificacaoID").HasFillFactor(90);

            entity.HasIndex(e => new { e.TipoBxId, e.ImoDivDataBaixa, e.ImoDivValor, e.ImoDivDataGeracao, e.ImoDivExcluido, e.EdificacaoId }, "IX_TribDividasImo_TipoBxID_ImoDivDataBaixa_ImoDivValor_ImoDivDataGeracao_ImoDivExcluido_EdificacaoID").HasFillFactor(90);

            entity.HasIndex(e => new { e.TipoBxId, e.ImoDivDataBaixa }, "IX_TribDividasImo_TipoBxID_ImoDivDataBaixa_inc_TipoTribID_ImoDivTipoDivida");

            entity.HasIndex(e => new { e.TipoBxId, e.ImoDivDataBaixa }, "IX_TribDividasImo_TipoBxID_ImoDivDataBaixa_inc_TipoTribID_ImoDivTipoDivida_ImoDivValorBaixa");

            entity.HasIndex(e => new { e.TipoBxId, e.ImoDivDataBaixa }, "IX_TribDividasImo_TipoBxID_ImoDivDataBaixa_inc_TribID_Vencto_TipoDiv_VlrBaixa");

            entity.HasIndex(e => new { e.TipoBxId, e.ImoDivExcluido, e.ImoDivVencimento }, "IX_TribDividasImo_TipoBxID_ImoDivExcluido_ImoDivVencimento").HasFillFactor(90);

            entity.HasIndex(e => new { e.TipoBxId, e.ImoDivParcela, e.ImoIddivida }, "IX_TribDividasImo_TipoBxID_ImoDivParcela_ImoIDDivida");

            entity.HasIndex(e => new { e.TipoBxId, e.ImoDivVencimento }, "IX_TribDividasImo_TipoBxID_ImoDivVencimento_inc_ImoIDDivida");

            entity.HasIndex(e => e.TipoBxId, "IX_TribDividasImo_TipoBxID_inc_EdificacaoID_ImoDivAno_TipoTribID_ImoDivTipoDivida_ImoDivValorBaixa");

            entity.HasIndex(e => e.TipoBxId, "IX_TribDividasImo_TipoBxID_inc_TipoTribID_Vencto_TipoDivida_VlrBaixa_ImoDivValor");

            entity.HasIndex(e => new { e.TipoTribId, e.TipoBxId }, "IX_TribDividasImo_TipoTribID_TipoBxID_inc_ImoDivTipoDivida");

            entity.HasIndex(e => new { e.ImoIddivida, e.TipoBxId, e.ImoDivParcela }, "IX_dta_index_TribDividasImo_ImoIDDivida_TipoBxID_ImoDivParcela");

            entity.HasIndex(e => new { e.TipoBxId, e.ImoDivTipoDivida, e.ImoDivVencimento, e.ImoIddivida, e.TipoTribId, e.EdificacaoId, e.ImoDivAno, e.ImoDivParcelaUnica, e.ImoDivDataGeracao, e.ImoDivParcela }, "_dta_index_TribDividasImo_10_1180179600__K17_K9_K7_K1_K4_K2_K3_K16_K8_K6_5_10_11_12_13_14_18_19_37_38_39_40_41_42").HasFillFactor(90);

            entity.HasIndex(e => new { e.ImoDivAno, e.ImoDivParcelaUnica, e.TipoTribId, e.TipoBxId }, "_dta_index_TribDividasImo_7_1180179600__K3_K16_K4_K17").HasFillFactor(90);

            entity.HasIndex(e => new { e.ImoDivAno, e.ImoDivParcela, e.TipoBxId, e.EdificacaoId, e.TipoTribId }, "_dta_index_TribDividasImo_7_1180179600__K3_K6_K17_K2_K4").HasFillFactor(90);

            entity.HasIndex(e => new { e.ImoIddivida, e.TipoBxId }, "_dta_index_TribDividasImo_8_466517141__K1_K17_4_7_9_10_11_12_19_38_39_40_41_42");

            entity.HasIndex(e => new { e.ImoDivTipoDivida, e.TipoBxId, e.ImoDivParcelaUnica, e.ImoDivDataGeracao, e.ImoDivAno, e.ImoDivVencimento, e.ImoIddivida, e.TipoTribId, e.EdificacaoId, e.ImoDivExcluido, e.ImoDivParcela }, "_dta_index_TribDividasImo_8_466517141__K9_K17_K16_K8_K3_K7_K1_K4_K2_K44_K6_5_10_11_12_13_14_18_19_37_38_39_40_41_42");

            entity.HasIndex(e => new { e.ImoIddivida, e.ImoDivAno, e.ImoDivMes, e.TipoTribId, e.ImoDivParcela, e.ImoDivSubDivida, e.ImoDivQtdeBaixas, e.ImoDivDataBaixa, e.ImoDivValor, e.ImoDivVencimento, e.EdificacaoId }, "_dta_index_TribDividasImo_9_1180179600__K1_K3_K18_K4_K6_K5_K26_K19_K37_K7_K2").HasFillFactor(90);

            entity.Property(e => e.ImoIddivida)
                .ValueGeneratedNever()
                .HasColumnName("ImoIDDivida");
            entity.Property(e => e.AutoInfrId)
                .HasComment("Código do auto de infração.")
                .HasColumnName("AutoInfrID");
            entity.Property(e => e.Correcao).HasColumnType("money");
            entity.Property(e => e.DataCalculo).HasColumnType("datetime");
            entity.Property(e => e.EdiId).HasColumnName("ediID");
            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.Idmoeda).HasColumnName("IDMoeda");
            entity.Property(e => e.ImoDivBxVlrCorrecao).HasColumnType("money");
            entity.Property(e => e.ImoDivBxVlrDesconto).HasColumnType("money");
            entity.Property(e => e.ImoDivBxVlrJuros).HasColumnType("money");
            entity.Property(e => e.ImoDivBxVlrMulta).HasColumnType("money");
            entity.Property(e => e.ImoDivBxVlrMultaDa)
                .HasColumnType("money")
                .HasColumnName("ImoDivBxVlrMultaDA");
            entity.Property(e => e.ImoDivDataBaixa)
                .HasComment("Data da baixa da dívida.")
                .HasColumnType("datetime");
            entity.Property(e => e.ImoDivDataBloqCorrecao).HasColumnType("datetime");
            entity.Property(e => e.ImoDivDataBloqJuros).HasColumnType("datetime");
            entity.Property(e => e.ImoDivDataBloqMulta).HasColumnType("datetime");
            entity.Property(e => e.ImoDivDataGeracao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ImoDivDataUltimaCorrecao).HasColumnType("datetime");
            entity.Property(e => e.ImoDivDescDivida)
                .HasComment("Desconto individualizado da dívida.")
                .HasColumnType("money");
            entity.Property(e => e.ImoDivMotivoBaixa)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("Motivo da baixa, gravada por trigger no movimento de baixa e tambem pelos formulários que baixa dividas sem movimento de baixa (ex.: isenção de dividas).");
            entity.Property(e => e.ImoDivObs)
                .IsUnicode(false)
                .HasComment("Observações sobre o lançamento da dívida.");
            entity.Property(e => e.ImoDivOrigemLancamento)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ImoDivParcelaUnica)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength();
            entity.Property(e => e.ImoDivSaiBoleto)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Sim")
                .IsFixedLength();
            entity.Property(e => e.ImoDivTipoLancamentoIptu)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComputedColumnSql("([dbo].[TribTipoLancamentoIPTU]([ImoIDDivida]))", false)
                .HasColumnName("ImoDivTipoLancamentoIPTU");
            entity.Property(e => e.ImoDivValor).HasColumnType("money");
            entity.Property(e => e.ImoDivValorBaixa)
                .HasComment("Valor Baixado da divida")
                .HasColumnType("money");
            entity.Property(e => e.ImoDivValorBkp).HasColumnType("money");
            entity.Property(e => e.ImoDivValorHistorico).HasColumnType("money");
            entity.Property(e => e.ImoDivVencimento).HasColumnType("datetime");
            entity.Property(e => e.ImoDivVlrUltimaCorrecao)
                .HasDefaultValue(0m)
                .HasColumnType("money");
            entity.Property(e => e.Juros).HasColumnType("money");
            entity.Property(e => e.Multa).HasColumnType("money");
            entity.Property(e => e.MultaDividaAtiva).HasColumnType("money");
            entity.Property(e => e.TipoBxId).HasColumnName("TipoBxID");
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");

            entity.HasOne(d => d.AutoInfr).WithMany(p => p.TribDividasImos)
                .HasForeignKey(d => d.AutoInfrId)
                .HasConstraintName("FK_TribDividasImo_TribAutosInfracao");

            entity.HasOne(d => d.Edificacao).WithMany(p => p.TribDividasImos)
                .HasForeignKey(d => d.EdificacaoId)
                .HasConstraintName("FK_TribDividasImo_TribEdificacoes");

            entity.HasOne(d => d.ImoDivTipoDividaNavigation).WithMany(p => p.TribDividasImos)
                .HasForeignKey(d => d.ImoDivTipoDivida)
                .HasConstraintName("FK_TribDividasImo_TribTipoDivida");

            entity.HasOne(d => d.TipoBx).WithMany(p => p.TribDividasImos)
                .HasForeignKey(d => d.TipoBxId)
                .HasConstraintName("FK_TribDividasImo_TribTipoBaixa");

            entity.HasOne(d => d.TipoTrib).WithMany(p => p.TribDividasImos)
                .HasForeignKey(d => d.TipoTribId)
                .HasConstraintName("FK_TribDividasImo_TribTipoTributos");
        });

        modelBuilder.Entity<TribDividasImoEdital>(entity =>
        {
            entity.HasKey(e => e.EdiDivImoId);

            entity.ToTable("TribDividasImoEdital", tb =>
                {
                    tb.HasTrigger("TgTribDividasImoEditalDelete");
                    tb.HasTrigger("TgTribDividasImoEditalInsert");
                    tb.HasTrigger("TgTribDividasImoEditalUpdate");
                });

            entity.HasIndex(e => e.ImoIddivida, "IX_ImoIDDivida").HasFillFactor(90);

            entity.Property(e => e.EdiDivImoId)
                .ValueGeneratedNever()
                .HasColumnName("EdiDivImoID");
            entity.Property(e => e.EdiDivImoAnoDiv).HasDefaultValue(0);
            entity.Property(e => e.EdiDivImoAnoEdital).HasDefaultValue(0);
            entity.Property(e => e.EdiDivImoDatalanc)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.EdiDivImoNumEdital).HasDefaultValue(0L);
            entity.Property(e => e.EdiDivImoParcela).HasDefaultValue(0);
            entity.Property(e => e.EdiDivImoSubDivida).HasDefaultValue(0);
            entity.Property(e => e.EdiDivImoValor)
                .HasDefaultValue(0m)
                .HasColumnType("money");
            entity.Property(e => e.EdiDivImoVencimento).HasColumnType("datetime");
            entity.Property(e => e.EdificacaoId)
                .HasDefaultValue(0L)
                .HasColumnName("EdificacaoID");
            entity.Property(e => e.ImoIddivida)
                .HasComment("id da divida dos tribdividasimo para saber qual eh a divida gerada")
                .HasColumnName("ImoIDDivida");
            entity.Property(e => e.TextoId).HasColumnName("TextoID");
            entity.Property(e => e.TipoTribId)
                .HasDefaultValue(0)
                .HasColumnName("TipoTribID");

            entity.HasOne(d => d.Edificacao).WithMany(p => p.TribDividasImoEditals)
                .HasForeignKey(d => d.EdificacaoId)
                .HasConstraintName("FK_TribDividasImoEdital_TribEdificacoes");

            entity.HasOne(d => d.ImoIddividaNavigation).WithMany(p => p.TribDividasImoEditals)
                .HasForeignKey(d => d.ImoIddivida)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_TribDividasImoEdital_TribDividasImo");

            entity.HasOne(d => d.Texto).WithMany(p => p.TribDividasImoEditals)
                .HasForeignKey(d => d.TextoId)
                .HasConstraintName("FK_TribDividasImoEdital_TribTextos");

            entity.HasOne(d => d.TipoTrib).WithMany(p => p.TribDividasImoEditals)
                .HasForeignKey(d => d.TipoTribId)
                .HasConstraintName("FK_TribDividasImoEdital_TribTipoTributos");
        });

        modelBuilder.Entity<TribDividasInscricaoDum>(entity =>
        {
            entity.HasKey(e => e.IdInscricaoDa).HasName("PK_TribDividasImoInscricaoDA");

            entity.ToTable("TribDividasInscricaoDA");

            entity.HasIndex(e => e.IdDivida, "IX_TribDividasInscricaoDA_IdDivida").HasFillFactor(90);

            entity.HasIndex(e => new { e.TpCadastro, e.IdDivida }, "IX_TribDividasInscricaoDA_tpCadastro_IdDivida").HasFillFactor(90);

            entity.HasIndex(e => new { e.TpCadastro, e.IdDividaOrigem }, "IX_TribDividasInscricaoDA_tpCadastro_IdDividaOrigem_inc_IdDivida").HasFillFactor(90);

            entity.HasIndex(e => e.TpCadastro, "IX_TribDividasInscricaoDA_tpCadastro_inc_IdDivida_IdDividaOrigem").HasFillFactor(90);

            entity.Property(e => e.IdInscricaoDa).HasColumnName("IdInscricaoDA");
            entity.Property(e => e.DsNumProcData)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("dsNumProcData");
            entity.Property(e => e.FlEstornada).HasColumnName("flEstornada");
            entity.Property(e => e.TpCadastro)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tpCadastro");
        });

        modelBuilder.Entity<TribDividasLogAlteracao>(entity =>
        {
            entity.HasKey(e => e.IdLogDivida);

            entity.ToTable("tribDividasLogAlteracao");

            entity.Property(e => e.IdLogDivida).HasColumnName("idLogDivida");
            entity.Property(e => e.ConIddivida).HasColumnName("ConIDDivida");
            entity.Property(e => e.DsLogin)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsLogin");
            entity.Property(e => e.DsMotivo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dsMotivo");
            entity.Property(e => e.DtInclusao)
                .HasColumnType("datetime")
                .HasColumnName("dtInclusao");
            entity.Property(e => e.EmpIddivida).HasColumnName("EmpIDDivida");
            entity.Property(e => e.ImoIddivida).HasColumnName("ImoIDDivida");
            entity.Property(e => e.NmColuna)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nmColuna");
            entity.Property(e => e.VlAntigo)
                .IsUnicode(false)
                .HasColumnName("vlAntigo");
        });

        modelBuilder.Entity<TribDividasVinculoAnuencia>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.IdDa).HasColumnName("idDA");
            entity.Property(e => e.IdDividaAnuencia).ValueGeneratedOnAdd();
            entity.Property(e => e.IdDividaDestino).HasColumnName("idDividaDestino");
            entity.Property(e => e.IdDividaOrigem).HasColumnName("idDividaOrigem");
            entity.Property(e => e.TpCadastroDestino)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tpCadastroDestino");
            entity.Property(e => e.TpCadastroOrigem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tpCadastroOrigem");
        });

        modelBuilder.Entity<TribDocumento>(entity =>
        {
            entity.HasKey(e => e.IdDocumento);

            entity.HasIndex(e => e.IdTipoDoc, "IX_TribDocumentos_idTipoDoc").HasFillFactor(90);

            entity.Property(e => e.IdDocumento).HasColumnName("idDocumento");
            entity.Property(e => e.IdTipoDoc).HasColumnName("idTipoDoc");
            entity.Property(e => e.ImDocumento).HasColumnName("imDocumento");
            entity.Property(e => e.NrAno).HasColumnName("nrAno");
            entity.Property(e => e.NrSequencia).HasColumnName("nrSequencia");

            entity.HasOne(d => d.IdTipoDocNavigation).WithMany(p => p.TribDocumentos)
                .HasForeignKey(d => d.IdTipoDoc)
                .HasConstraintName("FK_TribDocumentos_TribDocumentosTipo");
        });

        modelBuilder.Entity<TribDocumentosContribuinte>(entity =>
        {
            entity.HasKey(e => e.IdDocumento);

            entity.ToTable("TribDocumentosContribuinte");

            entity.Property(e => e.IdDocumento).HasColumnName("idDocumento");
            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.DsUf)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("dsUF");
            entity.Property(e => e.IdTipoDocumento).HasColumnName("idTipoDocumento");
            entity.Property(e => e.NrDocumento)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nrDocumento");
        });

        modelBuilder.Entity<TribDocumentosIptu>(entity =>
        {
            entity.HasKey(e => e.DocIptuid);

            entity.ToTable("TribDocumentosIPTU");

            entity.Property(e => e.DocIptuid)
                .ValueGeneratedNever()
                .HasColumnName("DocIPTUID");
            entity.Property(e => e.DocIptudata)
                .HasColumnType("datetime")
                .HasColumnName("DocIPTUData");
            entity.Property(e => e.DocIptudescricao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DocIPTUDescricao");
            entity.Property(e => e.DocIptuimagem)
                .HasColumnType("image")
                .HasColumnName("DocIPTUImagem");
            entity.Property(e => e.DocIptunumero)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DocIPTUNumero");
            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.Usuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");

            entity.HasOne(d => d.Edificacao).WithMany(p => p.TribDocumentosIptus)
                .HasForeignKey(d => d.EdificacaoId)
                .HasConstraintName("FK_TribDocumentosIPTU_TribEdificacoes");
        });

        modelBuilder.Entity<TribDocumentosTipo>(entity =>
        {
            entity.HasKey(e => e.IdTipoDoc);

            entity.ToTable("TribDocumentosTipo");

            entity.HasIndex(e => e.TextoId, "IX_TribDocumentosTipo_TextoID").HasFillFactor(90);

            entity.Property(e => e.DsTipoDoc)
                .IsUnicode(false)
                .HasColumnName("dsTipoDoc");
            entity.Property(e => e.NmTipoDoc)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nmTipoDoc");
            entity.Property(e => e.TextoId).HasColumnName("TextoID");

            entity.HasOne(d => d.Texto).WithMany(p => p.TribDocumentosTipos)
                .HasForeignKey(d => d.TextoId)
                .HasConstraintName("FK_TribDocumentosTipo_TribTextos");
        });

        modelBuilder.Entity<TribDucBloqueioInscricao>(entity =>
        {
            entity.HasKey(e => e.IdBloqueio);

            entity.ToTable("TribDucBloqueioInscricao");

            entity.Property(e => e.IdBloqueio).HasColumnName("idBloqueio");
            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.TpSituacao)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tpSituacao");
        });

        modelBuilder.Entity<TribDucHistoricoBloqueio>(entity =>
        {
            entity.HasKey(e => e.IdHistorico);

            entity.ToTable("TribDucHistoricoBloqueio");

            entity.Property(e => e.IdHistorico).HasColumnName("idHistorico");
            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.DsMotivo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dsMotivo");
            entity.Property(e => e.DsUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsUsuario");
            entity.Property(e => e.DtInclusao)
                .HasColumnType("datetime")
                .HasColumnName("dtInclusao");
            entity.Property(e => e.TpSituacao)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tpSituacao");
        });

        modelBuilder.Entity<TribEdifAtributosDinamico>(entity =>
        {
            entity.HasKey(e => new { e.EdificacaoId, e.TabParId });

            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.TabParId).HasColumnName("TabParID");
            entity.Property(e => e.Valor)
                .HasMaxLength(60)
                .IsUnicode(false);

            entity.HasOne(d => d.Edificacao).WithMany(p => p.TribEdifAtributosDinamicos)
                .HasForeignKey(d => d.EdificacaoId)
                .HasConstraintName("FK_TribEdifAtributosDinamicos_TribEdificacoes");

            entity.HasOne(d => d.TabPar).WithMany(p => p.TribEdifAtributosDinamicos)
                .HasForeignKey(d => d.TabParId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribEdifAtributosDinamicos_TabAtributosDinamicos");
        });

        modelBuilder.Entity<TribEdifCartorio>(entity =>
        {
            entity.HasKey(e => e.IdedifCartorio);

            entity.Property(e => e.IdedifCartorio).HasColumnName("IDEdifCartorio");
            entity.Property(e => e.DataInclusao).HasColumnType("datetime");
            entity.Property(e => e.DsCnpjcartorio)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dsCNPJCartorio");
            entity.Property(e => e.DsFracaoTransmissao)
                .HasColumnType("money")
                .HasColumnName("dsFracaoTransmissao");
            entity.Property(e => e.DsInscricaoImobiliaria)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsInscricaoImobiliaria");
            entity.Property(e => e.DsMatricula)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsMatricula");
            entity.Property(e => e.DsNumeroAto)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("dsNumeroAto");
            entity.Property(e => e.DsTipoAto)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsTipoAto");
            entity.Property(e => e.DsTipoImovel)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsTipoImovel");
            entity.Property(e => e.DtAto)
                .HasColumnType("datetime")
                .HasColumnName("dtAto");
            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribEdifCartoriosCompradore>(entity =>
        {
            entity.HasKey(e => e.IdcartorioComprador);

            entity.Property(e => e.IdcartorioComprador).HasColumnName("IDCartorioComprador");
            entity.Property(e => e.DsCpfcnpj)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dsCPFCNPJ");
            entity.Property(e => e.DsNome)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dsNome");
            entity.Property(e => e.IdedifCartorio).HasColumnName("IDEdifCartorio");
        });

        modelBuilder.Entity<TribEdifCartoriosVendedore>(entity =>
        {
            entity.HasKey(e => e.IdcartorioVendedor);

            entity.Property(e => e.IdcartorioVendedor).HasColumnName("IDCartorioVendedor");
            entity.Property(e => e.DsCpfcnpj)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dsCPFCNPJ");
            entity.Property(e => e.DsNome)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dsNome");
            entity.Property(e => e.IdedifCartorio).HasColumnName("IDEdifCartorio");
        });

        modelBuilder.Entity<TribEdifInstSanitarium>(entity =>
        {
            entity.HasKey(e => new { e.EdificacaoId, e.InstSanitId }).HasName("PK_EdificacoesInstSanitaria");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("TgTribEdifInstSanitariaDelete");
                    tb.HasTrigger("TgTribEdifInstSanitariaInsert");
                    tb.HasTrigger("TgTribEdifInstSanitariaUpdate");
                });

            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.InstSanitId).HasColumnName("InstSanitID");
            entity.Property(e => e.EdifInstSanQtde).HasDefaultValue(0);

            entity.HasOne(d => d.Edificacao).WithMany(p => p.TribEdifInstSanitaria)
                .HasForeignKey(d => d.EdificacaoId)
                .HasConstraintName("FK_TribEdifInstSanitaria_TribEdificacoes");

            entity.HasOne(d => d.InstSanit).WithMany(p => p.TribEdifInstSanitaria)
                .HasForeignKey(d => d.InstSanitId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EdificacoesInstSanitaria_TribInstalacaoSanitaria");
        });

        modelBuilder.Entity<TribEdifNumPredial>(entity =>
        {
            entity.HasKey(e => e.NumPid);

            entity.ToTable("TribEdifNumPredial");

            entity.HasIndex(e => e.EdificacaoId, "IX_EdificacaoID").HasFillFactor(90);

            entity.Property(e => e.NumPid)
                .ValueGeneratedNever()
                .HasColumnName("NumPID");
            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.NumPdata)
                .HasColumnType("datetime")
                .HasColumnName("NumPData");
            entity.Property(e => e.NumPnumProtocolo).HasColumnName("NumPNumProtocolo");
            entity.Property(e => e.NumPnumero)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NumPNumero");

            entity.HasOne(d => d.Edificacao).WithMany(p => p.TribEdifNumPredials)
                .HasForeignKey(d => d.EdificacaoId)
                .HasConstraintName("FK_TribEdifNumPredial_TribEdificacoes");
        });

        modelBuilder.Entity<TribEdifParamCalculo>(entity =>
        {
            entity.HasKey(e => new { e.EdificacaoId, e.TparamId, e.ParamId });

            entity.HasIndex(e => new { e.TparamId, e.ParamId }, "IX_TParamID_ParamID").HasFillFactor(90);

            entity.HasIndex(e => e.TparamId, "IX_TribEdifParamCalculos_TParamID");

            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.TparamId).HasColumnName("TParamID");
            entity.Property(e => e.ParamId).HasColumnName("ParamID");
            entity.Property(e => e.Valor).HasDefaultValue(1);

            entity.HasOne(d => d.Edificacao).WithMany(p => p.TribEdifParamCalculos)
                .HasForeignKey(d => d.EdificacaoId)
                .HasConstraintName("FK_TribEdifParamCalculos_TribEdificacoes");

            entity.HasOne(d => d.TribParamCalculo).WithMany(p => p.TribEdifParamCalculos)
                .HasForeignKey(d => new { d.TparamId, d.ParamId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribEdifParamCalculos_TribParamCalculos");
        });

        modelBuilder.Entity<TribEdificaco>(entity =>
        {
            entity.HasKey(e => e.EdificacaoId);

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("TgTribEdificacoesDelete");
                    tb.HasTrigger("TgTribEdificacoesInsert");
                    tb.HasTrigger("TgTribEdificacoesInsertUpdate");
                    tb.HasTrigger("TgTribEdificacoesUpdate");
                    tb.HasTrigger("TgTribEdificacoesUpdateOcorrencias");
                });

            entity.HasIndex(e => new { e.EdifContinuacaoTerreno, e.InscricaoImobiliaria }, "IX_EdifContinuacaoTerreno_InscricaoImobiliaria").HasFillFactor(90);

            entity.HasIndex(e => e.EdifEdificacaoEnglobamento, "IX_EdifEdificacaoEnglobamento").HasFillFactor(90);

            entity.HasIndex(e => new { e.EdifEdificacaoEnglobamento, e.EdifCaracteristica, e.EdifContinuacaoTerreno }, "IX_EdifJuntarAoCarne_EdifCaracteristica_EdifContinuacaoTerreno").HasFillFactor(90);

            entity.HasIndex(e => e.Idloteamento, "IX_IDLoteamento").HasFillFactor(90);

            entity.HasIndex(e => new { e.InscricaoImobiliaria, e.CategId, e.TerrenoId, e.EdificacaoId, e.InscricaoImobiliariaGeo, e.EdifComplemento, e.EdifAreaConstruida, e.EdifCaracteristica, e.EdifPontosEdificacao, e.EdifAnoConstrucao }, "IX_Inscr_CategID_TerrID_EdifID_InsrGEO_Compl_AreaCons_EdifCaracteristica_EdifPontos_EdifAnoConstrucao").HasFillFactor(90);

            entity.HasIndex(e => new { e.InscricaoImobiliaria, e.EdifContinuacaoTerreno }, "IX_InscricaoImobiliaria_EdifContinuacaoTerreno").HasFillFactor(90);

            entity.HasIndex(e => new { e.InscricaoImobiliaria, e.EdificacaoId }, "IX_InscricaoImobiliaria_EdificacaoID").HasFillFactor(90);

            entity.HasIndex(e => e.LogradId, "IX_LogradID").HasFillFactor(90);

            entity.HasIndex(e => new { e.PisoId, e.EdificacaoId }, "IX_PisoID_EdificacaoID").HasFillFactor(90);

            entity.HasIndex(e => new { e.TerrenoId, e.InscricaoImobiliaria, e.EdifContinuacaoTerreno }, "IX_TerrenoID_InscricaoImobiliaria_EdifContinuacaoTerreno").HasFillFactor(90);

            entity.HasIndex(e => new { e.EdifCaracteristica, e.EdifContinuacaoTerreno, e.EdifSituacao, e.EdificacaoId }, "IX_TribEdificacoes_EdifCaracteristica_EdifContinuacaoTerreno_EdifSituacao_EdificacaoID").HasFillFactor(90);

            entity.HasIndex(e => new { e.EdifContinuacaoTerreno, e.EdifCaracteristica, e.CategId, e.TerrenoId, e.EdificacaoId }, "IX_TribEdificacoes_EdifContinuacaoTerreno_EdifCaracteristica_CategID_TerrenoID_EdificacaoID");

            entity.HasIndex(e => new { e.EdifEdificacaoEnglobamento, e.EdificacaoId, e.InscricaoImobiliaria }, "IX_TribEdificacoes_EdifEdificacaoEnglobamento_EdificacaoID_InscricaoImobiliaria");

            entity.HasIndex(e => e.EdifMatricula, "IX_TribEdificacoes_EdifMatricula");

            entity.HasIndex(e => new { e.EdifSituacao, e.InscricaoImobiliaria }, "IX_TribEdificacoes_EdifSituacao_InscricaoImobiliaria_inc_EdificacaoID");

            entity.HasIndex(e => e.EdifSituacao, "IX_TribEdificacoes_EdifSituacao_inc_EdifEdificacaoEnglobamento_EdifFracaoIdealEdificacao").HasFillFactor(90);

            entity.HasIndex(e => new { e.EdificacaoId, e.EdifSituacao }, "IX_TribEdificacoes_EdificacaoID_EdifSituacao");

            entity.HasIndex(e => new { e.EdificacaoId, e.InscricaoImobiliaria }, "IX_TribEdificacoes_EdificacaoID_InscricaoImobiliaria").HasFillFactor(90);

            entity.HasIndex(e => e.InscricaoImobiliaria, "IX_TribEdificacoes_InscricaoImobiliaria");

            entity.HasIndex(e => new { e.InscricaoImobiliaria, e.TerrenoId, e.EdificacaoId }, "IX_TribEdificacoes_InscricaoImobiliaria_TerrenoID_EdificacaoID").HasFillFactor(90);

            entity.HasIndex(e => new { e.TerrenoId, e.EdifContinuacaoTerreno }, "IX_TribEdificacoes_TerrenoID_EdifContinuacaoTerreno");

            entity.HasIndex(e => new { e.TerrenoId, e.EdifContinuacaoTerreno, e.EdifSituacao }, "IX_TribEdificacoes_TerrenoID_EdifContinuacaoTerreno_EdifSituacao");

            entity.HasIndex(e => new { e.TerrenoId, e.EdifContinuacaoTerreno, e.EdificacaoId, e.EdifSituacao }, "IX_TribEdificacoes_TerrenoID_EdifContinuacaoTerreno_EdificacaoID_EdifSituacao");

            entity.HasIndex(e => new { e.TerrenoId, e.EdifSituacao }, "IX_TribEdificacoes_TerrenoID_EdifSituacao");

            entity.HasIndex(e => e.TipoConId, "IX_TribEdificacoes_TipoConID");

            entity.HasIndex(e => e.UtilizId, "IX_TribEdificacoes_UtilizID");

            entity.HasIndex(e => new { e.EdificacaoId, e.InscricaoImobiliaria }, "_dta_index_TribEdificacoes_10_1296983947__K1_K36").HasFillFactor(90);

            entity.HasIndex(e => new { e.InscricaoImobiliaria, e.EdificacaoId, e.TerrenoId }, "_dta_index_TribEdificacoes_7_1296983947__K36_K1_K2").HasFillFactor(90);

            entity.HasIndex(e => new { e.EdifSituacao, e.EdifCaracteristica, e.EdifContinuacaoTerreno, e.InscricaoImobiliaria, e.EdificacaoId, e.TerrenoId, e.EdifEdificacaoEnglobamento }, "_dta_index_TribEdificacoes_8_1296983947__K51_K6_K34_K36_K1_K2_K9_24_32");

            entity.HasIndex(e => new { e.InscricaoImobiliaria, e.EdifSituacao, e.EdifCaracteristica, e.EdifContinuacaoTerreno, e.EdificacaoId }, "_dta_index_TribEdificacoes_Inscricao_EdifSitua_EdifCaract_EdifContTerreno_EdifID").HasFillFactor(90);

            entity.HasIndex(e => new { e.EdifContinuacaoTerreno, e.EdifCaracteristica, e.EdifSituacao, e.InscricaoImobiliaria, e.TerrenoId, e.EdificacaoId, e.EdifEdificacaoEnglobamento, e.EdifPontosEdificacao }, "_idx_TribEdificacoes_9_1296983947__K34_K6_K51_K36_K2_K1_K9_K39").HasFillFactor(90);

            entity.HasIndex(e => new { e.EdifEdificacaoEnglobamento, e.TerrenoId, e.InscricaoImobiliaria, e.EdificacaoId, e.EdifSituacao, e.EdifCaracteristica, e.EdifContinuacaoTerreno, e.EdifAnoConstrucao, e.EdifAreaConstruida, e.EdifAreaCoberta, e.EdifFracaoIdealEdificacao, e.EdifPontosEdificacao }, "_idx_TribEdificacoes_EdifEnglob_TerrenoID_InscrImob_EdifID_EdifSitua_EdifCaract_EdifContTerr_eOutros").HasFillFactor(90);

            entity.HasIndex(e => new { e.InscricaoImobiliaria, e.EdifSituacao, e.EdifCaracteristica, e.EdifContinuacaoTerreno, e.TerrenoId, e.EdificacaoId, e.EdifEdificacaoEnglobamento, e.EdifAnoConstrucao, e.EdifAreaConstruida, e.EdifAreaCoberta, e.EdifFracaoIdealEdificacao, e.EdifPontosEdificacao }, "_idx_TribEdificacoes_InscrImob_EdifSitua_EdifCaract_EdifConTerr_TerrenoID_EdifID_EdifEnglob_eOutros").HasFillFactor(90);

            entity.HasIndex(e => new { e.InscricaoImobiliaria, e.EdifContinuacaoTerreno, e.EdifSituacao, e.EdificacaoId }, "_idx_TribEdificacoes_InscricaoImo_edifContTerreno_EdifSit_EdifID").HasFillFactor(90);

            entity.HasIndex(e => new { e.InscricaoImobiliaria, e.EdificacaoId, e.EdifSituacao, e.EdifCaracteristica, e.EdifContinuacaoTerreno }, "_idx_TribEdificacoes_InscricaoImobiliaria_EdifID_EdifSit_EdifCarac_EdifContTer").HasFillFactor(90);

            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.AcabExtId).HasColumnName("AcabExtID");
            entity.Property(e => e.AcabIntId).HasColumnName("AcabIntID");
            entity.Property(e => e.AgrupaId).HasColumnName("AgrupaID");
            entity.Property(e => e.CategId).HasColumnName("CategID");
            entity.Property(e => e.CobertId).HasColumnName("CobertID");
            entity.Property(e => e.DataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DenoId).HasColumnName("DenoID");
            entity.Property(e => e.Dsobservacao)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasComment("Campo utilizado para a revisão cadastral do SEBRAE.")
                .HasColumnName("dsobservacao");
            entity.Property(e => e.EdifAlvara)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength();
            entity.Property(e => e.EdifAreaCoberta).HasColumnType("money");
            entity.Property(e => e.EdifAreaConstruida).HasColumnType("money");
            entity.Property(e => e.EdifBloco)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EdifCaracteristica)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("domínio: Predial / Territorial");
            entity.Property(e => e.EdifCentroGrauLat)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Valor da Latitude  na Area Central da Edificação")
                .HasColumnName("edifCentroGrauLat");
            entity.Property(e => e.EdifCentroGrauLon)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Valor da Longitude na Area Central da Edificação")
                .HasColumnName("edifCentroGrauLon");
            entity.Property(e => e.EdifCep)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("edifCEP");
            entity.Property(e => e.EdifComplemento)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.EdifContinuacaoTerreno)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength()
                .HasComment("Informa se eh uma edificacao gerada automaticamente pelo terreno");
            entity.Property(e => e.EdifDataAtualizacaoEndereco).HasColumnType("datetime");
            entity.Property(e => e.EdifDtInicioConstrucao).HasColumnType("datetime");
            entity.Property(e => e.EdifDtMatricula)
                .HasComment("Data da matricula no cartório.")
                .HasColumnType("datetime")
                .HasColumnName("edifDtMatricula");
            entity.Property(e => e.EdifDtParalizacaoConstrucao).HasColumnType("datetime");
            entity.Property(e => e.EdifDtUltTransfPropriedade).HasColumnType("datetime");
            entity.Property(e => e.EdifEconomia)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EdifFracaoIdealEdificacao).HasColumnType("numeric(19, 6)");
            entity.Property(e => e.EdifMatricula)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EdifMotivoAlteracao)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasComment("Motivo da alteração nos dados da edificação.")
                .HasColumnName("edifMotivoAlteracao");
            entity.Property(e => e.EdifNumAptoSalaLoja)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.EdifNumeracao)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.EdifObs)
                .HasComment("Observacoes sobre a inscricao.")
                .HasColumnType("text");
            entity.Property(e => e.EdifPontosEdificacao).HasDefaultValue(0);
            entity.Property(e => e.EdifSituacao)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("Normal")
                .HasComment("Informa se o Imovel esta Normal ou Removido");
            entity.Property(e => e.EdifUsuarioAtualizacaoEndereco)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EletricaId).HasColumnName("EletricaID");
            entity.Property(e => e.EsquadriasId).HasColumnName("EsquadriasID");
            entity.Property(e => e.EstConservId).HasColumnName("EstConservID");
            entity.Property(e => e.EstrutId).HasColumnName("EstrutID");
            entity.Property(e => e.Flconferido)
                .HasComment("Campo utilizado para a revisão cadastral do SEBRAE, sendo: 1 - Ok, 0 - Erro, null - não conferido")
                .HasColumnName("flconferido");
            entity.Property(e => e.ForroId).HasColumnName("ForroID");
            entity.Property(e => e.Idloteamento).HasColumnName("IDLoteamento");
            entity.Property(e => e.Idplanta).HasColumnName("IDPlanta");
            entity.Property(e => e.Idusuariorevisao)
                .HasComment("ID do usuário (RP) que fez a revisão.")
                .HasColumnName("idusuariorevisao");
            entity.Property(e => e.InciId)
                .HasComment("Incidencia de Tributos para a Edificacao")
                .HasColumnName("InciID");
            entity.Property(e => e.InscricaoImobiliaria)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.InscricaoImobiliariaGeo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("InscricaoImobiliariaGEO");
            entity.Property(e => e.LogradId).HasColumnName("LogradID");
            entity.Property(e => e.NumeroCadastroCanadas)
                .HasDefaultValue(0L)
                .HasColumnName("NumeroCadastroCANADAS");
            entity.Property(e => e.OcupaId).HasColumnName("OcupaID");
            entity.Property(e => e.ParedeId).HasColumnName("ParedeID");
            entity.Property(e => e.PisoId).HasColumnName("PisoID");
            entity.Property(e => e.PosicaoId).HasColumnName("PosicaoID");
            entity.Property(e => e.ProcId)
                .HasComment("Protocolo referente alterações de dados da edificação.")
                .HasColumnName("ProcID");
            entity.Property(e => e.SituacaoId).HasColumnName("SituacaoID");
            entity.Property(e => e.TerrenoId).HasColumnName("TerrenoID");
            entity.Property(e => e.TipoConId).HasColumnName("TipoConID");
            entity.Property(e => e.TmpIdlogradouro)
                .HasComment("Campo utilizado para a revisão cadastral do SEBRAE.")
                .HasColumnName("tmp_idlogradouro");
            entity.Property(e => e.TmpIdzoneamento)
                .HasComment("Campo utilizado para a revisão cadastral do SEBRAE.")
                .HasColumnName("tmp_idzoneamento");
            entity.Property(e => e.UnidadeLote).HasComment("Informação do CANADAS");
            entity.Property(e => e.UsoId).HasColumnName("UsoID");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");
            entity.Property(e => e.UtilizId).HasColumnName("UtilizID");
            entity.Property(e => e.ValorVenalCalculo)
                .HasComment("Valor Venal para o Calculo do IPTU (ja considerado a fração do Terreno)")
                .HasColumnType("money");
            entity.Property(e => e.ValorVenalEdificacao)
                .HasComment("Valor Venal da Edificação (trigger)")
                .HasColumnType("money");
            entity.Property(e => e.ValorVenalTerrenoParaEdificacao)
                .HasComment("Valor venal do terreno da edificação utilizado para calcular o IPTU, devido a alteração do FATOR K na lei do iptu de 2006.")
                .HasColumnType("money");

            entity.HasOne(d => d.AcabExt).WithMany(p => p.TribEdificacos)
                .HasForeignKey(d => d.AcabExtId)
                .HasConstraintName("FK_TribEdificacoes_TribAcabamentoExterno");

            entity.HasOne(d => d.AcabInt).WithMany(p => p.TribEdificacos)
                .HasForeignKey(d => d.AcabIntId)
                .HasConstraintName("FK_TribEdificacoes_TribAcabamentoInterno");

            entity.HasOne(d => d.Agrupa).WithMany(p => p.TribEdificacos)
                .HasForeignKey(d => d.AgrupaId)
                .HasConstraintName("FK_TribEdificacoes_TribAgrupamento");

            entity.HasOne(d => d.Cobert).WithMany(p => p.TribEdificacos)
                .HasForeignKey(d => d.CobertId)
                .HasConstraintName("FK_TribEdificacoes_TribCobertura");

            entity.HasOne(d => d.Deno).WithMany(p => p.TribEdificacos)
                .HasForeignKey(d => d.DenoId)
                .HasConstraintName("FK_TribEdificacoes_TribDenominacao");

            entity.HasOne(d => d.Eletrica).WithMany(p => p.TribEdificacos)
                .HasForeignKey(d => d.EletricaId)
                .HasConstraintName("FK_TribEdificacoes_TribInstalacaoEletrica");

            entity.HasOne(d => d.Esquadrias).WithMany(p => p.TribEdificacos)
                .HasForeignKey(d => d.EsquadriasId)
                .HasConstraintName("FK_TribEdificacoes_TribEsquadrias");

            entity.HasOne(d => d.EstConserv).WithMany(p => p.TribEdificacos)
                .HasForeignKey(d => d.EstConservId)
                .HasConstraintName("FK_TribEdificacoes_TribEstadoConservacao");

            entity.HasOne(d => d.Estrut).WithMany(p => p.TribEdificacos)
                .HasForeignKey(d => d.EstrutId)
                .HasConstraintName("FK_TribEdificacoes_TribEstruturaParede");

            entity.HasOne(d => d.Forro).WithMany(p => p.TribEdificacos)
                .HasForeignKey(d => d.ForroId)
                .HasConstraintName("FK_TribEdificacoes_TribForro");

            entity.HasOne(d => d.IdloteamentoNavigation).WithMany(p => p.TribEdificacos)
                .HasForeignKey(d => d.Idloteamento)
                .HasConstraintName("FK_TribEdificacoes_Loteamentos");

            entity.HasOne(d => d.IdplantaNavigation).WithMany(p => p.TribEdificacos)
                .HasForeignKey(d => d.Idplanta)
                .HasConstraintName("FK_TribEdificacoes_TribTipoPlantasValores");

            entity.HasOne(d => d.Inci).WithMany(p => p.TribEdificacos)
                .HasForeignKey(d => d.InciId)
                .HasConstraintName("FK_TribEdificacoes_TribIncidencia");

            entity.HasOne(d => d.Lograd).WithMany(p => p.TribEdificacos)
                .HasForeignKey(d => d.LogradId)
                .HasConstraintName("FK_TribEdificacoes_Logradouro");

            entity.HasOne(d => d.Ocupa).WithMany(p => p.TribEdificacos)
                .HasForeignKey(d => d.OcupaId)
                .HasConstraintName("FK_TribEdificacoes_TribOcupacao");

            entity.HasOne(d => d.Parede).WithMany(p => p.TribEdificacos)
                .HasForeignKey(d => d.ParedeId)
                .HasConstraintName("FK_TribEdificacoes_TribParedes");

            entity.HasOne(d => d.Piso).WithMany(p => p.TribEdificacos)
                .HasForeignKey(d => d.PisoId)
                .HasConstraintName("FK_TribEdificacoes_TribPiso");

            entity.HasOne(d => d.Posicao).WithMany(p => p.TribEdificacos)
                .HasForeignKey(d => d.PosicaoId)
                .HasConstraintName("FK_TribEdificacoes_TribPosicaoEdificacao");

            entity.HasOne(d => d.Situacao).WithMany(p => p.TribEdificacos)
                .HasForeignKey(d => d.SituacaoId)
                .HasConstraintName("FK_TribEdificacoes_TribSituacaoEdificacao");

            entity.HasOne(d => d.Terreno).WithMany(p => p.TribEdificacos)
                .HasForeignKey(d => d.TerrenoId)
                .HasConstraintName("FK_TribEdificacoes_TribTerreno");

            entity.HasOne(d => d.TipoCon).WithMany(p => p.TribEdificacos)
                .HasForeignKey(d => d.TipoConId)
                .HasConstraintName("FK_TribEdificacoes_TribTiposConstrucao");

            entity.HasOne(d => d.Uso).WithMany(p => p.TribEdificacos)
                .HasForeignKey(d => d.UsoId)
                .HasConstraintName("FK_TribEdificacoes_TribUso");

            entity.HasOne(d => d.Utiliz).WithMany(p => p.TribEdificacos)
                .HasForeignKey(d => d.UtilizId)
                .HasConstraintName("FK_TribEdificacoes_TribUtilizacao");

            entity.HasMany(d => d.Equips).WithMany(p => p.Edificacaos)
                .UsingEntity<Dictionary<string, object>>(
                    "TribEdificacoesEquipamento",
                    r => r.HasOne<TribEquipamento>().WithMany()
                        .HasForeignKey("EquipId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_TribEdificacoesEquipamentos_TribEquipamentos"),
                    l => l.HasOne<TribEdificaco>().WithMany()
                        .HasForeignKey("EdificacaoId")
                        .HasConstraintName("FK_TribEdificacoesEquipamentos_TribEdificacoes"),
                    j =>
                    {
                        j.HasKey("EdificacaoId", "EquipId");
                        j.ToTable("TribEdificacoesEquipamentos", tb =>
                            {
                                tb.HasTrigger("TgTribEdificacoesEquipamentosDelete");
                                tb.HasTrigger("TgTribEdificacoesEquipamentosInsert");
                            });
                        j.IndexerProperty<long>("EdificacaoId").HasColumnName("EdificacaoID");
                        j.IndexerProperty<int>("EquipId").HasColumnName("EquipID");
                    });
        });

        modelBuilder.Entity<TribEdificacoesAnexo>(entity =>
        {
            entity.HasKey(e => e.AnexoId);

            entity.HasIndex(e => e.EdificacaoId, "IX_TribEdificacoesAnexos_EdificacaoID");

            entity.HasIndex(e => e.ObjetoId, "IX_TribEdificacoesAnexos_ObjetoId");

            entity.HasIndex(e => e.ProtAltId, "IX_TribEdificacoesAnexos_ProtAltID");

            entity.Property(e => e.AnexoId).HasColumnName("AnexoID");
            entity.Property(e => e.DataInclusao)
                .HasColumnType("datetime")
                .HasColumnName("dataInclusao");
            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.FlExcluido).HasColumnName("flExcluido");
            entity.Property(e => e.NmAnexo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nmAnexo");
            entity.Property(e => e.ProtAltId).HasColumnName("ProtAltID");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("usuarioInclusao");
        });

        modelBuilder.Entity<TribEdificacoesBloqueada>(entity =>
        {
            entity.HasKey(e => e.EdifBloqueioD).HasName("PK_TribEdificacoesBloqueio");

            entity.Property(e => e.BloqueioAtivo)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Sim")
                .IsFixedLength();
            entity.Property(e => e.DataDesbloqueio).HasColumnType("datetime");
            entity.Property(e => e.DataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.EdifBloqueioData).HasColumnType("datetime");
            entity.Property(e => e.EdifBloqueioMotivo)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.UsuarioDesbloqueio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");

            entity.HasOne(d => d.Edificacao).WithMany(p => p.TribEdificacoesBloqueada)
                .HasForeignKey(d => d.EdificacaoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribEdificacoesBloqueadas_TribEdificacoes");
        });

        modelBuilder.Entity<TribEdificacoesCancelada>(entity =>
        {
            entity.HasKey(e => e.EdifCancId);

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("TgTribEdificacoesCanceladasDelete");
                    tb.HasTrigger("TgTribEdificacoesCanceladasInsert");
                    tb.HasTrigger("TgTribEdificacoesCanceladasUpdate");
                });

            entity.HasIndex(e => e.EdificacaoId, "IX_EdificacaoID").HasFillFactor(90);

            entity.Property(e => e.EdifCancId).HasColumnName("EdifCancID");
            entity.Property(e => e.DataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.EdifCancData).HasColumnType("datetime");
            entity.Property(e => e.EdifCancDataReativar).HasColumnType("datetime");
            entity.Property(e => e.EdifCancMotivo)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.EdifCancMotivoReativar)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.EdifCancUsuarioReativar)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");

            entity.HasOne(d => d.Edificacao).WithMany(p => p.TribEdificacoesCancelada)
                .HasForeignKey(d => d.EdificacaoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribEdificacoesCanceladas_TribEdificacoes");
        });

        modelBuilder.Entity<TribEdificacoesCertidaoPredial>(entity =>
        {
            entity.HasKey(e => e.IdedifCertidaoPredial).HasName("PK__TribEdif__34B800BF586609BD");

            entity.ToTable("TribEdificacoesCertidaoPredial");

            entity.Property(e => e.IdedifCertidaoPredial).HasColumnName("IDEdifCertidaoPredial");
            entity.Property(e => e.DataInclusao).HasColumnType("datetime");
            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.Qrcode)
                .HasColumnType("image")
                .HasColumnName("QRCode");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Edificacao).WithMany(p => p.TribEdificacoesCertidaoPredials)
                .HasForeignKey(d => d.EdificacaoId)
                .HasConstraintName("FK__TribEdifi__Edifi__5A4E522F");
        });

        modelBuilder.Entity<TribEdificacoesContrib>(entity =>
        {
            entity.HasKey(e => new { e.ConId, e.EdificacaoId }).HasName("PK_TribTerrenoContrib");

            entity.ToTable("TribEdificacoesContrib", tb =>
                {
                    tb.HasTrigger("TgTribEdificacoesContribDelete");
                    tb.HasTrigger("TgTribEdificacoesContribInsert");
                    tb.HasTrigger("TgTribEdificacoesContribUpdate");
                });

            entity.HasIndex(e => new { e.EdificacaoId, e.ConId }, "IX_EdificacaoID_ConID").HasFillFactor(90);

            entity.HasIndex(e => e.ConId, "IX_TribEdificacoesContrib_ConID").HasFillFactor(90);

            entity.HasIndex(e => new { e.ConId, e.Responsavel, e.Proprietario, e.EdificacaoId }, "IX_TribEdificacoesContrib_ConID_Responsavel_Proprietario_EdificacaoID").HasFillFactor(90);

            entity.HasIndex(e => e.EdificacaoId, "IX_TribEdificacoesContrib_EdificacaoID").HasFillFactor(90);

            entity.HasIndex(e => new { e.EdificacaoId, e.ConId, e.Proprietario, e.Responsavel, e.Percentual }, "IX_TribEdificacoesContrib_EdificacaoID_ConID_Prop_Resp_Percentual").HasFillFactor(90);

            entity.HasIndex(e => e.Proprietario, "IX_TribEdificacoesContrib_Proprietario").HasFillFactor(90);

            entity.HasIndex(e => new { e.Proprietario, e.EdificacaoId }, "IX_TribEdificacoesContrib_Proprietario_EdificacaoID").HasFillFactor(90);

            entity.HasIndex(e => new { e.EdificacaoId, e.ConId }, "_dta_index_TribEdificacoesContrib_7_1111727063__K2_K1_3_4_5_6_9_10").HasFillFactor(90);

            entity.HasIndex(e => new { e.Responsavel, e.EdificacaoId, e.ConId }, "_idx_TribEdificacoesContrib_Responsavel_EdifID_ConID").HasFillFactor(90);

            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.CoResponsavel)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength();
            entity.Property(e => e.Correspondencia)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Locatario)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Percentual).HasColumnType("decimal(6, 2)");
            entity.Property(e => e.Proprietario)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("");
            entity.Property(e => e.Responsavel)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TransfId)
                .HasComment("Identificação da Transferência")
                .HasColumnName("TransfID");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");

            entity.HasOne(d => d.Con).WithMany(p => p.TribEdificacoesContribs)
                .HasForeignKey(d => d.ConId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribEdificacoesContrib_Contribuintes");

            entity.HasOne(d => d.Edificacao).WithMany(p => p.TribEdificacoesContribs)
                .HasForeignKey(d => d.EdificacaoId)
                .HasConstraintName("FK_TribEdificacoesContrib_TribEdificacoes");
        });

        modelBuilder.Entity<TribEdificacoesContribAnteriore>(entity =>
        {
            entity.HasKey(e => e.IdedifAnterior);

            entity.HasIndex(e => e.EdificacaoId, "IX_TribEdificacoesContribAnteriores_EdificacaoID");

            entity.Property(e => e.IdedifAnterior).HasColumnName("IDEdifAnterior");
            entity.Property(e => e.CoResponsavel)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.Correspondencia)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DataInclusao).HasColumnType("datetime");
            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.Locatario)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Observacao)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Percentual).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.Proprietario)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Responsavel)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribEdificacoesEndereco>(entity =>
        {
            entity.HasKey(e => e.EnderecoId);

            entity.ToTable("TribEdificacoesEndereco");

            entity.HasIndex(e => new { e.Cep, e.EdificacaoId }, "IX_TribEdificacoesEndereco_CEP").HasFillFactor(90);

            entity.HasIndex(e => e.CidadeId, "IX_TribEdificacoesEndereco_CidadeID");

            entity.HasIndex(e => new { e.EdificacaoId, e.Correspondencia, e.Idloteamento, e.CidadeId, e.LogradId }, "IX_TribEdificacoesEndereco_EdificacaoID_Correspondencia_IDLoteamento_CidadeID_LogradID").HasFillFactor(90);

            entity.HasIndex(e => e.Idloteamento, "IX_TribEdificacoesEndereco_IDLoteamento");

            entity.HasIndex(e => new { e.LocalizacaoImovel, e.EdificacaoId, e.Idloteamento }, "IX_TribEdificacoesEndereco_LocalizacaoImovel_EdificacaoID_IDLoteamento").HasFillFactor(90);

            entity.HasIndex(e => e.LogradId, "IX_TribEdificacoesEndereco_LogradID");

            entity.Property(e => e.EnderecoId)
                .ValueGeneratedNever()
                .HasColumnName("EnderecoID");
            entity.Property(e => e.CaixaPostal)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Cep)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("CEP");
            entity.Property(e => e.CidadeId).HasColumnName("CidadeID");
            entity.Property(e => e.Complemento)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ConId)
                .HasComment("Responsável ou pessoa do endereço")
                .HasColumnName("ConID");
            entity.Property(e => e.Correspondencia)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Sim")
                .IsFixedLength();
            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.Idloteamento).HasColumnName("IDLoteamento");
            entity.Property(e => e.LocalizacaoImovel)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength();
            entity.Property(e => e.LogradId).HasColumnName("LogradID");
            entity.Property(e => e.Numero)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.Con).WithMany(p => p.TribEdificacoesEnderecos)
                .HasForeignKey(d => d.ConId)
                .HasConstraintName("FK_TribEdificacoesEndereco_Contribuintes");

            entity.HasOne(d => d.Edificacao).WithMany(p => p.TribEdificacoesEnderecos)
                .HasForeignKey(d => d.EdificacaoId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_TribEdificacoesEndereco_TribEdificacoes");
        });

        modelBuilder.Entity<TribEdificacoesEnderecoTemp>(entity =>
        {
            entity.HasKey(e => e.EnderecoId);

            entity.ToTable("TribEdificacoesEnderecoTemp");

            entity.Property(e => e.EnderecoId)
                .ValueGeneratedNever()
                .HasColumnName("EnderecoID");
            entity.Property(e => e.Cep)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("CEP");
            entity.Property(e => e.CidadeId).HasColumnName("CidadeID");
            entity.Property(e => e.Complemento)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.Correspondencia)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.Idloteamento).HasColumnName("IDLoteamento");
            entity.Property(e => e.LocalizacaoImovel)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LogradId).HasColumnName("LogradID");
            entity.Property(e => e.Numero)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribEdificacoesImagen>(entity =>
        {
            entity.HasKey(e => e.EdifImgId);

            entity.HasIndex(e => e.EdificacaoId, "IX_EdificacaoID").HasFillFactor(90);

            entity.Property(e => e.EdifImgId).HasColumnName("EdifImgID");
            entity.Property(e => e.EdifImgData).HasColumnType("datetime");
            entity.Property(e => e.EdifImgImagem).HasColumnType("image");
            entity.Property(e => e.EdifImgObservacao)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.EdifImgPadrao)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.InscricaoSmtr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("InscricaoSMTR");

            entity.HasOne(d => d.Edificacao).WithMany(p => p.TribEdificacoesImagens)
                .HasForeignKey(d => d.EdificacaoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribEdificacoesImagens_TribEdificacoes");
        });

        modelBuilder.Entity<TribEdificacoesImagensTipo>(entity =>
        {
            entity.HasKey(e => e.EdifImgTipoId);

            entity.ToTable("TribEdificacoesImagensTipo");

            entity.Property(e => e.EdifImgTipoId).ValueGeneratedNever();
            entity.Property(e => e.EdifImgTipo)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribEdificacoesImportacao>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TribEdificacoesImportacao");

            entity.HasIndex(e => new { e.InscricaoImobiliaria, e.EdificacaoId, e.NomeArquivo }, "IX_TribEdificacoesImportacao_InscricaoImobiliaria_EdificacaoID_NomeArquivo")
                .IsClustered()
                .HasFillFactor(90);

            entity.Property(e => e.Data).HasColumnType("smalldatetime");
            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.InscricaoImobiliaria)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NomeArquivo)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Observacao)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribEdificacoesImune>(entity =>
        {
            entity.HasKey(e => new { e.EdificacaoId, e.TipoTribId, e.AnoIptu });

            entity.ToTable("tribEdificacoesImune");

            entity.Property(e => e.EdificacaoId).HasColumnName("edificacaoId");
            entity.Property(e => e.TipoTribId).HasColumnName("tipoTribId");
            entity.Property(e => e.AnoIptu).HasColumnName("anoIPTU");
            entity.Property(e => e.ImuObservacao)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("imuObservacao");
        });

        modelBuilder.Entity<TribEdificacoesInsencoesMinhaCasa>(entity =>
        {
            entity.HasKey(e => e.IdIsencao);

            entity.ToTable("TribEdificacoesInsencoesMinhaCasa");

            entity.Property(e => e.IdIsencao).HasColumnName("idIsencao");
            entity.Property(e => e.DsLogin)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsLogin");
            entity.Property(e => e.DtContrato)
                .HasColumnType("datetime")
                .HasColumnName("dtContrato");
            entity.Property(e => e.DtInclusao)
                .HasColumnType("datetime")
                .HasColumnName("dtInclusao");
            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");

            entity.HasOne(d => d.Edificacao).WithMany(p => p.TribEdificacoesInsencoesMinhaCasas)
                .HasForeignKey(d => d.EdificacaoId)
                .HasConstraintName("FK_TribEdificacoesInsencoesMinhaCasa_TribEdificacoes");

            entity.HasMany(d => d.ImoIddivida).WithMany(p => p.IdIsencaos)
                .UsingEntity<Dictionary<string, object>>(
                    "TribEdificacoesIsencoesMinhaCasaIsenta",
                    r => r.HasOne<TribDividasImo>().WithMany()
                        .HasForeignKey("ImoIddivida")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_TribEdificacoesIsencoesMinhaCasaIsentas_TribDividasImo"),
                    l => l.HasOne<TribEdificacoesInsencoesMinhaCasa>().WithMany()
                        .HasForeignKey("IdIsencao")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_TribEdificacoesIsencoesMinhaCasaIsentas_TribEdificacoesInsencoesMinhaCasa"),
                    j =>
                    {
                        j.HasKey("IdIsencao", "ImoIddivida");
                        j.ToTable("TribEdificacoesIsencoesMinhaCasaIsentas");
                        j.IndexerProperty<long>("IdIsencao").HasColumnName("idIsencao");
                        j.IndexerProperty<long>("ImoIddivida").HasColumnName("ImoIDDivida");
                    });

            entity.HasMany(d => d.ImoIddividaNavigation).WithMany(p => p.IdIsencaosNavigation)
                .UsingEntity<Dictionary<string, object>>(
                    "TribEdificacoesIsencoesMinhaCasaPendente",
                    r => r.HasOne<TribDividasImo>().WithMany()
                        .HasForeignKey("ImoIddivida")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_TribEdificacoesIsencoesMinhaCasaPendentes_TribDividasImo"),
                    l => l.HasOne<TribEdificacoesInsencoesMinhaCasa>().WithMany()
                        .HasForeignKey("IdIsencao")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_TribEdificacoesIsencoesMinhaCasaPendentes_TribEdificacoesInsencoesMinhaCasa"),
                    j =>
                    {
                        j.HasKey("IdIsencao", "ImoIddivida");
                        j.ToTable("TribEdificacoesIsencoesMinhaCasaPendentes");
                        j.IndexerProperty<long>("IdIsencao").HasColumnName("idIsencao");
                        j.IndexerProperty<long>("ImoIddivida").HasColumnName("ImoIDDivida");
                    });
        });

        modelBuilder.Entity<TribEdificacoesIsencao>(entity =>
        {
            entity.HasKey(e => e.IsencaoId);

            entity.ToTable("TribEdificacoesIsencao");

            entity.HasIndex(e => new { e.EdificacaoId, e.ExeFinal }, "IX_TribEdificacoesIsencao_EdificacaoID_ExeFinal_inc_TipoIseID_ExeInicial").HasFillFactor(90);

            entity.Property(e => e.IsencaoId)
                .ValueGeneratedNever()
                .HasColumnName("IsencaoID");
            entity.Property(e => e.DataIsencao).HasColumnType("datetime");
            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.ExeFinal).HasColumnType("datetime");
            entity.Property(e => e.ExeInicial).HasColumnType("datetime");
            entity.Property(e => e.Motivo)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.NrProcessoNumAno)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("nrProcessoNumAno");
            entity.Property(e => e.ProcId).HasColumnName("ProcID");
            entity.Property(e => e.TipoIseId).HasColumnName("TipoIseID");

            entity.HasOne(d => d.Edificacao).WithMany(p => p.TribEdificacoesIsencaos)
                .HasForeignKey(d => d.EdificacaoId)
                .HasConstraintName("FK_TribEdificacoesIsencao_TribEdificacoes");

            entity.HasOne(d => d.TipoIse).WithMany(p => p.TribEdificacoesIsencaos)
                .HasForeignKey(d => d.TipoIseId)
                .HasConstraintName("FK_TribEdificacoesIsencao_TribTipoIsencao");
        });

        modelBuilder.Entity<TribEdificacoesIsencaoTrib>(entity =>
        {
            entity.HasKey(e => new { e.IsencaoId, e.TipoTribId });

            entity.ToTable("TribEdificacoesIsencaoTrib");

            entity.Property(e => e.IsencaoId).HasColumnName("IsencaoID");
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
            entity.Property(e => e.Desconto).HasColumnType("money");
            entity.Property(e => e.TipoBxId).HasColumnName("TipoBxID");

            entity.HasOne(d => d.Isencao).WithMany(p => p.TribEdificacoesIsencaoTribs)
                .HasForeignKey(d => d.IsencaoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribEdificacoesIsencaoTrib_TribEdificacoesIsencao");

            entity.HasOne(d => d.TipoBx).WithMany(p => p.TribEdificacoesIsencaoTribs)
                .HasForeignKey(d => d.TipoBxId)
                .HasConstraintName("FK_TribEdificacoesIsencaoTrib_TribTipoBaixa");

            entity.HasOne(d => d.TipoTrib).WithMany(p => p.TribEdificacoesIsencaoTribs)
                .HasForeignKey(d => d.TipoTribId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribEdificacoesIsencaoTrib_TribTipoTributos");
        });

        modelBuilder.Entity<TribEdificacoesLancamentosAnteriore>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.InscricaoImobiliaria)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Proprietario)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Valor2003).HasColumnType("money");
            entity.Property(e => e.Valor2004).HasColumnType("money");
            entity.Property(e => e.Valor2005).HasColumnType("money");
            entity.Property(e => e.Valor2006).HasColumnType("money");
            entity.Property(e => e.Valor2007).HasColumnType("money");
            entity.Property(e => e.Valor2008).HasColumnType("money");
            entity.Property(e => e.Valor2009).HasColumnType("money");
            entity.Property(e => e.Valor2010).HasColumnType("money");
            entity.Property(e => e.Valor2011).HasColumnType("money");
            entity.Property(e => e.Valor2012).HasColumnType("money");
            entity.Property(e => e.Valor2013).HasColumnType("money");
        });

        modelBuilder.Entity<TribEdificacoesLancamentosDeducao>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TribEdificacoesLancamentosDeducao");

            entity.Property(e => e.InscricaoImobiliaria)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Proprietario)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Valor2008).HasColumnType("money");
            entity.Property(e => e.Valor2009).HasColumnType("money");
            entity.Property(e => e.Valor2010).HasColumnType("money");
            entity.Property(e => e.Valor2011).HasColumnType("money");
            entity.Property(e => e.Valor2012).HasColumnType("money");
            entity.Property(e => e.Valor2013).HasColumnType("money");
        });

        modelBuilder.Entity<TribEdificacoesValorVenalTemp>(entity =>
        {
            entity.HasKey(e => e.CalcId).HasName("PK_TribEdificacaoValorVenalTemp");

            entity.ToTable("TribEdificacoesValorVenalTemp");

            entity.Property(e => e.CalcId).HasColumnName("CalcID");
            entity.Property(e => e.CalcData)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.CalcDataAte).HasColumnType("datetime");
            entity.Property(e => e.CalcUsuario)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.ValorVenalCalculo).HasColumnType("money");
            entity.Property(e => e.ValorVenalEdificacao).HasColumnType("money");

            entity.HasOne(d => d.Edificacao).WithMany(p => p.TribEdificacoesValorVenalTemps)
                .HasForeignKey(d => d.EdificacaoId)
                .HasConstraintName("FK_TribEdificacoesValorVenalTemp_TribEdificacoes");
        });

        modelBuilder.Entity<TribEditalCompra>(entity =>
        {
            entity.HasKey(e => e.EdiId);

            entity.ToTable("tribEditalCompras");

            entity.Property(e => e.EdiId)
                .ValueGeneratedNever()
                .HasColumnName("ediID");
            entity.Property(e => e.EdiAno).HasColumnName("ediAno");
            entity.Property(e => e.EdiNumero).HasColumnName("ediNumero");
            entity.Property(e => e.EditDataAbertura)
                .HasColumnType("datetime")
                .HasColumnName("editDataAbertura");
            entity.Property(e => e.EditHoraAbertura)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("editHoraAbertura");
            entity.Property(e => e.EditNomeArquivo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("editNomeArquivo");
            entity.Property(e => e.EditObjeto)
                .HasColumnType("image")
                .HasColumnName("editObjeto");
            entity.Property(e => e.EditObjetoDescr)
                .HasColumnType("text")
                .HasColumnName("editObjetoDescr");
            entity.Property(e => e.EditValor)
                .HasColumnType("money")
                .HasColumnName("editValor");
            entity.Property(e => e.LocId).HasColumnName("LocID");
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");

            entity.HasOne(d => d.Loc).WithMany(p => p.TribEditalCompras)
                .HasForeignKey(d => d.LocId)
                .HasConstraintName("FK_tribEditalCompras_Localizacao");
        });

        modelBuilder.Entity<TribEditalComprasContribuinte>(entity =>
        {
            entity.HasKey(e => new { e.ConId, e.EdiId });

            entity.ToTable("tribEditalComprasContribuintes", tb => tb.HasTrigger("TgTribEditalComprasContribuintes"));

            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.EdiId).HasColumnName("ediID");
            entity.Property(e => e.ConIddivida).HasColumnName("ConIDDivida");

            entity.HasOne(d => d.Con).WithMany(p => p.TribEditalComprasContribuintes)
                .HasForeignKey(d => d.ConId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tribEditalComprasContribuintes_Contribuintes");

            entity.HasOne(d => d.ConIddividaNavigation).WithMany(p => p.TribEditalComprasContribuintes)
                .HasForeignKey(d => d.ConIddivida)
                .HasConstraintName("FK_tribEditalComprasContribuintes_TribDividasContribuinte");

            entity.HasOne(d => d.Edi).WithMany(p => p.TribEditalComprasContribuintes)
                .HasForeignKey(d => d.EdiId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tribEditalComprasContribuintes_tribEditalCompras");
        });

        modelBuilder.Entity<TribEditalInscrico>(entity =>
        {
            entity.HasKey(e => new { e.EdiId, e.LanImpImoAno, e.InscricaoImobiliaria });

            entity.Property(e => e.EdiId).HasColumnName("ediID");
            entity.Property(e => e.InscricaoImobiliaria)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribEditalLanc>(entity =>
        {
            entity.HasKey(e => e.EdiId);

            entity.ToTable("tribEditalLanc");

            entity.Property(e => e.EdiId)
                .ValueGeneratedNever()
                .HasColumnName("ediID");
            entity.Property(e => e.DataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.EdiAno).HasColumnName("ediAno");
            entity.Property(e => e.EdiData)
                .HasColumnType("datetime")
                .HasColumnName("ediData");
            entity.Property(e => e.EdiNumero).HasColumnName("ediNumero");
            entity.Property(e => e.Host)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValueSql("(host_name())")
                .HasColumnName("host");
            entity.Property(e => e.TextoId).HasColumnName("TextoID");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");
        });

        modelBuilder.Entity<TribEditalLancDivida>(entity =>
        {
            entity.HasKey(e => e.EdDiId);

            entity.ToTable("tribEditalLancDividas");

            entity.HasIndex(e => e.EdiId, "IX_ediID").HasFillFactor(90);

            entity.HasIndex(e => e.ConIddivida, "IX_tribEditalLancDividas_ConIDDivida").HasFillFactor(90);

            entity.HasIndex(e => e.DivEmpId, "IX_tribEditalLancDividas_DivEmpID").HasFillFactor(90);

            entity.HasIndex(e => e.ImoIddivida, "IX_tribEditalLancDividas_ImoIDDivida").HasFillFactor(90);

            entity.Property(e => e.EdDiId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("EdDiID");
            entity.Property(e => e.ConIddivida).HasColumnName("ConIDDivida");
            entity.Property(e => e.DataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DivEmpId).HasColumnName("DivEmpID");
            entity.Property(e => e.EdiId).HasColumnName("ediID");
            entity.Property(e => e.Host)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValueSql("(host_name())")
                .HasColumnName("host");
            entity.Property(e => e.ImoIddivida).HasColumnName("ImoIDDivida");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");

            entity.HasOne(d => d.ConIddividaNavigation).WithMany(p => p.TribEditalLancDivida)
                .HasForeignKey(d => d.ConIddivida)
                .HasConstraintName("FK_tribEditalLancDividas_TribDividasContribuinte");

            entity.HasOne(d => d.DivEmp).WithMany(p => p.TribEditalLancDivida)
                .HasForeignKey(d => d.DivEmpId)
                .HasConstraintName("FK_tribEditalLancDividas_TribDividasEmpresas");

            entity.HasOne(d => d.Edi).WithMany(p => p.TribEditalLancDivida)
                .HasForeignKey(d => d.EdiId)
                .HasConstraintName("FK_tribEditalLancDividas_tribEditalLanc");

            entity.HasOne(d => d.ImoIddividaNavigation).WithMany(p => p.TribEditalLancDivida)
                .HasForeignKey(d => d.ImoIddivida)
                .HasConstraintName("FK_tribEditalLancDividas_TribDividasImo");
        });

        modelBuilder.Entity<TribEditalLancVenc>(entity =>
        {
            entity.HasKey(e => e.EdVeId);

            entity.ToTable("tribEditalLancVenc");

            entity.Property(e => e.EdVeId)
                .ValueGeneratedNever()
                .HasColumnName("EdVeID");
            entity.Property(e => e.EdVeDesconto).HasColumnType("money");
            entity.Property(e => e.EdVeParcelaUnica)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EdVeVencimento).HasColumnType("datetime");
            entity.Property(e => e.EdiId).HasColumnName("ediID");
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
            entity.Property(e => e.TipoTribIddesconto).HasColumnName("TipoTribIDDesconto");

            entity.HasOne(d => d.Edi).WithMany(p => p.TribEditalLancVencs)
                .HasForeignKey(d => d.EdiId)
                .HasConstraintName("FK_tribEditalLancVenc_tribEditalLanc");
        });

        modelBuilder.Entity<TribEmprAtivVedada>(entity =>
        {
            entity.HasKey(e => e.Atividade);

            entity.Property(e => e.Atividade)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Denominacao)
                .HasMaxLength(200)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribEmpresa>(entity =>
        {
            entity.HasKey(e => e.EmprCmc);

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("TgTribEmpresasInsert");
                    tb.HasTrigger("TgTribEmpresasInsertEmail");
                });

            entity.HasIndex(e => e.ConId, "IX_ConID").HasFillFactor(90);

            entity.HasIndex(e => e.ContadorId, "IX_ContadorID").HasFillFactor(90);

            entity.HasIndex(e => e.ConId, "IX_TribEmpresas_ConID_inc_EmprCmc_ContadorID_EmprSituacaoID").HasFillFactor(90);

            entity.HasIndex(e => new { e.EmprCmc, e.ConId }, "IX_TribEmpresas_EmprCMC_ConID").HasFillFactor(90);

            entity.HasIndex(e => new { e.EmprCaracId, e.EmprCmc, e.ConId }, "IX_TribEmpresas_EmprCaracID_EmprCmc_ConID").HasFillFactor(90);

            entity.HasIndex(e => new { e.EmprSituacaoId, e.ConId, e.EmprCmc }, "IX_TribEmpresas_EmprSituacaoID_ConID_EmprCmc").HasFillFactor(90);

            entity.HasIndex(e => e.EmprSituacaoId, "IX_TribEmpresas_EmprSituacaoID_inc_Cmc_ConID_Lograd_EndNum_Bai_Cid_Tipo_Const_Carac_DomTri_EnqSimp_Regime_TipoEmp");

            entity.HasIndex(e => e.EmprSituacaoId, "IX_TribEmpresas_EmprSituacaoID_inc_ConID_LogradID_BairroID_CidId_TipoID_ConstitID_CaracID_EmprRegime");

            entity.HasIndex(e => e.EmprSituacaoId, "IX_TribEmpresas_EmprSituacaoID_inc_ConID_LogradID_BairroID_CidadeId_EmprTipoID_EmprConstitID_EmprCaracID");

            entity.HasIndex(e => e.LogradId, "IX_TribEmpresas_LogradID");

            entity.HasIndex(e => new { e.LogradId, e.EmprEnderecoNum }, "IX_TribEmpresas_LogradID_EmprEnderecoNum");

            entity.Property(e => e.EmprCmc).ValueGeneratedNever();
            entity.Property(e => e.AnteriorAreaConstr)
                .HasDefaultValue(0m)
                .HasColumnType("money");
            entity.Property(e => e.BairroId).HasColumnName("BairroID");
            entity.Property(e => e.ConId)
                .HasDefaultValue(0L)
                .HasColumnName("ConID");
            entity.Property(e => e.ContadorId).HasColumnName("ContadorID");
            entity.Property(e => e.DataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.EmprAlicotaPrincipal).HasColumnType("money");
            entity.Property(e => e.EmprAlvaraEventual)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength()
                .HasComment("Sim ou Não");
            entity.Property(e => e.EmprAreaAberta)
                .HasDefaultValue(0m)
                .HasColumnType("money");
            entity.Property(e => e.EmprAtividadeContratoSocial)
                .IsUnicode(false)
                .HasComment("Descritivo da atividade do contrato social da empresa.");
            entity.Property(e => e.EmprBarbeiroNumLug).HasDefaultValue(0);
            entity.Property(e => e.EmprCaracId).HasColumnName("EmprCaracID");
            entity.Property(e => e.EmprCep)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("EmprCEP");
            entity.Property(e => e.EmprCnpjextensao)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength()
                .HasColumnName("EmprCNPJExtensao");
            entity.Property(e => e.EmprComDiversoes)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength();
            entity.Property(e => e.EmprComExplosivo)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength();
            entity.Property(e => e.EmprComGas)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength();
            entity.Property(e => e.EmprComplemento)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.EmprConstitId)
                .HasDefaultValue(0)
                .HasColumnName("EmprConstitID");
            entity.Property(e => e.EmprDataAdesao).HasColumnType("datetime");
            entity.Property(e => e.EmprDataInscricao).HasColumnType("datetime");
            entity.Property(e => e.EmprDomicilioTributario)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength()
                .HasComment("São as empresas ou autonomos NÃO ESTABELECIDOS");
            entity.Property(e => e.EmprDtFinCadastro).HasColumnType("datetime");
            entity.Property(e => e.EmprEmail)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EmprEmailContador)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EmprEmpresaPublica)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.EmprEnderecoNum)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength();
            entity.Property(e => e.EmprEnqSimei)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EmprEnqSimples)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength();
            entity.Property(e => e.EmprEnsinoNumSalas).HasDefaultValue(0);
            entity.Property(e => e.EmprHospitalNumLeitos).HasDefaultValue(0);
            entity.Property(e => e.EmprHotelNumApto).HasDefaultValue(0);
            entity.Property(e => e.EmprHotelNumQuarto).HasDefaultValue(0);
            entity.Property(e => e.EmprInscricaoEstadual)
                .HasMaxLength(32)
                .IsUnicode(false);
            entity.Property(e => e.EmprJogosNumEletronicos).HasDefaultValue(0);
            entity.Property(e => e.EmprJogosNumMesas).HasDefaultValue(0);
            entity.Property(e => e.EmprJogosNumPista).HasDefaultValue(0);
            entity.Property(e => e.EmprNumEmpregados).HasDefaultValue(0);
            entity.Property(e => e.EmprOrigemDuc)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("EmprOrigemDUC");
            entity.Property(e => e.EmprRegJuntaComData).HasColumnType("datetime");
            entity.Property(e => e.EmprRestricoes).HasColumnType("text");
            entity.Property(e => e.EmprSituacaoId).HasColumnName("EmprSituacaoID");
            entity.Property(e => e.EmprSubstituto)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValueSql("((0))")
                .IsFixedLength();
            entity.Property(e => e.EmprSubstitutoTributario)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.EmprTeatroNumLug).HasDefaultValue(0);
            entity.Property(e => e.EmprTipoEmpresa)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.EmprTipoId).HasColumnName("EmprTipoID");
            entity.Property(e => e.EmprValorEstimado).HasColumnType("money");
            entity.Property(e => e.EmprValorMensal).HasColumnType("money");
            entity.Property(e => e.EstabGrupo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Flabertaporalteracao)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength()
                .HasComment("Indica se a empresa foi aberta por um PRP de Alteração")
                .HasColumnName("flabertaporalteracao");
            entity.Property(e => e.LogradId)
                .HasDefaultValue(0)
                .HasColumnName("LogradID");
            entity.Property(e => e.ProtocoloConsultaPrevia)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("protocolo_consulta_previa");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");

            entity.HasOne(d => d.Bairro).WithMany(p => p.TribEmpresas)
                .HasForeignKey(d => d.BairroId)
                .HasConstraintName("FK_TribEmpresas_Bairro");

            entity.HasOne(d => d.Cidade).WithMany(p => p.TribEmpresas)
                .HasForeignKey(d => d.CidadeId)
                .HasConstraintName("FK_TribEmpresas_Cidade");

            entity.HasOne(d => d.Con).WithMany(p => p.TribEmpresas)
                .HasForeignKey(d => d.ConId)
                .HasConstraintName("FK_TribEmpresas_Contribuintes");

            entity.HasOne(d => d.Contador).WithMany(p => p.TribEmpresas)
                .HasForeignKey(d => d.ContadorId)
                .HasConstraintName("FK_TribEmpresas_TribContador");

            entity.HasOne(d => d.EmprCarac).WithMany(p => p.TribEmpresas)
                .HasForeignKey(d => d.EmprCaracId)
                .HasConstraintName("FK_TribEmpresas_TribEmpresasTipoCaracteristicas");

            entity.HasOne(d => d.EmprConstit).WithMany(p => p.TribEmpresas)
                .HasForeignKey(d => d.EmprConstitId)
                .HasConstraintName("FK_TribEmpresas_TribEmpresasTipoConstituicao");

            entity.HasOne(d => d.EmprSituacao).WithMany(p => p.TribEmpresas)
                .HasForeignKey(d => d.EmprSituacaoId)
                .HasConstraintName("FK_TribEmpresas_TribEmpresasTipoSituacao");

            entity.HasOne(d => d.EmprTipoEntidadeNavigation).WithMany(p => p.TribEmpresas)
                .HasForeignKey(d => d.EmprTipoEntidade)
                .HasConstraintName("FK_TribEmpresas_TribEmpresasTipoEntidade");

            entity.HasOne(d => d.EmprTipo).WithMany(p => p.TribEmpresas)
                .HasForeignKey(d => d.EmprTipoId)
                .HasConstraintName("FK_TribEmpresas_TribEmpresasTipo");

            entity.HasOne(d => d.EstabGrupoNavigation).WithMany(p => p.TribEmpresas)
                .HasForeignKey(d => d.EstabGrupo)
                .HasConstraintName("FK_TribEmpresas_TribGruposEstabelecimento");

            entity.HasOne(d => d.Lograd).WithMany(p => p.TribEmpresas)
                .HasForeignKey(d => d.LogradId)
                .HasConstraintName("FK_TribEmpresas_Logradouro");
        });

        modelBuilder.Entity<TribEmpresaAnexo>(entity =>
        {
            entity.HasKey(e => e.AnexId);

            entity.ToTable("TribEmpresaAnexo", tb => tb.HasTrigger("TgTribEmpresasAnexosInsertEmail"));

            entity.HasIndex(e => e.EmprCmc, "IX_TribEmpresaAnexo_EmprCmc");

            entity.Property(e => e.AnexId).HasColumnName("AnexID");
            entity.Property(e => e.NomeDoc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nomeDoc");
            entity.Property(e => e.ProtAltId).HasColumnName("ProtAltID");

            entity.HasOne(d => d.EmprCmcNavigation).WithMany(p => p.TribEmpresaAnexos)
                .HasForeignKey(d => d.EmprCmc)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribEmpresaAnexo_TribEmpresas");

            entity.HasOne(d => d.Objeto).WithMany(p => p.TribEmpresaAnexos)
                .HasForeignKey(d => d.ObjetoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribEmpresaAnexo_TribObjetos");

            entity.HasOne(d => d.ProtAlt).WithMany(p => p.TribEmpresaAnexos)
                .HasForeignKey(d => d.ProtAltId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribEmpresaAnexo_TribProtocoloAlteracao");
        });

        modelBuilder.Entity<TribEmpresasAtiv>(entity =>
        {
            entity.HasKey(e => new { e.EmprCmc, e.Atividade });

            entity.ToTable("TribEmpresasAtiv", tb =>
                {
                    tb.HasTrigger("TgTribEmpresasAtivInsert");
                    tb.HasTrigger("TgTribEmpresasAtivLicenciamentoInsert");
                    tb.HasTrigger("TgTribEmpresasAtivUpdate");
                });

            entity.HasIndex(e => e.EmprAtivDataFim, "IX_TribEmpresasAtiv_EmprAtivDataFim_inc_EmprCmc_Atividade");

            entity.HasIndex(e => e.EmprAtivDataInI, "IX_TribEmpresasAtiv_EmprAtivDataInI_inc_EmprCmc_Atividade_EmprAtivPrincipal_EmprAtivDataFim");

            entity.Property(e => e.Atividade)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.EmprAtivDataFim).HasColumnType("datetime");
            entity.Property(e => e.EmprAtivDataInI).HasColumnType("datetime");
            entity.Property(e => e.EmprAtivMotivo)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.EmprAtivObs)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EmprAtivPrincipal)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Sim")
                .IsFixedLength();
            entity.Property(e => e.EmprAtivProvisorio)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não");

            entity.HasOne(d => d.AtividadeNavigation).WithMany(p => p.TribEmpresasAtivs)
                .HasForeignKey(d => d.Atividade)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribEmpresasAtiv_TribAtivAtividade");

            entity.HasOne(d => d.EmprCmcNavigation).WithMany(p => p.TribEmpresasAtivs)
                .HasForeignKey(d => d.EmprCmc)
                .HasConstraintName("FK_TribEmpresasAtiv_TribEmpresas");
        });

        modelBuilder.Entity<TribEmpresasAtivAtributo>(entity =>
        {
            entity.HasKey(e => e.AtividadeAtributoId);

            entity.HasIndex(e => new { e.EmprCmc, e.IdAtributo }, "IX_TribEmpresasAtivAtributos_EmprCmc_IdAtributo");

            entity.HasIndex(e => new { e.EmprCmc, e.IdAtributo, e.DsValor }, "IX_TribEmpresasAtivAtributos_EmprCmc_IdAtributo_dsValor");

            entity.Property(e => e.Atividade)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DsValor)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsValor");

            entity.HasOne(d => d.IdAtributoNavigation).WithMany(p => p.TribEmpresasAtivAtributos)
                .HasForeignKey(d => d.IdAtributo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribEmpresasAtivAtributos_tbEmpAtributosDinamicos");

            entity.HasOne(d => d.TribEmpresasAtiv).WithMany(p => p.TribEmpresasAtivAtributos)
                .HasForeignKey(d => new { d.EmprCmc, d.Atividade })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribEmpresasAtivAtributos_TribEmpresasAtiv");
        });

        modelBuilder.Entity<TribEmpresasEdificaco>(entity =>
        {
            entity.HasKey(e => new { e.EmprCmc, e.EdificacaoId });

            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.ComplEndereco)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("Complemento do endereço do imóvel da empresa.");
            entity.Property(e => e.DtFim)
                .HasColumnType("datetime")
                .HasColumnName("dtFim");
            entity.Property(e => e.DtInicio)
                .HasColumnType("datetime")
                .HasColumnName("dtInicio");
            entity.Property(e => e.LogradIdfundos).HasColumnName("LogradIDFundos");
            entity.Property(e => e.LogradIdtransversal1)
                .HasComment("Logradouro da transversal 1.")
                .HasColumnName("LogradIDTransversal1");
            entity.Property(e => e.LogradIdtransversal2)
                .HasComment("Logradouro da transversal 2.")
                .HasColumnName("LogradIDTransversal2");

            entity.HasOne(d => d.Edificacao).WithMany(p => p.TribEmpresasEdificacos)
                .HasForeignKey(d => d.EdificacaoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribEmpresasEdificacoes_TribEdificacoes");

            entity.HasOne(d => d.EmprCmcNavigation).WithMany(p => p.TribEmpresasEdificacos)
                .HasForeignKey(d => d.EmprCmc)
                .HasConstraintName("FK_TribEmpresasEdificacoes_TribEmpresas");
        });

        modelBuilder.Entity<TribEmpresasEnquadramento>(entity =>
        {
            entity.HasKey(e => e.EnquadrId);

            entity.ToTable("TribEmpresasEnquadramento", tb => tb.HasTrigger("TgTribEmpresasEnquadramentoValida"));

            entity.HasIndex(e => new { e.EmprCmc, e.FxEnquadrAno }, "IX_EmprCmc_FxEnquadrAno").HasFillFactor(90);

            entity.HasIndex(e => e.ConId, "IX_TribEmpresasEnquadramento_ConID").HasFillFactor(90);

            entity.HasIndex(e => e.EmprCmc, "IX_TribEmpresasEnquadramento_EmprCmc").HasFillFactor(90);

            entity.HasIndex(e => e.ServId, "IX_TribEmpresasEnquadramento_ServID").HasFillFactor(90);

            entity.HasIndex(e => e.TextoId, "IX_TribEmpresasEnquadramento_TextoID").HasFillFactor(90);

            entity.HasIndex(e => new { e.EmprCmc, e.EnquadrId, e.EnquadrData }, "_dta_index_TribEmpresasEnquadramento_5_587409412__K2_K1_K5_3_4_6_7_8_9").HasFillFactor(90);

            entity.Property(e => e.EnquadrId).HasColumnName("EnquadrID");
            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.ContadorId).HasColumnName("ContadorID");
            entity.Property(e => e.DataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Data do cadastro de enquadramento gerada pelo sistema.")
                .HasColumnType("datetime");
            entity.Property(e => e.EnderecoIp)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EnderecoIP");
            entity.Property(e => e.EnquadrCancelado)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EnquadrData)
                .HasComment("Data informada pelo usuário para enquadramento da micro-empresa.")
                .HasColumnType("datetime");
            entity.Property(e => e.EnquadrDataBase).HasColumnType("datetime");
            entity.Property(e => e.EnquadrDeferimento)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength();
            entity.Property(e => e.EnquadrMotivo)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.EnquadrMotivoCanc)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EnquadrProtocAno).HasDefaultValue(0);
            entity.Property(e => e.EnquadrProtocNum).HasDefaultValue(0);
            entity.Property(e => e.EnquadrRecAnual)
                .HasDefaultValue(0m)
                .HasColumnType("money");
            entity.Property(e => e.EnquadrRecAnualUfm)
                .HasColumnType("money")
                .HasColumnName("EnquadrRecAnualUFM");
            entity.Property(e => e.ServId).HasColumnName("ServID");
            entity.Property(e => e.TextoId).HasColumnName("TextoID");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");

            entity.HasOne(d => d.EmprCmcNavigation).WithMany(p => p.TribEmpresasEnquadramentos)
                .HasForeignKey(d => d.EmprCmc)
                .HasConstraintName("FK_TribEmpresasEnquadramento_TribEmpresas");
        });

        modelBuilder.Entity<TribEmpresasFatorAreaAbertum>(entity =>
        {
            entity.HasKey(e => e.FatAbertaId);

            entity.Property(e => e.FatAbertaId).HasColumnName("FatAbertaID");
            entity.Property(e => e.FatAbertaAreaAte).HasColumnType("money");
            entity.Property(e => e.FatAbertaAreaDe).HasColumnType("money");
            entity.Property(e => e.FatAbertaFator).HasColumnType("money");
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
        });

        modelBuilder.Entity<TribEmpresasFatorAreaConstruidum>(entity =>
        {
            entity.HasKey(e => e.FatConstId);

            entity.Property(e => e.FatConstId).HasColumnName("FatConstID");
            entity.Property(e => e.FatConstAreaAte).HasColumnType("money");
            entity.Property(e => e.FatConstAreaDe).HasColumnType("money");
            entity.Property(e => e.FatConstFator).HasColumnType("money");
            entity.Property(e => e.FatConstQtdeMinUffi)
                .HasColumnType("money")
                .HasColumnName("FatConstQtdeMinUFFI");
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
        });

        modelBuilder.Entity<TribEmpresasGrupoRisco>(entity =>
        {
            entity.HasKey(e => e.IdGrupoRisco);

            entity.ToTable("TribEmpresasGrupoRisco");

            entity.Property(e => e.CdGrupoRisco)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cdGrupoRisco");
            entity.Property(e => e.NrAno).HasColumnName("nrAno");
            entity.Property(e => e.NrAreaMaxima)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("nrAreaMaxima");
            entity.Property(e => e.NrAreaMinima)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("nrAreaMinima");
            entity.Property(e => e.NrPercentual)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("nrPercentual");
            entity.Property(e => e.VlCoeficiente)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("vlCoeficiente");
            entity.Property(e => e.VlTaxa)
                .HasColumnType("money")
                .HasColumnName("vlTaxa");
        });

        modelBuilder.Entity<TribEmpresasLaudoBombeiro>(entity =>
        {
            entity.HasKey(e => e.IdempresaLaudo);

            entity.Property(e => e.IdempresaLaudo)
                .ValueGeneratedNever()
                .HasColumnName("IDEmpresaLaudo");
            entity.Property(e => e.DataValidate).HasColumnType("datetime");
            entity.Property(e => e.DataVistoria).HasColumnType("datetime");
            entity.Property(e => e.DsObservacao)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("dsObservacao");
            entity.Property(e => e.EmprCmc).HasColumnName("EmprCMC");
        });

        modelBuilder.Entity<TribEmpresasLimitesSocio>(entity =>
        {
            entity.HasKey(e => e.LimSid);

            entity.Property(e => e.LimSid).HasColumnName("LimSID");
            entity.Property(e => e.LimSate).HasColumnName("LimSAte");
            entity.Property(e => e.LimScoeficiente)
                .HasColumnType("money")
                .HasColumnName("LimSCoeficiente");
            entity.Property(e => e.LimSde).HasColumnName("LimSDe");
            entity.Property(e => e.NivelProfissional)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribEmpresasLimitesTaxa>(entity =>
        {
            entity.HasKey(e => e.LimId);

            entity.Property(e => e.LimId)
                .ValueGeneratedNever()
                .HasColumnName("LimID");
            entity.Property(e => e.LimCalcAtiv)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength();
            entity.Property(e => e.LimValorMaximo).HasColumnType("money");
            entity.Property(e => e.LimValorMinimo).HasColumnType("money");
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");

            entity.HasOne(d => d.TipoTrib).WithMany(p => p.TribEmpresasLimitesTaxas)
                .HasForeignKey(d => d.TipoTribId)
                .HasConstraintName("FK_TribEmpresasLimitesTaxas_TribTipoTributos");
        });

        modelBuilder.Entity<TribEmpresasMovRegime>(entity =>
        {
            entity.HasKey(e => e.MovRegimeId);

            entity.ToTable("TribEmpresasMovRegime");

            entity.HasIndex(e => e.EmprCmc, "IX_TribEmpresasMovRegime_EmprCMC");

            entity.Property(e => e.MovRegimeId).HasColumnName("MovRegimeID");
            entity.Property(e => e.DataInclusao).HasColumnType("datetime");
            entity.Property(e => e.EmprCmc).HasColumnName("EmprCMC");
            entity.Property(e => e.EmprRegimeId).HasColumnName("EmprRegimeID");
            entity.Property(e => e.MovRegimeDataAdesao).HasColumnType("datetime");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribEmpresasMovSituacao>(entity =>
        {
            entity.HasKey(e => e.MovSitId);

            entity.ToTable("TribEmpresasMovSituacao", tb =>
                {
                    tb.HasTrigger("TgTribEmpresasMovSituacaoDelete");
                    tb.HasTrigger("TgTribEmpresasMovSituacaoInsertUpdate");
                });

            entity.HasIndex(e => e.EmprCmc, "IX_EmprCmc").HasFillFactor(90);

            entity.HasIndex(e => new { e.EmprCmc, e.MovSitData }, "IX_TribEmpresasMovSituacao_17_EmprCmc_MovSitData").HasFillFactor(90);

            entity.HasIndex(e => new { e.EmprCmc, e.MovSitId, e.MovSitData }, "IX_TribEmpresasMovSituacao_EmprCmc_MovSitID_MovSitData").HasFillFactor(90);

            entity.HasIndex(e => new { e.EmprCmc, e.MovSitId, e.EmprSituacaoId }, "_dta_index_TribEmpresasMovSituacao_5_795358098__K2_K1_K4_3_5_6_7_8_9_10").HasFillFactor(90);

            entity.Property(e => e.MovSitId)
                .ValueGeneratedNever()
                .HasColumnName("MovSitID");
            entity.Property(e => e.EmprSituacaoId).HasColumnName("EmprSituacaoID");
            entity.Property(e => e.MovSitCnpj)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength()
                .HasColumnName("MovSitCNPJ");
            entity.Property(e => e.MovSitData).HasColumnType("datetime");
            entity.Property(e => e.MovSitMotivo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.MovSitObservacao)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MovSitProtocAno).HasDefaultValue(0);
            entity.Property(e => e.MovSitProtocNum).HasDefaultValue(0L);
            entity.Property(e => e.MovSitProtocoloAnt)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.MovSitRazaoSocial)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.MovSitTipo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength()
                .HasComment("Baixa, Paralização,  Bloqueio,  Cancelado ou em Atividade");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.EmprCmcNavigation).WithMany(p => p.TribEmpresasMovSituacaos)
                .HasForeignKey(d => d.EmprCmc)
                .HasConstraintName("FK_TribEmpresasMovSituacao_TribEmpresas");

            entity.HasOne(d => d.EmprSituacao).WithMany(p => p.TribEmpresasMovSituacaos)
                .HasForeignKey(d => d.EmprSituacaoId)
                .HasConstraintName("FK_TribEmpresasMovSituacao_TribEmpresasTipoSituacao");
        });

        modelBuilder.Entity<TribEmpresasMovSituacaotemp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TribEmpresasMovSituacaotemp");

            entity.Property(e => e.EmprSituacaoId).HasColumnName("EmprSituacaoID");
            entity.Property(e => e.MovSitCnpj)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MovSitCNPJ");
            entity.Property(e => e.MovSitData).HasColumnType("datetime");
            entity.Property(e => e.MovSitId).HasColumnName("MovSitID");
            entity.Property(e => e.MovSitMotivo)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.MovSitObservacao)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MovSitProtocoloAnt)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.MovSitRazaoSocial)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MovSitTipo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribEmpresasParamCalc>(entity =>
        {
            entity.HasKey(e => e.ParamCalcId);

            entity.ToTable("TribEmpresasParamCalc");

            entity.Property(e => e.ParamCalcId)
                .ValueGeneratedNever()
                .HasColumnName("ParamCalcID");
            entity.Property(e => e.ParamCalcDescricao).HasColumnType("text");
            entity.Property(e => e.ParamCalcNome)
                .HasMaxLength(25)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribEmpresasPublicidade>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_TribEmpresasPublicidades_1");

            entity.HasIndex(e => new { e.EmprCmc, e.PublicTipoId }, "IX_TribEmpresasPublicidades_EmprCmc_PublicTipoID_inc_PublicValorBaseCalculo_PublicQtdeUnidMed").HasFillFactor(90);

            entity.Property(e => e.NrAreaAberta)
                .HasColumnType("money")
                .HasColumnName("nrAreaAberta");
            entity.Property(e => e.NrAreaCoberta)
                .HasColumnType("money")
                .HasColumnName("nrAreaCoberta");
            entity.Property(e => e.NrVistoriaAno).HasColumnName("nrVistoriaAno");
            entity.Property(e => e.NrVistoriaNumero).HasColumnName("nrVistoriaNumero");
            entity.Property(e => e.PublicQtdeUnidMed)
                .HasDefaultValue(1m)
                .HasComment("Quantidade da unidade de medida")
                .HasColumnType("money");
            entity.Property(e => e.PublicTipoId).HasColumnName("PublicTipoID");
            entity.Property(e => e.PublicValorBaseCalculo)
                .HasDefaultValue(1m)
                .HasComment("Valor que será multiplicado pela Qtde de UF dos Tipos de Calculo e pela qtde de unidade de medida")
                .HasColumnType("money");

            entity.HasOne(d => d.EmprCmcNavigation).WithMany(p => p.TribEmpresasPublicidades)
                .HasForeignKey(d => d.EmprCmc)
                .HasConstraintName("FK_TribEmpresasPublicidades_TribEmpresas");

            entity.HasOne(d => d.PublicTipo).WithMany(p => p.TribEmpresasPublicidades)
                .HasForeignKey(d => d.PublicTipoId)
                .HasConstraintName("FK_TribEmpresasPublicidades_TribTipoPublicidade");
        });

        modelBuilder.Entity<TribEmpresasQuestionario>(entity =>
        {
            entity.HasKey(e => e.Idquestionario).HasName("PK_TribEmpresaQuestionario");

            entity.ToTable("TribEmpresasQuestionario");

            entity.Property(e => e.Idquestionario).HasColumnName("idquestionario");
            entity.Property(e => e.CoIdentificadorPergunta)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("co_identificador_pergunta");
            entity.Property(e => e.Dsresposta)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dsresposta");
            entity.Property(e => e.Nrprotocolo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("nrprotocolo");
        });

        modelBuilder.Entity<TribEmpresasQuestionarioConsultaPrevium>(entity =>
        {
            entity.HasKey(e => e.Idquestionarioconsultaprevia).HasName("PK_TribEmpresaQuestionarioConsultaPrevia");

            entity.Property(e => e.Idquestionarioconsultaprevia).HasColumnName("idquestionarioconsultaprevia");
            entity.Property(e => e.Dsresposta)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dsresposta");
            entity.Property(e => e.Nrperguntajunta)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nrperguntajunta");
            entity.Property(e => e.Nrprotocolo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("nrprotocolo");
        });

        modelBuilder.Entity<TribEmpresasReativaSituacao>(entity =>
        {
            entity.HasKey(e => e.EmprReativaId);

            entity.ToTable("TribEmpresasReativaSituacao");

            entity.Property(e => e.EmprReativaId)
                .ValueGeneratedNever()
                .HasColumnName("EmprReativaID");
            entity.Property(e => e.EmprReatData).HasColumnType("datetime");
            entity.Property(e => e.EmprReatMotivo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MovSitId).HasColumnName("MovSitID");

            entity.HasOne(d => d.MovSit).WithMany(p => p.TribEmpresasReativaSituacaos)
                .HasForeignKey(d => d.MovSitId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribEmpresasReativaSituacao_TribEmpresasMovSituacao");
        });

        modelBuilder.Entity<TribEmpresasRecadastroAutonomo>(entity =>
        {
            entity.HasKey(e => e.RecAutoId).HasName("PK_TribEmpresaRecadastroAutonomo");

            entity.ToTable("TribEmpresasRecadastroAutonomo");

            entity.Property(e => e.RecAutoId).HasColumnName("RecAutoID");
            entity.Property(e => e.DataInclusao).HasColumnType("datetime");
            entity.Property(e => e.RecAutoCep)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("RecAutoCEP");
            entity.Property(e => e.RecAutoComplemento)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RecAutoMotivo)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.RecAutoNumPredial)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribEmpresasRisco>(entity =>
        {
            entity.HasKey(e => e.Idempresarisco);

            entity.ToTable("TribEmpresasRisco");

            entity.Property(e => e.Idempresarisco).HasColumnName("idempresarisco");
            entity.Property(e => e.Atividade)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("atividade");
            entity.Property(e => e.Dsresposta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dsresposta");
            entity.Property(e => e.EmprCmc).HasColumnName("emprCMC");
            entity.Property(e => e.Flinclusaocnae)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Sim")
                .IsFixedLength()
                .HasComment("Indica se a Atividade está sendo incluida por este PRP na empresa")
                .HasColumnName("flinclusaocnae");
            entity.Property(e => e.Idpergunta).HasColumnName("idpergunta");
            entity.Property(e => e.Idresposta).HasColumnName("idresposta");
            entity.Property(e => e.Idrisco).HasColumnName("idrisco");
            entity.Property(e => e.Idsetor).HasColumnName("idsetor");
            entity.Property(e => e.Nrperguntajunta)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nrperguntajunta");
            entity.Property(e => e.Nrprotocolo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("nrprotocolo");
        });

        modelBuilder.Entity<TribEmpresasServico>(entity =>
        {
            entity.HasKey(e => new { e.EmprCmc, e.ServId }).HasName("PK_EmpresasServicos");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("TgTribEmpresasServicosDelete");
                    tb.HasTrigger("TgTribEmpresasServicosInsert");
                    tb.HasTrigger("TgTribEmpresasServicosUpdate");
                });

            entity.HasIndex(e => e.ServId, "IX_TribEmpresasServicos_ServID_inc_EmprCmc");

            entity.Property(e => e.ServId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ServID");
            entity.Property(e => e.ServEmprDataFim).HasColumnType("datetime");
            entity.Property(e => e.ServEmprDataIni).HasColumnType("datetime");
            entity.Property(e => e.ServEmprMotivo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ServEmprPrincipal)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Sim")
                .IsFixedLength()
                .HasComment("Marca se é o serviço principal da empresa.");
            entity.Property(e => e.ServEmprProvisorio)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não");
            entity.Property(e => e.ServEmprTipoIncidencia)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("Tributável")
                .IsFixedLength()
                .HasComment("Imune, Isento, Não Tributável ou Tributável");

            entity.HasOne(d => d.EmprCmcNavigation).WithMany(p => p.TribEmpresasServicos)
                .HasForeignKey(d => d.EmprCmc)
                .HasConstraintName("FK_TribEmpresasServicos_TribEmpresas");

            entity.HasOne(d => d.Serv).WithMany(p => p.TribEmpresasServicos)
                .HasForeignKey(d => d.ServId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribEmpresasServicos_TribTiposServicos");
        });

        modelBuilder.Entity<TribEmpresasServicosVelha>(entity =>
        {
            entity.HasKey(e => new { e.EmprCmc, e.ServId }).HasName("PK_TribEmpresasServicos");

            entity.ToTable("TribEmpresasServicos-VELHA");

            entity.Property(e => e.ServId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ServID");
            entity.Property(e => e.ServEmprDataFim).HasColumnType("datetime");
            entity.Property(e => e.ServEmprDataIni).HasColumnType("datetime");
            entity.Property(e => e.ServEmprMotivo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ServEmprTipoIncidencia)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("Tributável")
                .IsFixedLength()
                .HasComment("Imune, Isento, Não Tributável ou Tributável");
        });

        modelBuilder.Entity<TribEmpresasSimplesMov>(entity =>
        {
            entity.HasKey(e => e.IdsimplesMov);

            entity.ToTable("TribEmpresasSimplesMov");

            entity.HasIndex(e => new { e.EmprCmc, e.Tipo }, "IX_TribEmpresasSimplesMov_EmprCmc_Tipo_inc_Data_Situacao");

            entity.HasIndex(e => e.Tipo, "IX_TribEmpresasSimplesMov_Tipo_inc_EmprCmc_Data_Situacao");

            entity.HasIndex(e => new { e.EmprCmc, e.Data, e.IdsimplesMov }, "_dta_index_TribEmpresasSimplesMov_5_1752222259__K2_K3_K1_4_5_6").HasFillFactor(90);

            entity.Property(e => e.IdsimplesMov).HasColumnName("IDSimplesMov");
            entity.Property(e => e.Data).HasColumnType("datetime");
            entity.Property(e => e.Motivo)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Situacao)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Tipo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.EmprCmcNavigation).WithMany(p => p.TribEmpresasSimplesMovs)
                .HasForeignKey(d => d.EmprCmc)
                .HasConstraintName("FK_TribEmpresasSimplesMov_TribEmpresas");
        });

        modelBuilder.Entity<TribEmpresasSociosProfissionai>(entity =>
        {
            entity.HasKey(e => new { e.EmprCmc, e.ConId }).HasName("PK_TribEmpresasSocios");

            entity.HasIndex(e => new { e.ConId, e.EmprCmc }, "IX_ConID_EmprCmc").HasFillFactor(90);

            entity.HasIndex(e => new { e.Socios, e.ConId, e.EmprCmc }, "IX_TribEmpresasSociosProfissionais_Socios_ConID_EmprCmc").HasFillFactor(90);

            entity.HasIndex(e => new { e.ConId, e.EmprCmc, e.Socios }, "_dta_index_TribEmpresasSociosProfissionais_5_1125735213__K2_K1_K6_3_4_5_7_8_9_10").HasFillFactor(90);

            entity.HasIndex(e => new { e.Socios, e.EmprCmc, e.ConId }, "_dta_index_TribEmpresasSociosProfissionais_5_1125735213__K6_K1_K2_3_4_5_7_8_9_10").HasFillFactor(90);

            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.DsNomeMae)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsNomeMae");
            entity.Property(e => e.DtNascimento)
                .HasColumnType("datetime")
                .HasColumnName("dtNascimento");
            entity.Property(e => e.DtRegistroOrgao)
                .HasColumnType("datetime")
                .HasColumnName("dtRegistroOrgao");
            entity.Property(e => e.NivelProfissional)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("Nenhum")
                .HasComment("Superior , Tecnico ou Nenhum");
            entity.Property(e => e.PrestaServicos)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength();
            entity.Property(e => e.ProtocoloIntegracao)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SocioCota).HasColumnType("money");
            entity.Property(e => e.Socios)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Sim")
                .IsFixedLength();
            entity.Property(e => e.SociosConjuge)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength();
            entity.Property(e => e.SociosDataFim).HasColumnType("datetime");
            entity.Property(e => e.SociosDataIni).HasColumnType("datetime");
            entity.Property(e => e.SociosDomicilioExt)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength()
                .HasComment("informar se o socio tem domicilio no exterior");
            entity.Property(e => e.SociosResponsavel)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength()
                .HasComment("Garatir nos metodos de inclusao, alteracao e remoção que a tabela mantenha somente um único responsável pela empresa.");

            entity.HasOne(d => d.Con).WithMany(p => p.TribEmpresasSociosProfissionais)
                .HasForeignKey(d => d.ConId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribEmpresasSocios_Contribuintes");

            entity.HasOne(d => d.EmprCmcNavigation).WithMany(p => p.TribEmpresasSociosProfissionais)
                .HasForeignKey(d => d.EmprCmc)
                .HasConstraintName("FK_TribEmpresasSocios_TribEmpresas");
        });

        modelBuilder.Entity<TribEmpresasTabela>(entity =>
        {
            entity.HasKey(e => e.TabelaId);

            entity.ToTable("TribEmpresasTabela");

            entity.Property(e => e.TabelaId)
                .ValueGeneratedNever()
                .HasColumnName("TabelaID");
            entity.Property(e => e.TabelaDescricao).HasColumnType("text");
            entity.Property(e => e.TabelaNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TabelaTipo)
                .HasMaxLength(25)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribEmpresasTabelaValorCalc>(entity =>
        {
            entity.HasKey(e => e.TabelaFaixaId);

            entity.ToTable("TribEmpresasTabelaValorCalc");

            entity.Property(e => e.TabelaFaixaId)
                .ValueGeneratedNever()
                .HasColumnName("TabelaFaixaID");
            entity.Property(e => e.TabelaFaixaValor).HasColumnType("decimal(14, 6)");
            entity.Property(e => e.TabelaFaixaValorAte).HasColumnType("decimal(14, 6)");
            entity.Property(e => e.TabelaFaixaValorDe).HasColumnType("decimal(14, 6)");
            entity.Property(e => e.TabelaId).HasColumnName("TabelaID");

            entity.HasOne(d => d.Tabela).WithMany(p => p.TribEmpresasTabelaValorCalcs)
                .HasForeignKey(d => d.TabelaId)
                .HasConstraintName("FK_TribEmpresasTabelaValorCalc_TribEmpresasTabela");
        });

        modelBuilder.Entity<TribEmpresasTempsimple>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TribEmpresasTEMPSimples");

            entity.Property(e => e.Cnpj)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("CNPJ");
            entity.Property(e => e.EmprCmc).HasColumnName("EmprCMC");
        });

        modelBuilder.Entity<TribEmpresasTipo>(entity =>
        {
            entity.HasKey(e => e.EmprTipoId);

            entity.ToTable("TribEmpresasTipo");

            entity.Property(e => e.EmprTipoId)
                .ValueGeneratedNever()
                .HasColumnName("EmprTipoID");
            entity.Property(e => e.EmprTipoDescricao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<TribEmpresasTipoAlvaraTributo>(entity =>
        {
            entity.HasKey(e => new { e.EmprCmc, e.TipoTribId, e.TalvId });

            entity.ToTable("tribEmpresasTipoAlvaraTributos");

            entity.Property(e => e.EmprCmc).HasColumnName("EmprCMC");
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
            entity.Property(e => e.TalvId)
                .HasDefaultValue(1)
                .HasColumnName("TAlvID");

            entity.HasOne(d => d.EmprCmcNavigation).WithMany(p => p.TribEmpresasTipoAlvaraTributos)
                .HasForeignKey(d => d.EmprCmc)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tribEmpresasTipoAlvaraTributos_TribEmpresas");

            entity.HasOne(d => d.Talv).WithMany(p => p.TribEmpresasTipoAlvaraTributos)
                .HasForeignKey(d => d.TalvId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tribEmpresasTipoAlvaraTributos_TribEmpresasTiposAlvara");

            entity.HasOne(d => d.TipoTrib).WithMany(p => p.TribEmpresasTipoAlvaraTributos)
                .HasForeignKey(d => d.TipoTribId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tribEmpresasTipoAlvaraTributos_TribTipoTributos");

            entity.HasOne(d => d.TribEmpresasTributo).WithMany(p => p.TribEmpresasTipoAlvaraTributos)
                .HasForeignKey(d => new { d.EmprCmc, d.TipoTribId })
                .HasConstraintName("FK_tribEmpresasTipoAlvaraTributos_TribEmpresasTributos");
        });

        modelBuilder.Entity<TribEmpresasTipoCaracteristica>(entity =>
        {
            entity.HasKey(e => e.EmprCaracId).HasName("PK_TribEmpresasCaracteristicas");

            entity.Property(e => e.EmprCaracId)
                .ValueGeneratedNever()
                .HasColumnName("EmprCaracID");
            entity.Property(e => e.EmprCaracNome)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<TribEmpresasTipoConstituicao>(entity =>
        {
            entity.HasKey(e => e.EmprConstitId);

            entity.ToTable("TribEmpresasTipoConstituicao");

            entity.Property(e => e.EmprConstitId).HasColumnName("EmprConstitID");
            entity.Property(e => e.EmprConstPublica)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength()
                .HasComment("Parâmetro utilizado para controlar se a empresa pode pagar o ISSQN de acordo com a data de pagamento da nota fiscal no FISS.");
            entity.Property(e => e.EmprConstitAutonomo)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength();
            entity.Property(e => e.EmprConstitEnquadraMe)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength()
                .HasComment("deve ser informado se a empresa se enquadra ou não como micro empresa")
                .HasColumnName("EmprConstitEnquadraME");
            entity.Property(e => e.EmprConstitIsento)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EmprConstitNome)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.EmprConstitTipoIss)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("ISS Normal")
                .HasComment("ISS Normal / ISS Autônomo / Nenhum")
                .HasColumnName("EmprConstitTipoISS");
        });

        modelBuilder.Entity<TribEmpresasTipoEntidade>(entity =>
        {
            entity.HasKey(e => e.EmprTipoEntidadeId);

            entity.ToTable("TribEmpresasTipoEntidade");

            entity.Property(e => e.EmprTipoEntidadeId)
                .ValueGeneratedNever()
                .HasColumnName("EmprTipoEntidadeID");
            entity.Property(e => e.EmprTipoEntidadeDescricao)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribEmpresasTipoRegime>(entity =>
        {
            entity.HasKey(e => e.EmprRegimeId);

            entity.ToTable("TribEmpresasTipoRegime");

            entity.Property(e => e.EmprRegimeId)
                .ValueGeneratedNever()
                .HasColumnName("EmprRegimeID");
            entity.Property(e => e.EmprRegimeDescricao)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.EmprRegimeNome)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribEmpresasTipoSituacao>(entity =>
        {
            entity.HasKey(e => e.EmprSituacaoId);

            entity.ToTable("TribEmpresasTipoSituacao");

            entity.Property(e => e.EmprSituacaoId)
                .ValueGeneratedNever()
                .HasColumnName("EmprSituacaoID");
            entity.Property(e => e.EmprSituacaoAltera)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Sim")
                .IsFixedLength();
            entity.Property(e => e.EmprSituacaoDescricao)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EmprSituacaoEmFuncionamento)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Sim")
                .IsFixedLength();
            entity.Property(e => e.EmprSituacaoImportar)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EmprSituacaoInicial)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TribEmpresasTiposAlvara>(entity =>
        {
            entity.HasKey(e => e.TalvId);

            entity.ToTable("TribEmpresasTiposAlvara");

            entity.Property(e => e.TalvId)
                .ValueGeneratedNever()
                .HasColumnName("TAlvID");
            entity.Property(e => e.EdiId).HasColumnName("ediID");
            entity.Property(e => e.TalvAceitaComoInicial)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength()
                .HasComment("Informa se o tipo de alvará pode ser o primeiro alvara para empresa")
                .HasColumnName("TAlvAceitaComoInicial");
            entity.Property(e => e.TalvDepartamento)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("TAlvDepartamento");
            entity.Property(e => e.TalvDescricao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TAlvDescricao");
            entity.Property(e => e.TalvRespTecnico)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength()
                .HasColumnName("TAlvRespTecnico");
            entity.Property(e => e.TalvRestricoes)
                .IsUnicode(false)
                .HasColumnName("TAlvRestricoes");
            entity.Property(e => e.TalvSecretaria)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("TAlvSecretaria");
            entity.Property(e => e.TalvTituloAlvara)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasDefaultValue("*** FALTOU CADASTRAR ***")
                .HasComment("Titulo que será impresso no Alvará")
                .HasColumnName("TAlvTituloAlvara");
            entity.Property(e => e.TextoId)
                .HasComment("Texto que será impresso no rodapé do Alvara")
                .HasColumnName("TextoID");

            entity.HasOne(d => d.Edi).WithMany(p => p.TribEmpresasTiposAlvaras)
                .HasForeignKey(d => d.EdiId)
                .HasConstraintName("FK_TribEmpresasTiposAlvara_tribEditalLanc");
        });

        modelBuilder.Entity<TribEmpresasTributo>(entity =>
        {
            entity.HasKey(e => new { e.EmprCmc, e.TipoTribId });

            entity.ToTable(tb => tb.HasTrigger("TgTribEmpresasTributosInsert"));

            entity.Property(e => e.EmprCmc).HasColumnName("EmprCMC");
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
            entity.Property(e => e.DataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.GeraDividaAutomaticaNoAlvara)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.HostInclusao)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValueSql("(host_name())");
            entity.Property(e => e.IncideNosDomicilioTributario)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength()
                .HasComment("Informa se o tributo incide nas Empresas Não Estabelecidas");
            entity.Property(e => e.IsenDataFim).HasColumnType("datetime");
            entity.Property(e => e.IsenDataIni).HasColumnType("datetime");
            entity.Property(e => e.IsenMotivo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.Isento)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength()
                .HasComment("Marca se a empresa é isenta do tributo");
            entity.Property(e => e.ParamCalcId).HasColumnName("ParamCalcID");
            entity.Property(e => e.PeriodoIncidencia)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.QtdeBaseCalculo)
                .HasDefaultValue(1m)
                .HasComment("Quantidade da base calculo")
                .HasColumnType("money");
            entity.Property(e => e.QtdeUf)
                .HasComment("Quantidade de UF para calculo do Tributo")
                .HasColumnType("money")
                .HasColumnName("QtdeUF");
            entity.Property(e => e.QtdeUnidMed)
                .HasDefaultValue(1m)
                .HasComment("Quantidade da Unidade de medida")
                .HasColumnType("money");
            entity.Property(e => e.Tcid)
                .HasComment("")
                .HasColumnName("TCID");
            entity.Property(e => e.TipoBxId).HasColumnName("TipoBxID");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");

            entity.HasOne(d => d.EmprCmcNavigation).WithMany(p => p.TribEmpresasTributos)
                .HasForeignKey(d => d.EmprCmc)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribEmpresasTributos_TribEmpresas");

            entity.HasOne(d => d.ParamCalc).WithMany(p => p.TribEmpresasTributos)
                .HasForeignKey(d => d.ParamCalcId)
                .HasConstraintName("FK_TribEmpresasTributos_TribEmpresasParamCalc");

            entity.HasOne(d => d.TipoTrib).WithMany(p => p.TribEmpresasTributos)
                .HasForeignKey(d => d.TipoTribId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribEmpresasTributos_TribTipoTributos");
        });

        modelBuilder.Entity<TribEmpresasTributosBkp2013>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TribEmpresasTributosBKP2013");

            entity.Property(e => e.DataInclusao).HasColumnType("datetime");
            entity.Property(e => e.EmprCmc).HasColumnName("EmprCMC");
            entity.Property(e => e.EmprEnqSimples)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.GeraDividaAutomaticaNoAlvara)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.HostInclusao)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.IncideNosDomicilioTributario)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.IsenDataFim).HasColumnType("datetime");
            entity.Property(e => e.IsenDataIni).HasColumnType("datetime");
            entity.Property(e => e.IsenMotivo)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Isento)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ParamCalcId).HasColumnName("ParamCalcID");
            entity.Property(e => e.PeriodoIncidencia)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.QtdeBaseCalculo).HasColumnType("money");
            entity.Property(e => e.QtdeUf)
                .HasColumnType("money")
                .HasColumnName("QtdeUF");
            entity.Property(e => e.QtdeUnidMed).HasColumnType("money");
            entity.Property(e => e.Tcid).HasColumnName("TCID");
            entity.Property(e => e.TipoBxId).HasColumnName("TipoBxID");
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribEmpresasValorLeito>(entity =>
        {
            entity.HasKey(e => e.LeitosId);

            entity.Property(e => e.LeitosId).HasColumnName("LeitosID");
            entity.Property(e => e.LeitosQtdeUfm)
                .HasColumnType("money")
                .HasColumnName("LeitosQtdeUFM");
        });

        modelBuilder.Entity<TribEmpresasVigilanciaSanitarium>(entity =>
        {
            entity.HasKey(e => e.IdEmprVigilancia);

            entity.Property(e => e.DsObservacao)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("dsObservacao");
            entity.Property(e => e.DtValidade)
                .HasColumnType("datetime")
                .HasColumnName("dtValidade");
            entity.Property(e => e.DtVistoria)
                .HasColumnType("datetime")
                .HasColumnName("dtVistoria");
            entity.Property(e => e.EmprCmc).HasColumnName("EmprCMC");
            entity.Property(e => e.NrAno).HasColumnName("nrAno");
            entity.Property(e => e.NrNumero).HasColumnName("nrNumero");

            entity.HasOne(d => d.EmprCmcNavigation).WithMany(p => p.TribEmpresasVigilanciaSanitaria)
                .HasForeignKey(d => d.EmprCmc)
                .HasConstraintName("FK_TribEmpresasVigilanciaSanitaria_TribEmpresas");
        });

        modelBuilder.Entity<TribEnquadramentoNotificacao>(entity =>
        {
            entity.HasKey(e => e.IdNotificacao);

            entity.ToTable("TribEnquadramentoNotificacao");

            entity.Property(e => e.ContadorId).HasColumnName("ContadorID");
            entity.Property(e => e.DsLogin)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsLogin");
            entity.Property(e => e.DsSituacao)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dsSituacao");
            entity.Property(e => e.DtInclusao)
                .HasColumnType("datetime")
                .HasColumnName("dtInclusao");
            entity.Property(e => e.NrAnoNotificacao).HasColumnName("nrAnoNotificacao");
            entity.Property(e => e.NrNotificacao).HasColumnName("nrNotificacao");
            entity.Property(e => e.TextoId).HasColumnName("TextoID");
            entity.Property(e => e.TpNotificacao)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tpNotificacao");

            entity.HasOne(d => d.Contador).WithMany(p => p.TribEnquadramentoNotificacaos)
                .HasForeignKey(d => d.ContadorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribEnquadramentoNotificacao_TribContador");
        });

        modelBuilder.Entity<TribEnquadramentoNotificacaoEmpresa>(entity =>
        {
            entity.HasKey(e => new { e.IdNotificacao, e.EnquadrId });

            entity.Property(e => e.EnquadrId).HasColumnName("EnquadrID");
            entity.Property(e => e.FlVerificado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flVerificado");

            entity.HasOne(d => d.Enquadr).WithMany(p => p.TribEnquadramentoNotificacaoEmpresas)
                .HasForeignKey(d => d.EnquadrId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribEnquadramentoNotificacaoEmpresas_TribEmpresasEnquadramento");

            entity.HasOne(d => d.IdNotificacaoNavigation).WithMany(p => p.TribEnquadramentoNotificacaoEmpresas)
                .HasForeignKey(d => d.IdNotificacao)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribEnquadramentoNotificacaoEmpresas_TribEquadramentoNotificacao");
        });

        modelBuilder.Entity<TribEquipamento>(entity =>
        {
            entity.HasKey(e => e.EquipId);

            entity.ToTable(tb => tb.HasTrigger("TgTribEquipamentosUpdate"));

            entity.Property(e => e.EquipId).HasColumnName("EquipID");
            entity.Property(e => e.EquipFator).HasColumnType("money");
            entity.Property(e => e.EquipNome)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribErrosArquivoIptu>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TribErrosArquivoIPTU");

            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.Erro)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribErrosCalculoEmpresa>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.DescricaoErro)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("descricaoErro");
            entity.Property(e => e.EmprCmc).HasColumnName("EmprCMC");
            entity.Property(e => e.Erro).HasColumnType("money");
        });

        modelBuilder.Entity<TribErrosCalculoImob>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TribErrosCalculoImob");

            entity.Property(e => e.DescricaoErro)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.Erro).HasColumnType("money");
        });

        modelBuilder.Entity<TribErrosFunco>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.TribDescricao)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.TribErro).HasColumnType("money");
            entity.Property(e => e.TribMotivoErro)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribEsquadria>(entity =>
        {
            entity.HasKey(e => e.EsquadriasId);

            entity.ToTable(tb => tb.HasTrigger("TgTribEsquadriasUpdate"));

            entity.Property(e => e.EsquadriasId)
                .ValueGeneratedNever()
                .HasColumnName("EsquadriasID");
            entity.Property(e => e.EsquadriasFator).HasColumnType("money");
            entity.Property(e => e.EsquadriasNome)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribEstadoConservacao>(entity =>
        {
            entity.HasKey(e => e.EstConservId);

            entity.ToTable("TribEstadoConservacao");

            entity.Property(e => e.EstConservId)
                .ValueGeneratedNever()
                .HasColumnName("EstConservID");
            entity.Property(e => e.EstConservFator).HasColumnType("money");
            entity.Property(e => e.EstConservNome)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribEstornoPagamento>(entity =>
        {
            entity.HasKey(e => e.EstPagId);

            entity.ToTable("TribEstornoPagamento");

            entity.HasIndex(e => e.ConIddivida, "IX_ConIDDivida").HasFillFactor(90);

            entity.HasIndex(e => e.DivEmpId, "IX_DivEmpID").HasFillFactor(90);

            entity.HasIndex(e => e.ImoIddivida, "IX_ImoIDDivida").HasFillFactor(90);

            entity.Property(e => e.EstPagId).HasColumnName("EstPagID");
            entity.Property(e => e.ConIddivida).HasColumnName("ConIDDivida");
            entity.Property(e => e.ConIddividaGerada)
                .HasComment("ID da nova Divida gerada")
                .HasColumnName("ConIDDividaGerada");
            entity.Property(e => e.ConvenioId).HasColumnName("ConvenioID");
            entity.Property(e => e.DataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DivEmpId).HasColumnName("DivEmpID");
            entity.Property(e => e.DivEmpIdgerada)
                .HasComment("ID da nova Divida gerada")
                .HasColumnName("DivEmpIDGerada");
            entity.Property(e => e.EstPagDataEstorno).HasColumnType("datetime");
            entity.Property(e => e.EstPagMotivo)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ImoIddivida)
                .HasComment("Código de identificação da dívida.")
                .HasColumnName("ImoIDDivida");
            entity.Property(e => e.ImoIddividaGerada)
                .HasComment("ID da nova Divida gerada")
                .HasColumnName("ImoIDDividaGerada");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");

            entity.HasOne(d => d.ConIddividaNavigation).WithMany(p => p.TribEstornoPagamentos)
                .HasForeignKey(d => d.ConIddivida)
                .HasConstraintName("FK_TribEstornoPagamento_TribDividasContribuinte");

            entity.HasOne(d => d.Convenio).WithMany(p => p.TribEstornoPagamentos)
                .HasForeignKey(d => d.ConvenioId)
                .HasConstraintName("FK_TribEstornoPagamento_ConvenioBanco");

            entity.HasOne(d => d.DivEmp).WithMany(p => p.TribEstornoPagamentos)
                .HasForeignKey(d => d.DivEmpId)
                .HasConstraintName("FK_TribEstornoPagamento_TribDividasEmpresas");

            entity.HasOne(d => d.ImoIddividaNavigation).WithMany(p => p.TribEstornoPagamentos)
                .HasForeignKey(d => d.ImoIddivida)
                .HasConstraintName("FK_TribEstornoPagamento_TribDividasImo");
        });

        modelBuilder.Entity<TribEstruturaParede>(entity =>
        {
            entity.HasKey(e => e.EstrutId);

            entity.ToTable("TribEstruturaParede", tb => tb.HasTrigger("TgTribEstruturaParedeUpdate"));

            entity.Property(e => e.EstrutId).HasColumnName("EstrutID");
            entity.Property(e => e.EstrutFator).HasColumnType("money");
            entity.Property(e => e.EstrutNome)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribExtratoUnificadoDetalhe>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TribExtratoUnificadoDetalhe");

            entity.HasIndex(e => e.Sessao, "IX_Sessao").HasFillFactor(90);

            entity.HasIndex(e => new { e.Sessao, e.TipoDivida }, "_dta_index_TribExtratoUnificadoDetalhe_7_219460156__K1_K10_2_3").HasFillFactor(90);

            entity.Property(e => e.Cda)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CDA");
            entity.Property(e => e.DataBaixa).HasColumnType("datetime");
            entity.Property(e => e.Iddivida).HasColumnName("IDDivida");
            entity.Property(e => e.Idinscricao).HasColumnName("IDInscricao");
            entity.Property(e => e.NrProcesso)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Parcela)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ParcelaUnica)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Revisão)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Sessao)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TipoBaixa)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TipoCadastro)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TipoDivida)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Tributo)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Vencimento).HasColumnType("datetime");
            entity.Property(e => e.VlrBaixa).HasColumnType("money");
            entity.Property(e => e.VlrCorrecao).HasColumnType("money");
            entity.Property(e => e.VlrDesconto).HasColumnType("money");
            entity.Property(e => e.VlrJuros).HasColumnType("money");
            entity.Property(e => e.VlrMulta).HasColumnType("money");
            entity.Property(e => e.VlrMultaDa)
                .HasColumnType("money")
                .HasColumnName("VlrMultaDA");
            entity.Property(e => e.VlrPrincipal).HasColumnType("money");
        });

        modelBuilder.Entity<TribExtratoUnificadoDevolucaoDivida>(entity =>
        {
            entity.HasNoKey();

            entity.HasIndex(e => e.Sessao, "IX_Sessao").HasFillFactor(90);

            entity.Property(e => e.DataBaixa).HasColumnType("datetime");
            entity.Property(e => e.DataDevolucao).HasColumnType("datetime");
            entity.Property(e => e.Idinscricao).HasColumnName("IDInscricao");
            entity.Property(e => e.Inscricao)
                .HasMaxLength(14)
                .IsUnicode(false);
            entity.Property(e => e.Parcela)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Requerente)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Sessao)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TipoBaixa)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TipoCadastro)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TipoDivida)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Tributo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Vencimento).HasColumnType("datetime");
            entity.Property(e => e.VlrBaixa).HasColumnType("money");
            entity.Property(e => e.VlrDevolucao).HasColumnType("money");
            entity.Property(e => e.VlrDivida).HasColumnType("money");
        });

        modelBuilder.Entity<TribExtratoUnificadoHeader>(entity =>
        {
            entity.HasKey(e => new { e.Sessao, e.TipoCadastro, e.Idinscricao });

            entity.ToTable("TribExtratoUnificadoHeader");

            entity.HasIndex(e => new { e.Sessao, e.Cpfcnpj }, "_dta_index_TribExtratoUnificadoHeader_7_879602472__K1_K5").HasFillFactor(90);

            entity.Property(e => e.Sessao)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TipoCadastro)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Idinscricao).HasColumnName("IDInscricao");
            entity.Property(e => e.BairroContrib)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.BairroLoteamento)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Caracteristica)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Cidade)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Cnpj)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CNPJ");
            entity.Property(e => e.CoResponsavel)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.Complemento)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.ContinuacaoTerreno)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cpfcnpj)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("CPFCNPJ");
            entity.Property(e => e.Endereco)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.EnderecoContrib)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.InscricaoImobiliaria)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Matricula)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Nome)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.NomeFantasia)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Propietario)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.RazaoSocial)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.RefAnterior)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Regiao)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Responsavel)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.Situacao)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Uf)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("UF");
        });

        modelBuilder.Entity<TribExtratoUnificadoTap>(entity =>
        {
            entity.HasNoKey();

            entity.HasIndex(e => e.Sessao, "IX_Sessao").HasFillFactor(90);

            entity.Property(e => e.DataTap)
                .HasColumnType("datetime")
                .HasColumnName("DataTAP");
            entity.Property(e => e.Idinscricao).HasColumnName("IDInscricao");
            entity.Property(e => e.Idtap).HasColumnName("IDTAP");
            entity.Property(e => e.InscrDestino)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.InscrOrigem)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Inscricao)
                .HasMaxLength(14)
                .IsUnicode(false);
            entity.Property(e => e.LeiTap)
                .HasMaxLength(12)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LeiTAP");
            entity.Property(e => e.NumeroTap).HasColumnName("NumeroTAP");
            entity.Property(e => e.Requerente)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Sessao)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Situacao)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TipoCadastro)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribFaixaEnquadramento>(entity =>
        {
            entity.HasKey(e => new { e.FxEnquadrFaixa, e.TipoTribId });

            entity.ToTable("TribFaixaEnquadramento");

            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
            entity.Property(e => e.FxEnquadrDe)
                .HasDefaultValue(0m)
                .HasColumnType("money")
                .HasColumnName("FxEnquadrDE");
            entity.Property(e => e.FxEnquadrDesconto)
                .HasDefaultValue(0m)
                .HasColumnType("money");
            entity.Property(e => e.FxEnquadraAte)
                .HasDefaultValue(0m)
                .HasColumnType("money")
                .HasColumnName("FxEnquadraATE");
            entity.Property(e => e.FxSigla)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TipoBxId)
                .HasComment("Tipo de baixa utilizado para casos que possui 100% de beneficio na taxa.")
                .HasColumnName("TipoBxID");
            entity.Property(e => e.TipoTribIddesconto)
                .HasComment("Tributo que sera gerado na composição dando o desconto cfme enquadramento")
                .HasColumnName("TipoTribIDDesconto");
        });

        modelBuilder.Entity<TribFatorCorArea>(entity =>
        {
            entity.HasKey(e => e.FatCorAreaId);

            entity.ToTable("TribFatorCorArea");

            entity.Property(e => e.FatCorAreaId)
                .ValueGeneratedNever()
                .HasColumnName("FatCorAreaID");
            entity.Property(e => e.FatCorAreaAte)
                .HasDefaultValue(0m)
                .HasColumnType("money");
            entity.Property(e => e.FatCorAreaDe)
                .HasDefaultValue(0m)
                .HasColumnType("money");
            entity.Property(e => e.FatCorAreaFator)
                .HasDefaultValue(0m)
                .HasColumnType("money");
        });

        modelBuilder.Entity<TribFatorK>(entity =>
        {
            entity.HasKey(e => e.FatorKid);

            entity.ToTable("TribFatorK");

            entity.Property(e => e.FatorKid).HasColumnName("FatorKID");
            entity.Property(e => e.FatorKnome)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("FatorKNome");
            entity.Property(e => e.FatorKvalor)
                .HasColumnType("money")
                .HasColumnName("FatorKValor");
        });

        modelBuilder.Entity<TribFiscApreenso>(entity =>
        {
            entity.HasKey(e => e.ApreId).HasName("PK_TribFiscApreensao");

            entity.Property(e => e.ApreId)
                .ValueGeneratedNever()
                .HasColumnName("ApreID");
            entity.Property(e => e.ApreData).HasColumnType("datetime");
            entity.Property(e => e.ApreDepositario)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ApreItens).HasColumnType("text");
            entity.Property(e => e.ApreRazao).HasColumnType("text");
            entity.Property(e => e.DataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.FiscalId).HasColumnName("FiscalID");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");
            entity.Property(e => e.VistId).HasColumnName("VistID");

            entity.HasOne(d => d.Fiscal).WithMany(p => p.TribFiscApreensos)
                .HasForeignKey(d => d.FiscalId)
                .HasConstraintName("FK_TribFiscApreensoes_TribFiscFiscais");

            entity.HasOne(d => d.Vist).WithMany(p => p.TribFiscApreensos)
                .HasForeignKey(d => d.VistId)
                .HasConstraintName("FK_TribFiscApreensoes_TribFiscVistorias");
        });

        modelBuilder.Entity<TribFiscAssunto>(entity =>
        {
            entity.HasKey(e => e.IdAssunto);

            entity.ToTable("TribFiscAssunto");

            entity.Property(e => e.IdAssunto).HasColumnName("idAssunto");
            entity.Property(e => e.DsAssunto)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dsAssunto");
            entity.Property(e => e.TipoFiscId).HasColumnName("TipoFiscID");
        });

        modelBuilder.Entity<TribFiscAtributo>(entity =>
        {
            entity.HasKey(e => e.IdAtributo);

            entity.ToTable("TribFiscAtributo");

            entity.Property(e => e.IdAtributo)
                .ValueGeneratedNever()
                .HasComment("Código de identificação dos atributos.")
                .HasColumnName("idAtributo");
            entity.Property(e => e.NmAtributo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Nome do atributo.")
                .HasColumnName("nmAtributo");
        });

        modelBuilder.Entity<TribFiscAutoInfracaoPaf>(entity =>
        {
            entity.HasKey(e => e.Pafid);

            entity.ToTable("TribFiscAutoInfracaoPAF");

            entity.Property(e => e.Pafid)
                .ValueGeneratedNever()
                .HasColumnName("PAFID");
            entity.Property(e => e.AutoId).HasColumnName("AutoID");
            entity.Property(e => e.Pafinstancia).HasColumnName("PAFInstancia");
            entity.Property(e => e.Pafparecer)
                .HasColumnType("text")
                .HasColumnName("PAFParecer");
            entity.Property(e => e.Pafsituacao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PAFSituacao");
            entity.Property(e => e.ProtId).HasColumnName("ProtID");

            entity.HasOne(d => d.Auto).WithMany(p => p.TribFiscAutoInfracaoPafs)
                .HasForeignKey(d => d.AutoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribFiscAutoInfracaoPAF_TribFiscAutoInfracoes");
        });

        modelBuilder.Entity<TribFiscAutoInfracaoPafobjeto>(entity =>
        {
            entity.HasKey(e => new { e.Pafid, e.ObjetoId });

            entity.ToTable("TribFiscAutoInfracaoPAFObjetos");

            entity.Property(e => e.Pafid).HasColumnName("PAFID");

            entity.HasOne(d => d.Paf).WithMany(p => p.TribFiscAutoInfracaoPafobjetos)
                .HasForeignKey(d => d.Pafid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribFiscAutoInfracaoPAFObjetos_TribFiscAutoInfracaoPAF");
        });

        modelBuilder.Entity<TribFiscAutoInfraco>(entity =>
        {
            entity.HasKey(e => e.AutoId).HasName("PK_TribFiscAutoInfracao");

            entity.Property(e => e.AutoId)
                .ValueGeneratedNever()
                .HasColumnName("AutoID");
            entity.Property(e => e.AutoData).HasColumnType("datetime");
            entity.Property(e => e.AutoDataNotificado).HasColumnType("datetime");
            entity.Property(e => e.AutoDescricao).HasColumnType("text");
            entity.Property(e => e.AutoMotivoSituacao)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.AutoSituacao)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.AutoValor).HasColumnType("money");
            entity.Property(e => e.DataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.FiscalId).HasColumnName("FiscalID");
            entity.Property(e => e.Idmoeda).HasColumnName("IDMoeda");
            entity.Property(e => e.NotifId).HasColumnName("NotifID");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");

            entity.HasOne(d => d.Fiscal).WithMany(p => p.TribFiscAutoInfracos)
                .HasForeignKey(d => d.FiscalId)
                .HasConstraintName("FK_TribFiscAutoInfracoes_TribFiscFiscais");

            entity.HasOne(d => d.Notif).WithMany(p => p.TribFiscAutoInfracos)
                .HasForeignKey(d => d.NotifId)
                .HasConstraintName("FK_TribFiscAutoInfracoes_TribFiscNotificacoes");
        });

        modelBuilder.Entity<TribFiscAutoInfracoesAnexo>(entity =>
        {
            entity.HasKey(e => e.Anexid);

            entity.ToTable("TribFiscAutoInfracoesAnexo");

            entity.Property(e => e.Anexid).ValueGeneratedNever();
            entity.Property(e => e.AnexObs)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.AutoId).HasColumnName("AutoID");

            entity.HasOne(d => d.Auto).WithMany(p => p.TribFiscAutoInfracoesAnexos)
                .HasForeignKey(d => d.AutoId)
                .HasConstraintName("FK_TribFiscAutoInfracoesAnexo_TribFiscAutoInfracoes");

            entity.HasOne(d => d.Objeto).WithMany(p => p.TribFiscAutoInfracoesAnexos)
                .HasForeignKey(d => d.ObjetoId)
                .HasConstraintName("FK_TribFiscAutoInfracoesAnexo_TribObjetos");
        });

        modelBuilder.Entity<TribFiscAutoInfracoesDivida>(entity =>
        {
            entity.HasKey(e => e.AutDivId);

            entity.Property(e => e.AutDivId)
                .ValueGeneratedNever()
                .HasColumnName("AutDivID");
            entity.Property(e => e.AutDivDataCiencia).HasColumnType("datetime");
            entity.Property(e => e.AutoId).HasColumnName("AutoID");
            entity.Property(e => e.ConIddivida).HasColumnName("ConIDDivida");
            entity.Property(e => e.DivEmpId).HasColumnName("DivEmpID");
            entity.Property(e => e.ImoIddivida).HasColumnName("ImoIDDivida");
        });

        modelBuilder.Entity<TribFiscAutoInfracoesDividasOrigem>(entity =>
        {
            entity.HasKey(e => e.AutOrigId);

            entity.ToTable("TribFiscAutoInfracoesDividasOrigem");

            entity.Property(e => e.AutOrigId)
                .ValueGeneratedNever()
                .HasColumnName("AutOrigID");
            entity.Property(e => e.AutoId).HasColumnName("AutoID");
            entity.Property(e => e.ConIddivida).HasColumnName("ConIDDivida");
            entity.Property(e => e.DivEmpId).HasColumnName("DivEmpID");
            entity.Property(e => e.ImoIddivida).HasColumnName("ImoIDDivida");
        });

        modelBuilder.Entity<TribFiscAutoInfracoesItensVistorium>(entity =>
        {
            entity.HasKey(e => new { e.AutoId, e.ItemVistId });

            entity.Property(e => e.AutoId).HasColumnName("AutoID");
            entity.Property(e => e.ItemVistId).HasColumnName("ItemVistID");
            entity.Property(e => e.AutoItemVistObs)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ConIddivida).HasColumnName("ConIDDivida");
            entity.Property(e => e.DivEmpId).HasColumnName("DivEmpID");
            entity.Property(e => e.ImoIddivida).HasColumnName("ImoIDDivida");

            entity.HasOne(d => d.Auto).WithMany(p => p.TribFiscAutoInfracoesItensVistoria)
                .HasForeignKey(d => d.AutoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribFiscAutoInfracoesItensVistoria_TribFiscAutoInfracoes");

            entity.HasOne(d => d.ItemVist).WithMany(p => p.TribFiscAutoInfracoesItensVistoria)
                .HasForeignKey(d => d.ItemVistId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribFiscAutoInfracoesItensVistoria_TribFiscItensVistoria");
        });

        modelBuilder.Entity<TribFiscAutoLancamento>(entity =>
        {
            entity.HasKey(e => e.AutoLanId);

            entity.Property(e => e.AutoLanId).HasColumnName("AutoLanID");
            entity.Property(e => e.AutoLanData).HasColumnType("datetime");
            entity.Property(e => e.AutoLanDataNotificado).HasColumnType("datetime");
            entity.Property(e => e.AutoLanDescricao).HasColumnType("text");
            entity.Property(e => e.AutoLanMotivoSituacao)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.AutoLanSituacao)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.AutoLanValor).HasColumnType("money");
            entity.Property(e => e.DataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.FiscalId).HasColumnName("FiscalID");
            entity.Property(e => e.Idmoeda).HasColumnName("IDMoeda");
            entity.Property(e => e.NotifId).HasColumnName("NotifID");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");
        });

        modelBuilder.Entity<TribFiscAutoLancamentosDivida>(entity =>
        {
            entity.HasKey(e => e.AutLanDivId);

            entity.Property(e => e.AutLanDivId).HasColumnName("AutLanDivID");
            entity.Property(e => e.AutLanDivDataCiencia).HasColumnType("datetime");
            entity.Property(e => e.AutoLanId).HasColumnName("AutoLanID");
            entity.Property(e => e.ConIddivida).HasColumnName("ConIDDivida");
            entity.Property(e => e.DivEmpId).HasColumnName("DivEmpID");
            entity.Property(e => e.ImoIddivida).HasColumnName("ImoIDDivida");
        });

        modelBuilder.Entity<TribFiscAutoLancamentosDividasOrigem>(entity =>
        {
            entity.HasKey(e => e.AutLanOrigId);

            entity.ToTable("TribFiscAutoLancamentosDividasOrigem");

            entity.Property(e => e.AutLanOrigId).HasColumnName("AutLanOrigID");
            entity.Property(e => e.AutoLanId).HasColumnName("AutoLanID");
            entity.Property(e => e.ConIddivida).HasColumnName("ConIDDivida");
            entity.Property(e => e.DivEmpId).HasColumnName("DivEmpID");
            entity.Property(e => e.ImoIddivida).HasColumnName("ImoIDDivida");
        });

        modelBuilder.Entity<TribFiscCategoriaEstabelecimento>(entity =>
        {
            entity.HasKey(e => e.CategEstId);

            entity.ToTable("TribFiscCategoriaEstabelecimento");

            entity.Property(e => e.CategEstId)
                .ValueGeneratedNever()
                .HasColumnName("CategEstID");
            entity.Property(e => e.CategEstCodigo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CategEstDescricao)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribFiscCategoriaEstabelecimentoCnae>(entity =>
        {
            entity.HasKey(e => new { e.CategEstId, e.Atividade });

            entity.ToTable("TribFiscCategoriaEstabelecimentoCNAE");

            entity.Property(e => e.CategEstId).HasColumnName("CategEstID");
            entity.Property(e => e.Atividade)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.CategEst).WithMany(p => p.TribFiscCategoriaEstabelecimentoCnaes)
                .HasForeignKey(d => d.CategEstId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribFiscCategoriaEstabelecimentoCNAE_TribFiscCategoriaEstabelecimento");
        });

        modelBuilder.Entity<TribFiscDevoluco>(entity =>
        {
            entity.HasKey(e => e.DevId);

            entity.Property(e => e.DevId)
                .ValueGeneratedNever()
                .HasColumnName("DevID");
            entity.Property(e => e.ApreId).HasColumnName("ApreID");
            entity.Property(e => e.DataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DevData).HasColumnType("datetime");
            entity.Property(e => e.DevItens).HasColumnType("text");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");

            entity.HasOne(d => d.Apre).WithMany(p => p.TribFiscDevolucos)
                .HasForeignKey(d => d.ApreId)
                .HasConstraintName("FK_TribFiscDevolucoes_TribFiscApreensoes");
        });

        modelBuilder.Entity<TribFiscDocumento>(entity =>
        {
            entity.HasKey(e => e.FiscIddocumento);

            entity.Property(e => e.FiscIddocumento)
                .ValueGeneratedNever()
                .HasColumnName("FiscIDDocumento");
            entity.Property(e => e.FiscNomeDocumento)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.FiscSituacao)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribFiscEmbargo>(entity =>
        {
            entity.HasKey(e => e.EmbId).HasName("PK_TribFiscEmbargo");

            entity.Property(e => e.EmbId)
                .ValueGeneratedNever()
                .HasColumnName("EmbID");
            entity.Property(e => e.DataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.EmbDataHora).HasColumnType("datetime");
            entity.Property(e => e.EmbObs)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.FiscalId).HasColumnName("FiscalID");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");
            entity.Property(e => e.VistId).HasColumnName("VistID");

            entity.HasOne(d => d.Fiscal).WithMany(p => p.TribFiscEmbargoes)
                .HasForeignKey(d => d.FiscalId)
                .HasConstraintName("FK_TribFiscEmbargos_TribFiscFiscais");

            entity.HasOne(d => d.Vist).WithMany(p => p.TribFiscEmbargoes)
                .HasForeignKey(d => d.VistId)
                .HasConstraintName("FK_TribFiscEmbargos_TribFiscVistorias");
        });

        modelBuilder.Entity<TribFiscFiscai>(entity =>
        {
            entity.HasKey(e => e.FiscalId);

            entity.Property(e => e.FiscalId).HasColumnName("FiscalID");
            entity.Property(e => e.FiscalNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FlExpedirOs).HasColumnName("flExpedirOS");
            entity.Property(e => e.FlSituacao).HasColumnName("flSituacao");
            entity.Property(e => e.TipoFiscId).HasColumnName("TipoFiscID");

            entity.HasOne(d => d.Serv).WithMany(p => p.TribFiscFiscais)
                .HasForeignKey(d => d.ServId)
                .HasConstraintName("FK_TribFiscFiscais_Servidores");

            entity.HasOne(d => d.TipoFisc).WithMany(p => p.TribFiscFiscais)
                .HasForeignKey(d => d.TipoFiscId)
                .HasConstraintName("FK_TribFiscFiscais_TribFiscTipoFiscal");
        });

        modelBuilder.Entity<TribFiscGrupoSetor>(entity =>
        {
            entity.HasKey(e => e.GrupSetId);

            entity.ToTable("TribFiscGrupoSetor");

            entity.Property(e => e.GrupSetId)
                .ValueGeneratedNever()
                .HasColumnName("GrupSetID");
            entity.Property(e => e.GrupSetNome)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribFiscInterdico>(entity =>
        {
            entity.HasKey(e => e.InterId).HasName("PK_TribFiscInterdicao");

            entity.Property(e => e.InterId)
                .ValueGeneratedNever()
                .HasColumnName("InterID");
            entity.Property(e => e.DataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.FiscalId).HasColumnName("FiscalID");
            entity.Property(e => e.InterData).HasColumnType("datetime");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");
            entity.Property(e => e.VistId).HasColumnName("VistID");

            entity.HasOne(d => d.Fiscal).WithMany(p => p.TribFiscInterdicos)
                .HasForeignKey(d => d.FiscalId)
                .HasConstraintName("FK_TribFiscInterdicoes_TribFiscFiscais");

            entity.HasOne(d => d.Vist).WithMany(p => p.TribFiscInterdicos)
                .HasForeignKey(d => d.VistId)
                .HasConstraintName("FK_TribFiscInterdicoes_TribFiscVistorias");
        });

        modelBuilder.Entity<TribFiscItensVistoriaRelatorio>(entity =>
        {
            entity.HasKey(e => new { e.ItemVistId, e.FiscRelId });

            entity.Property(e => e.ItemVistId).HasColumnName("ItemVistID");
            entity.Property(e => e.FiscRelId).HasColumnName("FiscRelID");
        });

        modelBuilder.Entity<TribFiscItensVistoriaTributo>(entity =>
        {
            entity.HasKey(e => new { e.ItemVistId, e.TipoTribId }).HasName("PK_TribFiscItensTipoVistoriaTributos");

            entity.Property(e => e.ItemVistId).HasColumnName("ItemVistID");
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
            entity.Property(e => e.DataInclusao).HasColumnType("datetime");
            entity.Property(e => e.Idmoeda).HasColumnName("IDMoeda");
            entity.Property(e => e.TipoTribIddesconto).HasColumnName("TipoTribIDDesconto");
            entity.Property(e => e.TribItemVistDescontoUnica).HasColumnType("money");
            entity.Property(e => e.TribItemVistGeraUnica)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TribItemVistValor).HasColumnType("money");
            entity.Property(e => e.TribItemVistValorLimite).HasColumnType("money");
            entity.Property(e => e.TribItemVistValorRef).HasColumnType("money");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.ItemVist).WithMany(p => p.TribFiscItensVistoriaTributos)
                .HasForeignKey(d => d.ItemVistId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribFiscItensVistoriaTributos_TribFiscItensVistoria");

            entity.HasOne(d => d.TipoTrib).WithMany(p => p.TribFiscItensVistoriaTributos)
                .HasForeignKey(d => d.TipoTribId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribFiscItensVistoriaTributos_TribTipoTributos");
        });

        modelBuilder.Entity<TribFiscItensVistorium>(entity =>
        {
            entity.HasKey(e => e.ItemVistId).HasName("PK_TribFiscItensTipoVistoria");

            entity.Property(e => e.ItemVistId)
                .ValueGeneratedNever()
                .HasColumnName("ItemVistID");
            entity.Property(e => e.ItemVistGeraNotificacao)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ItemVistNome)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ItemVistNotaFiscal)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ItemVistTipoInformacaoAdicional)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ItemVistVistoria)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Sim")
                .IsFixedLength();
            entity.Property(e => e.TextoAutoId).HasColumnName("textoAutoID");
            entity.Property(e => e.Textoid).HasColumnName("textoid");

            entity.HasOne(d => d.TipoVist).WithMany(p => p.TribFiscItensVistoria)
                .HasForeignKey(d => d.TipoVistId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribFiscItensVistoria_TribFiscTiposVistoria");

            entity.HasMany(d => d.LeiComps).WithMany(p => p.ItemVists)
                .UsingEntity<Dictionary<string, object>>(
                    "TribFiscItensVistoriaCompLei",
                    r => r.HasOne<TribLegislacaoComponente>().WithMany()
                        .HasForeignKey("LeiCompId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_TribFiscItensVistoriaCompLei_TribLegislacaoComponentes"),
                    l => l.HasOne<TribFiscItensVistorium>().WithMany()
                        .HasForeignKey("ItemVistId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_TribFiscItensVistoriaCompLei_TribFiscItensVistoria"),
                    j =>
                    {
                        j.HasKey("ItemVistId", "LeiCompId").HasName("PK_TribFiscItensVistCompLei");
                        j.ToTable("TribFiscItensVistoriaCompLei");
                        j.IndexerProperty<int>("ItemVistId").HasColumnName("ItemVistID");
                        j.IndexerProperty<int>("LeiCompId").HasColumnName("LeiCompID");
                    });
        });

        modelBuilder.Entity<TribFiscMedicamento>(entity =>
        {
            entity.HasKey(e => e.MedId);

            entity.ToTable("TribFiscMedicamento");

            entity.Property(e => e.MedId)
                .ValueGeneratedNever()
                .HasColumnName("MedID");
            entity.Property(e => e.MedNome)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MedObs).HasColumnType("text");
        });

        modelBuilder.Entity<TribFiscNotaFiscaFarmacium>(entity =>
        {
            entity.HasKey(e => e.Nfid);

            entity.Property(e => e.Nfid)
                .ValueGeneratedNever()
                .HasColumnName("NFID");
            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.Nfdata)
                .HasColumnType("datetime")
                .HasColumnName("NFData");
            entity.Property(e => e.Nfnumero).HasColumnName("NFNumero");
        });

        modelBuilder.Entity<TribFiscNotaFiscal>(entity =>
        {
            entity.HasKey(e => e.Nfid);

            entity.ToTable("TribFiscNotaFiscal");

            entity.Property(e => e.Nfid).HasColumnName("NFID");
            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.ModNotaId).HasColumnName("ModNotaID");
            entity.Property(e => e.NatOpId).HasColumnName("NatOpID");
            entity.Property(e => e.NfaliquotaConfer)
                .HasColumnType("money")
                .HasColumnName("NFAliquotaConfer");
            entity.Property(e => e.NfaliquotaDevida)
                .HasColumnType("money")
                .HasColumnName("NFAliquotaDevida");
            entity.Property(e => e.NfaliquotaImpNf)
                .HasColumnType("money")
                .HasColumnName("NFAliquotaImpNF");
            entity.Property(e => e.Nfdata)
                .HasColumnType("datetime")
                .HasColumnName("NFData");
            entity.Property(e => e.NfdataPgto)
                .HasColumnType("datetime")
                .HasColumnName("NFDataPgto");
            entity.Property(e => e.Nfidorigem).HasColumnName("NFIDOrigem");
            entity.Property(e => e.Nfnumero).HasColumnName("NFNumero");
            entity.Property(e => e.Nfobs)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("NFObs");
            entity.Property(e => e.Nfsistema)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NFSistema");
            entity.Property(e => e.NfvalorDevido)
                .HasColumnType("money")
                .HasColumnName("NFValorDevido");
            entity.Property(e => e.NfvalorImpConfer)
                .HasColumnType("money")
                .HasColumnName("NFValorImpConfer");
            entity.Property(e => e.NfvalorImpNf)
                .HasColumnType("money")
                .HasColumnName("NFValorImpNF");
            entity.Property(e => e.NfvalorSerNf)
                .HasColumnType("money")
                .HasColumnName("NFValorSerNF");
            entity.Property(e => e.NfvalorTotNf)
                .HasColumnType("money")
                .HasColumnName("NFValorTotNF");
            entity.Property(e => e.NfvalorTotNfdevido)
                .HasColumnType("money")
                .HasColumnName("NFValorTotNFDevido");
            entity.Property(e => e.SerieId).HasColumnName("SerieID");
            entity.Property(e => e.ServId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ServID");
            entity.Property(e => e.SitRecId).HasColumnName("SitRecID");
            entity.Property(e => e.TipoDocId).HasColumnName("TipoDocID");
            entity.Property(e => e.TipoLancId).HasColumnName("TipoLancID");
            entity.Property(e => e.TipoNfid).HasColumnName("TipoNFID");
            entity.Property(e => e.TipoOpId).HasColumnName("TipoOpID");
        });

        modelBuilder.Entity<TribFiscNotaFiscalFarmaciaItem>(entity =>
        {
            entity.HasKey(e => new { e.Nfid, e.MedId });

            entity.ToTable("TribFiscNotaFiscalFarmaciaItem");

            entity.Property(e => e.Nfid).HasColumnName("NFID");
            entity.Property(e => e.MedId).HasColumnName("MedID");

            entity.HasOne(d => d.Med).WithMany(p => p.TribFiscNotaFiscalFarmaciaItems)
                .HasForeignKey(d => d.MedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribFiscNotaFiscalFarmaciaItem_TribFiscMedicamento");

            entity.HasOne(d => d.Nf).WithMany(p => p.TribFiscNotaFiscalFarmaciaItems)
                .HasForeignKey(d => d.Nfid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribFiscNotaFiscalFarmaciaItem_TribFiscNotaFiscaFarmacia");
        });

        modelBuilder.Entity<TribFiscNotificaco>(entity =>
        {
            entity.HasKey(e => e.NotifId);

            entity.Property(e => e.NotifId)
                .ValueGeneratedNever()
                .HasColumnName("NotifID");
            entity.Property(e => e.DataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.FiscalId).HasColumnName("FiscalID");
            entity.Property(e => e.ItemVistId).HasColumnName("ItemVistID");
            entity.Property(e => e.NotifDataFinalizacao).HasColumnType("datetime");
            entity.Property(e => e.NotifDataHora).HasColumnType("datetime");
            entity.Property(e => e.NotifDiasPrazo).HasColumnType("datetime");
            entity.Property(e => e.NotifFinalizada)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength();
            entity.Property(e => e.NotifMotivoSituacao)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.NotifObs)
                .HasMaxLength(400)
                .IsUnicode(false);
            entity.Property(e => e.NotifSituacao)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");
            entity.Property(e => e.VistCpfrgassinatura)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VistCPFRGAssinatura");
            entity.Property(e => e.VistId).HasColumnName("VistID");
            entity.Property(e => e.VistNomeAssinatura)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.Fiscal).WithMany(p => p.TribFiscNotificacos)
                .HasForeignKey(d => d.FiscalId)
                .HasConstraintName("FK_TribFiscNotificacoes_TribFiscFiscais");

            entity.HasOne(d => d.ItemVist).WithMany(p => p.TribFiscNotificacos)
                .HasForeignKey(d => d.ItemVistId)
                .HasConstraintName("FK_TribFiscNotificacoes_TribFiscItensVistoria");

            entity.HasOne(d => d.Vist).WithMany(p => p.TribFiscNotificacos)
                .HasForeignKey(d => d.VistId)
                .HasConstraintName("FK_TribFiscNotificacoes_TribFiscVistorias");
        });

        modelBuilder.Entity<TribFiscNotificacoesAnexo>(entity =>
        {
            entity.HasKey(e => e.Anexid);

            entity.ToTable("TribFiscNotificacoesAnexo");

            entity.Property(e => e.Anexid).ValueGeneratedNever();
            entity.Property(e => e.AnexObs)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribFiscOrdemFiscalizacao>(entity =>
        {
            entity.HasKey(e => e.FiscOfid);

            entity.ToTable("TribFiscOrdemFiscalizacao");

            entity.Property(e => e.FiscOfid)
                .ValueGeneratedNever()
                .HasColumnName("FiscOFID");
            entity.Property(e => e.EmprCmc).HasColumnName("EmprCMC");
            entity.Property(e => e.FiscOfano).HasColumnName("FiscOFAno");
            entity.Property(e => e.FiscOfdata)
                .HasColumnType("datetime")
                .HasColumnName("FiscOFData");
            entity.Property(e => e.FiscOfdefinicao)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("FiscOFDefinicao");
            entity.Property(e => e.FiscOfdtFinalizado)
                .HasColumnType("datetime")
                .HasColumnName("FiscOFDtFinalizado");
            entity.Property(e => e.FiscOfnumero).HasColumnName("FiscOFNumero");
            entity.Property(e => e.FiscOfprazoConclusao).HasColumnName("FiscOFPrazoConclusao");
            entity.Property(e => e.FiscOfstatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("FiscOFStatus");
            entity.Property(e => e.TipoFiscId).HasColumnName("TipoFiscID");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribFiscOrdemFiscalizacaoAnexo>(entity =>
        {
            entity.HasKey(e => e.AnexoId);

            entity.ToTable("TribFiscOrdemFiscalizacaoAnexo");

            entity.Property(e => e.AnexoObs)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FiscOfid).HasColumnName("FiscOFID");
        });

        modelBuilder.Entity<TribFiscOrdemFiscalizacaoFiscal>(entity =>
        {
            entity.HasKey(e => new { e.FiscalId, e.FiscOfid }).HasName("PK_TribFiscOrdemFiscFiscal");

            entity.ToTable("TribFiscOrdemFiscalizacaoFiscal");

            entity.Property(e => e.FiscalId).HasColumnName("FiscalID");
            entity.Property(e => e.FiscOfid).HasColumnName("FiscOFID");
        });

        modelBuilder.Entity<TribFiscOrdemServico>(entity =>
        {
            entity.HasKey(e => e.FiscOsid).HasName("PK_TribFiscOrdemServico");

            entity.Property(e => e.FiscOsid).HasColumnName("FiscOSID");
            entity.Property(e => e.Bairro)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.EmprCmc).HasColumnName("EmprCMC");
            entity.Property(e => e.Endereco)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FiscDtAutorizado).HasColumnType("datetime");
            entity.Property(e => e.FiscDtFinalizado).HasColumnType("datetime");
            entity.Property(e => e.FiscObservacao).HasColumnType("text");
            entity.Property(e => e.FiscOsano).HasColumnName("FiscOSAno");
            entity.Property(e => e.FiscOsassunto)
                .HasColumnType("text")
                .HasColumnName("FiscOSAssunto");
            entity.Property(e => e.FiscOsdata)
                .HasColumnType("datetime")
                .HasColumnName("FiscOSData");
            entity.Property(e => e.FiscOsnumero).HasColumnName("FiscOSNumero");
            entity.Property(e => e.FiscOsprovidencias)
                .HasColumnType("text")
                .HasColumnName("FiscOSProvidencias");
            entity.Property(e => e.FiscProcesso)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FiscReclamacao)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FiscStatus)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FiscUsuarioAutorizacao)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FiscUsuarioInclusao)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.IdAssunto).HasColumnName("idAssunto");
            entity.Property(e => e.IdservidorExpeditor).HasColumnName("IDServidorExpeditor");
            entity.Property(e => e.NrProtocolo).HasColumnName("nrProtocolo");
            entity.Property(e => e.TipoFiscId).HasColumnName("TipoFiscID");

            entity.HasOne(d => d.TipoFisc).WithMany(p => p.TribFiscOrdemServicos)
                .HasForeignKey(d => d.TipoFiscId)
                .HasConstraintName("FK_TribFiscOrdemServicos_TribFiscTipoFiscal");
        });

        modelBuilder.Entity<TribFiscOrdemServicoAssunto>(entity =>
        {
            entity.HasKey(e => new { e.FiscOsid, e.IdAssunto });

            entity.ToTable("TribFiscOrdemServicoAssunto");

            entity.Property(e => e.FiscOsid).HasColumnName("fiscOSID");
            entity.Property(e => e.IdAssunto).HasColumnName("idAssunto");
        });

        modelBuilder.Entity<TribFiscOrdemServicoFiscai>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.FiscOsid).HasColumnName("FiscOSID");
            entity.Property(e => e.FiscalId).HasColumnName("FiscalID");

            entity.HasOne(d => d.FiscOs).WithMany()
                .HasForeignKey(d => d.FiscOsid)
                .HasConstraintName("FK__TribFiscO__FiscO__01649F1C");

            entity.HasOne(d => d.Fiscal).WithMany()
                .HasForeignKey(d => d.FiscalId)
                .HasConstraintName("FK__TribFiscO__Fisca__00707AE3");
        });

        modelBuilder.Entity<TribFiscOrdemServicoOcorrencia>(entity =>
        {
            entity.HasKey(e => e.FisOsocId);

            entity.HasIndex(e => new { e.FiscOsid, e.TipoOcorId, e.FiscalId }, "IX_TribFiscOrdemServicoOcorrencias_FiscOSID_TipoOcorID_FiscalID").HasFillFactor(90);

            entity.HasIndex(e => e.TipoOcorId, "IX_TribFiscOrdemServicoOcorrencias_TipoOcorID_inc_FiscOSID_FiscalID");

            entity.Property(e => e.FisOsocId)
                .ValueGeneratedNever()
                .HasColumnName("FisOSOcID");
            entity.Property(e => e.DataInclusao).HasColumnType("datetime");
            entity.Property(e => e.FisOsocData)
                .HasColumnType("datetime")
                .HasColumnName("FisOSOcData");
            entity.Property(e => e.FisOsocDescricao)
                .HasColumnType("text")
                .HasColumnName("FisOSOcDescricao");
            entity.Property(e => e.FiscOsid).HasColumnName("FiscOSID");
            entity.Property(e => e.FiscalId).HasColumnName("FiscalID");
            entity.Property(e => e.TipoOcorId).HasColumnName("TipoOcorID");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");

            entity.HasOne(d => d.FiscOs).WithMany(p => p.TribFiscOrdemServicoOcorrencia)
                .HasForeignKey(d => d.FiscOsid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribFiscOrdemServicoOcorrencias_TribFiscOrdemServicos");

            entity.HasOne(d => d.Fiscal).WithMany(p => p.TribFiscOrdemServicoOcorrencia)
                .HasForeignKey(d => d.FiscalId)
                .HasConstraintName("FK_TribFiscOrdemServicoOcorrencias_TribFiscFiscais");

            entity.HasOne(d => d.TipoOcor).WithMany(p => p.TribFiscOrdemServicoOcorrencia)
                .HasForeignKey(d => d.TipoOcorId)
                .HasConstraintName("FK_TribFiscOrdemServicoOcorrencias_TribFiscTipoOcorrencia");
        });

        modelBuilder.Entity<TribFiscOrdemServicosAnexo>(entity =>
        {
            entity.HasKey(e => e.Anexid);

            entity.ToTable("TribFiscOrdemServicosAnexo");

            entity.Property(e => e.AnexObs)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FiscOsid).HasColumnName("FiscOSID");
        });

        modelBuilder.Entity<TribFiscOrdemServicosLog>(entity =>
        {
            entity.HasKey(e => e.IdLog);

            entity.ToTable("TribFiscOrdemServicosLog");

            entity.Property(e => e.IdLog).HasColumnName("idLog");
            entity.Property(e => e.Assuntos)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Bairro)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.DtLog)
                .HasColumnType("datetime")
                .HasColumnName("dtLog");
            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.EmprCmc).HasColumnName("EmprCMC");
            entity.Property(e => e.Endereco)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FiscDtAutorizado).HasColumnType("datetime");
            entity.Property(e => e.FiscDtFinalizado).HasColumnType("datetime");
            entity.Property(e => e.FiscObservacao).HasColumnType("text");
            entity.Property(e => e.FiscOsano).HasColumnName("FiscOSAno");
            entity.Property(e => e.FiscOsassunto)
                .HasColumnType("text")
                .HasColumnName("FiscOSAssunto");
            entity.Property(e => e.FiscOsdata)
                .HasColumnType("datetime")
                .HasColumnName("FiscOSData");
            entity.Property(e => e.FiscOsid).HasColumnName("FiscOSID");
            entity.Property(e => e.FiscOsnumero).HasColumnName("FiscOSNumero");
            entity.Property(e => e.FiscOsprovidencias)
                .HasColumnType("text")
                .HasColumnName("FiscOSProvidencias");
            entity.Property(e => e.FiscProcesso)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FiscReclamacao)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FiscStatus)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FiscUsuarioAutorizacao)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FiscUsuarioInclusao)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Fiscais)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.FlAlteracao).HasColumnName("flAlteracao");
            entity.Property(e => e.IdAssunto).HasColumnName("idAssunto");
            entity.Property(e => e.TipoFiscId).HasColumnName("TipoFiscID");
        });

        modelBuilder.Entity<TribFiscOsreclamaco>(entity =>
        {
            entity.HasKey(e => new { e.FiscOsid, e.ReclId });

            entity.ToTable("TribFiscOSReclamacoes");

            entity.Property(e => e.FiscOsid).HasColumnName("FiscOSID");
            entity.Property(e => e.ReclId).HasColumnName("ReclID");

            entity.HasOne(d => d.FiscOs).WithMany(p => p.TribFiscOsreclamacos)
                .HasForeignKey(d => d.FiscOsid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribFiscOSReclamacoes_TribFiscOrdemServicos");
        });

        modelBuilder.Entity<TribFiscProcedimento>(entity =>
        {
            entity.HasKey(e => e.ProcId);

            entity.ToTable("TribFiscProcedimento");

            entity.Property(e => e.ProcId)
                .ValueGeneratedNever()
                .HasColumnName("ProcID");
            entity.Property(e => e.CategEstId).HasColumnName("CategEstID");
            entity.Property(e => e.FiscalId).HasColumnName("FiscalID");
            entity.Property(e => e.ProcData).HasColumnType("datetime");
            entity.Property(e => e.ProcDescricao).HasColumnType("text");
            entity.Property(e => e.ProcRetorno)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TipoFiscId).HasColumnName("TipoFiscID");
            entity.Property(e => e.TipoProcId).HasColumnName("TipoProcID");
            entity.Property(e => e.VistId).HasColumnName("VistID");

            entity.HasOne(d => d.CategEst).WithMany(p => p.TribFiscProcedimentos)
                .HasForeignKey(d => d.CategEstId)
                .HasConstraintName("FK_TribFiscProcedimento_TribFiscCategoriaEstabelecimento");

            entity.HasOne(d => d.Fiscal).WithMany(p => p.TribFiscProcedimentos)
                .HasForeignKey(d => d.FiscalId)
                .HasConstraintName("FK_TribFiscProcedimento_TribFiscFiscais");

            entity.HasOne(d => d.TipoFisc).WithMany(p => p.TribFiscProcedimentos)
                .HasForeignKey(d => d.TipoFiscId)
                .HasConstraintName("FK_TribFiscProcedimento_TribFiscTipoFiscal");

            entity.HasOne(d => d.TipoProc).WithMany(p => p.TribFiscProcedimentos)
                .HasForeignKey(d => d.TipoProcId)
                .HasConstraintName("FK_TribFiscProcedimento_TribFiscTipoProcedimento");
        });

        modelBuilder.Entity<TribFiscProtocolo>(entity =>
        {
            entity.HasKey(e => e.ProtId);

            entity.ToTable("TribFiscProtocolo");

            entity.Property(e => e.ProtId)
                .ValueGeneratedNever()
                .HasColumnName("ProtID");
            entity.Property(e => e.Data).HasColumnType("datetime");
            entity.Property(e => e.Operacao)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasMany(d => d.Recs).WithMany(p => p.Prots)
                .UsingEntity<Dictionary<string, object>>(
                    "TribFiscReceitaProtocolo",
                    r => r.HasOne<TribFiscReceitum>().WithMany()
                        .HasForeignKey("RecId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_TribFiscReceitaProtocolo_TribFiscReceita"),
                    l => l.HasOne<TribFiscProtocolo>().WithMany()
                        .HasForeignKey("ProtId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_TribFiscReceitaProtocolo_TribFiscProtocolo"),
                    j =>
                    {
                        j.HasKey("ProtId", "RecId");
                        j.ToTable("TribFiscReceitaProtocolo");
                        j.IndexerProperty<int>("ProtId").HasColumnName("ProtID");
                        j.IndexerProperty<int>("RecId").HasColumnName("RecID");
                    });
        });

        modelBuilder.Entity<TribFiscReceitaItem>(entity =>
        {
            entity.HasKey(e => e.RecItemId);

            entity.ToTable("TribFiscReceitaItem");

            entity.Property(e => e.RecItemId)
                .ValueGeneratedNever()
                .HasColumnName("RecItemID");
            entity.Property(e => e.MedId).HasColumnName("MedID");
            entity.Property(e => e.RecId).HasColumnName("RecID");

            entity.HasOne(d => d.Med).WithMany(p => p.TribFiscReceitaItems)
                .HasForeignKey(d => d.MedId)
                .HasConstraintName("FK_TribFiscReceitaItem_TribFiscMedicamento");

            entity.HasOne(d => d.Rec).WithMany(p => p.TribFiscReceitaItems)
                .HasForeignKey(d => d.RecId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribFiscReceitaItem_TribFiscReceita");
        });

        modelBuilder.Entity<TribFiscReceitum>(entity =>
        {
            entity.HasKey(e => e.RecId);

            entity.Property(e => e.RecId)
                .ValueGeneratedNever()
                .HasColumnName("RecID");
            entity.Property(e => e.EmprCmc).HasColumnName("EmprCMC");
            entity.Property(e => e.IdtipoProcFiscal).HasColumnName("IDTipoProcFiscal");
            entity.Property(e => e.Paciente)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribFiscReclamacaoTpReclamacao>(entity =>
        {
            entity.HasKey(e => e.RecTpRecId);

            entity.ToTable("TribFiscReclamacaoTpReclamacao");

            entity.Property(e => e.RecTpRecId)
                .ValueGeneratedNever()
                .HasColumnName("RecTpRecID");
            entity.Property(e => e.ReclId).HasColumnName("ReclID");
            entity.Property(e => e.TipoRecId).HasColumnName("TipoRecID");
        });

        modelBuilder.Entity<TribFiscReclamaco>(entity =>
        {
            entity.HasKey(e => e.ReclId);

            entity.Property(e => e.ReclId).HasColumnName("ReclID");
            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.DataFinalizacao).HasColumnType("datetime");
            entity.Property(e => e.DataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DsNotificacao)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("dsNotificacao");
            entity.Property(e => e.Finalizado)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.IdBairro).HasColumnName("idBairro");
            entity.Property(e => e.IdCidade).HasColumnName("idCidade");
            entity.Property(e => e.IdFiscal).HasColumnName("idFiscal");
            entity.Property(e => e.IdLogradTransversal1).HasColumnName("idLogradTransversal1");
            entity.Property(e => e.IdLogradTransversal2).HasColumnName("idLogradTransversal2");
            entity.Property(e => e.IdLogradouro).HasColumnName("idLogradouro");
            entity.Property(e => e.NrCep)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("nrCEP");
            entity.Property(e => e.ReclComplemento)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.ReclDados)
                .HasMaxLength(600)
                .IsUnicode(false);
            entity.Property(e => e.ReclNumero)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ReclRetorno)
                .HasMaxLength(600)
                .IsUnicode(false);
            entity.Property(e => e.ReclStatus)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ReclTelefoneContato)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");

            entity.HasOne(d => d.Con).WithMany(p => p.TribFiscReclamacos)
                .HasForeignKey(d => d.ConId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribFiscReclamacoes_Contribuintes");

            entity.HasOne(d => d.TipoFisc).WithMany(p => p.TribFiscReclamacos)
                .HasForeignKey(d => d.TipoFiscId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribFiscReclamacoes_TribFiscTipoFiscal");
        });

        modelBuilder.Entity<TribFiscRelatorio>(entity =>
        {
            entity.HasKey(e => e.FiscRelId);

            entity.Property(e => e.FiscRelId).HasColumnName("FiscRelID");
            entity.Property(e => e.FiscRelAbreviacao)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.FiscRelDescricao)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FiscRelNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FiscRelParametros)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TextoId).HasColumnName("TextoID");
        });

        modelBuilder.Entity<TribFiscResponsavelTecnico>(entity =>
        {
            entity.HasKey(e => e.RespAuxId);

            entity.ToTable("TribFiscResponsavelTecnico");

            entity.Property(e => e.RespAuxId)
                .ValueGeneratedNever()
                .HasColumnName("RespAuxID");
            entity.Property(e => e.EmprCmc).HasColumnName("EmprCMC");
            entity.Property(e => e.IdcontribCategProf).HasColumnName("IDContribCategProf");
            entity.Property(e => e.RespAuxDataFim).HasColumnType("datetime");
            entity.Property(e => e.RespAuxDataInicio).HasColumnType("datetime");
            entity.Property(e => e.RespAuxTipo)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TribFiscSetor>(entity =>
        {
            entity.HasKey(e => e.SetorId);

            entity.ToTable("TribFiscSetor");

            entity.Property(e => e.SetorId)
                .ValueGeneratedNever()
                .HasColumnName("SetorID");
            entity.Property(e => e.GrupSetId).HasColumnName("GrupSetID");
            entity.Property(e => e.SetorNome)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.GrupSet).WithMany(p => p.TribFiscSetors)
                .HasForeignKey(d => d.GrupSetId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribFiscSetor_TribFiscGrupoSetor");
        });

        modelBuilder.Entity<TribFiscTermoDeDevolucao>(entity =>
        {
            entity.HasKey(e => e.FiscIdtermoDevolucao);

            entity.ToTable("TribFiscTermoDeDevolucao");

            entity.Property(e => e.FiscIdtermoDevolucao)
                .ValueGeneratedNever()
                .HasColumnName("FiscIDTermoDevolucao");
            entity.Property(e => e.FiscDataInclusao).HasColumnType("datetime");
            entity.Property(e => e.FiscMotivo)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.FiscProntuario)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.FiscSituacao)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("Normal");
            entity.Property(e => e.FiscUsuario)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TextoId).HasColumnName("TextoID");

            entity.HasMany(d => d.FiscIdtermoRetencaos).WithMany(p => p.FiscIdtermoDevolucaos)
                .UsingEntity<Dictionary<string, object>>(
                    "TribFiscTermoDeDevolucaoTermo",
                    r => r.HasOne<TribFiscTermoDeRetencao>().WithMany()
                        .HasForeignKey("FiscIdtermoRetencao")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_TribFiscTermoDeDevolucao_Termos_TribFiscTermoDeRetencao"),
                    l => l.HasOne<TribFiscTermoDeDevolucao>().WithMany()
                        .HasForeignKey("FiscIdtermoDevolucao")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_TribFiscTermoDeDevolucao_Termos_TribFiscTermoDeDevolucao"),
                    j =>
                    {
                        j.HasKey("FiscIdtermoDevolucao", "FiscIdtermoRetencao");
                        j.ToTable("TribFiscTermoDeDevolucao_Termos");
                        j.IndexerProperty<int>("FiscIdtermoDevolucao").HasColumnName("FiscIDTermoDevolucao");
                        j.IndexerProperty<int>("FiscIdtermoRetencao").HasColumnName("FiscIDTermoRetencao");
                    });
        });

        modelBuilder.Entity<TribFiscTermoDeDevolucaoDocumento>(entity =>
        {
            entity.HasKey(e => new { e.FiscIdtermoDevolucao, e.FiscIdtermoRetencao, e.FiscIddocumento });

            entity.ToTable("TribFiscTermoDeDevolucao_Documentos");

            entity.Property(e => e.FiscIdtermoDevolucao).HasColumnName("FiscIDTermoDevolucao");
            entity.Property(e => e.FiscIdtermoRetencao).HasColumnName("FiscIDTermoRetencao");
            entity.Property(e => e.FiscIddocumento).HasColumnName("FiscIDDocumento");
            entity.Property(e => e.FiscComplemento)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.FiscIdtermoDevolucaoNavigation).WithMany(p => p.TribFiscTermoDeDevolucaoDocumentos)
                .HasForeignKey(d => d.FiscIdtermoDevolucao)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribFiscTermoDeDevolucao_Documentos_TribFiscTermoDeDevolucao");

            entity.HasOne(d => d.TribFiscTermoDeRetencaoDocumento).WithMany(p => p.TribFiscTermoDeDevolucaoDocumentos)
                .HasForeignKey(d => new { d.FiscIdtermoRetencao, d.FiscIddocumento })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribFiscTermoDeDevolucao_Documentos_TribFiscTermoDeRetencao_Documentos");
        });

        modelBuilder.Entity<TribFiscTermoDeRetencao>(entity =>
        {
            entity.HasKey(e => e.FiscIdtermoRetencao).HasName("PK_TribFiscTermoDeRetencaoDoc");

            entity.ToTable("TribFiscTermoDeRetencao");

            entity.Property(e => e.FiscIdtermoRetencao)
                .ValueGeneratedNever()
                .HasColumnName("FiscIDTermoRetencao");
            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.FiscDataInclusao).HasColumnType("datetime");
            entity.Property(e => e.FiscMotivo)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.FiscProntuario)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.FiscSituacao)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("Normal");
            entity.Property(e => e.FiscUsuario)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TextoId).HasColumnName("TextoID");
        });

        modelBuilder.Entity<TribFiscTermoDeRetencaoDocumento>(entity =>
        {
            entity.HasKey(e => new { e.FiscIdtermoRetencao, e.FiscIddocumento });

            entity.ToTable("TribFiscTermoDeRetencao_Documentos");

            entity.Property(e => e.FiscIdtermoRetencao).HasColumnName("FiscIDTermoRetencao");
            entity.Property(e => e.FiscIddocumento).HasColumnName("FiscIDDocumento");
            entity.Property(e => e.FiscComplemento)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FiscDevolvido)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.FiscIddocumentoNavigation).WithMany(p => p.TribFiscTermoDeRetencaoDocumentos)
                .HasForeignKey(d => d.FiscIddocumento)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribFiscTermoDeRetencao_Documentos_TribFiscDocumentos");

            entity.HasOne(d => d.FiscIdtermoRetencaoNavigation).WithMany(p => p.TribFiscTermoDeRetencaoDocumentos)
                .HasForeignKey(d => d.FiscIdtermoRetencao)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribFiscTermoDeRetencao_Documentos_TribFiscTermoDeRetencao");
        });

        modelBuilder.Entity<TribFiscTipoFiscal>(entity =>
        {
            entity.HasKey(e => e.TipoFiscId);

            entity.ToTable("TribFiscTipoFiscal");

            entity.Property(e => e.TipoFiscId)
                .ValueGeneratedNever()
                .HasColumnName("TipoFiscID");
            entity.Property(e => e.TipoFiscDescricao)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasMany(d => d.TipoVists).WithMany(p => p.TipoFiscs)
                .UsingEntity<Dictionary<string, object>>(
                    "TribFiscFiscalVistorium",
                    r => r.HasOne<TribFiscTiposVistorium>().WithMany()
                        .HasForeignKey("TipoVistId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_TribFiscFiscalVistoria_TribFiscTiposVistoria"),
                    l => l.HasOne<TribFiscTipoFiscal>().WithMany()
                        .HasForeignKey("TipoFiscId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_TribFiscFiscalVistoria_TribFiscTipoFiscal"),
                    j =>
                    {
                        j.HasKey("TipoFiscId", "TipoVistId");
                        j.ToTable("TribFiscFiscalVistoria");
                        j.IndexerProperty<int>("TipoFiscId").HasColumnName("TipoFiscID");
                        j.IndexerProperty<int>("TipoVistId").HasColumnName("TipoVistID");
                    });
        });

        modelBuilder.Entity<TribFiscTipoFiscalOutrosDepartamento>(entity =>
        {
            entity.HasNoKey();
        });

        modelBuilder.Entity<TribFiscTipoLancamento>(entity =>
        {
            entity.HasKey(e => e.TipoLancId);

            entity.ToTable("TribFiscTipoLancamento");

            entity.Property(e => e.TipoLancId).HasColumnName("TipoLancID");
            entity.Property(e => e.TipoLancNome)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribFiscTipoNotaFiscal>(entity =>
        {
            entity.HasKey(e => e.TipoNfid);

            entity.ToTable("TribFiscTipoNotaFiscal");

            entity.Property(e => e.TipoNfid).HasColumnName("TipoNFID");
            entity.Property(e => e.TipoNfdescricao)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("TipoNFDescricao");
            entity.Property(e => e.TipoNfresumido)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TipoNFResumido");
        });

        modelBuilder.Entity<TribFiscTipoOcorrencium>(entity =>
        {
            entity.HasKey(e => e.TipoOcorId);

            entity.Property(e => e.TipoOcorId)
                .ValueGeneratedNever()
                .HasColumnName("TipoOcorID");
            entity.Property(e => e.TipoOcorAuto)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TipoOcorDescricao)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.TipoOcorInicial)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TribFiscTipoProcedimento>(entity =>
        {
            entity.HasKey(e => e.TipoProcId);

            entity.ToTable("TribFiscTipoProcedimento");

            entity.Property(e => e.TipoProcId)
                .ValueGeneratedNever()
                .HasColumnName("TipoProcID");
            entity.Property(e => e.SetorId).HasColumnName("SetorID");
            entity.Property(e => e.TipoProcNome)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Setor).WithMany(p => p.TribFiscTipoProcedimentos)
                .HasForeignKey(d => d.SetorId)
                .HasConstraintName("FK_TribFiscTipoProcedimento_TribFiscSetor");
        });

        modelBuilder.Entity<TribFiscTipoReclamacao>(entity =>
        {
            entity.HasKey(e => e.TipoRecId);

            entity.ToTable("TribFiscTipoReclamacao");

            entity.Property(e => e.TipoRecId)
                .ValueGeneratedNever()
                .HasColumnName("TipoRecID");
            entity.Property(e => e.TipoFiscalId).HasColumnName("TipoFiscalID");
            entity.Property(e => e.TipoRecNome)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.TipoFiscal).WithMany(p => p.TribFiscTipoReclamacaos)
                .HasForeignKey(d => d.TipoFiscalId)
                .HasConstraintName("FK_TribFiscTipoReclamacao_TribFiscTipoFiscal");
        });

        modelBuilder.Entity<TribFiscTiposVistorium>(entity =>
        {
            entity.HasKey(e => e.TipoVistId).HasName("PK_TribFiscTipoVistoria");

            entity.Property(e => e.TipoVistId).ValueGeneratedNever();
            entity.Property(e => e.DivId)
                .HasDefaultValue(0)
                .HasColumnName("DivID");
            entity.Property(e => e.TipoVistNf)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TipoVistNF");
            entity.Property(e => e.TipoVistNome)
                .HasMaxLength(80)
                .IsUnicode(false);

            entity.HasOne(d => d.Div).WithMany(p => p.TribFiscTiposVistoria)
                .HasForeignKey(d => d.DivId)
                .HasConstraintName("FK_TribFiscTiposVistoria_Divisoes");

            entity.HasMany(d => d.IdAtributos).WithMany(p => p.TipoVists)
                .UsingEntity<Dictionary<string, object>>(
                    "TribFiscTiposVistoriaAtributo",
                    r => r.HasOne<TribFiscAtributo>().WithMany()
                        .HasForeignKey("IdAtributo")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_TribFiscTiposVistoriaAtributo_TribFiscAtributo"),
                    l => l.HasOne<TribFiscTiposVistorium>().WithMany()
                        .HasForeignKey("TipoVistId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_TribFiscTiposVistoriaAtributo_TribFiscTiposVistoria"),
                    j =>
                    {
                        j.HasKey("TipoVistId", "IdAtributo").HasName("PK_TribFiscTiposVistoriaAtributo_1");
                        j.ToTable("TribFiscTiposVistoriaAtributo");
                        j.IndexerProperty<int>("TipoVistId").HasComment("Código de identificação do tipo de vistoria.");
                        j.IndexerProperty<int>("IdAtributo")
                            .HasComment("Código de identificação do atributo.")
                            .HasColumnName("idAtributo");
                    });
        });

        modelBuilder.Entity<TribFiscVistoria>(entity =>
        {
            entity.HasKey(e => e.VistId);

            entity.HasIndex(e => new { e.EmprCmc, e.FiscOsid, e.VistDataAbertura, e.VistNumeroLaudo, e.FiscalId, e.TipoVistId, e.VistNumero, e.DataInclusao, e.VistId }, "_dta_index_TribFiscVistorias_5_1880706098__K8_K2_K6_K16_K4_K5_K17_K12_K1_3").HasFillFactor(90);

            entity.Property(e => e.VistId)
                .ValueGeneratedNever()
                .HasColumnName("VistID");
            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.DataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.EmprCmc).HasColumnName("EmprCMC");
            entity.Property(e => e.FiscOsid).HasColumnName("FiscOSID");
            entity.Property(e => e.FiscalId).HasColumnName("FiscalID");
            entity.Property(e => e.NrProtocolo).HasColumnName("nrProtocolo");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");
            entity.Property(e => e.VistConsideracoes).HasColumnType("text");
            entity.Property(e => e.VistCpfrgassinatura)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VistCPFRGAssinatura");
            entity.Property(e => e.VistDataAbertura).HasColumnType("datetime");
            entity.Property(e => e.VistDataFechamento).HasColumnType("datetime");
            entity.Property(e => e.VistDataNffinal)
                .HasColumnType("datetime")
                .HasColumnName("VistDataNFFinal");
            entity.Property(e => e.VistDataNfinicial)
                .HasColumnType("datetime")
                .HasColumnName("VistDataNFInicial");
            entity.Property(e => e.VistMotivoSituacao)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.VistNomeAssinatura)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.VistNumNffinal).HasColumnName("VistNumNFFinal");
            entity.Property(e => e.VistNumNfinicial).HasColumnName("VistNumNFInicial");
            entity.Property(e => e.VistObs).HasColumnType("text");
            entity.Property(e => e.VistRelato).HasColumnType("text");
            entity.Property(e => e.VistSituacao)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.Edificacao).WithMany(p => p.TribFiscVistoria)
                .HasForeignKey(d => d.EdificacaoId)
                .HasConstraintName("FK_TribFiscVistorias_TribEdificacoes");

            entity.HasOne(d => d.EmprCmcNavigation).WithMany(p => p.TribFiscVistoria)
                .HasForeignKey(d => d.EmprCmc)
                .HasConstraintName("FK_TribFiscVistorias_TribEmpresas");

            entity.HasOne(d => d.FiscOs).WithMany(p => p.TribFiscVistoria)
                .HasForeignKey(d => d.FiscOsid)
                .HasConstraintName("FK_TribFiscVistorias_TribFiscOrdemServicos");

            entity.HasOne(d => d.Fiscal).WithMany(p => p.TribFiscVistoria)
                .HasForeignKey(d => d.FiscalId)
                .HasConstraintName("FK_TribFiscVistorias_TribFiscFiscais");

            entity.HasOne(d => d.TipoVist).WithMany(p => p.TribFiscVistoria)
                .HasForeignKey(d => d.TipoVistId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribFiscVistorias_TribFiscTiposVistoria");
        });

        modelBuilder.Entity<TribFiscVistoriaItensFiscalizacao>(entity =>
        {
            entity.HasKey(e => e.ItemVistFiscId);

            entity.ToTable("TribFiscVistoriaItensFiscalizacao");

            entity.Property(e => e.ItemVistFiscId)
                .ValueGeneratedNever()
                .HasColumnName("ItemVistFiscID");
            entity.Property(e => e.ItemVistFiscObs)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ItemVistId).HasColumnName("ItemVistID");
            entity.Property(e => e.VistId).HasColumnName("VistID");
        });

        modelBuilder.Entity<TribFiscVistoriaItensVistoriado>(entity =>
        {
            entity.HasKey(e => new { e.VistId, e.ItemVistId });

            entity.Property(e => e.VistId).HasColumnName("VistID");
            entity.Property(e => e.ItemVistId).HasColumnName("ItemVistID");
            entity.Property(e => e.DataInclusao).HasColumnType("datetime");
            entity.Property(e => e.Regular)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.VistItemInformacaoAdicional)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.ItemVist).WithMany(p => p.TribFiscVistoriaItensVistoriados)
                .HasForeignKey(d => d.ItemVistId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribFiscVistoriaItensVistoriados_TribFiscItensVistoria");

            entity.HasOne(d => d.Vist).WithMany(p => p.TribFiscVistoriaItensVistoriados)
                .HasForeignKey(d => d.VistId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribFiscVistoriaItensVistoriados_TribFiscVistorias");
        });

        modelBuilder.Entity<TribFiscVistoriaItensVistoriadosDivida>(entity =>
        {
            entity.HasKey(e => e.IddividaVist);

            entity.Property(e => e.IddividaVist).HasColumnName("IDDividaVist");
            entity.Property(e => e.DivEmpId).HasColumnName("DivEmpID");
            entity.Property(e => e.ItemVistId).HasColumnName("ItemVistID");
            entity.Property(e => e.VistId).HasColumnName("VistID");
        });

        modelBuilder.Entity<TribFiscVistoriaItensVistoriadosNota>(entity =>
        {
            entity.HasKey(e => e.IdnotaVist);

            entity.Property(e => e.IdnotaVist).HasColumnName("IDNotaVist");
            entity.Property(e => e.DataInclusao).HasColumnType("datetime");
            entity.Property(e => e.ItemVistId).HasColumnName("ItemVistID");
            entity.Property(e => e.Nfid).HasColumnName("NFID");
            entity.Property(e => e.Nfidorigem).HasColumnName("NFIDOrigem");
            entity.Property(e => e.Nfsistema)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NFSistema");
            entity.Property(e => e.NftipoForm)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NFTipoForm");
            entity.Property(e => e.VistId).HasColumnName("VistID");
        });

        modelBuilder.Entity<TribFiscVistoriaItensVistoriadosNotasDivida>(entity =>
        {
            entity.HasKey(e => new { e.IdnotaVist, e.IddividaVist });

            entity.Property(e => e.IdnotaVist).HasColumnName("IDNotaVist");
            entity.Property(e => e.IddividaVist).HasColumnName("IDDividaVist");
        });

        modelBuilder.Entity<TribFiscVistoriaItensVistoriadosPrevisao>(entity =>
        {
            entity.HasKey(e => e.Idprevisao);

            entity.ToTable("TribFiscVistoriaItensVistoriadosPrevisao");

            entity.Property(e => e.Idprevisao).HasColumnName("IDPrevisao");
            entity.Property(e => e.IdnotaVist).HasColumnName("IDNotaVist");
            entity.Property(e => e.PrevDataBase)
                .HasColumnType("datetime")
                .HasColumnName("prevDataBase");
            entity.Property(e => e.PrevObs)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("prevObs");
            entity.Property(e => e.PrevParcelaUnica)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("prevParcelaUnica");
            entity.Property(e => e.PrevTipoTribIddesconto).HasColumnName("prevTipoTribIDDesconto");
            entity.Property(e => e.PrevValor)
                .HasColumnType("money")
                .HasColumnName("prevValor");
            entity.Property(e => e.PrevValorDesconto)
                .HasColumnType("money")
                .HasColumnName("prevValorDesconto");
            entity.Property(e => e.PrevVencimento)
                .HasColumnType("datetime")
                .HasColumnName("prevVencimento");
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
        });

        modelBuilder.Entity<TribFiscVistoriasAtributo>(entity =>
        {
            entity.HasKey(e => new { e.VistId, e.IdAtributo });

            entity.ToTable("TribFiscVistoriasAtributo");

            entity.Property(e => e.VistId)
                .HasComment("Código de identificação da vistoria.")
                .HasColumnName("VistID");
            entity.Property(e => e.IdAtributo)
                .HasComment("Código de identificação do atributo.")
                .HasColumnName("idAtributo");
            entity.Property(e => e.VlAtributo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasComment("Valor do atributo para a vistoria.")
                .HasColumnName("vlAtributo");

            entity.HasOne(d => d.IdAtributoNavigation).WithMany(p => p.TribFiscVistoriasAtributos)
                .HasForeignKey(d => d.IdAtributo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribFiscVistoriasAtributo_TribFiscAtributo");

            entity.HasOne(d => d.Vist).WithMany(p => p.TribFiscVistoriasAtributos)
                .HasForeignKey(d => d.VistId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribFiscVistoriasAtributo_TribFiscVistorias");
        });

        modelBuilder.Entity<TribFiscVistoriasFiscalizacao>(entity =>
        {
            entity.HasKey(e => e.VistFiscId);

            entity.ToTable("TribFiscVistoriasFiscalizacao");

            entity.Property(e => e.VistFiscId)
                .ValueGeneratedNever()
                .HasColumnName("VistFiscID");
            entity.Property(e => e.FiscOfid).HasColumnName("FiscOFID");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VistFiscDataFim).HasColumnType("datetime");
            entity.Property(e => e.VistFiscDataInclusao).HasColumnType("datetime");
            entity.Property(e => e.VistFiscDataIni).HasColumnType("datetime");
            entity.Property(e => e.VistFiscNotaFim)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.VistFiscNotaIni)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.VistFiscObs).HasColumnType("text");
            entity.Property(e => e.VistFiscTipoNf)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("VistFiscTipoNF");
        });

        modelBuilder.Entity<TribFiscVistoriasFiscalizacaoNota>(entity =>
        {
            entity.HasKey(e => new { e.VistFiscId, e.DocFisId });

            entity.Property(e => e.VistFiscId).HasColumnName("VistFiscID");
            entity.Property(e => e.DocFisId).HasColumnName("DocFisID");
        });

        modelBuilder.Entity<TribForro>(entity =>
        {
            entity.HasKey(e => e.ForroId);

            entity.ToTable("TribForro", tb => tb.HasTrigger("TgTribForroUpdate"));

            entity.Property(e => e.ForroId).HasColumnName("ForroID");
            entity.Property(e => e.ForroFator).HasColumnType("money");
            entity.Property(e => e.ForroNome)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribFunCriancaDividaContrib>(entity =>
        {
            entity.HasKey(e => e.FunCriDivId);

            entity.ToTable("TribFunCriancaDividaContrib");

            entity.HasIndex(e => e.ConIddivida, "IX_TribFunCriancaDividaContrib_ConIDDivida");

            entity.Property(e => e.FunCriDivId).ValueGeneratedNever();
            entity.Property(e => e.ConIddivida).HasColumnName("ConIDDivida");
            entity.Property(e => e.FunCriEntCnpj)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FunCriEntCNPJ");
            entity.Property(e => e.FunCriEntNome)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.ConIddividaNavigation).WithMany(p => p.TribFunCriancaDividaContribs)
                .HasForeignKey(d => d.ConIddivida)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribFunCriancaDividaContrib_TribDividasContribuinte");
        });

        modelBuilder.Entity<TribFundoVale>(entity =>
        {
            entity.HasKey(e => e.FundoId);

            entity.ToTable("TribFundoVale", tb => tb.HasTrigger("TgTribFundoValeUpdate"));

            entity.Property(e => e.FundoId).HasColumnName("FundoID");
            entity.Property(e => e.FundoFator)
                .HasDefaultValue(0m)
                .HasColumnType("money");
            entity.Property(e => e.FundoNome)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<TribGruposEstabelecimento>(entity =>
        {
            entity.HasKey(e => e.EstabGrupo);

            entity.ToTable("TribGruposEstabelecimento");

            entity.Property(e => e.EstabGrupo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EstabGrupoNome)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.QtdeUfmbombeiros)
                .HasColumnType("money")
                .HasColumnName("QtdeUFMBombeiros");
        });

        modelBuilder.Entity<TribHonorario>(entity =>
        {
            entity.HasKey(e => e.HonorarioId);

            entity.Property(e => e.HonorarioId).HasColumnName("HonorarioID");
            entity.Property(e => e.HonoDataBase).HasColumnType("datetime");
            entity.Property(e => e.HonoExecutado)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.HonoNumeroAutos)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.HonoPercentual).HasColumnType("money");
        });

        modelBuilder.Entity<TribHonorariosCdum>(entity =>
        {
            entity.HasKey(e => e.HonorarioCdaid).HasName("PK_TribHonorarioCDA");

            entity.ToTable("TribHonorariosCDA");

            entity.HasIndex(e => e.CertidaoDaid, "IX_TribHonorariosCDA_CertidaoDAID");

            entity.HasIndex(e => e.HonorarioDivId, "IX_TribHonorariosCDA_HonorarioDivID");

            entity.HasIndex(e => e.LivroDaid, "IX_TribHonorariosCDA_LivroDAID");

            entity.Property(e => e.HonorarioCdaid).HasColumnName("HonorarioCDAID");
            entity.Property(e => e.CertidaoDaid).HasColumnName("CertidaoDAID");
            entity.Property(e => e.HonoCdadtBaixa)
                .HasColumnType("datetime")
                .HasColumnName("HonoCDADtBaixa");
            entity.Property(e => e.HonoCdadtVencimento)
                .HasColumnType("datetime")
                .HasColumnName("HonoCDADtVencimento");
            entity.Property(e => e.HonoCdavlrBaixa)
                .HasColumnType("money")
                .HasColumnName("HonoCDAVlrBaixa");
            entity.Property(e => e.HonoCdavlrCalculo)
                .HasColumnType("money")
                .HasColumnName("HonoCDAVlrCalculo");
            entity.Property(e => e.HonoCdavlrDivida)
                .HasColumnType("money")
                .HasColumnName("HonoCDAVlrDivida");
            entity.Property(e => e.HonorarioDivId).HasColumnName("HonorarioDivID");
            entity.Property(e => e.LivroDaid).HasColumnName("LivroDAID");
            entity.Property(e => e.TipoBxId).HasColumnName("TipoBxID");

            entity.HasOne(d => d.CertidaoDa).WithMany(p => p.TribHonorariosCda)
                .HasForeignKey(d => d.CertidaoDaid)
                .HasConstraintName("FK_TribHonorariosCDA_TribCertidaoDA");

            entity.HasOne(d => d.HonorarioDiv).WithMany(p => p.TribHonorariosCda)
                .HasForeignKey(d => d.HonorarioDivId)
                .HasConstraintName("FK_TribHonorariosCDA_TribHonorariosDividas");
        });

        modelBuilder.Entity<TribHonorariosDivida>(entity =>
        {
            entity.HasKey(e => e.HonorarioDivId);

            entity.HasIndex(e => e.ConIddivida, "IX_TribHonorariosDividas_ConIDDivida").HasFillFactor(90);

            entity.HasIndex(e => e.DivEmpId, "IX_TribHonorariosDividas_DivEmpID").HasFillFactor(90);

            entity.HasIndex(e => e.ImoIddivida, "IX_TribHonorariosDividas_ImoIDDivida").HasFillFactor(90);

            entity.Property(e => e.HonorarioDivId).HasColumnName("HonorarioDivID");
            entity.Property(e => e.ConIddivida).HasColumnName("ConIDDivida");
            entity.Property(e => e.DivEmpId).HasColumnName("DivEmpID");
            entity.Property(e => e.HonorarioId).HasColumnName("HonorarioID");
            entity.Property(e => e.ImoIddivida).HasColumnName("ImoIDDivida");

            entity.HasOne(d => d.ConIddividaNavigation).WithMany(p => p.TribHonorariosDivida)
                .HasForeignKey(d => d.ConIddivida)
                .HasConstraintName("FK_TribHonorariosDividas_TribDividasContribuinte");

            entity.HasOne(d => d.DivEmp).WithMany(p => p.TribHonorariosDivida)
                .HasForeignKey(d => d.DivEmpId)
                .HasConstraintName("FK_TribHonorariosDividas_TribDividasEmpresas");

            entity.HasOne(d => d.ImoIddividaNavigation).WithMany(p => p.TribHonorariosDivida)
                .HasForeignKey(d => d.ImoIddivida)
                .HasConstraintName("FK_TribHonorariosDividas_TribDividasImo");
        });

        modelBuilder.Entity<TribHonorariosSemCdum>(entity =>
        {
            entity.HasKey(e => e.HonorarioSemCdaid);

            entity.ToTable("TribHonorariosSemCDA");

            entity.HasIndex(e => e.ConIddivida, "IX_TribHonorariosSemCDA_ConIDDivida").HasFillFactor(90);

            entity.HasIndex(e => e.DivEmpId, "IX_TribHonorariosSemCDA_DivEmpID").HasFillFactor(90);

            entity.HasIndex(e => e.ImoIddivida, "IX_TribHonorariosSemCDA_ImoIDDivida").HasFillFactor(90);

            entity.Property(e => e.HonorarioSemCdaid).HasColumnName("HonorarioSemCDAID");
            entity.Property(e => e.ConIddivida).HasColumnName("ConIDDivida");
            entity.Property(e => e.DivEmpId).HasColumnName("DivEmpID");
            entity.Property(e => e.HonorarioDivId).HasColumnName("HonorarioDivID");
            entity.Property(e => e.ImoIddivida).HasColumnName("ImoIDDivida");

            entity.HasOne(d => d.ConIddividaNavigation).WithMany(p => p.TribHonorariosSemCda)
                .HasForeignKey(d => d.ConIddivida)
                .HasConstraintName("FK_TribHonorariosSemCDA_TribDividasContribuinte");

            entity.HasOne(d => d.DivEmp).WithMany(p => p.TribHonorariosSemCda)
                .HasForeignKey(d => d.DivEmpId)
                .HasConstraintName("FK_TribHonorariosSemCDA_TribDividasEmpresas");

            entity.HasOne(d => d.HonorarioDiv).WithMany(p => p.TribHonorariosSemCda)
                .HasForeignKey(d => d.HonorarioDivId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribHonorariosSemCDA_TribHonorariosDividas");

            entity.HasOne(d => d.ImoIddividaNavigation).WithMany(p => p.TribHonorariosSemCda)
                .HasForeignKey(d => d.ImoIddivida)
                .HasConstraintName("FK_TribHonorariosSemCDA_TribDividasImo");
        });

        modelBuilder.Entity<TribIncidencium>(entity =>
        {
            entity.HasKey(e => e.InciId);

            entity.ToTable(tb => tb.HasTrigger("TgTribIncidenciaUpdate"));

            entity.Property(e => e.InciId).HasColumnName("InciID");
            entity.Property(e => e.InciFator)
                .HasDefaultValue(0m)
                .HasColumnType("money");
            entity.Property(e => e.InciNome)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<TribIndiceCorrecao>(entity =>
        {
            entity.HasKey(e => e.IndCorrData);

            entity.ToTable("TribIndiceCorrecao");

            entity.Property(e => e.IndCorrData).HasColumnType("datetime");
            entity.Property(e => e.IndCorrIndice).HasColumnType("money");
        });

        modelBuilder.Entity<TribInscricaoNotificacao>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TribInscricaoNotificacao");

            entity.Property(e => e.InscricaoImobiliaria)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribInstalacaoEletrica>(entity =>
        {
            entity.HasKey(e => e.EletricaId);

            entity.ToTable("TribInstalacaoEletrica", tb => tb.HasTrigger("TgTribInstalacaoEletricaUpdate"));

            entity.Property(e => e.EletricaId).HasColumnName("EletricaID");
            entity.Property(e => e.EletricaFator).HasColumnType("money");
            entity.Property(e => e.EletricaNome)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribInstalacaoSanitarium>(entity =>
        {
            entity.HasKey(e => e.InstSanitId);

            entity.ToTable(tb => tb.HasTrigger("TgTribInstalacaoSanitariaUpdate"));

            entity.Property(e => e.InstSanitId).HasColumnName("InstSanitID");
            entity.Property(e => e.InstSanitFator).HasColumnType("money");
            entity.Property(e => e.InstSanitNome)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribIsencaoIncidencium>(entity =>
        {
            entity.HasKey(e => new { e.TparamId, e.ParamId, e.TipoTribId });

            entity.Property(e => e.TparamId).HasColumnName("TParamID");
            entity.Property(e => e.ParamId).HasColumnName("ParamID");
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
            entity.Property(e => e.TipoBxId)
                .HasComment("Codigo utilizado para a baixa na Isenção")
                .HasColumnName("TipoBxID");

            entity.HasOne(d => d.TipoBx).WithMany(p => p.TribIsencaoIncidencia)
                .HasForeignKey(d => d.TipoBxId)
                .HasConstraintName("FK_TribIsencaoIncidencia_TribTipoBaixa");

            entity.HasOne(d => d.TipoTrib).WithMany(p => p.TribIsencaoIncidencia)
                .HasForeignKey(d => d.TipoTribId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribIsencaoIncidencia_TribTipoTributos");

            entity.HasOne(d => d.TribParamCalculo).WithMany(p => p.TribIsencaoIncidencia)
                .HasForeignKey(d => new { d.TparamId, d.ParamId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribIsencaoIncidencia_TribParamCalculos");
        });

        modelBuilder.Entity<TribIssqnestimado>(entity =>
        {
            entity.HasKey(e => new { e.EmprCmc, e.EstimIssAno, e.EstimIssMes });

            entity.ToTable("TribISSQNEstimado");

            entity.Property(e => e.EstimIssAliquota)
                .HasDefaultValue(0m)
                .HasColumnType("money");
            entity.Property(e => e.EstimIssData).HasColumnType("datetime");
            entity.Property(e => e.EstimIssObservacao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.EstimIssValor)
                .HasDefaultValue(0m)
                .HasColumnType("money");
            entity.Property(e => e.EstimIssValorTrib)
                .HasDefaultValue(0m)
                .HasColumnType("money");
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");

            entity.HasOne(d => d.EmprCmcNavigation).WithMany(p => p.TribIssqnestimados)
                .HasForeignKey(d => d.EmprCmc)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribISSQNEstimado_TribEmpresas");

            entity.HasOne(d => d.TipoTrib).WithMany(p => p.TribIssqnestimados)
                .HasForeignKey(d => d.TipoTribId)
                .HasConstraintName("FK_TribISSQNEstimado_TribTipoTributos");
        });

        modelBuilder.Entity<TribItbi>(entity =>
        {
            entity.HasKey(e => e.Itbiid);

            entity.ToTable("TribITBI");

            entity.HasIndex(e => e.ItbidataLanc, "IX_TribITBI_ITBIDataLanc_inc_ITBIID");

            entity.Property(e => e.Itbiid)
                .ValueGeneratedNever()
                .HasColumnName("ITBIID");
            entity.Property(e => e.ConId).HasColumnName("conID");
            entity.Property(e => e.Itbiano).HasColumnName("ITBIAno");
            entity.Property(e => e.ItbidataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ITBIDataInclusao");
            entity.Property(e => e.ItbidataLanc)
                .HasColumnType("datetime")
                .HasColumnName("ITBIDataLanc");
            entity.Property(e => e.ItbidsAlerta)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ITBIDsAlerta");
            entity.Property(e => e.ItbidsTipo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("COMPRA_VENDA")
                .HasColumnName("ITBIDsTipo");
            entity.Property(e => e.Itbinumero).HasColumnName("ITBINumero");
            entity.Property(e => e.Itbiobservacao)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ITBIObservacao");
            entity.Property(e => e.ItbiusuarioInclusao)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())")
                .HasColumnName("ITBIUsuarioInclusao");

            entity.HasOne(d => d.Con).WithMany(p => p.TribItbis)
                .HasForeignKey(d => d.ConId)
                .HasConstraintName("FK__TribITBI__conID__25E217C2");
        });

        modelBuilder.Entity<TribItbicompradore>(entity =>
        {
            entity.HasKey(e => new { e.ItbiedifId, e.ConId });

            entity.ToTable("TribITBICompradores", tb => tb.HasTrigger("TgTribITBICompradoresInsert"));

            entity.Property(e => e.ItbiedifId).HasColumnName("ITBIEdifID");
            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.ImprimeNaGuia)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength();

            entity.HasOne(d => d.Con).WithMany(p => p.TribItbicompradores)
                .HasForeignKey(d => d.ConId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribITBICompradores_Contribuintes");

            entity.HasOne(d => d.Itbiedif).WithMany(p => p.TribItbicompradores)
                .HasForeignKey(d => d.ItbiedifId)
                .HasConstraintName("FK_TribITBICompradores_TribITBIEdif");
        });

        modelBuilder.Entity<TribItbidocumentoTipo>(entity =>
        {
            entity.HasKey(e => e.ItbidocId);

            entity.ToTable("TribITBIDocumentoTipo");

            entity.Property(e => e.ItbidocId)
                .ValueGeneratedNever()
                .HasColumnName("ITBIDocID");
            entity.Property(e => e.ItbidocInterno).HasColumnName("ITBIDocInterno");
            entity.Property(e => e.ItbidsDocDescricao)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ITBIDsDocDescricao");
            entity.Property(e => e.ItbidsDocumento)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ITBIDsDocumento");
            entity.Property(e => e.Itbiobrigatoriedade).HasColumnName("ITBIObrigatoriedade");
            entity.Property(e => e.ItbitipoId).HasColumnName("ITBITipoID");

            entity.HasOne(d => d.Itbitipo).WithMany(p => p.TribItbidocumentoTipos)
                .HasForeignKey(d => d.ItbitipoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribITBIDocumentoTipo_TribITBITipo");
        });

        modelBuilder.Entity<TribItbiedif>(entity =>
        {
            entity.HasKey(e => e.ItbiedifId);

            entity.ToTable("TribITBIEdif", tb =>
                {
                    tb.HasTrigger("TgTribITBIEdifDelete");
                    tb.HasTrigger("TgTribITBIEdifInsert");
                    tb.HasTrigger("TgTribITBIEdifUpdate");
                });

            entity.HasIndex(e => e.Itbiid, "IX_ITBIID").HasFillFactor(90);

            entity.HasIndex(e => new { e.EdificacaoId, e.ItbiedifId, e.Itbiid, e.ImoIddivida }, "IX_TRIBITBIEDIF_EDIFICACAOID_ITBIEDIFID_ITBIID_IMOIDDIVIDA").HasFillFactor(90);

            entity.HasIndex(e => e.ConIddivida, "IX_TribITBIEdif_ConIDDivida").HasFillFactor(90);

            entity.HasIndex(e => e.ImoIddivida, "IX_TribITBIEdif_ImoIDDivida").HasFillFactor(90);

            entity.Property(e => e.ItbiedifId)
                .ValueGeneratedNever()
                .HasColumnName("ITBIEdifID");
            entity.Property(e => e.AreaAbertaCoberta).HasColumnType("money");
            entity.Property(e => e.ConIddivida).HasColumnName("ConIDDivida");
            entity.Property(e => e.DenoId).HasColumnName("DenoID");
            entity.Property(e => e.EdifAreaCoberta).HasColumnType("money");
            entity.Property(e => e.EdifAreaConstruida).HasColumnType("money");
            entity.Property(e => e.EdifBloco)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EdifCaracteristica)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.EdifComplemento)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.EdifMatricula)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EdifNumAptoSalaLoja)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.EdifNumeracao)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.Idloteamento).HasColumnName("IDLoteamento");
            entity.Property(e => e.ImoIddivida).HasColumnName("ImoIDDivida");
            entity.Property(e => e.InscricaoImobiliaria)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.InscricaoImobiliariaGeo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("InscricaoImobiliariaGEO");
            entity.Property(e => e.ItbiareaTotalImo)
                .HasColumnType("money")
                .HasColumnName("ITBIAreaTotalImo");
            entity.Property(e => e.ItbiedifAliqFinanc)
                .HasDefaultValue(0m)
                .HasColumnType("money")
                .HasColumnName("ITBIEdifAliqFinanc");
            entity.Property(e => e.ItbiedifAnoDiv)
                .HasDefaultValue(0)
                .HasColumnName("ITBIEdifAnoDiv");
            entity.Property(e => e.ItbiedifAreaConstr)
                .HasDefaultValue(0m)
                .HasColumnType("money")
                .HasColumnName("ITBIEdifAreaConstr");
            entity.Property(e => e.ItbiedifBaseCalcFin)
                .HasDefaultValue(0m)
                .HasColumnType("money")
                .HasColumnName("ITBIEdifBaseCalcFin");
            entity.Property(e => e.ItbiedifBaseCalcImovel)
                .HasDefaultValue(0m)
                .HasColumnType("money")
                .HasColumnName("ITBIEdifBaseCalcImovel");
            entity.Property(e => e.ItbiedifDataVenc)
                .HasColumnType("datetime")
                .HasColumnName("ITBIEdifDataVenc");
            entity.Property(e => e.ItbiedifDtMinhaCasa)
                .HasColumnType("datetime")
                .HasColumnName("ITBIEdifDtMinhaCasa");
            entity.Property(e => e.ItbiedifFinanciado)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength()
                .HasColumnName("ITBIEdifFinanciado");
            entity.Property(e => e.ItbiedifMesDivida)
                .HasDefaultValue(0)
                .HasColumnName("ITBIEdifMesDivida");
            entity.Property(e => e.ItbiedifObservacao)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ITBIEdifObservacao");
            entity.Property(e => e.ItbiedifParc)
                .HasDefaultValue(0)
                .HasColumnName("ITBIEdifParc");
            entity.Property(e => e.ItbiedifPercTransacao)
                .HasDefaultValue(0m)
                .HasColumnType("money")
                .HasColumnName("ITBIEdifPercTransacao");
            entity.Property(e => e.ItbiedifPercTransmitir)
                .HasColumnType("money")
                .HasColumnName("ITBIEdifPercTransmitir");
            entity.Property(e => e.ItbiedifSubDivida)
                .HasDefaultValue(0)
                .HasColumnName("ITBIEdifSubDivida");
            entity.Property(e => e.ItbiedifTipoConstrucao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ITBIEdifTipoConstrucao");
            entity.Property(e => e.ItbiedifVlrDeclarado)
                .HasDefaultValue(0m)
                .HasColumnType("money")
                .HasColumnName("ITBIEdifVlrDeclarado");
            entity.Property(e => e.ItbiedifVlrDevido)
                .HasDefaultValue(0m)
                .HasColumnType("money")
                .HasColumnName("ITBIEdifVlrDevido");
            entity.Property(e => e.ItbiedifVlrVenalIptu)
                .HasDefaultValue(0m)
                .HasColumnType("money")
                .HasColumnName("ITBIEdifVlrVenalIPTU");
            entity.Property(e => e.Itbiendereco)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ITBIEndereco");
            entity.Property(e => e.Itbiid).HasColumnName("ITBIID");
            entity.Property(e => e.ItbiinscIncra)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ITBIInscIncra");
            entity.Property(e => e.ItbisomaEconomias)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITBISomaEconomias");
            entity.Property(e => e.LogradId).HasColumnName("LogradID");
            entity.Property(e => e.LoteLoteamento)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.Matricula)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PStrEdifEnderecoCompleto)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pStrEdifEnderecoCompleto");
            entity.Property(e => e.PStredifBairro)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pStredifBairro");
            entity.Property(e => e.QuadraId).HasColumnName("QuadraID");
            entity.Property(e => e.QuadraLoteamento)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.TerrAreaTerreno).HasColumnType("money");
            entity.Property(e => e.TerrReferenciaAnterior)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TerrenoId).HasColumnName("TerrenoID");
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");

            entity.HasOne(d => d.ConIddividaNavigation).WithMany(p => p.TribItbiedifs)
                .HasForeignKey(d => d.ConIddivida)
                .HasConstraintName("FK_TribITBIEdif_TribDividasContribuinte");

            entity.HasOne(d => d.Edificacao).WithMany(p => p.TribItbiedifs)
                .HasForeignKey(d => d.EdificacaoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribITBIEdif_TribEdificacoes");

            entity.HasOne(d => d.ImoIddividaNavigation).WithMany(p => p.TribItbiedifs)
                .HasForeignKey(d => d.ImoIddivida)
                .HasConstraintName("FK_TribITBIEdif_TribDividasImo");

            entity.HasOne(d => d.Itbi).WithMany(p => p.TribItbiedifs)
                .HasForeignKey(d => d.Itbiid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribITBIEdif_TribITBI");

            entity.HasOne(d => d.TipoTrib).WithMany(p => p.TribItbiedifs)
                .HasForeignKey(d => d.TipoTribId)
                .HasConstraintName("FK_TribITBIEdif_TribTipoTributos");
        });

        modelBuilder.Entity<TribItbiex>(entity =>
        {
            entity.HasKey(e => e.Itbiid);

            entity.ToTable("TribITBIex");

            entity.HasIndex(e => e.Itbiidreal, "IX_TribITBIex_ITBIIDReal").HasFillFactor(90);

            entity.HasIndex(e => new { e.Itbisituacao, e.Itbiidreal }, "IX_TribITBIex_ITBISituacao_ITBIIDReal");

            entity.Property(e => e.Itbiid).HasColumnName("ITBIID");
            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.ItbidataLanc)
                .HasColumnType("datetime")
                .HasColumnName("ITBIDataLanc");
            entity.Property(e => e.ItbidsTipo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("COMPRA_VENDA")
                .HasColumnName("ITBIDsTipo");
            entity.Property(e => e.Itbiidreal).HasColumnName("ITBIIDReal");
            entity.Property(e => e.Itbiip)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ITBIIP");
            entity.Property(e => e.Itbiobservacao)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ITBIObservacao");
            entity.Property(e => e.Itbisituacao)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("Em analise")
                .HasColumnName("ITBISituacao");
            entity.Property(e => e.Itbiusuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ITBIUsuario");
        });

        modelBuilder.Entity<TribItbiexAnexo>(entity =>
        {
            entity.HasKey(e => e.ItbianexoId);

            entity.ToTable("TribITBIexAnexos");

            entity.Property(e => e.ItbianexoId)
                .ValueGeneratedNever()
                .HasColumnName("ITBIAnexoID");
            entity.Property(e => e.DsParecer)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dsParecer");
            entity.Property(e => e.DtAnexo)
                .HasColumnType("datetime")
                .HasColumnName("dtAnexo");
            entity.Property(e => e.DtParecer)
                .HasColumnType("datetime")
                .HasColumnName("dtParecer");
            entity.Property(e => e.FlParecer)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flParecer");
            entity.Property(e => e.Ipsolicitante)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IPSolicitante");
            entity.Property(e => e.ItbidocId).HasColumnName("ITBIDocID");
            entity.Property(e => e.Itbiid).HasColumnName("ITBIID");
            entity.Property(e => e.Usuariologado)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("usuariologado");

            entity.HasOne(d => d.Itbidoc).WithMany(p => p.TribItbiexAnexos)
                .HasForeignKey(d => d.ItbidocId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribITBIexAnexos_TribITBIDocumentoTipo");

            entity.HasOne(d => d.Itbi).WithMany(p => p.TribItbiexAnexos)
                .HasForeignKey(d => d.Itbiid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribITBIexAnexos_TribITBIex");

            entity.HasOne(d => d.Objeto).WithMany(p => p.TribItbiexAnexos)
                .HasForeignKey(d => d.ObjetoId)
                .HasConstraintName("FK_TribITBIexAnexos_TribObjetos");
        });

        modelBuilder.Entity<TribItbiexAvaliacao>(entity =>
        {
            entity.HasKey(e => e.ItbiavalId);

            entity.ToTable("TribITBIexAvaliacao");

            entity.Property(e => e.ItbiavalId).HasColumnName("ITBIAvalId");
            entity.Property(e => e.ItbiavalImgBci).HasColumnName("ITBIAvalImgBCI");
            entity.Property(e => e.ItbiavalImgItbi).HasColumnName("ITBIAvalImgITBI");
            entity.Property(e => e.Itbiid).HasColumnName("ITBIID");
            entity.Property(e => e.Itbiproximo).HasColumnName("ITBIProximo");

            entity.HasOne(d => d.Itbi).WithMany(p => p.TribItbiexAvaliacaos)
                .HasForeignKey(d => d.Itbiid)
                .HasConstraintName("FK_TribITBIexAvaliacao_TribITBIex");
        });

        modelBuilder.Entity<TribItbiexCompradore>(entity =>
        {
            entity.HasKey(e => new { e.ItbiedifId, e.ConId });

            entity.ToTable("TribITBIexCompradores");

            entity.Property(e => e.ItbiedifId).HasColumnName("ITBIEdifID");
            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.ImprimeNaGuia)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength();

            entity.HasOne(d => d.Con).WithMany(p => p.TribItbiexCompradores)
                .HasForeignKey(d => d.ConId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribITBIexCompradores_Contribuintes");

            entity.HasOne(d => d.Itbiedif).WithMany(p => p.TribItbiexCompradores)
                .HasForeignKey(d => d.ItbiedifId)
                .HasConstraintName("FK_TribITBIexCompradores_TribITBIEdif");
        });

        modelBuilder.Entity<TribItbiexEdif>(entity =>
        {
            entity.HasKey(e => e.ItbiedifId);

            entity.ToTable("TribITBIexEdif");

            entity.HasIndex(e => e.Itbiid, "IX_TribITBIexEdif_ITBIID").HasFillFactor(90);

            entity.Property(e => e.ItbiedifId)
                .ValueGeneratedNever()
                .HasColumnName("ITBIEdifID");
            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.ItbiedifAliqFinanc)
                .HasDefaultValue(0m)
                .HasColumnType("money")
                .HasColumnName("ITBIEdifAliqFinanc");
            entity.Property(e => e.ItbiedifAliquota)
                .HasColumnType("money")
                .HasColumnName("ITBIEdifAliquota");
            entity.Property(e => e.ItbiedifAreaConstr)
                .HasDefaultValue(0m)
                .HasColumnType("money")
                .HasColumnName("ITBIEdifAreaConstr");
            entity.Property(e => e.ItbiedifBaseCalcFin)
                .HasDefaultValue(0m)
                .HasColumnType("money")
                .HasColumnName("ITBIEdifBaseCalcFin");
            entity.Property(e => e.ItbiedifBaseCalcImovel)
                .HasDefaultValue(0m)
                .HasColumnType("money")
                .HasColumnName("ITBIEdifBaseCalcImovel");
            entity.Property(e => e.ItbiedifFinanciado)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength()
                .HasColumnName("ITBIEdifFinanciado");
            entity.Property(e => e.ItbiedifObservacao)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ITBIEdifObservacao");
            entity.Property(e => e.ItbiedifPercTransacao)
                .HasDefaultValue(0m)
                .HasColumnType("money")
                .HasColumnName("ITBIEdifPercTransacao");
            entity.Property(e => e.ItbiedifPercTransmitir)
                .HasColumnType("money")
                .HasColumnName("ITBIEdifPercTransmitir");
            entity.Property(e => e.ItbiedifTipoConstrucao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ITBIEdifTipoConstrucao");
            entity.Property(e => e.ItbiedifVlrDeclarado)
                .HasDefaultValue(0m)
                .HasColumnType("money")
                .HasColumnName("ITBIEdifVlrDeclarado");
            entity.Property(e => e.ItbiedifVlrDevido)
                .HasDefaultValue(0m)
                .HasColumnType("money")
                .HasColumnName("ITBIEdifVlrDevido");
            entity.Property(e => e.ItbiedifVlrVenalIptu)
                .HasDefaultValue(0m)
                .HasColumnType("money")
                .HasColumnName("ITBIEdifVlrVenalIPTU");
            entity.Property(e => e.Itbiid).HasColumnName("ITBIID");
            entity.Property(e => e.ItbisomaEconomias)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITBISomaEconomias");

            entity.HasOne(d => d.Edificacao).WithMany(p => p.TribItbiexEdifs)
                .HasForeignKey(d => d.EdificacaoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribITBIexEdif_TribEdificacoes");

            entity.HasOne(d => d.Itbi).WithMany(p => p.TribItbiexEdifs)
                .HasForeignKey(d => d.Itbiid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribITBIexEdif_TribITBI");
        });

        modelBuilder.Entity<TribItbiexVendedore>(entity =>
        {
            entity.HasKey(e => new { e.ItbiedifId, e.ConId });

            entity.ToTable("TribITBIexVendedores");

            entity.Property(e => e.ItbiedifId).HasColumnName("ITBIEdifID");
            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.ImprimeNaGuia)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength();

            entity.HasOne(d => d.Con).WithMany(p => p.TribItbiexVendedores)
                .HasForeignKey(d => d.ConId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribITBIexVendedores_Contribuintes");

            entity.HasOne(d => d.Itbiedif).WithMany(p => p.TribItbiexVendedores)
                .HasForeignKey(d => d.ItbiedifId)
                .HasConstraintName("FK_TribITBIexVendedores_TribITBIEdif");
        });

        modelBuilder.Entity<TribItbitipo>(entity =>
        {
            entity.HasKey(e => e.ItbitipoId);

            entity.ToTable("TribITBITipo");

            entity.Property(e => e.ItbitipoId)
                .ValueGeneratedNever()
                .HasColumnName("ITBITipoID");
            entity.Property(e => e.ItbidsTipo)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("ITBIDsTipo");
            entity.Property(e => e.Itbiordem).HasColumnName("ITBIOrdem");
            entity.Property(e => e.Itbistatus)
                .HasComment("(1) - Ativo, (0) - Inativo")
                .HasColumnName("ITBIStatus");
        });

        modelBuilder.Entity<TribItbivendedore>(entity =>
        {
            entity.HasKey(e => new { e.ItbiedifId, e.ConId });

            entity.ToTable("TribITBIVendedores", tb => tb.HasTrigger("TgTribITBIVendedoresInsert"));

            entity.Property(e => e.ItbiedifId).HasColumnName("ITBIEdifID");
            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.ImprimeNaGuia)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength();

            entity.HasOne(d => d.Con).WithMany(p => p.TribItbivendedores)
                .HasForeignKey(d => d.ConId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribITBIVendedores_Contribuintes");

            entity.HasOne(d => d.Itbiedif).WithMany(p => p.TribItbivendedores)
                .HasForeignKey(d => d.ItbiedifId)
                .HasConstraintName("FK_TribITBIVendedores_TribITBIEdif");
        });

        modelBuilder.Entity<TribLancImpostoImo>(entity =>
        {
            entity.HasKey(e => e.LanImpId);

            entity.ToTable("TribLancImpostoImo");

            entity.HasIndex(e => e.EdificacaoId, "IX_EdificacaoID").HasFillFactor(90);

            entity.HasIndex(e => new { e.EdificacaoId, e.TipoBxId, e.SimuId }, "IX_EdificacaoID_TipoBxID_SimuID").HasFillFactor(90);

            entity.HasIndex(e => e.InscricaoImobiliaria, "IX_InscricaoImobiliaria").HasFillFactor(90);

            entity.HasIndex(e => new { e.LanImpId, e.TipoBxId, e.SimuId }, "IX_LanImpID_SimuID_TipoBxID").HasFillFactor(90);

            entity.HasIndex(e => new { e.LanImpImoAno, e.EdificacaoId }, "IX_LanImpImoAno_EdificacaoID").HasFillFactor(90);

            entity.HasIndex(e => new { e.LanImpImoAno, e.TipoBxId }, "IX_LanImpImoAno_TipoBxID").HasFillFactor(90);

            entity.HasIndex(e => new { e.LanImpId, e.SimuId }, "IX_SimuID").HasFillFactor(90);

            entity.HasIndex(e => new { e.SimuId, e.LanImpId, e.LanImpImoAno, e.TipoBxId, e.TipoBxNome }, "IX_SimuID_LanImpID_LanImpImoAno_TipoBxID_TipoBxNome").HasFillFactor(90);

            entity.HasIndex(e => new { e.SimuId, e.RolTipoId }, "IX_TribLancImpostoImo_SimuID_RolTipoID");

            entity.HasIndex(e => new { e.SimuId, e.RolTipoId }, "IX_TribLancImpostoImo_SimuID_RolTipoID_inc_LanImpImoAno_EdificacaoID");

            entity.Property(e => e.LanImpId).HasColumnName("LanImpID");
            entity.Property(e => e.EdifAreaConstruida).HasColumnType("money");
            entity.Property(e => e.EdifCaracteristica)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasComment("domínio: Predial / Territorial");
            entity.Property(e => e.EdifComplementoImo)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.InscricaoImobiliaria)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.InscricaoImobiliariaGeo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("InscricaoImobiliariaGEO");
            entity.Property(e => e.LanImpImoCategoria)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LanImpImoEstrutura)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LanImpImoOcupacao)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LanImpImoProprietario)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LanImpImoResponsavel)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LanImpImoTipoConstrucao)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LanImpImoUtilizacao)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LanImpImoValorParcela).HasColumnType("money");
            entity.Property(e => e.LanImpImoValorUnica1).HasColumnType("money");
            entity.Property(e => e.LanImpImoValorUnica2).HasColumnType("money");
            entity.Property(e => e.LanImpImoVencParc1).HasColumnType("datetime");
            entity.Property(e => e.LanImpImoVencUnica1).HasColumnType("datetime");
            entity.Property(e => e.LanImpImoVencUnica2).HasColumnType("datetime");
            entity.Property(e => e.RolTipoId).HasColumnName("RolTipoID");
            entity.Property(e => e.SimuId).HasColumnName("SimuID");
            entity.Property(e => e.TerrAreaTerreno).HasColumnType("money");
            entity.Property(e => e.TipoBxId).HasColumnName("TipoBxID");
            entity.Property(e => e.TipoBxNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
            entity.Property(e => e.TipoTribNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TipoTribSiglaTributo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ValorVenalCalculo)
                .HasComment("Valor Venal para o Calculo do IPTU (ja considerado a fração do Terreno)")
                .HasColumnType("money");
            entity.Property(e => e.ValorVenalEdificacao).HasColumnType("money");
            entity.Property(e => e.ValorVenalTerreno).HasColumnType("money");
        });

        modelBuilder.Entity<TribLancImpostoImoComposicao>(entity =>
        {
            entity.HasKey(e => e.LanImpCompId);

            entity.ToTable("TribLancImpostoImoComposicao");

            entity.HasIndex(e => new { e.EdificacaoId, e.LanImpImoAno }, "IX_EdificacaoID_LanImpImoAno").HasFillFactor(90);

            entity.HasIndex(e => new { e.LanImpId, e.TipoTribId, e.TipoTribNome, e.LanImpImoCompValor }, "IX_LanImpID_TipoTribID_TipoTribNome_LanImpImoCompValor").HasFillFactor(90);

            entity.HasIndex(e => new { e.LanImpImoAno, e.EdificacaoId }, "IX_LanImpImoAno_EdificacaoID").HasFillFactor(90);

            entity.HasIndex(e => new { e.TipoTribId, e.LanImpId }, "IX_TipoTribID_LanImpID").HasFillFactor(90);

            entity.Property(e => e.LanImpCompId).HasColumnName("LanImpCompID");
            entity.Property(e => e.DataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.HostInclusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(host_name())");
            entity.Property(e => e.LanImpId).HasColumnName("LanImpID");
            entity.Property(e => e.LanImpImoCompValor).HasColumnType("money");
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
            entity.Property(e => e.TipoTribNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TipoTribSiglaTributo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");

            entity.HasOne(d => d.LanImp).WithMany(p => p.TribLancImpostoImoComposicaos)
                .HasForeignKey(d => d.LanImpId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_TribLancImpostoImoComposicao_TribLancImpostoImo");
        });

        modelBuilder.Entity<TribLegislacao>(entity =>
        {
            entity.HasKey(e => e.LeiId);

            entity.ToTable("TribLegislacao");

            entity.Property(e => e.LeiId)
                .ValueGeneratedNever()
                .HasColumnName("LeiID");
            entity.Property(e => e.Ementa).HasColumnType("text");
            entity.Property(e => e.Epigrafe).HasColumnType("text");
            entity.Property(e => e.LeiData).HasColumnType("datetime");
            entity.Property(e => e.LeiNome)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Preambulo).HasColumnType("text");

            entity.HasMany(d => d.LeiComps).WithMany(p => p.Leis)
                .UsingEntity<Dictionary<string, object>>(
                    "TribLeisComposicao",
                    r => r.HasOne<TribLegislacaoComponente>().WithMany()
                        .HasForeignKey("LeiCompId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_TribLeisComposicao_TribLegislacaoComponentes"),
                    l => l.HasOne<TribLegislacao>().WithMany()
                        .HasForeignKey("LeiId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_TribLeisComposicao_TribLegislacao"),
                    j =>
                    {
                        j.HasKey("LeiId", "LeiCompId").HasName("PK_TribLeisComposicao_1");
                        j.ToTable("TribLeisComposicao");
                        j.IndexerProperty<int>("LeiId").HasColumnName("LeiID");
                        j.IndexerProperty<int>("LeiCompId").HasColumnName("LeiCompID");
                    });
        });

        modelBuilder.Entity<TribLegislacaoComponente>(entity =>
        {
            entity.HasKey(e => e.LeiCompId).HasName("PK_TribLegislacaoComposicao");

            entity.Property(e => e.LeiCompId)
                .ValueGeneratedNever()
                .HasColumnName("LeiCompID");
            entity.Property(e => e.LeiCompIdref).HasColumnName("LeiCompIDRef");
            entity.Property(e => e.LeiCompNumero)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LeiCompTexto).HasColumnType("text");
            entity.Property(e => e.TipoCompId).HasColumnName("TipoCompID");

            entity.HasOne(d => d.TipoComp).WithMany(p => p.InverseTipoComp)
                .HasForeignKey(d => d.TipoCompId)
                .HasConstraintName("FK_TribLegislacaoComponentes_TribLegislacaoComponentes");
        });

        modelBuilder.Entity<TribLeisDesc>(entity =>
        {
            entity.HasKey(e => e.LeiDescId);

            entity.ToTable("TribLeisDesc");

            entity.HasIndex(e => e.TipoBxId, "IX_TipoBxID").HasFillFactor(90);

            entity.Property(e => e.LeiDescId)
                .ValueGeneratedNever()
                .HasColumnName("LeiDescID");
            entity.Property(e => e.Idmoeda).HasColumnName("IDMoeda");
            entity.Property(e => e.LeiDescAte).HasColumnType("datetime");
            entity.Property(e => e.LeiDescCadastroFiltro)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LeiDescCertPositivaNegativa)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LeiDescData).HasColumnType("datetime");
            entity.Property(e => e.LeiDescDe).HasColumnType("datetime");
            entity.Property(e => e.LeiDescDividasVencidasAte).HasColumnType("datetime");
            entity.Property(e => e.LeiDescDividasVencidasDe)
                .HasDefaultValueSql("(1 / 1 / 1900)")
                .HasColumnType("datetime");
            entity.Property(e => e.LeiDescIdLeisBloqueio)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LeiDescIncluiDivNaoParc)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LeiDescIncluiDivSuspensa)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LeiDescJurosAoMes)
                .HasDefaultValue(1m)
                .HasColumnType("money");
            entity.Property(e => e.LeiDescModuloContador)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LeiDescModuloContribuinte)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LeiDescNmAmigavel)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LeiDescPadrao)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength();
            entity.Property(e => e.LeiDescPercAdiant1Refis).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.LeiDescPercAdiant2Refis).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.LeiDescPercentualEntrada).HasColumnType("money");
            entity.Property(e => e.LeiDescPermiteEntrada)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LeiDescTipoCalcJuros)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("SIMPLES - PARCELA VARIAVEL");
            entity.Property(e => e.LeiDescTipoVencimento)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValue("ULTIMO DIA UTIL")
                .HasComment("contem o tipo de vencimento deve ser utilizado na geração das dividas do TAP ('NENHUM','TABELA VENCIMENTO','DATA TAP','ULTIMO DIA UTIL')");
            entity.Property(e => e.LeiDescValorMinMoeda).HasColumnType("money");
            entity.Property(e => e.LeiDescVencEspecifico).HasColumnType("datetime");
            entity.Property(e => e.LeiDescVerificaRescisao)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LeiDispApenasPrimParcela)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Sim")
                .IsFixedLength();
            entity.Property(e => e.LeiImprimirVencimento)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.LeiVisModuloContribuinte)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não");
            entity.Property(e => e.TextoId).HasColumnName("TextoID");
            entity.Property(e => e.TextoIdexterno).HasColumnName("TextoIDExterno");
            entity.Property(e => e.TipoBxId)
                .HasComment("Tipo de Baixa que busca para parcelamento")
                .HasColumnName("TipoBxID");
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");

            entity.HasOne(d => d.Texto).WithMany(p => p.TribLeisDescs)
                .HasForeignKey(d => d.TextoId)
                .HasConstraintName("FK_TribLeisDesc_TribTextos");

            entity.HasOne(d => d.TipoBx).WithMany(p => p.TribLeisDescs)
                .HasForeignKey(d => d.TipoBxId)
                .HasConstraintName("FK_TribLeisDesc_TribTipoBaixa");

            entity.HasOne(d => d.TipoTrib).WithMany(p => p.TribLeisDescs)
                .HasForeignKey(d => d.TipoTribId)
                .HasConstraintName("FK_TribLeisDesc_TribTipoTributos");
        });

        modelBuilder.Entity<TribLeisDescParcela>(entity =>
        {
            entity.HasKey(e => new { e.LeiDescId, e.NrParcelas });

            entity.Property(e => e.LeiDescId).HasColumnName("LeiDescID");
            entity.Property(e => e.NrParcelas).HasColumnName("nrParcelas");
            entity.Property(e => e.VlMinimoParcela)
                .HasColumnType("money")
                .HasColumnName("vlMinimoParcela");
            entity.Property(e => e.VlMinimoParcelar)
                .HasColumnType("money")
                .HasColumnName("vlMinimoParcelar");
            entity.Property(e => e.VlPercCorrecao)
                .HasColumnType("money")
                .HasColumnName("vlPercCorrecao");
            entity.Property(e => e.VlPercJuros)
                .HasColumnType("money")
                .HasColumnName("vlPercJuros");
            entity.Property(e => e.VlPercMulta)
                .HasColumnType("money")
                .HasColumnName("vlPercMulta");
            entity.Property(e => e.VlPercMultaDa)
                .HasColumnType("money")
                .HasColumnName("vlPercMultaDA");
            entity.Property(e => e.VlPercPrincipal)
                .HasColumnType("money")
                .HasColumnName("vlPercPrincipal");
        });

        modelBuilder.Entity<TribLeisDescTributo>(entity =>
        {
            entity.HasKey(e => new { e.LeiDescId, e.TipoTribId, e.QtdeParcelas });

            entity.HasIndex(e => new { e.LeiDescId, e.TipoTribId }, "IX_LeiDescID_TipoTribID").HasFillFactor(90);

            entity.HasIndex(e => new { e.TipoTribId, e.QtdeParcelas }, "IX_TipoTribID_QtdeParcelas").HasFillFactor(90);

            entity.HasIndex(e => new { e.TipoTribId, e.QtdeParcelas, e.LeiDefault, e.LeiDescId }, "IX_TribLeisDescTributos_TipoTribID_QtdeParcelas_LeiDefault_LeiDescID_inc_PercDescCorrecao").HasFillFactor(90);

            entity.HasIndex(e => new { e.TipoTribId, e.QtdeParcelas, e.LeiDefault, e.LeiDescId }, "IX_TribLeisDescTributos_TipoTribID_QtdeParcelas_LeiDefault_LeiDescID_inc_PercDescJuros").HasFillFactor(90);

            entity.HasIndex(e => new { e.TipoTribId, e.QtdeParcelas, e.LeiDefault, e.LeiDescId }, "IX_TribLeisDescTributos_TipoTribID_QtdeParcelas_LeiDefault_LeiDescID_inc_PercDescMulta").HasFillFactor(90);

            entity.HasIndex(e => new { e.TipoTribId, e.QtdeParcelas, e.LeiDefault, e.LeiDescId }, "IX_TribLeisDescTributos_TipoTribID_QtdeParcelas_LeiDefault_LeiDescID_inc_PercDescMultaDA").HasFillFactor(90);

            entity.HasIndex(e => new { e.TipoTribId, e.QtdeParcelas, e.LeiDefault, e.LeiDescId }, "IX_TribLeisDescTributos_TipoTribID_QtdeParcelas_LeiDefault_LeiDescID_inc_PercDescPrincipal").HasFillFactor(90);

            entity.Property(e => e.LeiDescId).HasColumnName("LeiDescID");
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
            entity.Property(e => e.QtdeParcelas).HasDefaultValue((short)1);
            entity.Property(e => e.LeiDefault)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength()
                .HasComment("Lei padrao caso nao seja informada nenhuma");
            entity.Property(e => e.PercDescCorrecao).HasColumnType("money");
            entity.Property(e => e.PercDescJuros).HasColumnType("money");
            entity.Property(e => e.PercDescMulta).HasColumnType("money");
            entity.Property(e => e.PercDescMultaDa)
                .HasColumnType("money")
                .HasColumnName("PercDescMultaDA");
            entity.Property(e => e.PercDescPrincipal).HasColumnType("money");

            entity.HasOne(d => d.LeiDesc).WithMany(p => p.TribLeisDescTributos)
                .HasForeignKey(d => d.LeiDescId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribLeisDescTributos_TribLeisDesc");

            entity.HasOne(d => d.TipoTrib).WithMany(p => p.TribLeisDescTributos)
                .HasForeignKey(d => d.TipoTribId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribLeisDescTributos_TribTipoTributos");
        });

        modelBuilder.Entity<TribLimiteTestadum>(entity =>
        {
            entity.HasKey(e => e.LimTid);

            entity.ToTable(tb => tb.HasTrigger("TgTribLimiteTestadaUpdate"));

            entity.Property(e => e.LimTid).HasColumnName("LimTID");
            entity.Property(e => e.LimTfator)
                .HasDefaultValue(0m)
                .HasColumnType("money")
                .HasColumnName("LimTFator");
            entity.Property(e => e.LimTnome)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("LimTNome");
            entity.Property(e => e.LimTpontos).HasColumnName("LimTPontos");
        });

        modelBuilder.Entity<TribLivroDividaAtiva>(entity =>
        {
            entity.HasKey(e => e.LivroDaid);

            entity.ToTable("TribLivroDividaAtiva", tb =>
                {
                    tb.HasTrigger("TgTribLivroDividaAtivaDelete");
                    tb.HasTrigger("TgTribLivroDividaAtivaInsert");
                    tb.HasTrigger("TgTribLivroDividaAtivaUpdate");
                });

            entity.HasIndex(e => e.ConIddivida, "IX_ConIDDivida").HasFillFactor(90);

            entity.HasIndex(e => e.DivEmpId, "IX_DivEmpID").HasFillFactor(90);

            entity.HasIndex(e => e.ImoIddivida, "IX_ImoIDDivida").HasFillFactor(90);

            entity.HasIndex(e => new { e.LivroDaanoTermo, e.LivroDanumeroTermo, e.LivroDasituacao }, "IX_LivroDAAnoTermo_LivroDANumeroTermo_LivroDASituacao").HasFillFactor(90);

            entity.HasIndex(e => e.LivroDadataInscricao, "IX_LivroDADataInscricao").HasFillFactor(90);

            entity.HasIndex(e => e.LivroDanumeroTermo, "IX_LivroDANumeroTermo").HasFillFactor(90);

            entity.HasIndex(e => new { e.LivroDanumero, e.LivroDafolha, e.LivroDaseq }, "IX_LivroDANumero_LivroDAFolha_LivroDASeq").HasFillFactor(90);

            entity.HasIndex(e => e.DataInclusao, "IX_TribLivroDividaAtiva_DataInclusao_inc_imoiddivida");

            entity.HasIndex(e => new { e.ImoIddivida, e.LivroDaid }, "IX_TribLivroDividaAtiva_ImoIDDivida_LivroDAID").HasFillFactor(90);

            entity.HasIndex(e => e.LivroDaid, "IX_TribLivroDividaAtiva_LivroDAID");

            entity.HasIndex(e => new { e.LivroDaid, e.ConIddivida }, "IX_TribLivroDividaAtiva_LivroDAID_ConIDDivida").HasFillFactor(90);

            entity.HasIndex(e => new { e.LivroDaid, e.ImoIddivida }, "IX_TribLivroDividaAtiva_LivroDAID_ImoIDDivida").HasFillFactor(90);

            entity.HasIndex(e => new { e.LivroDaid, e.ImoIddivida, e.ConIddivida, e.DivEmpId, e.LivroDadataInscricao, e.LivroDaseq, e.LivroDanumero, e.LivroDafolha }, "IX_TribLivroDividaAtiva_LivroDAID_ImoIDDivida_ConIDDivida_DivEmpID_DataInscricao_Seq_Numero_Folha");

            entity.HasIndex(e => e.LivroDaid, "IX_TribLivroDividaAtiva_LivroDAID_inc_ConIDDivida").HasFillFactor(90);

            entity.HasIndex(e => e.LivroDaid, "IX_TribLivroDividaAtiva_LivroDAID_inc_DivEmpID").HasFillFactor(90);

            entity.HasIndex(e => e.LivroDaid, "IX_TribLivroDividaAtiva_LivroDAID_inc_ImoIDDivida").HasFillFactor(90);

            entity.HasIndex(e => new { e.LivroDasituacao, e.ImoIddivida }, "IX_TribLivroDividaAtiva_LivroDASituacao_ImoIDDivida").HasFillFactor(90);

            entity.Property(e => e.LivroDaid)
                .HasComment("Numero do lançamento da divida em da")
                .HasColumnName("LivroDAID");
            entity.Property(e => e.ConIddivida).HasColumnName("ConIDDivida");
            entity.Property(e => e.DataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DivEmpId).HasColumnName("DivEmpID");
            entity.Property(e => e.ImoIddivida)
                .HasComment("identificação da divida")
                .HasColumnName("ImoIDDivida");
            entity.Property(e => e.LivroDaanoTermo).HasColumnName("LivroDAAnoTermo");
            entity.Property(e => e.LivroDadataCancelamento)
                .HasColumnType("datetime")
                .HasColumnName("LivroDADataCancelamento");
            entity.Property(e => e.LivroDadataInscricao)
                .HasColumnType("datetime")
                .HasColumnName("LivroDADataInscricao");
            entity.Property(e => e.LivroDafolha)
                .HasComment("numero da folha do livro")
                .HasColumnName("LivroDAFolha");
            entity.Property(e => e.LivroDamotivo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("LivroDAMotivo");
            entity.Property(e => e.LivroDamotivoCancelamento)
                .HasMaxLength(350)
                .IsUnicode(false)
                .HasColumnName("LivroDAMotivoCancelamento");
            entity.Property(e => e.LivroDamultaDa)
                .HasColumnType("money")
                .HasColumnName("LivroDAMultaDA");
            entity.Property(e => e.LivroDanumero)
                .HasComment("numero do livro")
                .HasColumnName("LivroDANumero");
            entity.Property(e => e.LivroDanumeroTermo).HasColumnName("LivroDANumeroTermo");
            entity.Property(e => e.LivroDaseq)
                .HasComment("numero de sequencia ")
                .HasColumnName("LivroDASeq");
            entity.Property(e => e.LivroDasituacao)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("Normal")
                .HasComment("Informa se o Livro esta Normal ou Cancelado (estorno de DA)")
                .HasColumnName("LivroDASituacao");
            entity.Property(e => e.LivroDausuarioCancelamento)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("LivroDAUsuarioCancelamento");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");

            entity.HasOne(d => d.ConIddividaNavigation).WithMany(p => p.TribLivroDividaAtivas)
                .HasForeignKey(d => d.ConIddivida)
                .HasConstraintName("FK_TribLivroDividaAtiva_TribDividasContribuinte");

            entity.HasOne(d => d.DivEmp).WithMany(p => p.TribLivroDividaAtivas)
                .HasForeignKey(d => d.DivEmpId)
                .HasConstraintName("FK_TribLivroDividaAtiva_TribDividasEmpresas");

            entity.HasOne(d => d.ImoIddividaNavigation).WithMany(p => p.TribLivroDividaAtivas)
                .HasForeignKey(d => d.ImoIddivida)
                .HasConstraintName("FK_TribLivroDividaAtiva_TribDividasImo");
        });

        modelBuilder.Entity<TribLocalizacaoQuadra>(entity =>
        {
            entity.HasKey(e => e.LocQid);

            entity.ToTable("TribLocalizacaoQuadra", tb => tb.HasTrigger("TgTribLocalizacaoQuadraUpdate"));

            entity.Property(e => e.LocQid).HasColumnName("LocQID");
            entity.Property(e => e.LocQfator)
                .HasDefaultValue(0m)
                .HasColumnType("money")
                .HasColumnName("LocQFator");
            entity.Property(e => e.LocQnome)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("LocQNome");
            entity.Property(e => e.LocQpontos).HasColumnName("LocQPontos");
        });

        modelBuilder.Entity<TribLogSistema>(entity =>
        {
            entity.HasKey(e => e.LogId);

            entity.ToTable("tribLogSistema", tb => tb.HasTrigger("TgTribLogSistemaInsert"));

            entity.HasIndex(e => e.CnpjCpfInscricao, "IX_CnpjCpfInscricao").HasFillFactor(90);

            entity.Property(e => e.LogId).HasColumnName("LogID");
            entity.Property(e => e.CnpjCpfInscricao)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Gravar o número da inscrição imobiliária sempre que gravar EdificacaoID, CNPJ ou CPF sempre que for Empresa ou Contribuinte.");
            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.LoSiData)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.LoSiHost)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValueSql("(host_name())");
            entity.Property(e => e.LoSiOcorrencia)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.LoSiTipoOcorrencia)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LoSiUsuario)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");
        });

        modelBuilder.Entity<TribLogTransfereCadastro>(entity =>
        {
            entity.HasKey(e => e.Idlog).HasName("PK_TribLogTransfereContrib");

            entity.Property(e => e.Idlog).HasColumnName("IDLog");
            entity.Property(e => e.Data)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.OrigemExcluida)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TabelaDestino).HasColumnType("text");
            entity.Property(e => e.TabelaOrigem).HasColumnType("text");
            entity.Property(e => e.TabelasAfetadas).HasColumnType("text");
            entity.Property(e => e.TransferenciaDe)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.Usuario)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");
        });

        modelBuilder.Entity<TribLogTransfereCadastrosRegistro>(entity =>
        {
            entity.HasKey(e => e.IdTransfereCadastrosRegistros);

            entity.Property(e => e.NmTabelaAlterada)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nmTabelaAlterada");
            entity.Property(e => e.VlChaveTabelaAlterada)
                .HasColumnType("text")
                .HasColumnName("vlChaveTabelaAlterada");

            entity.HasOne(d => d.IdLogNavigation).WithMany(p => p.TribLogTransfereCadastrosRegistros)
                .HasForeignKey(d => d.IdLog)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribLogTransfereCadastrosRegistros_TribLogTransfereCadastros");
        });

        modelBuilder.Entity<TribMovAnaliseAlvaraConstrucao>(entity =>
        {
            entity.HasKey(e => e.IdmovAnalise);

            entity.ToTable("TribMovAnaliseAlvaraConstrucao");

            entity.Property(e => e.IdmovAnalise)
                .ValueGeneratedNever()
                .HasColumnName("IDMovAnalise");
            entity.Property(e => e.DataMov).HasColumnType("datetime");
            entity.Property(e => e.Historico)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.StatusAprovacao)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.UsuId)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("UsuID");
        });

        modelBuilder.Entity<TribNotifEdital>(entity =>
        {
            entity.HasKey(e => e.NotifEditalId);

            entity.ToTable("TribNotifEdital");

            entity.Property(e => e.NotifEditalId)
                .ValueGeneratedNever()
                .HasColumnName("NotifEditalID");
            entity.Property(e => e.EdiDivImoId).HasColumnName("EdiDivImoID");
            entity.Property(e => e.NotifEditalData).HasColumnType("datetime");

            entity.HasOne(d => d.EdiDivImo).WithMany(p => p.TribNotifEditals)
                .HasForeignKey(d => d.EdiDivImoId)
                .HasConstraintName("FK_TribNotifEdital_TribDividasImoEdital");
        });

        modelBuilder.Entity<TribNotificacaoDivida>(entity =>
        {
            entity.HasKey(e => e.NotificacaoId);

            entity.HasIndex(e => e.ConIddivida, "IX_TribNotificacaoDividas_ConIDDivida").HasFillFactor(90);

            entity.HasIndex(e => e.DivEmpId, "IX_TribNotificacaoDividas_DivEmpID").HasFillFactor(90);

            entity.HasIndex(e => e.ImoIddivida, "IX_TribNotificacaoDividas_ImoIDDivida").HasFillFactor(90);

            entity.HasIndex(e => e.NotificacaoData, "IX_TribNotificacaoDividas_NotificacaoData").HasFillFactor(90);

            entity.HasIndex(e => e.BoleNossoNumero, "IX_TribNotificacaoDividas_boleNossoNumero").HasFillFactor(90);

            entity.HasIndex(e => new { e.NotificacaoNumero, e.NotificacaoAno, e.NotificacaoId, e.DivEmpId, e.ConIddivida, e.TextoId, e.TextoIdcapa, e.BoleNossoNumero, e.ImoIddivida, e.NotificacaoData, e.ComDesconto }, "_dta_index_TribNotificacaoDividas_8_1344320149__K7_K6_K1_K4_K5_K8_K16_K14_K3_K2_K15").HasFillFactor(90);

            entity.Property(e => e.NotificacaoId).HasColumnName("NotificacaoID");
            entity.Property(e => e.BoleNossoNumero)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("boleNossoNumero");
            entity.Property(e => e.ComDesconto)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Sim")
                .IsFixedLength();
            entity.Property(e => e.ConIddivida).HasColumnName("ConIDDivida");
            entity.Property(e => e.DataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DivEmpId).HasColumnName("DivEmpID");
            entity.Property(e => e.Entregue)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength()
                .HasComment("Marca se a notificação foi entregue ao contribuinte.");
            entity.Property(e => e.Host)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValueSql("(host_name())")
                .HasColumnName("host");
            entity.Property(e => e.ImoIddivida).HasColumnName("ImoIDDivida");
            entity.Property(e => e.NotificacaoData).HasColumnType("datetime");
            entity.Property(e => e.TextoId)
                .HasComment("Texto da notificação.")
                .HasColumnName("TextoID");
            entity.Property(e => e.TextoIdcapa).HasColumnName("TextoIDCapa");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");

            entity.HasOne(d => d.BoleNossoNumeroNavigation).WithMany(p => p.TribNotificacaoDivida)
                .HasForeignKey(d => d.BoleNossoNumero)
                .HasConstraintName("FK_TribNotificacaoDividas_TribBoletos");

            entity.HasOne(d => d.ConIddividaNavigation).WithMany(p => p.TribNotificacaoDivida)
                .HasForeignKey(d => d.ConIddivida)
                .HasConstraintName("FK_TribNotificacaoDividas_TribDividasContribuinte");

            entity.HasOne(d => d.DivEmp).WithMany(p => p.TribNotificacaoDivida)
                .HasForeignKey(d => d.DivEmpId)
                .HasConstraintName("FK_TribNotificacaoDividas_TribDividasEmpresas");

            entity.HasOne(d => d.ImoIddividaNavigation).WithMany(p => p.TribNotificacaoDivida)
                .HasForeignKey(d => d.ImoIddivida)
                .HasConstraintName("FK_TribNotificacaoDividas_TribDividasImo");

            entity.HasOne(d => d.Objeto).WithMany(p => p.TribNotificacaoDivida)
                .HasForeignKey(d => d.ObjetoId)
                .HasConstraintName("FK_TribNotificacaoDividas_TribObjetos");

            entity.HasOne(d => d.Texto).WithMany(p => p.TribNotificacaoDivida)
                .HasForeignKey(d => d.TextoId)
                .HasConstraintName("FK_TribNotificacaoDividas_TribTextos");
        });

        modelBuilder.Entity<TribNotificacaoDividasBkp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TribNotificacaoDividasBKP");

            entity.Property(e => e.BoleNossoNumero)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("boleNossoNumero");
            entity.Property(e => e.ComDesconto)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ConIddivida).HasColumnName("ConIDDivida");
            entity.Property(e => e.DataInclusao).HasColumnType("datetime");
            entity.Property(e => e.DivEmpId).HasColumnName("DivEmpID");
            entity.Property(e => e.Entregue)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Host)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("host");
            entity.Property(e => e.ImoIddivida).HasColumnName("ImoIDDivida");
            entity.Property(e => e.NotificacaoData).HasColumnType("datetime");
            entity.Property(e => e.NotificacaoId).HasColumnName("NotificacaoID");
            entity.Property(e => e.TextoId).HasColumnName("TextoID");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribNotificacaoDum>(entity =>
        {
            entity.HasKey(e => e.NotificacaoDaid);

            entity.ToTable("TribNotificacaoDA");

            entity.HasIndex(e => e.LivroDaid, "IX_TribNotificacaoDA_LivroDAID");

            entity.HasIndex(e => e.BoleNossoNumero, "IX_TribNotificacaoDA_boleNossoNumero").HasFillFactor(90);

            entity.Property(e => e.NotificacaoDaid).HasColumnName("NotificacaoDAID");
            entity.Property(e => e.BoleNossoNumero)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("boleNossoNumero");
            entity.Property(e => e.DataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Entregue)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength()
                .HasComment("Marca se a notificação foi entregue ao contribuinte.");
            entity.Property(e => e.Host)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValueSql("(host_name())")
                .HasColumnName("host");
            entity.Property(e => e.LivroDaid).HasColumnName("LivroDAID");
            entity.Property(e => e.NotificacaoDaano).HasColumnName("NotificacaoDAAno");
            entity.Property(e => e.NotificacaoDadata)
                .HasColumnType("datetime")
                .HasColumnName("NotificacaoDAData");
            entity.Property(e => e.NotificacaoDanumero).HasColumnName("NotificacaoDANumero");
            entity.Property(e => e.TextoId)
                .HasComment("Texto da notificação.")
                .HasColumnName("TextoID");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");

            entity.HasOne(d => d.BoleNossoNumeroNavigation).WithMany(p => p.TribNotificacaoDa)
                .HasForeignKey(d => d.BoleNossoNumero)
                .HasConstraintName("FK_TribNotificacaoDA_TribBoletos");

            entity.HasOne(d => d.LivroDa).WithMany(p => p.TribNotificacaoDa)
                .HasForeignKey(d => d.LivroDaid)
                .HasConstraintName("FK_TribNotificacaoDA_TribLivroDividaAtiva");

            entity.HasOne(d => d.Objeto).WithMany(p => p.TribNotificacaoDa)
                .HasForeignKey(d => d.ObjetoId)
                .HasConstraintName("FK_TribNotificacaoDA_TribObjetos");

            entity.HasOne(d => d.Texto).WithMany(p => p.TribNotificacaoDa)
                .HasForeignKey(d => d.TextoId)
                .HasConstraintName("FK_TribNotificacaoDA_TribTextos");
        });

        modelBuilder.Entity<TribNotificacaoLog>(entity =>
        {
            entity.HasKey(e => e.IdLogNotificacao);

            entity.ToTable("TribNotificacaoLog");

            entity.Property(e => e.IdLogNotificacao).HasColumnName("idLogNotificacao");
            entity.Property(e => e.DsErro)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dsErro");
            entity.Property(e => e.DsLogin)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsLogin");
            entity.Property(e => e.DsSession)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsSession");
            entity.Property(e => e.DtInclusao)
                .HasColumnType("datetime")
                .HasColumnName("dtInclusao");
            entity.Property(e => e.IdCadastro).HasColumnName("idCadastro");
            entity.Property(e => e.IdDivida).HasColumnName("idDivida");
            entity.Property(e => e.TpCadastro)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tpCadastro");
        });

        modelBuilder.Entity<TribNotificacaoProcesso>(entity =>
        {
            entity.HasKey(e => e.NotifProcessId);

            entity.ToTable("TribNotificacaoProcesso");

            entity.HasIndex(e => e.NotifProcessNumero, "IX_TribNotificacaoProcesso_NotifProcessNumero_inc_NotifProcessID_Inscricoes");

            entity.Property(e => e.NotifProcessId)
                .ValueGeneratedNever()
                .HasColumnName("NotifProcessID");
            entity.Property(e => e.DivId).HasColumnName("DivID");
            entity.Property(e => e.Inscricoes)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.NotifProcesUsuario)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");
            entity.Property(e => e.NotifProcessData)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.NrProcessoNumAno)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("nrProcessoNumAno");
            entity.Property(e => e.Observacao).HasColumnType("text");
            entity.Property(e => e.TextoId).HasColumnName("TextoID");
            entity.Property(e => e.TextoIdcompl).HasColumnName("TextoIDCompl");
        });

        modelBuilder.Entity<TribObito>(entity =>
        {
            entity.HasKey(e => e.ObitoId);

            entity.Property(e => e.ObitoId)
                .ValueGeneratedNever()
                .HasColumnName("ObitoID");
            entity.Property(e => e.CausaMorteId).HasColumnName("CausaMorteID");
            entity.Property(e => e.DataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ObitoData).HasColumnType("datetime");
            entity.Property(e => e.ObitoDataSepultamento).HasColumnType("datetime");
            entity.Property(e => e.ObitoFalecido)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.ObitoFalecidoCpf)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("ObitoFalecidoCPF");
            entity.Property(e => e.ObitoFalecidoFiliacao)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.ObitoFalecidoProfissao)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ObitoIdadeFalecido)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ObitoLocalFalecimento)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ObitoLocalSepultamento)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ObitoLocalVelorio)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");

            entity.HasOne(d => d.CausaMorte).WithMany(p => p.TribObitos)
                .HasForeignKey(d => d.CausaMorteId)
                .HasConstraintName("FK_TribObitos_TribCausasMortes");
        });

        modelBuilder.Entity<TribObjeto>(entity =>
        {
            entity.HasKey(e => e.ObjetoId);

            entity.Property(e => e.ObjetoId).ValueGeneratedNever();
            entity.Property(e => e.DataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ObjConteudo).HasColumnType("image");
            entity.Property(e => e.ObjExtensao)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");
        });

        modelBuilder.Entity<TribOcupacao>(entity =>
        {
            entity.HasKey(e => e.OcupaId);

            entity.ToTable("TribOcupacao", tb => tb.HasTrigger("TgTribOcupacaoUpdate"));

            entity.Property(e => e.OcupaId).HasColumnName("OcupaID");
            entity.Property(e => e.OcupaCalculaImpostos)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Sim")
                .IsFixedLength();
            entity.Property(e => e.OcupaFator)
                .HasDefaultValue(0m)
                .HasColumnType("money");
            entity.Property(e => e.OcupaNome)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<TribOrgaosClasse>(entity =>
        {
            entity.HasKey(e => e.IdorgaoClasse);

            entity.ToTable("TribOrgaosClasse");

            entity.Property(e => e.IdorgaoClasse)
                .ValueGeneratedNever()
                .HasColumnName("IDOrgaoClasse");
            entity.Property(e => e.NomeOrgaoClasse)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SiglaOrgao)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TribOrigemDividum>(entity =>
        {
            entity.HasKey(e => e.TribOrigemDivId);

            entity.HasIndex(e => e.ConIddivida, "IX_TribOrigemDivida_ConIDDivida").HasFillFactor(90);

            entity.HasIndex(e => e.DivEmpId, "IX_TribOrigemDivida_DivEmpID").HasFillFactor(90);

            entity.HasIndex(e => e.ImoIddivida, "IX_TribOrigemDivida_ImoIDDivida").HasFillFactor(90);

            entity.Property(e => e.TribOrigemDivId)
                .ValueGeneratedNever()
                .HasColumnName("TribOrigemDivID");
            entity.Property(e => e.ConIddivida).HasColumnName("ConIDDivida");
            entity.Property(e => e.DivEmpId).HasColumnName("DivEmpID");
            entity.Property(e => e.EdiId).HasColumnName("EdiID");
            entity.Property(e => e.ImoIddivida).HasColumnName("ImoIDDivida");
            entity.Property(e => e.TribOrigemDivNum)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TribTipoId).HasColumnName("TribTipoID");

            entity.HasOne(d => d.ConIddividaNavigation).WithMany(p => p.TribOrigemDivida)
                .HasForeignKey(d => d.ConIddivida)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_TribOrigemDivida_TribDividasContribuinte");

            entity.HasOne(d => d.DivEmp).WithMany(p => p.TribOrigemDivida)
                .HasForeignKey(d => d.DivEmpId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_TribOrigemDivida_TribDividasEmpresas");

            entity.HasOne(d => d.Edi).WithMany(p => p.TribOrigemDivida)
                .HasForeignKey(d => d.EdiId)
                .HasConstraintName("FK_TribOrigemDivida_tribEditalLanc");

            entity.HasOne(d => d.ImoIddividaNavigation).WithMany(p => p.TribOrigemDivida)
                .HasForeignKey(d => d.ImoIddivida)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_TribOrigemDivida_TribDividasImo");

            entity.HasOne(d => d.TribTipo).WithMany(p => p.TribOrigemDivida)
                .HasForeignKey(d => d.TribTipoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribOrigemDivida_TribTipoOrigemDivida");
        });

        modelBuilder.Entity<TribParamCalculo>(entity =>
        {
            entity.HasKey(e => new { e.TparamId, e.ParamId });

            entity.Property(e => e.TparamId).HasColumnName("TParamID");
            entity.Property(e => e.ParamId).HasColumnName("ParamID");
            entity.Property(e => e.CalculaImpostos)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CaracId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComputedColumnSql("(convert(varchar(5),[TParamID]) + convert(varchar(5),[ParamID]))", false)
                .HasColumnName("CaracID");
            entity.Property(e => e.Fator).HasColumnType("money");
            entity.Property(e => e.ParamNome)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Tparam).WithMany(p => p.TribParamCalculos)
                .HasForeignKey(d => d.TparamId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribParamCalculos_TribTipoParamCalculo");
        });

        modelBuilder.Entity<TribParamClassificacaoReceitum>(entity =>
        {
            entity.HasKey(e => e.ClassId);

            entity.HasIndex(e => new { e.TipoTribId, e.TipoDivId }, "IX_TipoTribID_TipoDivID").HasFillFactor(90);

            entity.HasIndex(e => new { e.NrAno, e.TipoDivId, e.TipoTribId, e.ClassDe, e.ClassAte }, "_dta_index_TribParamClassificacaoReceita_8_246096463__K15_K3_K2_K4_K5_1_6").HasFillFactor(90);

            entity.Property(e => e.ClassId).HasColumnName("ClassID");
            entity.Property(e => e.ClassReceitaVlrCorrecao)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ClassReceitaVlrDesconto)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ClassReceitaVlrDevolucao)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ClassReceitaVlrJuros)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ClassReceitaVlrMulta)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ClassReceitaVlrMultaDa)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ClassReceitaVlrMultaDA");
            entity.Property(e => e.ClassReceitaVlrOutrasDeducoes)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ClassReceitaVlrPrincipal)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ClassReceitaVlrRenuncia)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.IdTipoOpMultaDa).HasColumnName("IdTipoOpMultaDA");
            entity.Property(e => e.NrAno).HasColumnName("nrAno");
            entity.Property(e => e.TipoDivId).HasColumnName("TipoDivID");
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
        });

        modelBuilder.Entity<TribParamCoeficTaxa>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.ParamId).HasColumnName("ParamID");
            entity.Property(e => e.TparamId).HasColumnName("TParamID");
            entity.Property(e => e.TribCoeId).HasColumnName("TribCoeID");
            entity.Property(e => e.TribParamCoeId).HasColumnName("TribParamCoeID");
            entity.Property(e => e.TribParamCoeIdref).HasColumnName("TribParamCoeIDRef");
        });

        modelBuilder.Entity<TribParametro>(entity =>
        {
            entity.HasKey(e => e.TparamId);

            entity.Property(e => e.TparamId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TParamID");
            entity.Property(e => e.AssinaturaDigitalizada).HasColumnType("image");
            entity.Property(e => e.CargoResponsavel)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.CarimboContratoCorreio).HasColumnType("image");
            entity.Property(e => e.CertnegEmailContato)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("Email para contato em caso de erro na tentativa de emissão de certidão.")
                .HasColumnName("certnegEmailContato");
            entity.Property(e => e.CertnegEmailFromAutomatico)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("Email usado para envio de mensagem automatica.")
                .HasColumnName("certnegEmailFromAutomatico");
            entity.Property(e => e.CertnegEmailToAutomatico)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("Email disparado automáticamente nos casos de erro na emissão de certidão via internet. (Caso de duplicidade no cadastro).")
                .HasColumnName("certnegEmailToAutomatico");
            entity.Property(e => e.CertnegFoneContato)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("Fone para contato em caso de erro na emissão de certidão.")
                .HasColumnName("certnegFoneContato");
            entity.Property(e => e.CertnegInstrNormativa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("Texto com o número da Instrução Normativa que aprova a certidão.")
                .HasColumnName("certnegInstrNormativa");
            entity.Property(e => e.CertnegMarcaDagua)
                .HasComment("Marca dagua da certidao negativa de debitos municipais.")
                .HasColumnType("image")
                .HasColumnName("certnegMarcaDagua");
            entity.Property(e => e.CertnegPagina)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("Endereço da internet para emissão e autenticidade da certidão.")
                .HasColumnName("certnegPagina");
            entity.Property(e => e.CertnegServidorSmtp)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("Nome do servidor SMTP")
                .HasColumnName("certnegServidorSMTP");
            entity.Property(e => e.CertnegSubTitulo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("DEPARTAMENTO DE RECEITA")
                .HasComment("SubTitulo da certidao negativa de debitos. (DEPARTAMENTO DE RECEITA).")
                .HasColumnName("certnegSubTitulo");
            entity.Property(e => e.CertnegTitulo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("SECRETARIA MUNICIPAL DA FAZENDA")
                .HasComment("Titulo da certidao negativa de debitos. (SECRETARIA MUNICIPAL DA FAZENDA).")
                .HasColumnName("certnegTitulo");
            entity.Property(e => e.CertnegValidade)
                .HasDefaultValue(30L)
                .HasComment("Validade padrão de certidões negativa de débito (em dias).")
                .HasColumnName("certnegValidade");
            entity.Property(e => e.ConvenioId).HasComment("Informar o convenio da conta que é utilizada para recebimento dos boletos");
            entity.Property(e => e.DiasVencimentoItbi)
                .HasDefaultValue(0)
                .HasComment("Quantidades de dias a partir da data de geracao do itbi para seu vencimento")
                .HasColumnName("DiasVencimentoITBI");
            entity.Property(e => e.DtExpSenhaSupervisor).HasColumnType("datetime");
            entity.Property(e => e.NomeDivisao)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.NomeResponsavel)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.PercPadItbiimovelNaoFinanc)
                .HasColumnType("money")
                .HasColumnName("PercPadITBIImovelNaoFinanc");
            entity.Property(e => e.SenhaSupervisor).HasMaxLength(255);
            entity.Property(e => e.TextoIdcertNegativaFisica).HasColumnName("TextoIDCertNegativaFisica");
            entity.Property(e => e.TextoIdcertNegativaImovel).HasColumnName("TextoIDCertNegativaImovel");
            entity.Property(e => e.TextoIdcertNegativaJuridica).HasColumnName("TextoIDCertNegativaJuridica");
            entity.Property(e => e.TextoIdcertPositivaEnfisica).HasColumnName("TextoIDCertPositivaENFisica");
            entity.Property(e => e.TextoIdcertPositivaEnimovel).HasColumnName("TextoIDCertPositivaENImovel");
            entity.Property(e => e.TextoIdcertPositivaEnjuridica).HasColumnName("TextoIDCertPositivaENJuridica");
            entity.Property(e => e.TextoIdcertPositivaFisica).HasColumnName("TextoIDCertPositivaFisica");
            entity.Property(e => e.TextoIdcertPositivaImovel).HasColumnName("TextoIDCertPositivaImovel");
            entity.Property(e => e.TextoIdcertPositivaJuridica).HasColumnName("TextoIDCertPositivaJuridica");
            entity.Property(e => e.TextoIdobsGuia)
                .HasComment("Texto do tipo observação utilizado na guia de ocupação e uso do solo.")
                .HasColumnName("TextoIDObsGUIA");
            entity.Property(e => e.TipoTribIditbi).HasColumnName("TipoTribIDITBI");
            entity.Property(e => e.TipoTribIss)
                .HasDefaultValue(0)
                .HasColumnName("TipoTribISS");
            entity.Property(e => e.TipoTribIssretidoFonte)
                .HasDefaultValue(0)
                .HasColumnName("TipoTribISSRetidoFonte");
            entity.Property(e => e.UrlDownloadEdital)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasComment("Link para fornecedor baixar o edital que comprou.")
                .HasColumnName("urlDownloadEdital");

            entity.HasOne(d => d.Convenio).WithMany(p => p.TribParametros)
                .HasForeignKey(d => d.ConvenioId)
                .HasConstraintName("FK_TribParametros_ConvenioBanco");
        });

        modelBuilder.Entity<TribParcelamentoSn>(entity =>
        {
            entity.HasKey(e => e.ParcSnid);

            entity.ToTable("TribParcelamentoSN");

            entity.Property(e => e.ParcSnid).HasColumnName("ParcSNID");
            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.DataInclusao).HasColumnType("datetime");
            entity.Property(e => e.EmprCmc).HasColumnName("EmprCMC");
            entity.Property(e => e.ParcSndata)
                .HasColumnType("datetime")
                .HasColumnName("ParcSNData");
            entity.Property(e => e.ParcSndataConsolidacao)
                .HasColumnType("datetime")
                .HasColumnName("ParcSNDataConsolidacao");
            entity.Property(e => e.ParcSnmotivo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ParcSNMotivo");
            entity.Property(e => e.ParcSnprocesso)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ParcSNProcesso");
            entity.Property(e => e.ParcSnquitado)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ParcSNQuitado");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribParcelamentoSndestino>(entity =>
        {
            entity.HasKey(e => e.ParcSniddestino);

            entity.ToTable("TribParcelamentoSNDestino");

            entity.Property(e => e.ParcSniddestino).HasColumnName("ParcSNIDDestino");
            entity.Property(e => e.ConIddivida).HasColumnName("ConIDDivida");
            entity.Property(e => e.DataInclusao).HasColumnType("datetime");
            entity.Property(e => e.DivEmpId).HasColumnName("DivEmpID");
            entity.Property(e => e.ParcSnid).HasColumnName("ParcSNID");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribParcelamentoSnorigem>(entity =>
        {
            entity.HasKey(e => e.ParcSnidorigem);

            entity.ToTable("TribParcelamentoSNOrigem");

            entity.HasIndex(e => e.ParcSnid, "IX_TribParcelamentoSNOrigem_ParcSNID");

            entity.Property(e => e.ParcSnidorigem).HasColumnName("ParcSNIDOrigem");
            entity.Property(e => e.ConIddivida).HasColumnName("ConIDDivida");
            entity.Property(e => e.DataInclusao).HasColumnType("datetime");
            entity.Property(e => e.DivEmpId).HasColumnName("DivEmpID");
            entity.Property(e => e.ParcSnid).HasColumnName("ParcSNID");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribParede>(entity =>
        {
            entity.HasKey(e => e.ParedeId);

            entity.ToTable(tb => tb.HasTrigger("TgTribParedesUpdate"));

            entity.Property(e => e.ParedeId)
                .ValueGeneratedNever()
                .HasColumnName("ParedeID");
            entity.Property(e => e.ParedeFator).HasColumnType("money");
            entity.Property(e => e.ParedeNome)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribPatrimonio>(entity =>
        {
            entity.HasKey(e => e.PatrId);

            entity.ToTable("TribPatrimonio", tb => tb.HasTrigger("TgTribPatrimonioUpdate"));

            entity.Property(e => e.PatrId).HasColumnName("PatrID");
            entity.Property(e => e.PatrFator).HasColumnType("money");
            entity.Property(e => e.PatrNome)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribPedologium>(entity =>
        {
            entity.HasKey(e => e.PedoId);

            entity.ToTable("tribPedologia", tb => tb.HasTrigger("TgTribPedologiaUpdate"));

            entity.Property(e => e.PedoId).HasColumnName("PedoID");
            entity.Property(e => e.PedoFator)
                .HasDefaultValue(0m)
                .HasColumnType("money");
            entity.Property(e => e.PedoNome)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<TribPiso>(entity =>
        {
            entity.HasKey(e => e.PisoId);

            entity.ToTable("TribPiso", tb => tb.HasTrigger("TgTribPisoUpdate"));

            entity.Property(e => e.PisoId).HasColumnName("PisoID");
            entity.Property(e => e.PisoFator).HasColumnType("money");
            entity.Property(e => e.PisoNome)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribPlantaValore>(entity =>
        {
            entity.HasKey(e => new { e.PlantaValAno, e.TipoConId, e.EstrutId, e.CategId });

            entity.Property(e => e.TipoConId).HasColumnName("TipoConID");
            entity.Property(e => e.EstrutId).HasColumnName("EstrutID");
            entity.Property(e => e.CategId).HasColumnName("CategID");
            entity.Property(e => e.Data)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Host)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValueSql("(host_name())");
            entity.Property(e => e.OrigemCadastro)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("Manual")
                .HasComment("Pode ser por 'Transferencia' ou 'Manual'");
            entity.Property(e => e.PlantaValValorM2)
                .HasDefaultValue(0m)
                .HasColumnType("money");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");

            entity.HasOne(d => d.Categ).WithMany(p => p.TribPlantaValores)
                .HasForeignKey(d => d.CategId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribPlantaValores_TribCategoriaEdificacao");

            entity.HasOne(d => d.Estrut).WithMany(p => p.TribPlantaValores)
                .HasForeignKey(d => d.EstrutId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribPlantaValores_TribEstruturaParede");

            entity.HasOne(d => d.TipoCon).WithMany(p => p.TribPlantaValores)
                .HasForeignKey(d => d.TipoConId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribPlantaValores_TribTiposConstrucao");
        });

        modelBuilder.Entity<TribPortalCaixaEntradum>(entity =>
        {
            entity.HasKey(e => e.Cxid);

            entity.HasIndex(e => e.ConId, "IX_TribPortalCaixaEntrada_ConID_inc_cxid_ContID_msgid_cxDtLe").HasFillFactor(90);

            entity.HasIndex(e => new { e.ContadorId, e.CxDataLeitura }, "IX_TribPortalCaixaEntrada_ContadorID_cxDataLeitura");

            entity.Property(e => e.Cxid)
                .ValueGeneratedNever()
                .HasColumnName("cxid");
            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.ContadorId).HasColumnName("ContadorID");
            entity.Property(e => e.CxDataLeitura)
                .HasColumnType("datetime")
                .HasColumnName("cxDataLeitura");
            entity.Property(e => e.Msgid).HasColumnName("msgid");

            entity.HasOne(d => d.Contador).WithMany(p => p.TribPortalCaixaEntrada)
                .HasForeignKey(d => d.ContadorId)
                .HasConstraintName("FK_TribPortalCaixaEntrada_TribContador");

            entity.HasOne(d => d.Msg).WithMany(p => p.TribPortalCaixaEntrada)
                .HasForeignKey(d => d.Msgid)
                .HasConstraintName("FK_TribPortalCaixaEntrada_TribPortalMensagem");
        });

        modelBuilder.Entity<TribPortalMensagem>(entity =>
        {
            entity.HasKey(e => e.Msgid);

            entity.ToTable("TribPortalMensagem");

            entity.HasIndex(e => e.MsgVigenteAte, "IX_TribPortalMensagem_msgVigenteAte").HasFillFactor(90);

            entity.Property(e => e.Msgid)
                .ValueGeneratedNever()
                .HasColumnName("msgid");
            entity.Property(e => e.MsgAssunto)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("msgAssunto");
            entity.Property(e => e.MsgCorpo)
                .HasColumnType("text")
                .HasColumnName("msgCorpo");
            entity.Property(e => e.MsgData)
                .HasColumnType("datetime")
                .HasColumnName("msgData");
            entity.Property(e => e.MsgDe)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("msgDe");
            entity.Property(e => e.MsgTipo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("msgTipo");
            entity.Property(e => e.MsgVigenteAte)
                .HasColumnType("datetime")
                .HasColumnName("msgVigenteAte");
            entity.Property(e => e.Servid).HasColumnName("servid");

            entity.HasOne(d => d.Serv).WithMany(p => p.TribPortalMensagems)
                .HasForeignKey(d => d.Servid)
                .HasConstraintName("FK_TribPortalMensagem_Servidores");
        });

        modelBuilder.Entity<TribPosicaoEdificacao>(entity =>
        {
            entity.HasKey(e => e.PosicaoId).HasName("PK_TribPosicao");

            entity.ToTable("TribPosicaoEdificacao", tb => tb.HasTrigger("TgTribPosicaoEdificacaoUpdate"));

            entity.Property(e => e.PosicaoId).HasColumnName("PosicaoID");
            entity.Property(e => e.PosicaoFator).HasColumnType("money");
            entity.Property(e => e.PosicaoNome)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribProcAdvExecutado>(entity =>
        {
            entity.HasKey(e => e.ProcAdvExecId);

            entity.ToTable("TribProcAdvExecutado");

            entity.Property(e => e.ProcAdvExecId)
                .ValueGeneratedNever()
                .HasColumnName("ProcAdvExecID");
            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.DataExclusao)
                .HasColumnType("datetime")
                .HasColumnName("dataExclusao");
            entity.Property(e => e.DataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dataInclusao");
            entity.Property(e => e.IdcontribCategProf).HasColumnName("IDContribCategProf");
            entity.Property(e => e.ProcId).HasColumnName("ProcID");
            entity.Property(e => e.UsuarioExclusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("usuarioExclusao");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("usuarioInclusao");

            entity.HasOne(d => d.IdcontribCategProfNavigation).WithMany(p => p.TribProcAdvExecutados)
                .HasForeignKey(d => d.IdcontribCategProf)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribProcAdvExecutado_TribContribCategProf");

            entity.HasOne(d => d.TribProcExecutado).WithMany(p => p.TribProcAdvExecutados)
                .HasForeignKey(d => new { d.ProcId, d.ConId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribProcAdvExecutado_TribProcExecutado");
        });

        modelBuilder.Entity<TribProcAdvogado>(entity =>
        {
            entity.HasKey(e => new { e.ProcId, e.IdcontribCategProf });

            entity.Property(e => e.ProcId).HasColumnName("ProcID");
            entity.Property(e => e.IdcontribCategProf).HasColumnName("IDContribCategProf");
            entity.Property(e => e.DataExclusao)
                .HasColumnType("datetime")
                .HasColumnName("dataExclusao");
            entity.Property(e => e.DataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dataInclusao");

            entity.HasOne(d => d.Proc).WithMany(p => p.TribProcAdvogados)
                .HasForeignKey(d => d.ProcId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribProcAdvogados_TribProcProcesso");
        });

        modelBuilder.Entity<TribProcArrestoPenhora>(entity =>
        {
            entity.HasKey(e => e.ProcArrId);

            entity.ToTable("TribProcArrestoPenhora");

            entity.Property(e => e.ProcArrId)
                .ValueGeneratedNever()
                .HasColumnName("ProcArrID");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("datetime")
                .HasColumnName("dataAlteracao");
            entity.Property(e => e.DataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dataInclusao");
            entity.Property(e => e.ProcArrTipo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProcId).HasColumnName("ProcID");
            entity.Property(e => e.UsuarioAlteracao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("usuarioAlteracao");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("usuarioInclusao");

            entity.HasOne(d => d.Proc).WithMany(p => p.TribProcArrestoPenhoras)
                .HasForeignKey(d => d.ProcId)
                .HasConstraintName("FK_TribProcArrestoPenhora_TribProcProcesso");
        });

        modelBuilder.Entity<TribProcArrestoPenhoraDetalhe>(entity =>
        {
            entity.HasKey(e => e.ProcArrDetId);

            entity.ToTable("TribProcArrestoPenhoraDetalhe");

            entity.HasIndex(e => e.ProcArrId, "_dta_index_TribProcArrestoPenhoraDetalhe_5_1029891036__K2_1_3_4_5_6_7_8_13_14").HasFillFactor(90);

            entity.Property(e => e.ProcArrDetId)
                .ValueGeneratedNever()
                .HasColumnName("ProcArrDetID");
            entity.Property(e => e.ProcArrAceita)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProcArrCreditoGarantido)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProcArrDataConvertidoPenhora).HasColumnType("datetime");
            entity.Property(e => e.ProcArrDataPeticao).HasColumnType("datetime");
            entity.Property(e => e.ProcArrDescricaoBem).HasColumnType("text");
            entity.Property(e => e.ProcArrExequente)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProcArrExequenteData).HasColumnType("datetime");
            entity.Property(e => e.ProcArrGarantiaSuficiente)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProcArrId).HasColumnName("ProcArrID");
            entity.Property(e => e.ProcArrMotivoPeticao).HasColumnType("text");
            entity.Property(e => e.ProcArrPeticao).HasColumnType("text");
            entity.Property(e => e.ProcArrReforcoPenhora)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProcArrTipoBem).HasColumnType("text");

            entity.HasOne(d => d.ProcArr).WithMany(p => p.TribProcArrestoPenhoraDetalhes)
                .HasForeignKey(d => d.ProcArrId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_TribProcArrestoPenhoraDetalhe_TribProcArrestoPenhora");
        });

        modelBuilder.Entity<TribProcArrestoPenhoraExecutado>(entity =>
        {
            entity.HasKey(e => new { e.ProcArrId, e.ConId });

            entity.ToTable("TribProcArrestoPenhoraExecutado");

            entity.Property(e => e.ProcArrId).HasColumnName("ProcArrID");
            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.ProcArrContribData).HasColumnType("datetime");

            entity.HasOne(d => d.ProcArr).WithMany(p => p.TribProcArrestoPenhoraExecutados)
                .HasForeignKey(d => d.ProcArrId)
                .HasConstraintName("FK_TribProcArrestoPenhoraExecutado_TribProcArrestoPenhora");
        });

        modelBuilder.Entity<TribProcArrestoPenhoraIntimacao>(entity =>
        {
            entity.HasKey(e => e.ProcIntArrId);

            entity.ToTable("TribProcArrestoPenhoraIntimacao");

            entity.HasIndex(e => e.ProcArrId, "_dta_index_TribProcArrestoPenhoraIntimacao_5_1061891150__K2_1_3_4_5_8_9_10_11_12_13_14_15_16_17_18").HasFillFactor(90);

            entity.Property(e => e.ProcIntArrId)
                .ValueGeneratedNever()
                .HasColumnName("ProcIntArrID");
            entity.Property(e => e.ProcArrId).HasColumnName("ProcArrID");
            entity.Property(e => e.ProcIntData).HasColumnType("datetime");
            entity.Property(e => e.ProcIntDataCitacao).HasColumnType("datetime");
            entity.Property(e => e.ProcIntDeposito)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.ProcIntDtAvaliacao).HasColumnType("datetime");
            entity.Property(e => e.ProcIntDtDefinitiva).HasColumnType("datetime");
            entity.Property(e => e.ProcIntDtImpugnacao).HasColumnType("datetime");
            entity.Property(e => e.ProcIntDtLaudo).HasColumnType("datetime");
            entity.Property(e => e.ProcIntForma)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProcIntMotivo).HasColumnType("text");
            entity.Property(e => e.ProcIntPenhoraArresto)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProcIntPeticao).HasColumnType("text");
            entity.Property(e => e.ProcIntTermo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.ProcIntVlrAvaliacao).HasColumnType("money");
            entity.Property(e => e.ProcIntVlrDefinitiva).HasColumnType("money");
            entity.Property(e => e.ProcIntVlrImpugnacao).HasColumnType("money");
            entity.Property(e => e.ProcIntVlrLaudo).HasColumnType("money");

            entity.HasOne(d => d.ProcArr).WithMany(p => p.TribProcArrestoPenhoraIntimacaos)
                .HasForeignKey(d => d.ProcArrId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_TribProcArrestoPenhoraIntimacao_TribProcArrestoPenhora");
        });

        modelBuilder.Entity<TribProcAutor>(entity =>
        {
            entity.HasKey(e => new { e.ProcId, e.ConId }).HasName("PK_TribProcCoResponsavel");

            entity.ToTable("TribProcAutor");

            entity.Property(e => e.ProcId).HasColumnName("ProcID");
            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("datetime")
                .HasColumnName("dataAlteracao");
            entity.Property(e => e.DataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dataInclusao");
            entity.Property(e => e.UsuarioAlteracao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("usuarioAlteracao");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("usuarioInclusao");

            entity.HasOne(d => d.Proc).WithMany(p => p.TribProcAutors)
                .HasForeignKey(d => d.ProcId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribProcCoResponsavel_TribProcProcesso");
        });

        modelBuilder.Entity<TribProcCdum>(entity =>
        {
            entity.HasKey(e => new { e.ProcId, e.CertidaoDaid });

            entity.ToTable("TribProcCDA");

            entity.HasIndex(e => new { e.CertidaoDaid, e.ProcId }, "IX_TribProcCDA_CertidaoDAID_ProcID").HasFillFactor(90);

            entity.HasIndex(e => new { e.ProcId, e.CertidaoDaid }, "IX_TribProcCDA_ProcID_CertidaoDAID").HasFillFactor(90);

            entity.Property(e => e.ProcId).HasColumnName("ProcID");
            entity.Property(e => e.CertidaoDaid).HasColumnName("CertidaoDAID");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("datetime")
                .HasColumnName("dataAlteracao");
            entity.Property(e => e.DataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dataInclusao");
            entity.Property(e => e.ProcCertDataAjuiza).HasColumnType("datetime");
            entity.Property(e => e.ProcCertObsAjuiza)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.UsuarioAlteracao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("usuarioAlteracao");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("usuarioInclusao");

            entity.HasOne(d => d.Proc).WithMany(p => p.TribProcCda)
                .HasForeignKey(d => d.ProcId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribProcCDA_TribProcProcesso");
        });

        modelBuilder.Entity<TribProcCitacao>(entity =>
        {
            entity.HasKey(e => e.ProcCitId);

            entity.ToTable("TribProcCitacao");

            entity.HasIndex(e => new { e.ProcId, e.ConId }, "_dta_index_TribProcCitacao_5_1093891264__K2_K7_1_3_5_6").HasFillFactor(90);

            entity.Property(e => e.ProcCitId)
                .ValueGeneratedNever()
                .HasColumnName("ProcCitID");
            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("datetime")
                .HasColumnName("dataAlteracao");
            entity.Property(e => e.DataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dataInclusao");
            entity.Property(e => e.ProcCitDataCitacao).HasColumnType("datetime");
            entity.Property(e => e.ProcCitForma)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.ProcCitMotivo).HasColumnType("text");
            entity.Property(e => e.ProcCitRecebida)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProcId).HasColumnName("ProcID");
            entity.Property(e => e.UsuarioAlteracao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("usuarioAlteracao");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("usuarioInclusao");

            entity.HasOne(d => d.Proc).WithMany(p => p.TribProcCitacaos)
                .HasForeignKey(d => d.ProcId)
                .HasConstraintName("FK_TribProcCitacao_TribProcProcesso");
        });

        modelBuilder.Entity<TribProcEmbargo>(entity =>
        {
            entity.HasKey(e => e.ProcEmbId);

            entity.Property(e => e.ProcEmbId)
                .ValueGeneratedNever()
                .HasColumnName("ProcEmbID");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("datetime")
                .HasColumnName("dataAlteracao");
            entity.Property(e => e.DataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dataInclusao");
            entity.Property(e => e.ProcEmbDataImpugnacao).HasColumnType("datetime");
            entity.Property(e => e.ProcEmbDataIntimacao).HasColumnType("datetime");
            entity.Property(e => e.ProcEmbDataManifestacao).HasColumnType("datetime");
            entity.Property(e => e.ProcEmbObservacao)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ProcEmbPrazoFim).HasColumnType("datetime");
            entity.Property(e => e.ProcEmbPrazoInicio).HasColumnType("datetime");
            entity.Property(e => e.ProcEmbSentencaData).HasColumnType("datetime");
            entity.Property(e => e.ProcEmbSentencaTipo)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProcId).HasColumnName("ProcID");
            entity.Property(e => e.UsuarioAlteracao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("usuarioAlteracao");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("usuarioInclusao");

            entity.HasOne(d => d.Proc).WithMany(p => p.TribProcEmbargoes)
                .HasForeignKey(d => d.ProcId)
                .HasConstraintName("FK_TribProcEmbargos_TribProcProcesso");
        });

        modelBuilder.Entity<TribProcEmbargoTipo>(entity =>
        {
            entity.HasKey(e => new { e.ProcEmbId, e.ProcTipoEmbId });

            entity.ToTable("TribProcEmbargoTipo");

            entity.Property(e => e.ProcEmbId).HasColumnName("ProcEmbID");
            entity.Property(e => e.ProcTipoEmbId).HasColumnName("ProcTipoEmbID");
            entity.Property(e => e.ProcTipoEmbData).HasColumnType("datetime");

            entity.HasOne(d => d.ProcEmb).WithMany(p => p.TribProcEmbargoTipos)
                .HasForeignKey(d => d.ProcEmbId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribProcEmbargoTipo_TribProcEmbargos");

            entity.HasOne(d => d.ProcTipoEmb).WithMany(p => p.TribProcEmbargoTipos)
                .HasForeignKey(d => d.ProcTipoEmbId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribProcEmbargoTipo_TribProcTipoEmbargo");
        });

        modelBuilder.Entity<TribProcExecSentenca>(entity =>
        {
            entity.HasKey(e => new { e.ProcId, e.ConId });

            entity.ToTable("TribProcExecSentenca");

            entity.Property(e => e.ProcId).HasColumnName("ProcID");
            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("datetime")
                .HasColumnName("dataAlteracao");
            entity.Property(e => e.DataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dataInclusao");
            entity.Property(e => e.SentNumeroRegistro)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SentTipoNatureza)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Se for Precatorio deve selecionar a natureza [P]atriminial ou [A]limentar");
            entity.Property(e => e.SentTipoPagamento)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("[R]PV e [P]recatorio");
            entity.Property(e => e.UsuarioAlteracao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("usuarioAlteracao");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("usuarioInclusao");

            entity.HasOne(d => d.TribProcExecutado).WithOne(p => p.TribProcExecSentenca)
                .HasForeignKey<TribProcExecSentenca>(d => new { d.ProcId, d.ConId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribProcExecSentenca_TribProcExecutado");
        });

        modelBuilder.Entity<TribProcExecutado>(entity =>
        {
            entity.HasKey(e => new { e.ProcId, e.ConId });

            entity.ToTable("TribProcExecutado");

            entity.Property(e => e.ProcId).HasColumnName("ProcID");
            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("datetime")
                .HasColumnName("dataAlteracao");
            entity.Property(e => e.DataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dataInclusao");
            entity.Property(e => e.ProcExecPrincipal)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UsuarioAlteracao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("usuarioAlteracao");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("usuarioInclusao");

            entity.HasOne(d => d.Proc).WithMany(p => p.TribProcExecutados)
                .HasForeignKey(d => d.ProcId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribProcExecutado_TribProcProcesso");
        });

        modelBuilder.Entity<TribProcInfoComplementar>(entity =>
        {
            entity.HasKey(e => e.ProcInfoId);

            entity.ToTable("TribProcInfoComplementar");

            entity.HasIndex(e => new { e.ProcId, e.ProcTipoInfoId }, "_dta_index_TribProcInfoComplementar_5_1173891549__K2_K3_1_4").HasFillFactor(90);

            entity.Property(e => e.ProcInfoId)
                .ValueGeneratedNever()
                .HasColumnName("ProcInfoID");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("datetime")
                .HasColumnName("dataAlteracao");
            entity.Property(e => e.DataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dataInclusao");
            entity.Property(e => e.ProcId).HasColumnName("ProcID");
            entity.Property(e => e.ProcInfoData).HasColumnType("datetime");
            entity.Property(e => e.ProcInfoObs).HasColumnType("text");
            entity.Property(e => e.ProcTipoInfoId).HasColumnName("ProcTipoInfoID");
            entity.Property(e => e.UsuarioAlteracao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("usuarioAlteracao");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("usuarioInclusao");

            entity.HasOne(d => d.Proc).WithMany(p => p.TribProcInfoComplementars)
                .HasForeignKey(d => d.ProcId)
                .HasConstraintName("FK_TribProcInfoComplementar_TribProcProcesso");

            entity.HasOne(d => d.ProcTipoInfo).WithMany(p => p.TribProcInfoComplementars)
                .HasForeignKey(d => d.ProcTipoInfoId)
                .HasConstraintName("FK_TribProcInfoComplementar_TribProcTipoInformacao");
        });

        modelBuilder.Entity<TribProcMotivo>(entity =>
        {
            entity.HasKey(e => e.ProcMotId);

            entity.ToTable("TribProcMotivo");

            entity.Property(e => e.ProcMotId)
                .ValueGeneratedNever()
                .HasColumnName("ProcMotID");
            entity.Property(e => e.ProcMotNome)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribProcObjeto>(entity =>
        {
            entity.HasKey(e => e.ProcObjId);

            entity.Property(e => e.ProcObjId)
                .ValueGeneratedNever()
                .HasColumnName("ProcObjID");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("datetime")
                .HasColumnName("dataAlteracao");
            entity.Property(e => e.DataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dataInclusao");
            entity.Property(e => e.ObjetoId).HasColumnName("ObjetoID");
            entity.Property(e => e.ProcId).HasColumnName("ProcID");
            entity.Property(e => e.ProcObjNumero)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProcObjResumo)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.TipoObjetoId).HasColumnName("TipoObjetoID");
            entity.Property(e => e.TipoRegistro)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UsuarioAlteracao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("usuarioAlteracao");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("usuarioInclusao");
        });

        modelBuilder.Entity<TribProcOrgaoJurisdicional>(entity =>
        {
            entity.HasKey(e => e.ProcOrgJurisId);

            entity.ToTable("TribProcOrgaoJurisdicional");

            entity.Property(e => e.ProcOrgJurisId)
                .ValueGeneratedNever()
                .HasColumnName("ProcOrgJurisID");
            entity.Property(e => e.ProOrgJurisNome)
                .HasMaxLength(150)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribProcPermissaoTipoProcesso>(entity =>
        {
            entity.HasKey(e => new { e.UsuId, e.ProcTipoProcId });

            entity.ToTable("TribProcPermissaoTipoProcesso");

            entity.Property(e => e.UsuId)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("UsuID");
            entity.Property(e => e.ProcTipoProcId).HasColumnName("ProcTipoProcID");
        });

        modelBuilder.Entity<TribProcPeticao>(entity =>
        {
            entity.HasKey(e => e.ProcPetId).HasName("PK__TribProc__0496713A522421D2");

            entity.ToTable("TribProcPeticao");

            entity.Property(e => e.ProcPetId).HasColumnName("ProcPetID");
            entity.Property(e => e.CertidaoDavaraCivel)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("CertidaoDAVaraCivel");
            entity.Property(e => e.DataInclusao)
                .HasColumnType("datetime")
                .HasColumnName("dataInclusao");
            entity.Property(e => e.ObjetoId).HasColumnName("ObjetoID");
            entity.Property(e => e.ProcId).HasColumnName("ProcID");
            entity.Property(e => e.ProcPetvisivel)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Sim");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("usuarioInclusao");

            entity.HasOne(d => d.Objeto).WithMany(p => p.TribProcPeticaos)
                .HasForeignKey(d => d.ObjetoId)
                .HasConstraintName("FK__TribProcP__Objet__55F4B2B6");

            entity.HasOne(d => d.Proc).WithMany(p => p.TribProcPeticaos)
                .HasForeignKey(d => d.ProcId)
                .HasConstraintName("FK__TribProcP__ProcI__55008E7D");

            entity.HasMany(d => d.Cons).WithMany(p => p.ProcPets)
                .UsingEntity<Dictionary<string, object>>(
                    "TribProcPeticaoContribuinte",
                    r => r.HasOne<Contribuinte>().WithMany()
                        .HasForeignKey("ConId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK__TribProcP__conID__60724129"),
                    l => l.HasOne<TribProcPeticao>().WithMany()
                        .HasForeignKey("ProcPetId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK__TribProcP__ProcP__61666562"),
                    j =>
                    {
                        j.HasKey("ProcPetId", "ConId").HasName("PK__TribProc__AD9EB9F85E89F8B7");
                        j.ToTable("TribProcPeticaoContribuinte");
                        j.IndexerProperty<long>("ProcPetId").HasColumnName("ProcPetID");
                        j.IndexerProperty<long>("ConId").HasColumnName("conID");
                    });
        });

        modelBuilder.Entity<TribProcPeticaoCertidao>(entity =>
        {
            entity.HasKey(e => new { e.ProcPetId, e.CertidaoDaid }).HasName("PK__TribProc__E5E78B6358D11F61");

            entity.ToTable("TribProcPeticaoCertidao");

            entity.HasIndex(e => e.CertidaoDaid, "IX_TribProcPeticaoCertidao_CertidaoDAID");

            entity.Property(e => e.ProcPetId).HasColumnName("ProcPetID");
            entity.Property(e => e.CertidaoDaid).HasColumnName("CertidaoDAID");
            entity.Property(e => e.IdVersaoCda).HasColumnName("idVersaoCDA");

            entity.HasOne(d => d.CertidaoDa).WithMany(p => p.TribProcPeticaoCertidaos)
                .HasForeignKey(d => d.CertidaoDaid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__TribProcP__Certi__5AB967D3");

            entity.HasOne(d => d.ProcPet).WithMany(p => p.TribProcPeticaoCertidaos)
                .HasForeignKey(d => d.ProcPetId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__TribProcP__ProcP__5BAD8C0C");
        });

        modelBuilder.Entity<TribProcPeticaoObjeto>(entity =>
        {
            entity.HasKey(e => e.ProcObjId).HasName("PK_TribProcPetObjetos");

            entity.Property(e => e.ProcObjId).HasColumnName("ProcObjID");
            entity.Property(e => e.ObjetoId).HasColumnName("ObjetoID");
            entity.Property(e => e.ProcObjNumero)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProcObjResumo)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ProcPetId).HasColumnName("ProcPetID");
            entity.Property(e => e.TipoObjetoId).HasColumnName("TipoObjetoID");
        });

        modelBuilder.Entity<TribProcProcesso>(entity =>
        {
            entity.HasKey(e => e.ProcId);

            entity.ToTable("TribProcProcesso");

            entity.HasIndex(e => new { e.ProcAno, e.ProcId }, "IX_TribProcProcesso_ProcAno_ProcID").HasFillFactor(90);

            entity.HasIndex(e => new { e.ProcAno, e.ProcVaraCivil, e.ProcId }, "IX_TribProcProcesso_ProcAno_ProcVaraCivil_ProcID").HasFillFactor(90);

            entity.HasIndex(e => e.ProcNumeroUnico, "IX_TribProcProcesso_ProcNumeroUnico");

            entity.HasIndex(e => e.ProcId, "_dta_index_TribProcProcesso_8_1574608998__K1_13");

            entity.Property(e => e.ProcId)
                .ValueGeneratedNever()
                .HasColumnName("ProcID");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("datetime")
                .HasColumnName("dataAlteracao");
            entity.Property(e => e.DataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dataInclusao");
            entity.Property(e => e.ProcData).HasColumnType("datetime");
            entity.Property(e => e.ProcDataExtincao).HasColumnType("datetime");
            entity.Property(e => e.ProcLiberaCalculoHonorario)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProcMotivoExtincao).HasColumnType("text");
            entity.Property(e => e.ProcNumDistribuicao)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ProcNumeroUnico)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProcObs).HasColumnType("text");
            entity.Property(e => e.ProcOrgJurisId).HasColumnName("ProcOrgJurisID");
            entity.Property(e => e.ProcPercHonorario).HasColumnType("money");
            entity.Property(e => e.ProcSentencaExtincao).HasColumnType("text");
            entity.Property(e => e.ProcTipoProcId).HasColumnName("ProcTipoProcID");
            entity.Property(e => e.ProcValorCausa).HasColumnType("money");
            entity.Property(e => e.ProcVaraCivil)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UsuarioAlteracao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("usuarioAlteracao");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("usuarioInclusao");

            entity.HasOne(d => d.ProcOrgJuris).WithMany(p => p.TribProcProcessos)
                .HasForeignKey(d => d.ProcOrgJurisId)
                .HasConstraintName("FK_TribProcProcesso_TribProcOrgaoJurisdicional");
        });

        modelBuilder.Entity<TribProcProcurador>(entity =>
        {
            entity.HasKey(e => new { e.ProcId, e.IdcontribCategProf });

            entity.ToTable("TribProcProcurador");

            entity.Property(e => e.ProcId).HasColumnName("ProcID");
            entity.Property(e => e.IdcontribCategProf).HasColumnName("IDContribCategProf");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("datetime")
                .HasColumnName("dataAlteracao");
            entity.Property(e => e.DataExclusao)
                .HasColumnType("datetime")
                .HasColumnName("dataExclusao");
            entity.Property(e => e.DataInclusao)
                .HasColumnType("datetime")
                .HasColumnName("dataInclusao");
            entity.Property(e => e.UsuarioAlteracao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("usuarioAlteracao");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("usuarioInclusao");

            entity.HasOne(d => d.Proc).WithMany(p => p.TribProcProcuradors)
                .HasForeignKey(d => d.ProcId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribProcProcurador_TribProcProcesso");
        });

        modelBuilder.Entity<TribProcRecurso>(entity =>
        {
            entity.HasKey(e => e.ProcRecId);

            entity.Property(e => e.ProcRecId)
                .ValueGeneratedNever()
                .HasColumnName("ProcRecID");
            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("datetime")
                .HasColumnName("dataAlteracao");
            entity.Property(e => e.DataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dataInclusao");
            entity.Property(e => e.ProcId).HasColumnName("ProcID");
            entity.Property(e => e.ProcRecTipo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.UsuarioAlteracao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("usuarioAlteracao");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("usuarioInclusao");

            entity.HasOne(d => d.Proc).WithMany(p => p.TribProcRecursos)
                .HasForeignKey(d => d.ProcId)
                .HasConstraintName("FK_TribProcRecursos_TribProcProcesso");
        });

        modelBuilder.Entity<TribProcRecursosOrigem>(entity =>
        {
            entity.HasKey(e => e.ProcRecOrigemId);

            entity.ToTable("TribProcRecursosOrigem");

            entity.Property(e => e.ProcRecOrigemId)
                .ValueGeneratedNever()
                .HasColumnName("ProcRecOrigemID");
            entity.Property(e => e.ProcRecOrigemNome)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribProcRecursosOrigemDet>(entity =>
        {
            entity.HasKey(e => e.ProcRecOrId);

            entity.ToTable("TribProcRecursosOrigemDet");

            entity.HasIndex(e => new { e.ProcRecId, e.ProcRecOrigemId }, "_dta_index_TribProcRecursosOrigemDet_5_1253891834__K2_K3_1_4_5_6").HasFillFactor(90);

            entity.Property(e => e.ProcRecOrId)
                .ValueGeneratedNever()
                .HasColumnName("ProcRecOrID");
            entity.Property(e => e.ProcRecId).HasColumnName("ProcRecID");
            entity.Property(e => e.ProcRecOrCamara)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProcRecOrDtIntimacao).HasColumnType("datetime");
            entity.Property(e => e.ProcRecOrObs).HasColumnType("text");
            entity.Property(e => e.ProcRecOrTribunal)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProcRecOrigemId).HasColumnName("ProcRecOrigemID");

            entity.HasOne(d => d.ProcRec).WithMany(p => p.TribProcRecursosOrigemDets)
                .HasForeignKey(d => d.ProcRecId)
                .HasConstraintName("FK_TribProcRecursosOrigemDet_TribProcRecursos");

            entity.HasOne(d => d.ProcRecOrigem).WithMany(p => p.TribProcRecursosOrigemDets)
                .HasForeignKey(d => d.ProcRecOrigemId)
                .HasConstraintName("FK_TribProcRecursosOrigemDet_TribProcRecursosOrigem");
        });

        modelBuilder.Entity<TribProcSuspensao>(entity =>
        {
            entity.HasKey(e => e.ProcSuspId);

            entity.ToTable("TribProcSuspensao");

            entity.Property(e => e.ProcSuspId)
                .ValueGeneratedNever()
                .HasColumnName("ProcSuspID");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("datetime")
                .HasColumnName("dataAlteracao");
            entity.Property(e => e.DataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dataInclusao");
            entity.Property(e => e.ProcId).HasColumnName("ProcID");
            entity.Property(e => e.ProcSuspDataDespacho).HasColumnType("datetime");
            entity.Property(e => e.ProcSuspDataPeticao).HasColumnType("datetime");
            entity.Property(e => e.ProcSuspDeferida)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProcSuspPrazoFim).HasColumnType("datetime");
            entity.Property(e => e.ProcSuspPrazoInicio).HasColumnType("datetime");
            entity.Property(e => e.ProcSuspSuspensoAte).HasColumnType("datetime");
            entity.Property(e => e.UsuarioAlteracao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("usuarioAlteracao");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("usuarioInclusao");

            entity.HasOne(d => d.Proc).WithMany(p => p.TribProcSuspensaos)
                .HasForeignKey(d => d.ProcId)
                .HasConstraintName("FK_TribProcSuspensao_TribProcProcesso");
        });

        modelBuilder.Entity<TribProcSuspensaoMotivo>(entity =>
        {
            entity.HasKey(e => new { e.ProcSuspId, e.ProcMotId });

            entity.ToTable("TribProcSuspensaoMotivo");

            entity.Property(e => e.ProcSuspId).HasColumnName("ProcSuspID");
            entity.Property(e => e.ProcMotId).HasColumnName("ProcMotID");
            entity.Property(e => e.ProcSuspMotObs)
                .HasMaxLength(255)
                .IsUnicode(false);

            entity.HasOne(d => d.ProcMot).WithMany(p => p.TribProcSuspensaoMotivos)
                .HasForeignKey(d => d.ProcMotId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribProcSuspensaoMotivo_TribProcMotivo");

            entity.HasOne(d => d.ProcSusp).WithMany(p => p.TribProcSuspensaoMotivos)
                .HasForeignKey(d => d.ProcSuspId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribProcSuspensaoMotivo_TribProcSuspensao");
        });

        modelBuilder.Entity<TribProcTemplate>(entity =>
        {
            entity.HasKey(e => e.TempleId);

            entity.ToTable("TribProcTemplate");

            entity.Property(e => e.TempleId)
                .ValueGeneratedNever()
                .HasColumnName("TempleID");
            entity.Property(e => e.TempleConteudo).HasColumnType("image");
            entity.Property(e => e.TempleDescricao)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.TempleExtensao)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TempleTitulo)
                .HasMaxLength(250)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribProcTestemunha>(entity =>
        {
            entity.HasKey(e => new { e.ProcId, e.ConId });

            entity.ToTable("TribProcTestemunha");

            entity.Property(e => e.ProcId).HasColumnName("ProcID");
            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("datetime")
                .HasColumnName("dataAlteracao");
            entity.Property(e => e.DataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dataInclusao");
            entity.Property(e => e.ProcTestObs)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.ProcTestPrincipal)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UsuarioAlteracao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("usuarioAlteracao");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("usuarioInclusao");

            entity.HasOne(d => d.Proc).WithMany(p => p.TribProcTestemunhas)
                .HasForeignKey(d => d.ProcId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribProcTestemunha_TribProcProcesso");
        });

        modelBuilder.Entity<TribProcTipoEmbargo>(entity =>
        {
            entity.HasKey(e => e.ProcTipoEmbId);

            entity.ToTable("TribProcTipoEmbargo");

            entity.Property(e => e.ProcTipoEmbId)
                .ValueGeneratedNever()
                .HasColumnName("ProcTipoEmbID");
            entity.Property(e => e.ProcTipoEmbNome)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribProcTipoInformacao>(entity =>
        {
            entity.HasKey(e => e.ProcTipoInfoId);

            entity.ToTable("TribProcTipoInformacao");

            entity.Property(e => e.ProcTipoInfoId)
                .ValueGeneratedNever()
                .HasColumnName("ProcTipoInfoID");
            entity.Property(e => e.ProcTipoInfoNome)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribProcTipoObjeto>(entity =>
        {
            entity.HasKey(e => e.TipoObjetoId);

            entity.ToTable("TribProcTipoObjeto");

            entity.Property(e => e.TipoObjetoId)
                .ValueGeneratedNever()
                .HasColumnName("TipoObjetoID");
            entity.Property(e => e.TipoObjetoDescricao)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribProcTipoProcesso>(entity =>
        {
            entity.HasKey(e => e.ProcTipoProcId);

            entity.ToTable("TribProcTipoProcesso");

            entity.Property(e => e.ProcTipoProcId)
                .ValueGeneratedNever()
                .HasColumnName("ProcTipoProcID");
            entity.Property(e => e.ProcTipoProcNome)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribProgressTributo>(entity =>
        {
            entity.HasKey(e => e.PrgTribId);

            entity.ToTable("TribProgressTributo");

            entity.Property(e => e.PrgTribId)
                .ValueGeneratedNever()
                .HasColumnName("PrgTribID");
            entity.Property(e => e.PrgTribAte).HasColumnType("money");
            entity.Property(e => e.PrgTribDe).HasColumnType("money");
            entity.Property(e => e.PrgTribDescricao)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PrgTribPercentual).HasColumnType("money");
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
        });

        modelBuilder.Entity<TribProgressaoBonificacao>(entity =>
        {
            entity.HasKey(e => e.ProgresBonifId);

            entity.ToTable("TribProgressaoBonificacao");

            entity.Property(e => e.ProgresBonifId)
                .ValueGeneratedNever()
                .HasColumnName("ProgresBonifID");
            entity.Property(e => e.ProgresBonifPerc).HasColumnType("money");
        });

        modelBuilder.Entity<TribProgressaoTerritorial>(entity =>
        {
            entity.HasKey(e => e.ProgresItid);

            entity.ToTable("TribProgressaoTerritorial");

            entity.Property(e => e.ProgresItid)
                .ValueGeneratedNever()
                .HasColumnName("ProgresITID");
            entity.Property(e => e.ProgresItate).HasColumnName("ProgresITAte");
            entity.Property(e => e.ProgresItde).HasColumnName("ProgresITDe");
            entity.Property(e => e.ProgresItperc)
                .HasColumnType("money")
                .HasColumnName("ProgresITPerc");
        });

        modelBuilder.Entity<TribProtestoIrregularidade>(entity =>
        {
            entity.HasKey(e => e.IdIrregularidade);

            entity.ToTable("TribProtestoIrregularidade");

            entity.Property(e => e.IdIrregularidade)
                .ValueGeneratedNever()
                .HasColumnName("idIrregularidade");
            entity.Property(e => e.Descricao)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasColumnName("descricao");
        });

        modelBuilder.Entity<TribProtestoLote>(entity =>
        {
            entity.HasKey(e => e.IdLote);

            entity.ToTable("TribProtestoLote");

            entity.Property(e => e.IdLote).HasColumnName("idLote");
            entity.Property(e => e.DsNomeArquivo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("dsNomeArquivo");
            entity.Property(e => e.DsNomeArquivoRetorno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsNomeArquivoRetorno");
            entity.Property(e => e.DsUsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsUsuarioInclusao");
            entity.Property(e => e.DtInclusao)
                .HasColumnType("datetime")
                .HasColumnName("dtInclusao");
            entity.Property(e => e.DtLote)
                .HasColumnType("datetime")
                .HasColumnName("dtLote");
            entity.Property(e => e.FlSituacao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("flSituacao");
            entity.Property(e => e.IdDivisao).HasColumnName("idDivisao");
            entity.Property(e => e.LoteAno).HasColumnName("loteAno");
            entity.Property(e => e.LoteNumero).HasColumnName("loteNumero");

            entity.HasOne(d => d.IdDivisaoNavigation).WithMany(p => p.TribProtestoLotes)
                .HasForeignKey(d => d.IdDivisao)
                .HasConstraintName("FK_TribProtestoLote_Divisoes");
        });

        modelBuilder.Entity<TribProtestoLoteCdacontrib>(entity =>
        {
            entity.HasKey(e => e.IdLoteContrib);

            entity.ToTable("TribProtestoLoteCDAContrib");

            entity.HasIndex(e => new { e.IdLote, e.CertidaoDaid }, "IX_TribProtestoLoteCDAContrib_idLote_CertidaoDAID");

            entity.Property(e => e.IdLoteContrib).HasColumnName("idLoteContrib");
            entity.Property(e => e.CertidaoDaid).HasColumnName("CertidaoDAID");
            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.IdLote).HasColumnName("idLote");

            entity.HasOne(d => d.Con).WithMany(p => p.TribProtestoLoteCdacontribs)
                .HasForeignKey(d => d.ConId)
                .HasConstraintName("FK_TribProtestoLoteCDAContrib_Contribuintes");

            entity.HasOne(d => d.TribProtestoLoteCdum).WithMany(p => p.TribProtestoLoteCdacontribs)
                .HasForeignKey(d => new { d.IdLote, d.CertidaoDaid })
                .HasConstraintName("FK_TribProtestoLoteCDAContrib_TribProtestoLoteCDA");
        });

        modelBuilder.Entity<TribProtestoLoteCdahistoricoSituacaoDividum>(entity =>
        {
            entity.HasKey(e => e.IdCdahistSitDivida).HasName("PK__TribProt__DD3CF6610A130D77");

            entity.ToTable("TribProtestoLoteCDAHistoricoSituacaoDivida");

            entity.HasIndex(e => new { e.CertidaoDaid, e.ImoIddivida }, "IX_TribProtestoLoteCDAHistoricoSitu_CertidaoDAID_ImoIDDivida");

            entity.HasIndex(e => new { e.CertidaoDaid, e.IdCdahistSitDivida, e.ConIddivida }, "IX_TribProtestoLoteCDAHistoricoSitu_CertidaoDAID_idCDAHistSitDivida_ConIDDivida");

            entity.HasIndex(e => new { e.CertidaoDaid, e.IdCdahistSitDivida, e.DivEmpId }, "IX_TribProtestoLoteCDAHistoricoSitu_CertidaoDAID_idCDAHistSitDivida_DivEmpID");

            entity.HasIndex(e => new { e.CertidaoDaid, e.IdCdahistSitDivida, e.ImoIddivida }, "IX_TribProtestoLoteCDAHistoricoSitu_CertidaoDAID_idCDAHistSitDivida_ImoIDDivida");

            entity.HasIndex(e => e.CertidaoDaid, "IX_TribProtestoLoteCDAHistoricoSituacaoDivida_CertidaoDAID");

            entity.HasIndex(e => e.ConIddivida, "IX_TribProtestoLoteCDAHistoricoSituacaoDivida_ConIDDivida");

            entity.HasIndex(e => e.DivEmpId, "IX_TribProtestoLoteCDAHistoricoSituacaoDivida_DivEmpID");

            entity.HasIndex(e => e.ImoIddivida, "IX_TribProtestoLoteCDAHistoricoSituacaoDivida_ImoIDDivida");

            entity.Property(e => e.IdCdahistSitDivida).HasColumnName("idCDAHistSitDivida");
            entity.Property(e => e.CertidaoDaid).HasColumnName("CertidaoDAID");
            entity.Property(e => e.ConIddivida).HasColumnName("ConIDDivida");
            entity.Property(e => e.DivEmpId).HasColumnName("DivEmpID");
            entity.Property(e => e.DsUsuarioAlteracao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsUsuarioAlteracao");
            entity.Property(e => e.DtInclusao)
                .HasColumnType("datetime")
                .HasColumnName("dtInclusao");
            entity.Property(e => e.IdLote).HasColumnName("idLote");
            entity.Property(e => e.ImoIddivida).HasColumnName("ImoIDDivida");
            entity.Property(e => e.SituacaoOrigem)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("situacaoOrigem");
            entity.Property(e => e.TipoDivIddestino).HasColumnName("TipoDivIDDestino");
            entity.Property(e => e.TipoDivIdorigem).HasColumnName("TipoDivIDOrigem");

            entity.HasOne(d => d.CertidaoDa).WithMany(p => p.TribProtestoLoteCdahistoricoSituacaoDivida)
                .HasForeignKey(d => d.CertidaoDaid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__TribProte__Certi__0BFB55E9");

            entity.HasOne(d => d.ConIddividaNavigation).WithMany(p => p.TribProtestoLoteCdahistoricoSituacaoDivida)
                .HasForeignKey(d => d.ConIddivida)
                .HasConstraintName("FK__TribProte__ConID__11B42F3F");

            entity.HasOne(d => d.DivEmp).WithMany(p => p.TribProtestoLoteCdahistoricoSituacaoDivida)
                .HasForeignKey(d => d.DivEmpId)
                .HasConstraintName("FK__TribProte__DivEm__10C00B06");

            entity.HasOne(d => d.IdLoteNavigation).WithMany(p => p.TribProtestoLoteCdahistoricoSituacaoDivida)
                .HasForeignKey(d => d.IdLote)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__TribProte__idLot__0CEF7A22");

            entity.HasOne(d => d.ImoIddividaNavigation).WithMany(p => p.TribProtestoLoteCdahistoricoSituacaoDivida)
                .HasForeignKey(d => d.ImoIddivida)
                .HasConstraintName("FK__TribProte__ImoID__0FCBE6CD");

            entity.HasOne(d => d.TipoDivIddestinoNavigation).WithMany(p => p.TribProtestoLoteCdahistoricoSituacaoDividumTipoDivIddestinoNavigations)
                .HasForeignKey(d => d.TipoDivIddestino)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__TribProte__TipoD__0ED7C294");

            entity.HasOne(d => d.TipoDivIdorigemNavigation).WithMany(p => p.TribProtestoLoteCdahistoricoSituacaoDividumTipoDivIdorigemNavigations)
                .HasForeignKey(d => d.TipoDivIdorigem)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__TribProte__TipoD__0DE39E5B");
        });

        modelBuilder.Entity<TribProtestoLoteCdum>(entity =>
        {
            entity.HasKey(e => new { e.IdLote, e.CertidaoDaid });

            entity.ToTable("TribProtestoLoteCDA");

            entity.HasIndex(e => e.CertidaoDaid, "IX_TribProtestoLoteCDA_CertidaoDAID");

            entity.HasIndex(e => new { e.CertidaoDaid, e.IdLote, e.IdprotestoLoteCda, e.IdVersaoCda }, "IX_TribProtestoLoteCDA_CertidaoDAID_idLote_IDProtestoLoteCDA_idVersaoCDA").IsDescending(true, false, false, false);

            entity.HasIndex(e => new { e.IdprotestoLoteCda, e.CertidaoDaid }, "IX_TribProtestoLoteCDA_IDProtestoLoteCDA_CertidaoDAID");

            entity.HasIndex(e => new { e.IdLote, e.CertidaoDaid, e.IdprotestoLoteCda, e.IdVersaoCda }, "IX_TribProtestoLoteCDA_idLote_CertidaoDAID_IDProtestoLoteCDA_idVersaoCDA");

            entity.Property(e => e.IdLote).HasColumnName("idLote");
            entity.Property(e => e.CertidaoDaid).HasColumnName("CertidaoDAID");
            entity.Property(e => e.DsUsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsUsuarioInclusao");
            entity.Property(e => e.DtInclusao)
                .HasColumnType("datetime")
                .HasColumnName("dtInclusao");
            entity.Property(e => e.IdVersaoCda).HasColumnName("idVersaoCDA");
            entity.Property(e => e.IdprotestoLoteCda)
                .ValueGeneratedOnAdd()
                .HasColumnName("IDProtestoLoteCDA");
            entity.Property(e => e.NrReferencia)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nrReferencia");
            entity.Property(e => e.VlCdaatualizada)
                .HasColumnType("money")
                .HasColumnName("vlCDAAtualizada");

            entity.HasOne(d => d.CertidaoDa).WithMany(p => p.TribProtestoLoteCda)
                .HasForeignKey(d => d.CertidaoDaid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribProtestoLoteCDA_TribCertidaoDA");

            entity.HasOne(d => d.IdLoteNavigation).WithMany(p => p.TribProtestoLoteCda)
                .HasForeignKey(d => d.IdLote)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribProtestoLoteCDA_TribProtestoLote");

            entity.HasOne(d => d.IdVersaoCdaNavigation).WithMany(p => p.TribProtestoLoteCda)
                .HasForeignKey(d => d.IdVersaoCda)
                .HasConstraintName("FK_TribProtestoLoteCDA_TribCertidaoDAVersao");
        });

        modelBuilder.Entity<TribProtestoMovimento>(entity =>
        {
            entity.HasKey(e => e.IdMovimento);

            entity.ToTable("TribProtestoMovimento");

            entity.HasIndex(e => e.CertidaoDaid, "IX_TribProtestoMovimento_CertidaoDAID");

            entity.HasIndex(e => new { e.IdLote, e.CertidaoDaid }, "IX_TribProtestoMovimento_CertidaoDAID_idLote");

            entity.HasIndex(e => new { e.CertidaoDaid, e.IdLote, e.IdMovimento, e.FlSituacao }, "IX_TribProtestoMovimento_CertidaoDAID_idLote_idMovimento_flSituacao_inc_dtOcorrencia");

            entity.HasIndex(e => new { e.CertidaoDaid, e.IdMovimento, e.IdOcorrencia, e.IdLote, e.FlSituacao, e.IdIrregularidade, e.DtProtocolo }, "IX_TribProtestoMovimento_CertidaoDAID_idMovimento_idOcorrencia_idLote_flSituacao");

            entity.HasIndex(e => new { e.DtProtocolo, e.CertidaoDaid }, "IX_TribProtestoMovimento_dtProtocolo_CertidaoDAID_inc_idLote_dsProtocolo_idCartorio");

            entity.HasIndex(e => new { e.FlSituacao, e.CertidaoDaid, e.IdLote, e.IdMovimento, e.IdIrregularidade, e.IdOcorrencia, e.DtProtocolo }, "IX_TribProtestoMovimento_flSituacao_CertidaoDAID_idLote_idMovimento");

            entity.HasIndex(e => e.IdIrregularidade, "IX_TribProtestoMovimento_idIrregularidade");

            entity.HasIndex(e => e.IdOcorrencia, "IX_TribProtestoMovimento_idOcorrencia");

            entity.HasIndex(e => new { e.DtProtocolo, e.FlSituacao, e.CertidaoDaid, e.IdIrregularidade, e.IdOcorrencia, e.IdLote, e.IdMovimento }, "_dta_index_TribProtestoMovimento_8_849746146__K11_K5_K3_K9_K10_K2_K1_4_12_13");

            entity.HasIndex(e => new { e.CertidaoDaid, e.IdMovimento, e.FlSituacao, e.IdLote }, "_dta_index_TribProtestoMovimento_8_849746146__K3_K1_K5_K2_4_9_10");

            entity.HasIndex(e => new { e.CertidaoDaid, e.IdMovimento, e.FlSituacao, e.IdLote }, "_dta_index_TribProtestoMovimento_8_849746146__K3_K1_K5_K2_9_10");

            entity.HasIndex(e => new { e.CertidaoDaid, e.IdLote, e.FlSituacao, e.IdMovimento, e.IdIrregularidade, e.IdOcorrencia, e.DtProtocolo }, "_dta_index_TribProtestoMovimento_8_849746146__K3_K2_K5_K1_K9_K10_K11_4_12_13");

            entity.Property(e => e.IdMovimento).HasColumnName("idMovimento");
            entity.Property(e => e.CertidaoDaid).HasColumnName("CertidaoDAID");
            entity.Property(e => e.DsNomeArquivo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("dsNomeArquivo");
            entity.Property(e => e.DsNomeArquivoRetorno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsNomeArquivoRetorno");
            entity.Property(e => e.DsObservacao)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("dsObservacao");
            entity.Property(e => e.DsProtocolo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dsProtocolo");
            entity.Property(e => e.DtOcorrencia)
                .HasColumnType("datetime")
                .HasColumnName("dtOcorrencia");
            entity.Property(e => e.DtProtocolo)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("dtProtocolo");
            entity.Property(e => e.FlSituacao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("flSituacao");
            entity.Property(e => e.IdCartorio).HasColumnName("idCartorio");
            entity.Property(e => e.IdIrregularidade).HasColumnName("idIrregularidade");
            entity.Property(e => e.IdLote).HasColumnName("idLote");
            entity.Property(e => e.IdOcorrencia)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("idOcorrencia");
        });

        modelBuilder.Entity<TribProtestoOcorrencium>(entity =>
        {
            entity.HasKey(e => e.IdOcorrencia);

            entity.Property(e => e.IdOcorrencia)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("idOcorrencia");
            entity.Property(e => e.Descricao)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasColumnName("descricao");
        });

        modelBuilder.Entity<TribProtocoloAlteracao>(entity =>
        {
            entity.HasKey(e => e.ProtAltId);

            entity.ToTable("TribProtocoloAlteracao");

            entity.HasIndex(e => new { e.ProtAltTabela, e.ProtAltIdtabela }, "IX_TribProtocoloAlteracao").HasFillFactor(90);

            entity.HasIndex(e => e.ConId, "IX_TribProtocoloAlteracao_ConID");

            entity.HasIndex(e => new { e.ProtAltTabela, e.ProtAltIdtabela }, "IX_TribProtocoloAlteracao_ProtAltTabela_ProtAltIDTabela_inc_ProtAltID_Usuario");

            entity.HasIndex(e => new { e.ProtAltTabela, e.ProtAltIdtabela }, "IX_TribProtocoloAlteracao_ProtAltTabela_inc_ProtAltID_DataInclusao");

            entity.Property(e => e.ProtAltId)
                .ValueGeneratedNever()
                .HasColumnName("ProtAltID");
            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.Data).HasColumnType("datetime");
            entity.Property(e => e.DataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.EmprCmc).HasColumnName("EmprCMC");
            entity.Property(e => e.MotivoAlteracao)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ProtAltIdtabela).HasColumnName("ProtAltIDTabela");
            entity.Property(e => e.ProtAltTabela)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Protocolo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Usuario)
                .HasMaxLength(255)
                .IsUnicode(false);

            entity.HasOne(d => d.Con).WithMany(p => p.TribProtocoloAlteracaos)
                .HasForeignKey(d => d.ConId)
                .HasConstraintName("FK_TribProtocoloAlteracao_Contribuintes");

            entity.HasOne(d => d.Edificacao).WithMany(p => p.TribProtocoloAlteracaos)
                .HasForeignKey(d => d.EdificacaoId)
                .HasConstraintName("FK_TribProtocoloAlteracao_TribEdificacoes");

            entity.HasOne(d => d.EmprCmcNavigation).WithMany(p => p.TribProtocoloAlteracaos)
                .HasForeignKey(d => d.EmprCmc)
                .HasConstraintName("FK_TribProtocoloAlteracao_TribEmpresas");
        });

        modelBuilder.Entity<TribQuadra>(entity =>
        {
            entity.HasKey(e => e.QuadraId);

            entity.ToTable("TribQuadra", tb => tb.HasTrigger("TgTribQuadraUpdate"));

            entity.HasIndex(e => e.QuadraCodLocal, "IX_QuadraCodLocal").HasFillFactor(90);

            entity.HasIndex(e => e.QuadraCodLocalGeo, "IX_QuadraCodLocalGEO").HasFillFactor(90);

            entity.Property(e => e.QuadraId)
                .ValueGeneratedNever()
                .HasColumnName("QuadraID");
            entity.Property(e => e.Dsobservacao)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasComment("Obervação para a conferência da quadra.")
                .HasColumnName("dsobservacao");
            entity.Property(e => e.Flsituacaoconferencia)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Situação da conferência cadastral: [O]K ou [D]ivergente.")
                .HasColumnName("flsituacaoconferencia");
            entity.Property(e => e.Idusuariorevisao)
                .HasComment("ID do usuário (RP) que fez a revisão.")
                .HasColumnName("idusuariorevisao");
            entity.Property(e => e.QuadraCodLocal)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.QuadraCodLocalGeo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("QuadraCodLocalGEO");
        });

        modelBuilder.Entity<TribQuadraLograd>(entity =>
        {
            entity.HasKey(e => new { e.QuadraId, e.LogradId });

            entity.ToTable("TribQuadraLograd", tb =>
                {
                    tb.HasTrigger("TgTribQuadraLogradInsert");
                    tb.HasTrigger("TgTribQuadraLogradUpdate");
                });

            entity.HasIndex(e => new { e.Setor, e.LogradId, e.SecaoLograd, e.LadoSecaoLograd }, "IX_SecaoLograd_LadoSecaoLograd").HasFillFactor(90);

            entity.HasIndex(e => e.Idloteamento, "IX_TribQuadraLograd_IDLoteamento");

            entity.HasIndex(e => new { e.QuadraId, e.LogradId }, "IX_TribQuadraLograd_QuadraID_LogradID_inc_IDLoteamento").HasFillFactor(90);

            entity.HasIndex(e => new { e.LogradId, e.QuadraId, e.FatorKid }, "_idx_TribQuadraLograd_LogradID_QuadraID_FatorKID").HasFillFactor(90);

            entity.Property(e => e.QuadraId).HasColumnName("QuadraID");
            entity.Property(e => e.LogradId).HasColumnName("LogradID");
            entity.Property(e => e.Atingido)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Faz parte da informação do sistema viário. ");
            entity.Property(e => e.Cep).HasColumnName("CEP");
            entity.Property(e => e.ClViId).HasColumnName("ClViID");
            entity.Property(e => e.CoordFinalLo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CoordFinalLO");
            entity.Property(e => e.CoordFinalNs)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CoordFinalNS");
            entity.Property(e => e.CoordInicialLo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CoordInicialLO");
            entity.Property(e => e.CoordInicialNs)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CoordInicialNS");
            entity.Property(e => e.DataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.FatorKid)
                .HasDefaultValue(0L)
                .HasColumnName("FatorKID");
            entity.Property(e => e.FatorKidanterior).HasColumnName("FatorKIDAnterior");
            entity.Property(e => e.Idloteamento)
                .HasDefaultValue(0)
                .HasColumnName("IDLoteamento");
            entity.Property(e => e.LadoSecaoLograd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PrevCaixaRua)
                .HasComment("Previsão da caixa da rua em metros, nesta quadra de acordo com o sistema viário.")
                .HasColumnType("decimal(19, 4)");
            entity.Property(e => e.RecuoMinimo)
                .HasComment("Recuo mínimo permitido para o imóvel a contar da caixa da rua de acordo com o sistema  viário.")
                .HasColumnType("decimal(19, 4)");
            entity.Property(e => e.Setor).HasColumnName("setor");
            entity.Property(e => e.SicoId).HasColumnName("sicoID");
            entity.Property(e => e.TiViId).HasColumnName("TiViID");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");
            entity.Property(e => e.VlrMetroQuadrado).HasColumnType("money");

            entity.HasOne(d => d.ClVi).WithMany(p => p.TribQuadraLograds)
                .HasForeignKey(d => d.ClViId)
                .HasConstraintName("FK_TribQuadraLograd_tribZonaClassificacaoVia");

            entity.HasOne(d => d.FatorK).WithMany(p => p.TribQuadraLograds)
                .HasForeignKey(d => d.FatorKid)
                .HasConstraintName("FK_TribQuadraLograd_TribFatorK");

            entity.HasOne(d => d.IdloteamentoNavigation).WithMany(p => p.TribQuadraLograds)
                .HasForeignKey(d => d.Idloteamento)
                .HasConstraintName("FK_TribQuadraLograd_Loteamentos");

            entity.HasOne(d => d.Lograd).WithMany(p => p.TribQuadraLograds)
                .HasForeignKey(d => d.LogradId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribQuadraLograd_Logradouro");

            entity.HasOne(d => d.Quadra).WithMany(p => p.TribQuadraLograds)
                .HasForeignKey(d => d.QuadraId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribQuadraLograd_TribQuadra");

            entity.HasOne(d => d.Sico).WithMany(p => p.TribQuadraLograds)
                .HasForeignKey(d => d.SicoId)
                .HasConstraintName("FK_TribQuadraLograd_sisCores");

            entity.HasOne(d => d.TiVi).WithMany(p => p.TribQuadraLograds)
                .HasForeignKey(d => d.TiViId)
                .HasConstraintName("FK_TribQuadraLograd_tribZonaTipoViaUrbana");
        });

        modelBuilder.Entity<TribQuadraLogradParamCalculo>(entity =>
        {
            entity.HasKey(e => new { e.QuadraId, e.LogradId, e.TparamId, e.ParamId });

            entity.Property(e => e.QuadraId).HasColumnName("QuadraID");
            entity.Property(e => e.LogradId).HasColumnName("LogradID");
            entity.Property(e => e.TparamId).HasColumnName("TParamID");
            entity.Property(e => e.ParamId).HasColumnName("ParamID");
        });

        modelBuilder.Entity<TribQuadraLogradTributo>(entity =>
        {
            entity.HasKey(e => new { e.QuadraId, e.LogradId, e.TipoTribId, e.AnoCalculo });

            entity.HasIndex(e => e.LogradId, "IX_LogradID").HasFillFactor(90);

            entity.HasIndex(e => e.TipoTribId, "IX_TipoTribID").HasFillFactor(90);

            entity.HasIndex(e => e.AnoCalculo, "IX_TribQuadraLogradTributos_AnoCalculo").HasFillFactor(90);

            entity.HasIndex(e => e.AnoCalculo, "IX_TribQuadraLogradTributos_AnoCalculo_inc_QuadraID_LogradID_TipoTribID").HasFillFactor(90);

            entity.HasIndex(e => new { e.QuadraId, e.LogradId, e.AnoCalculo }, "IX_TribQuadraLogradTributos_QuadraID_LogradID_AnoCalculo").HasFillFactor(90);

            entity.Property(e => e.QuadraId).HasColumnName("QuadraID");
            entity.Property(e => e.LogradId).HasColumnName("LogradID");
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
            entity.Property(e => e.DataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.HostMaquina)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValueSql("(host_name())")
                .HasComment("Nome da maquina que fez a baixa.");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");

            entity.HasOne(d => d.Quadra).WithMany(p => p.TribQuadraLogradTributos)
                .HasForeignKey(d => d.QuadraId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribQuadraLogradTributos_TribQuadra");

            entity.HasOne(d => d.TipoTrib).WithMany(p => p.TribQuadraLogradTributos)
                .HasForeignKey(d => d.TipoTribId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribQuadraLogradTributos_TribTipoTributos");

            entity.HasOne(d => d.TribQuadraLograd).WithMany(p => p.TribQuadraLogradTributos)
                .HasForeignKey(d => new { d.QuadraId, d.LogradId })
                .HasConstraintName("FK_TribQuadraLogradTributos_TribQuadraLograd");
        });

        modelBuilder.Entity<TribReceita>(entity =>
        {
            entity.HasKey(e => new { e.RecId, e.RecAno });

            entity.Property(e => e.RecId)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RecNome)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribRecolhimentoBlocosNf>(entity =>
        {
            entity.HasKey(e => e.RecNfid);

            entity.ToTable("TribRecolhimentoBlocosNF");

            entity.Property(e => e.RecNfid)
                .ValueGeneratedNever()
                .HasColumnName("RecNFID");
            entity.Property(e => e.AutNfid).HasColumnName("AutNFID");
            entity.Property(e => e.RecNfdataDevol)
                .HasColumnType("datetime")
                .HasColumnName("RecNFDataDevol");
            entity.Property(e => e.RecNfdataRec)
                .HasColumnType("datetime")
                .HasColumnName("RecNFDataRec");
            entity.Property(e => e.RecNfdevolApessoa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RecNFDevolAPessoa");
            entity.Property(e => e.RecNfobservacao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RecNFObservacao");
            entity.Property(e => e.RecNfrecPorPessoa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RecNFRecPorPessoa");

            entity.HasOne(d => d.AutNf).WithMany(p => p.TribRecolhimentoBlocosNfs)
                .HasForeignKey(d => d.AutNfid)
                .HasConstraintName("FK_TribRecolhimentoBlocosNF_TribAutorizacaoBlocosNF");
        });

        modelBuilder.Entity<TribReducaoTributo>(entity =>
        {
            entity.HasKey(e => e.IdReducao);

            entity.Property(e => e.ConId).HasColumnName("conId");
            entity.Property(e => e.DsLogin)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsLogin");
            entity.Property(e => e.DsReducao)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("dsReducao");
            entity.Property(e => e.DtInclusao)
                .HasColumnType("datetime")
                .HasColumnName("dtInclusao");
            entity.Property(e => e.DtReducao)
                .HasColumnType("datetime")
                .HasColumnName("dtReducao");
            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.EmprCmc).HasColumnName("emprCMC");
            entity.Property(e => e.NrAnoCda).HasColumnName("nrAnoCDA");
            entity.Property(e => e.NrAnoProtocolo).HasColumnName("nrAnoProtocolo");
            entity.Property(e => e.NrExercicio).HasColumnName("nrExercicio");
            entity.Property(e => e.NrNumCda).HasColumnName("nrNumCDA");
            entity.Property(e => e.NrProtocolo).HasColumnName("nrProtocolo");
            entity.Property(e => e.TipoBxId).HasColumnName("TipoBxID");
            entity.Property(e => e.TipoDivId).HasColumnName("TipoDivID");
            entity.Property(e => e.TpReducao)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("tpReducao");
        });

        modelBuilder.Entity<TribReducaoTributosIten>(entity =>
        {
            entity.HasKey(e => e.IdReducaoTributo);

            entity.Property(e => e.ConIddividaDeducao).HasColumnName("ConIDDividaDeducao");
            entity.Property(e => e.EmprIddividaDeducao).HasColumnName("EmprIDDividaDeducao");
            entity.Property(e => e.ImoIddividaDeducao).HasColumnName("ImoIDDividaDeducao");
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
            entity.Property(e => e.VlComposicao)
                .HasColumnType("money")
                .HasColumnName("vlComposicao");
            entity.Property(e => e.VlReducao)
                .HasColumnType("money")
                .HasColumnName("vlReducao");

            entity.HasOne(d => d.IdReducaoNavigation).WithMany(p => p.TribReducaoTributosItens)
                .HasForeignKey(d => d.IdReducao)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribReducaoTributosItens_TribReducaoTributos");
        });

        modelBuilder.Entity<TribReducaoTributosItensDivida>(entity =>
        {
            entity.HasKey(e => e.IdReducaoTributoItemDivida).HasName("PK_TribReducaoTributosItensDividas_1");

            entity.Property(e => e.ImoIddivida).HasColumnName("ImoIDDivida");

            entity.HasOne(d => d.IdReducaoTributoNavigation).WithMany(p => p.TribReducaoTributosItensDivida)
                .HasForeignKey(d => d.IdReducaoTributo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribReducaoTributosItensDividas_TribReducaoTributosItens");
        });

        modelBuilder.Entity<TribRegistrosGrafica2018>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TribRegistrosGrafica2018");

            entity.Property(e => e.BaiNome)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.CidNome)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.CidUf)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CidUF");
            entity.Property(e => e.ConCep)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ConCEP");
            entity.Property(e => e.ConComplemento)
                .HasMaxLength(120)
                .IsUnicode(false);
            entity.Property(e => e.ConEndereco)
                .HasMaxLength(75)
                .IsUnicode(false);
            entity.Property(e => e.ConNumero)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ConTipoLograd)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.InscricaoImobiliaria)
                .HasMaxLength(14)
                .IsUnicode(false);
            entity.Property(e => e.Responsavel)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.TemDescontoCombInc).HasColumnName("temDescontoCombInc");
            entity.Property(e => e.TemIsencaoMinhaCasa).HasColumnName("temIsencaoMinhaCasa");
        });

        modelBuilder.Entity<TribRegistrosGrafica2018DemaisParc>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TribRegistrosGrafica2018DemaisParc");

            entity.Property(e => e.BaiNome)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.CidNome)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.CidUf)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CidUF");
            entity.Property(e => e.ConCep)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("ConCEP");
            entity.Property(e => e.ConComplemento)
                .HasMaxLength(120)
                .IsUnicode(false);
            entity.Property(e => e.ConEndereco)
                .HasMaxLength(75)
                .IsUnicode(false);
            entity.Property(e => e.ConNumero)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ConTipoLograd)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.InscricaoImobiliaria)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Responsavel)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.TemDescontoCombInc).HasColumnName("temDescontoCombInc");
            entity.Property(e => e.TemIsencaoMinhaCasa).HasColumnName("temIsencaoMinhaCasa");
            entity.Property(e => e.TotalDividas).HasColumnName("totalDividas");
        });

        modelBuilder.Entity<TribRegistrosGrafica2019>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TribRegistrosGrafica2019");

            entity.Property(e => e.BaiNome)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.CidNome)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.CidUf)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CidUF");
            entity.Property(e => e.ConCep)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("ConCEP");
            entity.Property(e => e.ConComplemento)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.ConEndereco)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.ConNumero)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.ConTipoLograd)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.InscricaoImobiliaria)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Responsavel)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.TemIsencaoMeiaUffi).HasColumnName("temIsencaoMeiaUFFI");
            entity.Property(e => e.TemIsencaoMinhaCasa).HasColumnName("temIsencaoMinhaCasa");
        });

        modelBuilder.Entity<TribRegistrosGrafica2020>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TribRegistrosGrafica2020");

            entity.Property(e => e.BaiNome)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.CidNome)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.CidUf)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CidUF");
            entity.Property(e => e.ConCep)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("ConCEP");
            entity.Property(e => e.ConComplemento)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.ConEndereco)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.ConNumero)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.ConTipoLograd)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.InscricaoImobiliaria)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Responsavel)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.TemIsencaoMeiaUffi).HasColumnName("temIsencaoMeiaUFFI");
            entity.Property(e => e.TemIsencaoMinhaCasa).HasColumnName("temIsencaoMinhaCasa");
        });

        modelBuilder.Entity<TribRelParametro>(entity =>
        {
            entity.HasIndex(e => new { e.InscricaoImobiliaria, e.Descricao }, "IX_TribRelParametros").HasFillFactor(90);

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Descricao)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.InscricaoImobiliaria)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Valor).HasColumnType("sql_variant");
        });

        modelBuilder.Entity<TribReportD>(entity =>
        {
            entity.HasKey(e => e.RdsId);

            entity.ToTable("TribReportDS");

            entity.HasIndex(e => e.RdsSessionId, "IX_TribReportDS_RDsSessionID").HasFillFactor(90);

            entity.Property(e => e.RdsId)
                .ValueGeneratedNever()
                .HasColumnName("RDsID");
            entity.Property(e => e.RdsDados)
                .IsUnicode(false)
                .HasColumnName("RDsDados");
            entity.Property(e => e.RdsSessionId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("RDsSessionID");
            entity.Property(e => e.RdsXsd)
                .IsUnicode(false)
                .HasColumnName("RDsXSD");
        });

        modelBuilder.Entity<TribReportPar>(entity =>
        {
            entity.HasKey(e => e.RparId);

            entity.ToTable("TribReportPar");

            entity.HasIndex(e => e.RparSessionId, "IX_TribReportPar_RParSessionID").HasFillFactor(90);

            entity.Property(e => e.RparId).HasColumnName("RParID");
            entity.Property(e => e.RparParametro)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("RParParametro");
            entity.Property(e => e.RparSessionId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("RParSessionID");
            entity.Property(e => e.RparTipo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RParTipo");
            entity.Property(e => e.RparValor)
                .HasMaxLength(800)
                .IsUnicode(false)
                .HasColumnName("RParValor");
        });

        modelBuilder.Entity<TribReportSql>(entity =>
        {
            entity.HasKey(e => e.RsqlId);

            entity.ToTable("TribReportSQL");

            entity.HasIndex(e => e.RsqlSessionId, "IX_TribReportSQL_RSqlSessionID").HasFillFactor(90);

            entity.Property(e => e.RsqlId).HasColumnName("RSqlID");
            entity.Property(e => e.RsqlSessionId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("RSqlSessionID");
            entity.Property(e => e.RsqlSql)
                .IsUnicode(false)
                .HasColumnName("RSqlSQL");
            entity.Property(e => e.RsqlSubReport)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RSqlSubReport");
        });

        modelBuilder.Entity<TribRequerimento>(entity =>
        {
            entity.HasKey(e => e.RequerId);

            entity.ToTable("TribRequerimento");

            entity.Property(e => e.RequerId)
                .ValueGeneratedNever()
                .HasColumnName("RequerID");
            entity.Property(e => e.RequerDataInc).HasColumnType("datetime");
            entity.Property(e => e.RequerNome)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.RequerProtocAno).HasDefaultValue(0);
            entity.Property(e => e.RequerProtocNum).HasDefaultValue(0);
        });

        modelBuilder.Entity<TribRequerimentoDivDesmembradum>(entity =>
        {
            entity.HasKey(e => e.ReqDesmemId);

            entity.HasIndex(e => new { e.ImoIddivida, e.ReqDesmemTipoTributo }, "IX_ImoIDDivida_ReqDesmemTipoTributo").HasFillFactor(90);

            entity.HasIndex(e => e.ImoIddivida, "IX_TribRequerimentoDivDesmembrada_ImoIDDivida").HasFillFactor(90);

            entity.Property(e => e.ReqDesmemId).HasColumnName("ReqDesmemID");
            entity.Property(e => e.ImoIddivida).HasColumnName("ImoIDDivida");
            entity.Property(e => e.ReqDesmemTipoTributo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength()
                .HasComment("Deve ser informado se é imposto ou taxa");
            entity.Property(e => e.ReqOrigemId).HasColumnName("ReqOrigemID");

            entity.HasOne(d => d.ImoIddividaNavigation).WithMany(p => p.TribRequerimentoDivDesmembrada)
                .HasForeignKey(d => d.ImoIddivida)
                .HasConstraintName("FK_TribRequerimentoDivDesmembrada_TribDividasImo");

            entity.HasOne(d => d.ReqOrigem).WithMany(p => p.TribRequerimentoDivDesmembrada)
                .HasForeignKey(d => d.ReqOrigemId)
                .HasConstraintName("FK_TribRequerimentoDivDesmembrada_TribRequerimentoDivOrigem");
        });

        modelBuilder.Entity<TribRequerimentoDivOrigem>(entity =>
        {
            entity.HasKey(e => e.ReqOrigemId).HasName("PK_TribRequerimentoDivAnterior");

            entity.ToTable("TribRequerimentoDivOrigem", tb =>
                {
                    tb.HasTrigger("TgTribRequerimentoDivOrigemINSERT");
                    tb.HasTrigger("TgTribRequerimentoDivOrigemINSTEAD");
                    tb.HasTrigger("TgTribRequerimentoDivOrigemUPDATE");
                });

            entity.HasIndex(e => e.ImoIddivida, "IX_TribRequerimentoDivOrigem_ImoIDDivida").HasFillFactor(90);

            entity.Property(e => e.ReqOrigemId)
                .ValueGeneratedNever()
                .HasColumnName("ReqOrigemID");
            entity.Property(e => e.ImoIddivida).HasColumnName("ImoIDDivida");
            entity.Property(e => e.ReqOrigemSituacao)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength()
                .HasComment("Em análise, Deferido ou Indeferido");
            entity.Property(e => e.ReqOrigemTipoIsencao)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength()
                .HasComment("Impostos, Taxas ou Impostos e Taxas");
            entity.Property(e => e.RequerId).HasColumnName("RequerID");

            entity.HasOne(d => d.ImoIddividaNavigation).WithMany(p => p.TribRequerimentoDivOrigems)
                .HasForeignKey(d => d.ImoIddivida)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribRequerimentoDivOrigem_TribDividasImo");

            entity.HasOne(d => d.Requer).WithMany(p => p.TribRequerimentoDivOrigems)
                .HasForeignKey(d => d.RequerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribRequerimentoDivOrigem_TribRequerimento");
        });

        modelBuilder.Entity<TribRequerimentoRevisaoImovei>(entity =>
        {
            entity.HasKey(e => e.ReqRevImoId);

            entity.Property(e => e.ReqRevImoId)
                .ValueGeneratedNever()
                .HasColumnName("ReqRevImoID");
            entity.Property(e => e.EdificacaoId)
                .HasDefaultValue(0L)
                .HasColumnName("EdificacaoID");
            entity.Property(e => e.ReqRevId).HasColumnName("ReqRevID");
            entity.Property(e => e.ReqRevImoDescricao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ReqRevImoSituacao)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Em análise, Deferido ou Indeferido");

            entity.HasOne(d => d.Edificacao).WithMany(p => p.TribRequerimentoRevisaoImoveis)
                .HasForeignKey(d => d.EdificacaoId)
                .HasConstraintName("FK_TribRequerimentoRevisaoImoveis_TribEdificacoes");

            entity.HasOne(d => d.ReqRev).WithMany(p => p.TribRequerimentoRevisaoImoveis)
                .HasForeignKey(d => d.ReqRevId)
                .HasConstraintName("FK_TribRequerimentoRevisaoImoveis_TribRequerimentosRevisao");
        });

        modelBuilder.Entity<TribRequerimentosRevisao>(entity =>
        {
            entity.HasKey(e => e.ReqRevId);

            entity.ToTable("TribRequerimentosRevisao");

            entity.Property(e => e.ReqRevId)
                .ValueGeneratedNever()
                .HasColumnName("ReqRevID");
            entity.Property(e => e.ReqRevAnoProtoc).HasDefaultValue(0);
            entity.Property(e => e.ReqRevData).HasColumnType("datetime");
            entity.Property(e => e.ReqRevNome)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ReqRevNumProtoc).HasDefaultValue(0);
        });

        modelBuilder.Entity<TribResumoBaixa>(entity =>
        {
            entity.HasKey(e => new { e.RebxData, e.ConvenioId, e.BxBanco });

            entity.ToTable("tribResumoBaixa");

            entity.HasIndex(e => new { e.ConvenioId, e.BxBanco }, "IX_tribResumoBaixa_ConvenioId_BxBanco_inc_rebxNomeArquivo");

            entity.Property(e => e.RebxData)
                .HasColumnType("datetime")
                .HasColumnName("rebxData");
            entity.Property(e => e.BxBanco)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.RebxNomeArquivo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("Nome do arquivo de baixa fornecido pelo banco.")
                .HasColumnName("rebxNomeArquivo");
            entity.Property(e => e.RebxQtdeBaixado).HasColumnName("rebxQtdeBaixado");
            entity.Property(e => e.RebxQtdeErro).HasColumnName("rebxQtdeErro");
            entity.Property(e => e.RebxQtdeGeral).HasColumnName("rebxQtdeGeral");
            entity.Property(e => e.RebxVlrBaixado)
                .HasComment("Valor total baixado do arquivo fornecido pelo banco.")
                .HasColumnType("money")
                .HasColumnName("rebxVlrBaixado");
            entity.Property(e => e.RebxVlrNaoBaixado)
                .HasComment("Valor que possui erros e não foi possivel realizar a baixa.")
                .HasColumnType("money")
                .HasColumnName("rebxVlrNaoBaixado");
            entity.Property(e => e.RebxVlrTotalArquivo)
                .HasComment("Valor total do arquivo de baixa, fornecido pelo banco.")
                .HasColumnType("money")
                .HasColumnName("rebxVlrTotalArquivo");
        });

        modelBuilder.Entity<TribRevisaoDesconto>(entity =>
        {
            entity.HasKey(e => new { e.ImoIddivida, e.TipoTribId });

            entity.ToTable("TribRevisaoDesconto");

            entity.Property(e => e.ImoIddivida).HasColumnName("ImoIDDivida");
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
            entity.Property(e => e.RevObs)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.RevPercDesconto).HasColumnType("money");
        });

        modelBuilder.Entity<TribRgFiltro>(entity =>
        {
            entity.HasKey(e => e.IdFiltro);

            entity.ToTable("TribRgFiltro");

            entity.Property(e => e.IdFiltro).HasColumnName("idFiltro");
            entity.Property(e => e.IdRegra).HasColumnName("idRegra");
            entity.Property(e => e.NmFiltro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nmFiltro");
            entity.Property(e => e.TpFiltro)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tpFiltro");

            entity.HasMany(d => d.IdParametros).WithMany(p => p.IdFiltros)
                .UsingEntity<Dictionary<string, object>>(
                    "TribRgFiltroParametro",
                    r => r.HasOne<TribRgParametro>().WithMany()
                        .HasForeignKey("IdParametro")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_TribRgFiltroParametros_TribRgParametro"),
                    l => l.HasOne<TribRgFiltro>().WithMany()
                        .HasForeignKey("IdFiltro")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_TribRgFiltroParametros_TribRgFiltro"),
                    j =>
                    {
                        j.HasKey("IdFiltro", "IdParametro");
                        j.ToTable("TribRgFiltroParametros");
                        j.IndexerProperty<int>("IdFiltro").HasColumnName("idFiltro");
                        j.IndexerProperty<long>("IdParametro").HasColumnName("idParametro");
                    });
        });

        modelBuilder.Entity<TribRgParametro>(entity =>
        {
            entity.HasKey(e => e.IdParametro);

            entity.ToTable("TribRgParametro");

            entity.Property(e => e.IdParametro).HasColumnName("idParametro");
            entity.Property(e => e.NmIdentificador)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nmIdentificador");
            entity.Property(e => e.NmParametro)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("nmParametro");
            entity.Property(e => e.TpParametro)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tpParametro");
        });

        modelBuilder.Entity<TribRgRegra>(entity =>
        {
            entity.HasKey(e => e.IdRegra);

            entity.Property(e => e.IdRegra).HasColumnName("idRegra");
            entity.Property(e => e.DsRegra)
                .IsUnicode(false)
                .HasColumnName("dsRegra");
            entity.Property(e => e.NmRegra)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nmRegra");
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
            entity.Property(e => e.TpRegra)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tpRegra");
            entity.Property(e => e.TpRetorno)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tpRetorno");
            entity.Property(e => e.TpRotina)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("tpRotina");
            entity.Property(e => e.VlRegra)
                .IsUnicode(false)
                .HasColumnName("vlRegra");
        });

        modelBuilder.Entity<TribRgRotina>(entity =>
        {
            entity.HasKey(e => e.IdRotina).HasName("PK_tbRgFiltroRotina");

            entity.ToTable("TribRgRotina");

            entity.Property(e => e.IdRotina).HasColumnName("idRotina");
            entity.Property(e => e.IdRegra).HasColumnName("idRegra");
            entity.Property(e => e.NmIdentificador)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nmIdentificador");

            entity.HasMany(d => d.IdFiltros).WithMany(p => p.IdRotinas)
                .UsingEntity<Dictionary<string, object>>(
                    "TribRgRotinaFiltro",
                    r => r.HasOne<TribRgFiltro>().WithMany()
                        .HasForeignKey("IdFiltro")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_TribRgRotinaFiltros_TribRgFiltro"),
                    l => l.HasOne<TribRgRotina>().WithMany()
                        .HasForeignKey("IdRotina")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_TribRgRotinaFiltros_TribRgRotina"),
                    j =>
                    {
                        j.HasKey("IdRotina", "IdFiltro");
                        j.ToTable("TribRgRotinaFiltros");
                        j.IndexerProperty<int>("IdRotina").HasColumnName("idRotina");
                        j.IndexerProperty<int>("IdFiltro").HasColumnName("idFiltro");
                    });
        });

        modelBuilder.Entity<TribRolTipo>(entity =>
        {
            entity.HasKey(e => e.RolTipoId);

            entity.ToTable("TribRolTipo");

            entity.Property(e => e.RolTipoId)
                .ValueGeneratedNever()
                .HasColumnName("RolTipoID");
            entity.Property(e => e.RolTipoDescricao).IsUnicode(false);
            entity.Property(e => e.RolTipoNome)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribSaneparArquivoBaixa>(entity =>
        {
            entity.HasKey(e => e.SaneArqId);

            entity.ToTable("TribSaneparArquivoBaixa");

            entity.Property(e => e.SaneArqId)
                .ValueGeneratedNever()
                .HasColumnName("saneArqID");
            entity.Property(e => e.SaneArqAno).HasColumnName("saneArqAno");
            entity.Property(e => e.SaneArqDataInclusao)
                .HasColumnType("datetime")
                .HasColumnName("saneArqDataInclusao");
            entity.Property(e => e.SaneArqMes).HasColumnName("saneArqMes");
            entity.Property(e => e.SaneArqNome)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("saneArqNome");
            entity.Property(e => e.SaneArqUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("saneArqUsuario");
        });

        modelBuilder.Entity<TribSaneparArquivoBaixaDetalhe>(entity =>
        {
            entity.HasKey(e => e.SaneDetId).HasName("PK_TribSaneparArquivoBaixaDetalhe");

            entity.HasIndex(e => new { e.SaneArqId, e.SaneDetId }, "IX_TribSaneparArquivoBaixaDetalhes_saneArqID_saneDetID").HasFillFactor(90);

            entity.HasIndex(e => e.SaneDetMatricula, "_dta_index_TribSaneparArquivoBaixaDetalhes_9_1210799721__K5").HasFillFactor(90);

            entity.Property(e => e.SaneDetId)
                .ValueGeneratedNever()
                .HasColumnName("saneDetID");
            entity.Property(e => e.SaneArqId).HasColumnName("saneArqID");
            entity.Property(e => e.SaneDetAcomercial)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("saneDetAComercial");
            entity.Property(e => e.SaneDetAindustrial)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("saneDetAIndustrial");
            entity.Property(e => e.SaneDetApoderPublico)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("saneDetAPoderPublico");
            entity.Property(e => e.SaneDetAresidencial)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("saneDetAResidencial");
            entity.Property(e => e.SaneDetAutilidadePublica)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("saneDetAUtilidadePublica");
            entity.Property(e => e.SaneDetCategoria)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("saneDetCategoria");
            entity.Property(e => e.SaneDetClasseLixo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("saneDetClasseLixo");
            entity.Property(e => e.SaneDetCodServico)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("saneDetCodServico");
            entity.Property(e => e.SaneDetCpfcnpj)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("saneDetCPFCNPJ");
            entity.Property(e => e.SaneDetDataInclusao)
                .HasColumnType("datetime")
                .HasColumnName("saneDetDataInclusao");
            entity.Property(e => e.SaneDetDataPagamento)
                .HasColumnType("datetime")
                .HasColumnName("saneDetDataPagamento");
            entity.Property(e => e.SaneDetDescricaoErro)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("saneDetDescricaoErro");
            entity.Property(e => e.SaneDetDigito)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("saneDetDigito");
            entity.Property(e => e.SaneDetEcomercial)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("saneDetEComercial");
            entity.Property(e => e.SaneDetEindustrial)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("saneDetEIndustrial");
            entity.Property(e => e.SaneDetEpoderPublico)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("saneDetEPoderPublico");
            entity.Property(e => e.SaneDetEresidencial)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("saneDetEResidencial");
            entity.Property(e => e.SaneDetEutilidadePublica)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("saneDetEUtilidadePublica");
            entity.Property(e => e.SaneDetLocal)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("saneDetLocal");
            entity.Property(e => e.SaneDetLogradouro)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("saneDetLogradouro");
            entity.Property(e => e.SaneDetLote)
                .HasMaxLength(6)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("saneDetLote");
            entity.Property(e => e.SaneDetMatricula)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("saneDetMatricula");
            entity.Property(e => e.SaneDetMunicipio)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("saneDetMunicipio");
            entity.Property(e => e.SaneDetNome)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("saneDetNome");
            entity.Property(e => e.SaneDetNumeroImovel)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("saneDetNumeroImovel");
            entity.Property(e => e.SaneDetProcessado)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("saneDetProcessado");
            entity.Property(e => e.SaneDetQuadra)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("saneDetQuadra");
            entity.Property(e => e.SaneDetQuadrante)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("saneDetQuadrante");
            entity.Property(e => e.SaneDetQuadricula)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("saneDetQuadricula");
            entity.Property(e => e.SaneDetReferencia)
                .HasMaxLength(6)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("saneDetReferencia");
            entity.Property(e => e.SaneDetReferenciaMulta)
                .HasMaxLength(6)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("saneDetReferenciaMulta");
            entity.Property(e => e.SaneDetSetor)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("saneDetSetor");
            entity.Property(e => e.SaneDetTipoCpfcnpj)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("saneDetTipoCPFCNPJ");
            entity.Property(e => e.SaneDetUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("saneDetUsuario");
            entity.Property(e => e.SaneDetValor)
                .HasColumnType("money")
                .HasColumnName("saneDetValor");

            entity.HasOne(d => d.SaneArq).WithMany(p => p.TribSaneparArquivoBaixaDetalhes)
                .HasForeignKey(d => d.SaneArqId)
                .HasConstraintName("FK_TribSaneparArquivoBaixaDetalhes_TribSaneparArquivoBaixa");
        });

        modelBuilder.Entity<TribSaneparCategoria>(entity =>
        {
            entity.HasKey(e => e.SaneCategId);

            entity.Property(e => e.SaneCategId)
                .ValueGeneratedNever()
                .HasColumnName("saneCategID");
            entity.Property(e => e.SaneCategNome)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("saneCategNome");
        });

        modelBuilder.Entity<TribSaneparCobrados2008>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TribSanepar_Cobrados_2008");

            entity.Property(e => e.Cl)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CL");
            entity.Property(e => e.Matr)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("MATR");
            entity.Property(e => e.Nome)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NOME");
        });

        modelBuilder.Entity<TribSaneparCruzamento2009>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TribSanepar_Cruzamento_2009");

            entity.Property(e => e.Cl)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("CL");
            entity.Property(e => e.Matr)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("MATR");
            entity.Property(e => e.Nome)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NOME");
        });

        modelBuilder.Entity<TribSaneparDivida>(entity =>
        {
            entity.HasKey(e => e.SaneDividaId);

            entity.HasIndex(e => new { e.SaneDetId, e.ImoIddivida }, "IX_TribSaneparDividas_saneDetID_ImoIDDivida").HasFillFactor(90);

            entity.Property(e => e.SaneDividaId)
                .ValueGeneratedNever()
                .HasColumnName("saneDividaID");
            entity.Property(e => e.ImoIddivida).HasColumnName("ImoIDDivida");
            entity.Property(e => e.SaneDetId).HasColumnName("saneDetID");

            entity.HasOne(d => d.SaneDet).WithMany(p => p.TribSaneparDivida)
                .HasForeignKey(d => d.SaneDetId)
                .HasConstraintName("FK_TribSaneparDividas_TribSaneparArquivoBaixaDetalhes");
        });

        modelBuilder.Entity<TribSaneparExport2009>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TribSanepar_Export_2009");

            entity.Property(e => e.Endereco)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.InscricaoImobiliaria)
                .HasMaxLength(14)
                .IsUnicode(false);
            entity.Property(e => e.Proprietario)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.SaneMatricula)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("saneMatricula");
            entity.Property(e => e.Valor).HasColumnType("money");
        });

        modelBuilder.Entity<TribSaneparExport2009Atual>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TribSanepar_Export_2009_Atual");

            entity.Property(e => e.Endereco)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.InscricaoImobiliaria)
                .HasMaxLength(14)
                .IsUnicode(false);
            entity.Property(e => e.Proprietario)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.SaneMatricula)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("saneMatricula");
            entity.Property(e => e.Valor).HasColumnType("money");
        });

        modelBuilder.Entity<TribSaneparExport2009AtualSemMatricula>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TribSanepar_Export_2009_Atual_SemMatricula");

            entity.Property(e => e.Endereco)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.InscricaoImobiliaria)
                .HasMaxLength(14)
                .IsUnicode(false);
            entity.Property(e => e.Proprietario)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.SaneMatricula)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("saneMatricula");
            entity.Property(e => e.Valor).HasColumnType("money");
        });

        modelBuilder.Entity<TribSaneparImport2009>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TribSanepar_Import_2009");

            entity.Property(e => e.Ac).HasColumnName("AC");
            entity.Property(e => e.Ai).HasColumnName("AI");
            entity.Property(e => e.Ap).HasColumnName("AP");
            entity.Property(e => e.Ar).HasColumnName("AR");
            entity.Property(e => e.Au).HasColumnName("AU");
            entity.Property(e => e.Cat)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("CAT");
            entity.Property(e => e.Cl).HasColumnName("CL");
            entity.Property(e => e.Ec).HasColumnName("EC");
            entity.Property(e => e.Ei).HasColumnName("EI");
            entity.Property(e => e.Ender)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ENDER");
            entity.Property(e => e.Ep).HasColumnName("EP");
            entity.Property(e => e.Er).HasColumnName("ER");
            entity.Property(e => e.Eu).HasColumnName("EU");
            entity.Property(e => e.Loc)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("LOC");
            entity.Property(e => e.Lot)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("LOT");
            entity.Property(e => e.Matr)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("MATR");
            entity.Property(e => e.Md).HasColumnName("MD");
            entity.Property(e => e.Nome)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NOME");
            entity.Property(e => e.Num)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("NUM");
            entity.Property(e => e.Qda)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("QDA");
            entity.Property(e => e.Qdi)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("QDI");
            entity.Property(e => e.Qdt)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("QDT");
            entity.Property(e => e.Rot)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ROT");
            entity.Property(e => e.Set)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("SET");
            entity.Property(e => e.Tea).HasColumnName("TEA");
            entity.Property(e => e.Vlr).HasColumnName("VLR");
        });

        modelBuilder.Entity<TribSaneparLanc2009>(entity =>
        {
            entity.HasKey(e => new { e.Edificacaoid, e.Parcela });

            entity.ToTable("TribSanepar_Lanc_2009");

            entity.Property(e => e.Edificacaoid).HasColumnName("edificacaoid");
            entity.Property(e => e.Parcela).HasColumnName("parcela");
            entity.Property(e => e.Tipobxid).HasColumnName("tipobxid");
            entity.Property(e => e.TipotribId).HasColumnName("tipotribId");
            entity.Property(e => e.Valor)
                .HasColumnType("money")
                .HasColumnName("valor");
            entity.Property(e => e.Vencimento)
                .HasColumnType("datetime")
                .HasColumnName("vencimento");
        });

        modelBuilder.Entity<TribSaneparLancComp2009>(entity =>
        {
            entity.HasKey(e => new { e.Edificacaoid, e.Parcela, e.Tipotribid });

            entity.ToTable("TribSanepar_Lanc_Comp_2009");

            entity.Property(e => e.Edificacaoid).HasColumnName("edificacaoid");
            entity.Property(e => e.Parcela).HasColumnName("parcela");
            entity.Property(e => e.Tipotribid).HasColumnName("tipotribid");
            entity.Property(e => e.Valor)
                .HasColumnType("money")
                .HasColumnName("valor");
        });

        modelBuilder.Entity<TribSaneparMatric>(entity =>
        {
            entity.HasKey(e => e.SaneMatricula);

            entity.ToTable("TribSaneparMatric");

            entity.HasIndex(e => e.SaneMatricula, "_dta_index_TribSaneparMatric_9_1747409__K1").HasFillFactor(90);

            entity.Property(e => e.SaneMatricula)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("saneMatricula");
            entity.Property(e => e.SaneComercial).HasColumnName("saneComercial");
            entity.Property(e => e.SaneEndereco)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("saneEndereco");
            entity.Property(e => e.SaneNumero)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("saneNumero");
            entity.Property(e => e.SaneObservacao)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("saneObservacao");
            entity.Property(e => e.SaneQtdeMatricula).HasColumnName("saneQtdeMatricula");
            entity.Property(e => e.SaneResidencial).HasColumnName("saneResidencial");
            entity.Property(e => e.SaneRoteiro)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("saneRoteiro");
        });

        modelBuilder.Entity<TribSaneparMatricInsc>(entity =>
        {
            entity.HasKey(e => new { e.SaneMatricula, e.EdificacaoId });

            entity.ToTable("TribSaneparMatricInsc");

            entity.Property(e => e.SaneMatricula)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("saneMatricula");
            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.SainObservacao)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("sainObservacao");
        });

        modelBuilder.Entity<TribSaneparValores2009>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TribSanepar_Valores_2009");

            entity.Property(e => e.Classe)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Valor2008)
                .HasColumnType("money")
                .HasColumnName("Valor_2008");
            entity.Property(e => e.Valor2009)
                .HasColumnType("money")
                .HasColumnName("Valor_2009");
            entity.Property(e => e.Valor2009corrigido)
                .HasColumnType("money")
                .HasColumnName("Valor_2009Corrigido");
        });

        modelBuilder.Entity<TribSecao>(entity =>
        {
            entity.HasKey(e => e.SecaoId);

            entity.ToTable("TribSecao");

            entity.Property(e => e.SecaoId)
                .ValueGeneratedNever()
                .HasColumnName("SecaoID");
            entity.Property(e => e.LogradId).HasColumnName("LogradID");
            entity.Property(e => e.QuadraId).HasColumnName("QuadraID");
            entity.Property(e => e.Secao)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VlrMetroQuadrado).HasColumnType("money");

            entity.HasOne(d => d.TribQuadraLograd).WithMany(p => p.TribSecaos)
                .HasForeignKey(d => new { d.QuadraId, d.LogradId })
                .HasConstraintName("FK_TribSecao_TribQuadraLograd");

            entity.HasMany(d => d.TipoTribs).WithMany(p => p.Secaos)
                .UsingEntity<Dictionary<string, object>>(
                    "TribSecaoTributo",
                    r => r.HasOne<TribTipoTributo>().WithMany()
                        .HasForeignKey("TipoTribId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_TribSecaoTributos_TribTipoTributos"),
                    l => l.HasOne<TribSecao>().WithMany()
                        .HasForeignKey("SecaoId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_TribSecaoTributos_TribSecao"),
                    j =>
                    {
                        j.HasKey("SecaoId", "TipoTribId");
                        j.ToTable("TribSecaoTributos");
                        j.IndexerProperty<int>("SecaoId").HasColumnName("SecaoID");
                        j.IndexerProperty<int>("TipoTribId").HasColumnName("TipoTribID");
                    });
        });

        modelBuilder.Entity<TribSecaoVlrM2pAno>(entity =>
        {
            entity.HasKey(e => new { e.VlrM2pAnoId, e.SecaoId });

            entity.ToTable("TribSecaoVlrM2pAno");

            entity.Property(e => e.VlrM2pAnoId).HasColumnName("VlrM2pAnoID");
            entity.Property(e => e.SecaoId).HasColumnName("SecaoID");
            entity.Property(e => e.Secao)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VlrMetroQuadrado).HasColumnType("money");

            entity.HasOne(d => d.SecaoNavigation).WithMany(p => p.TribSecaoVlrM2pAnos)
                .HasForeignKey(d => d.SecaoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribSecaoVlrM2pAno_TribSecao");
        });

        modelBuilder.Entity<TribSimplesNacionalEvento>(entity =>
        {
            entity.HasKey(e => e.SneventoId);

            entity.Property(e => e.SneventoId)
                .ValueGeneratedNever()
                .HasColumnName("SNEventoId");
            entity.Property(e => e.IdRegra).HasColumnName("idRegra");
            entity.Property(e => e.SneventoEnquadra)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SNEventoEnquadra");
            entity.Property(e => e.SneventoNome)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("SNEventoNome");
        });

        modelBuilder.Entity<TribSimplesNacionalOcorrEvento>(entity =>
        {
            entity.HasKey(e => e.OcorrId);

            entity.Property(e => e.OcorrId).ValueGeneratedNever();
            entity.Property(e => e.DataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.OcorrCodUa).HasColumnName("OcorrCodUA");
            entity.Property(e => e.OcorrCodUf)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OcorrCodUF");
            entity.Property(e => e.OcorrData).HasColumnType("datetime");
            entity.Property(e => e.OcorrNumProcAdmin)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OcorrNumProcJudicial)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OcorrObs)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.OcorrValorAntigo)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SneventoId).HasColumnName("SNEventoId");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.EmprCmcNavigation).WithMany(p => p.TribSimplesNacionalOcorrEventos)
                .HasForeignKey(d => d.EmprCmc)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribSimplesNacionalOcorrEventos_TribEmpresas");

            entity.HasOne(d => d.Snevento).WithMany(p => p.TribSimplesNacionalOcorrEventos)
                .HasForeignKey(d => d.SneventoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribSimplesNacionalOcorrEventos_TribSimplesNacionalEventos");
        });

        modelBuilder.Entity<TribSimuladoIptuoperaco>(entity =>
        {
            entity.HasKey(e => e.OpeId);

            entity.ToTable("TribSimuladoIPTUOperacoes");

            entity.Property(e => e.OpeId).HasColumnName("OpeID");
            entity.Property(e => e.Detalhes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.SimuId).HasColumnName("SimuID");

            entity.HasOne(d => d.Simu).WithMany(p => p.TribSimuladoIptuoperacos)
                .HasForeignKey(d => d.SimuId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_TribSimuladoIPTUOperacoes_TribSimuladosIPTU");
        });

        modelBuilder.Entity<TribSimuladosEmpresa>(entity =>
        {
            entity.HasKey(e => e.SimuEmprId);

            entity.ToTable("TribSimuladosEmpresa");

            entity.Property(e => e.SimuEmprId)
                .ValueGeneratedNever()
                .HasColumnName("SimuEmprID");
            entity.Property(e => e.EmprCmc).HasColumnName("EmprCMC");
            entity.Property(e => e.EmprSituacaoId).HasColumnName("EmprSituacaoID");
            entity.Property(e => e.SimuEmprDataBase).HasColumnType("datetime");
            entity.Property(e => e.TalvId).HasColumnName("TAlvID");

            entity.HasOne(d => d.EmprCmcNavigation).WithMany(p => p.TribSimuladosEmpresas)
                .HasForeignKey(d => d.EmprCmc)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribSimuladosEmpresa_TribEmpresas");
        });

        modelBuilder.Entity<TribSimuladosEmpresaDiv>(entity =>
        {
            entity.HasKey(e => e.SimuEmprDivId);

            entity.ToTable("TribSimuladosEmpresaDiv");

            entity.Property(e => e.SimuEmprDivId)
                .ValueGeneratedNever()
                .HasColumnName("SimuEmprDivID");
            entity.Property(e => e.SimuEmprDivValor).HasColumnType("money");
            entity.Property(e => e.SimuEmprDivVenc).HasColumnType("datetime");
            entity.Property(e => e.SimuEmprId).HasColumnName("SimuEmprID");
            entity.Property(e => e.TipoBxId).HasColumnName("TipoBxID");
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");

            entity.HasOne(d => d.SimuEmpr).WithMany(p => p.TribSimuladosEmpresaDivs)
                .HasForeignKey(d => d.SimuEmprId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribSimuladosEmpresaDiv_TribSimuladosEmpresa");

            entity.HasOne(d => d.TipoBx).WithMany(p => p.TribSimuladosEmpresaDivs)
                .HasForeignKey(d => d.TipoBxId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribSimuladosEmpresaDiv_TribTipoBaixa");

            entity.HasOne(d => d.TipoTrib).WithMany(p => p.TribSimuladosEmpresaDivs)
                .HasForeignKey(d => d.TipoTribId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribSimuladosEmpresaDiv_TribTipoTributos");
        });

        modelBuilder.Entity<TribSimuladosIptu>(entity =>
        {
            entity.HasKey(e => e.SimuId);

            entity.ToTable("TribSimuladosIPTU");

            entity.Property(e => e.SimuId)
                .ValueGeneratedNever()
                .HasColumnName("SimuID");
            entity.Property(e => e.DataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.SimuCalculado)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SimuData).HasColumnType("datetime");
            entity.Property(e => e.SimuDataParc1).HasColumnType("smalldatetime");
            entity.Property(e => e.SimuDescUnica1).HasColumnType("smallmoney");
            entity.Property(e => e.SimuDescUnica2).HasColumnType("smallmoney");
            entity.Property(e => e.SimuImportado)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength();
            entity.Property(e => e.SimuNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SimuVencUnica1).HasColumnType("smalldatetime");
            entity.Property(e => e.SimuVencUnica2).HasColumnType("smalldatetime");
            entity.Property(e => e.SimuVlrUf)
                .HasColumnType("money")
                .HasColumnName("SimuVlrUF");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");
        });

        modelBuilder.Entity<TribSimuladosIptuedifCarac>(entity =>
        {
            entity.HasKey(e => new { e.SimuId, e.EdificacaoId, e.TparamId, e.ParamId }).HasName("PK_TribSimuladoIPTUEdifCarac");

            entity.ToTable("TribSimuladosIPTUEdifCarac");

            entity.HasIndex(e => e.EdificacaoId, "IX_TribSimuladosIPTUEdifCarac_EdificacaoID").HasFillFactor(90);

            entity.HasIndex(e => e.SimuId, "IX_TribSimuladosIPTUEdifCarac_SimuID").HasFillFactor(90);

            entity.HasIndex(e => new { e.TparamId, e.ParamId }, "IX_TribSimuladosIPTUEdifCarac_TParamID_ParamID").HasFillFactor(90);

            entity.Property(e => e.SimuId).HasColumnName("SimuID");
            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.TparamId).HasColumnName("TParamID");
            entity.Property(e => e.ParamId).HasColumnName("ParamID");
            entity.Property(e => e.Valor).HasDefaultValue(1);

            entity.HasOne(d => d.TribSimuladosIptuimovei).WithMany(p => p.TribSimuladosIptuedifCaracs)
                .HasForeignKey(d => new { d.SimuId, d.EdificacaoId })
                .HasConstraintName("FK_TribSimuladosIPTUEdifCarac_TribSimuladosIPTUImoveis");
        });

        modelBuilder.Entity<TribSimuladosIptuimovei>(entity =>
        {
            entity.HasKey(e => new { e.SimuId, e.EdificacaoId });

            entity.ToTable("TribSimuladosIPTUImoveis");

            entity.HasIndex(e => new { e.CategId, e.SimuId }, "IX_CategID_SimuID").HasFillFactor(90);

            entity.HasIndex(e => new { e.LogradId, e.Idloteamento }, "IX_LogradID_IDLoteamento").HasFillFactor(90);

            entity.HasIndex(e => new { e.TerrenoId, e.EdifContinuacaoTerreno }, "IX_TerrenoID_EdifContinuacaoTerreno").HasFillFactor(90);

            entity.HasIndex(e => new { e.TerrenoId, e.EdificacaoId }, "IX_TerrenoID_EdificacaoID").HasFillFactor(90);

            entity.HasIndex(e => new { e.EdifEdificacaoEnglobamento, e.SimuId }, "IX_TribSimuladosIPTUImoveis").HasFillFactor(90);

            entity.HasIndex(e => e.EdifContinuacaoTerreno, "IX_TribSimuladosIPTUImoveis_EdifContinuacaoTerreno").HasFillFactor(90);

            entity.HasIndex(e => e.EdificacaoId, "IX_TribSimuladosIPTUImoveis_EdificacaoID").HasFillFactor(90);

            entity.Property(e => e.SimuId).HasColumnName("SimuID");
            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.CategId).HasColumnName("CategID");
            entity.Property(e => e.EdifCaracteristica)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.EdifContinuacaoTerreno)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength();
            entity.Property(e => e.Idloteamento).HasColumnName("IDLoteamento");
            entity.Property(e => e.Idplanta).HasColumnName("IDPlanta");
            entity.Property(e => e.LogradId).HasColumnName("LogradID");
            entity.Property(e => e.TerrenoId).HasColumnName("TerrenoID");
            entity.Property(e => e.ValorVenalCalculo).HasColumnType("money");
            entity.Property(e => e.ValorVenalEdificacao).HasColumnType("money");
            entity.Property(e => e.ValorVenalTerrenoParaEdificacao).HasColumnType("money");

            entity.HasOne(d => d.Edificacao).WithMany(p => p.TribSimuladosIptuimoveis)
                .HasForeignKey(d => d.EdificacaoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribSimuladosIPTUImoveis_TribEdificacoes");

            entity.HasOne(d => d.Simu).WithMany(p => p.TribSimuladosIptuimoveis)
                .HasForeignKey(d => d.SimuId)
                .HasConstraintName("FK_TribSimuladosIPTUImoveis_TribSimuladosIPTU");
        });

        modelBuilder.Entity<TribSimuladosIptutestada>(entity =>
        {
            entity.HasKey(e => new { e.SimuId, e.EdificacaoId, e.LogradId });

            entity.ToTable("TribSimuladosIPTUTestadas");

            entity.Property(e => e.SimuId).HasColumnName("SimuID");
            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.LogradId).HasColumnName("LogradID");
            entity.Property(e => e.FatorKid)
                .HasDefaultValue(0L)
                .HasColumnName("FatorKID");
            entity.Property(e => e.TestadasMetragem)
                .HasDefaultValue(0m)
                .HasColumnType("money");
            entity.Property(e => e.TestadasPrincipal)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength();

            entity.HasOne(d => d.TribSimuladosIptuimovei).WithMany(p => p.TribSimuladosIptutestada)
                .HasForeignKey(d => new { d.SimuId, d.EdificacaoId })
                .HasConstraintName("FK_TribSimuladosIPTUTestadas_TribSimuladosIPTUImoveis");
        });

        modelBuilder.Entity<TribSisObraLoteAlvara>(entity =>
        {
            entity.HasKey(e => e.IdloteAlvara);

            entity.ToTable("TribSisObraLoteAlvara");

            entity.HasIndex(e => e.DsTipoDocumento, "IX_TribSisObraLoteAlvara_dsTipoDocumento");

            entity.Property(e => e.IdloteAlvara).HasColumnName("IDLoteAlvara");
            entity.Property(e => e.DataInclusao).HasColumnType("datetime");
            entity.Property(e => e.DsTipoDocumento)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsTipoDocumento");
            entity.Property(e => e.DsXml).HasColumnName("DsXML");
            entity.Property(e => e.FlSituacao)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribSisObraLoteAlvaraAlvDocumento>(entity =>
        {
            entity.HasKey(e => new { e.IdDocumento, e.IdloteAlvara });

            entity.ToTable("TribSisObraLoteAlvaraAlvDocumento");

            entity.Property(e => e.IdDocumento).HasColumnName("idDocumento");
            entity.Property(e => e.IdloteAlvara).HasColumnName("IDLoteAlvara");
            entity.Property(e => e.FlSituacao)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Idmensagem).HasColumnName("IDMensagem");
            entity.Property(e => e.RetornoNumero)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("retornoNumero");
            entity.Property(e => e.RetornoProtocolo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("retornoProtocolo");

            entity.HasOne(d => d.IdDocumentoNavigation).WithMany(p => p.TribSisObraLoteAlvaraAlvDocumentos)
                .HasForeignKey(d => d.IdDocumento)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribSisObraLoteAlvaraAlvDocumento_tribAlvDocumento");

            entity.HasOne(d => d.IdloteAlvaraNavigation).WithMany(p => p.TribSisObraLoteAlvaraAlvDocumentos)
                .HasForeignKey(d => d.IdloteAlvara)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribSisObraLoteAlvaraAlvDocumento_TribSisObraLoteAlvara");
        });

        modelBuilder.Entity<TribSisObraLoteAlvaraMovimento>(entity =>
        {
            entity.HasKey(e => e.IdalvaraMov);

            entity.ToTable("TribSisObraLoteAlvaraMovimento");

            entity.Property(e => e.IdalvaraMov).HasColumnName("IDAlvaraMov");
            entity.Property(e => e.DataInclusao).HasColumnType("datetime");
            entity.Property(e => e.EnderecoIp)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EnderecoIP");
            entity.Property(e => e.FlSituacao)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.IdDocumento).HasColumnName("idDocumento");
            entity.Property(e => e.IdloteAlvara).HasColumnName("IDLoteAlvara");
            entity.Property(e => e.Idmensagem).HasColumnName("IDMensagem");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.IdloteAlvaraNavigation).WithMany(p => p.TribSisObraLoteAlvaraMovimentos)
                .HasForeignKey(d => d.IdloteAlvara)
                .HasConstraintName("FK_TribSisObraLoteAlvaraMovimento_TribSisObraLoteAlvara");

            entity.HasOne(d => d.IdmensagemNavigation).WithMany(p => p.TribSisObraLoteAlvaraMovimentos)
                .HasForeignKey(d => d.Idmensagem)
                .HasConstraintName("FK_TribSisObraLoteAlvaraMovimento_TribSisObraTabelaMensagem");
        });

        modelBuilder.Entity<TribSisObraLoteAlvaraMovimentoXml>(entity =>
        {
            entity.HasKey(e => e.IdalvaraMov);

            entity.ToTable("TribSisObraLoteAlvaraMovimentoXML");

            entity.Property(e => e.IdalvaraMov)
                .ValueGeneratedNever()
                .HasColumnName("IDAlvaraMov");
            entity.Property(e => e.DsXml)
                .HasMaxLength(2500)
                .IsUnicode(false)
                .HasColumnName("dsXML");
        });

        modelBuilder.Entity<TribSisObraTabelaMensagem>(entity =>
        {
            entity.HasKey(e => e.Idmensagem);

            entity.ToTable("TribSisObraTabelaMensagem");

            entity.Property(e => e.Idmensagem).HasColumnName("IDMensagem");
            entity.Property(e => e.Codigo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Descricao)
                .HasMaxLength(4000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribSisObraTipoLogradouro>(entity =>
        {
            entity.HasKey(e => e.IdTipoLograd);

            entity.ToTable("TribSisObraTipoLogradouro");

            entity.Property(e => e.IdTipoLograd).HasColumnName("idTipoLograd");
            entity.Property(e => e.NmTipoLograd)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("nmTipoLograd");
        });

        modelBuilder.Entity<TribSituacaoEdificacao>(entity =>
        {
            entity.HasKey(e => e.SituacaoId);

            entity.ToTable("TribSituacaoEdificacao", tb => tb.HasTrigger("TgTribSituacaoEdificacaoUpdate"));

            entity.Property(e => e.SituacaoId).HasColumnName("SituacaoID");
            entity.Property(e => e.SituacaoFator).HasColumnType("money");
            entity.Property(e => e.SituacaoNome)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribSnarquivo>(entity =>
        {
            entity.HasKey(e => e.SnarqId);

            entity.ToTable("TribSNArquivo");

            entity.Property(e => e.SnarqId)
                .ValueGeneratedNever()
                .HasComment("Código de identificação do arquivo de dividas do Simples Nacional.")
                .HasColumnName("SNArqID");
            entity.Property(e => e.SnarqData)
                .HasComment("Data de geração do arquivo.")
                .HasColumnType("datetime")
                .HasColumnName("SNArqData");
            entity.Property(e => e.SnarqDataInclusao)
                .HasComment("Data de inclusão do registro.")
                .HasColumnType("datetime")
                .HasColumnName("SNArqDataInclusao");
            entity.Property(e => e.SnarqNome)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Nome do arquivo de importação.")
                .HasColumnName("SNArqNome");
            entity.Property(e => e.SnarqUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Usuário que inseriu o registro.")
                .HasColumnName("SNArqUsuario");
            entity.Property(e => e.SnarqVersao)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Código da versão do layout utilizado para importação.")
                .HasColumnName("SNArqVersao");
        });

        modelBuilder.Entity<TribSnarquivoDetalhe>(entity =>
        {
            entity.HasKey(e => e.SnarqDetId);

            entity.ToTable("TribSNArquivoDetalhes");

            entity.Property(e => e.SnarqDetId)
                .ValueGeneratedNever()
                .HasComment("Código de identificação de cada linha de divida contida no arquivo.")
                .HasColumnName("SNArqDetID");
            entity.Property(e => e.SnarqDetAutoInfracao)
                .HasComment("Número do auto de infração que lançou o débito.")
                .HasColumnName("SNArqDetAutoInfracao");
            entity.Property(e => e.SnarqDetBairroOrig)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Bairro do endereço do devedor original.")
                .HasColumnName("SNArqDetBairroOrig");
            entity.Property(e => e.SnarqDetBairroPrinc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Bairro do endereço do devedor principal.")
                .HasColumnName("SNArqDetBairroPrinc");
            entity.Property(e => e.SnarqDetCeporig)
                .HasComment("Código de endereçamento postal do devedor original.")
                .HasColumnName("SNArqDetCEPOrig");
            entity.Property(e => e.SnarqDetCepprinc)
                .HasComment("Código de endereçamento postal do devedor principal.")
                .HasColumnName("SNArqDetCEPPrinc");
            entity.Property(e => e.SnarqDetCnaeorig)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Código da Classificação Nacional de Atividades Econômicas do devedor original.")
                .HasColumnName("SNArqDetCNAEOrig");
            entity.Property(e => e.SnarqDetCnaeprinc)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Código da Classificação Nacional de Atividades Econômicas do devedor principal.")
                .HasColumnName("SNArqDetCNAEPrinc");
            entity.Property(e => e.SnarqDetCnpjorig)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasComment("Número de identificação do devedor original.")
                .HasColumnName("SNArqDetCNPJOrig");
            entity.Property(e => e.SnarqDetCnpjprinc)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasComment("Número de identificação do devedor principal.")
                .HasColumnName("SNArqDetCNPJPrinc");
            entity.Property(e => e.SnarqDetCodMunicipioOrig)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Código do município do endereço do devedor original.")
                .HasColumnName("SNArqDetCodMunicipioOrig");
            entity.Property(e => e.SnarqDetCodMunicipioPrinc)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Código do município do endereço do devedor principal.")
                .HasColumnName("SNArqDetCodMunicipioPrinc");
            entity.Property(e => e.SnarqDetComplementoOrig)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Complemente do endereço do devedor original.")
                .HasColumnName("SNArqDetComplementoOrig");
            entity.Property(e => e.SnarqDetComplementoPrinc)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Complemente do endereço do devedor principal.")
                .HasColumnName("SNArqDetComplementoPrinc");
            entity.Property(e => e.SnarqDetDaraFalenciaOrig)
                .HasComment("Data da falência do devedor original.")
                .HasColumnType("datetime")
                .HasColumnName("SNArqDetDaraFalenciaOrig");
            entity.Property(e => e.SnarqDetDataApuracao)
                .HasComment("Data de início do período de apuração do débito.")
                .HasColumnType("datetime")
                .HasColumnName("SNArqDetDataApuracao");
            entity.Property(e => e.SnarqDetDataCienciaDescisao)
                .HasComment("Data da ciência da última decisão que serviu como constituição definitiva do débito.")
                .HasColumnType("datetime")
                .HasColumnName("SNArqDetDataCienciaDescisao");
            entity.Property(e => e.SnarqDetDataCienciaLanc)
                .HasComment("Data da ciência do lançamento do auto de infração.")
                .HasColumnType("datetime")
                .HasColumnName("SNArqDetDataCienciaLanc");
            entity.Property(e => e.SnarqDetDataEntrega)
                .HasComment("Data da entrega da declaração que lançou o débito.")
                .HasColumnType("datetime")
                .HasColumnName("SNArqDetDataEntrega");
            entity.Property(e => e.SnarqDetDataFalenciaPrinc)
                .HasComment("Data da falência do devedor principal.")
                .HasColumnType("datetime")
                .HasColumnName("SNArqDetDataFalenciaPrinc");
            entity.Property(e => e.SnarqDetDeclaracao)
                .HasMaxLength(17)
                .IsUnicode(false)
                .HasComment("Número da declaração que lançou o débito.")
                .HasColumnName("SNArqDetDeclaracao");
            entity.Property(e => e.SnarqDetFundamentacaoAcesc)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasComment("Texto da fundamentação legal dos acréscimos legais.")
                .HasColumnName("SNArqDetFundamentacaoAcesc");
            entity.Property(e => e.SnarqDetFundamentacaoPrinc)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasComment("Texto da fundamentação legal do principal do débito.")
                .HasColumnName("SNArqDetFundamentacaoPrinc");
            entity.Property(e => e.SnarqDetLancamento)
                .HasComment("Tipo de lançamento do débito. Domínio: 01 - Declarado, 02 - Ofício.")
                .HasColumnName("SNArqDetLancamento");
            entity.Property(e => e.SnarqDetLogradouroOrig)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Logradouro do endereço do devedor original.")
                .HasColumnName("SNArqDetLogradouroOrig");
            entity.Property(e => e.SnarqDetLogradouroPrinc)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Logradouro do endereço do devedor principal.")
                .HasColumnName("SNArqDetLogradouroPrinc");
            entity.Property(e => e.SnarqDetMultaMora)
                .HasComment("Percentual de multa de mora a ser aplicado no débito (Sempre 20%).")
                .HasColumnName("SNArqDetMultaMora");
            entity.Property(e => e.SnarqDetMunicipioOrig)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Nome do município do endereço do devedor original.")
                .HasColumnName("SNArqDetMunicipioOrig");
            entity.Property(e => e.SnarqDetMunicipioPrinc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Nome do município do endereço do devedor principal.")
                .HasColumnName("SNArqDetMunicipioPrinc");
            entity.Property(e => e.SnarqDetNatureza)
                .HasComment("Tipo de natureza do débito. Domínio: 01 - Principal, 02 - Multa Vinculada.")
                .HasColumnName("SNArqDetNatureza");
            entity.Property(e => e.SnarqDetNumeroOrig)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasComment("Número do endereço do devedor original.")
                .HasColumnName("SNArqDetNumeroOrig");
            entity.Property(e => e.SnarqDetNumeroPrinc)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasComment("Número do endereço do devedor principal.")
                .HasColumnName("SNArqDetNumeroPrinc");
            entity.Property(e => e.SnarqDetProcesso)
                .HasMaxLength(17)
                .IsUnicode(false)
                .HasComment("Número do processo administrativo do débito.")
                .HasColumnName("SNArqDetProcesso");
            entity.Property(e => e.SnarqDetRazaoOrig)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasComment("Nome empresarial do devedor.")
                .HasColumnName("SNArqDetRazaoOrig");
            entity.Property(e => e.SnarqDetRazaoPrinc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasComment("Nome empresarial do devedor principal.")
                .HasColumnName("SNArqDetRazaoPrinc");
            entity.Property(e => e.SnarqDetTipoLogradOrig)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Tipo de logradouro do endereço do devedor original.")
                .HasColumnName("SNArqDetTipoLogradOrig");
            entity.Property(e => e.SnarqDetTipoLogradPrinc)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Tipo de logradouro do endereço do devedor principal.")
                .HasColumnName("SNArqDetTipoLogradPrinc");
            entity.Property(e => e.SnarqDetTributo)
                .HasComment("Sigla do tributo. Domínio: 01 - ISS, 02 - ICMS.")
                .HasColumnName("SNArqDetTributo");
            entity.Property(e => e.SnarqDetUaorig)
                .HasComment("Código de unidade de jurisdição do devedor original na RFB.")
                .HasColumnName("SNArqDetUAOrig");
            entity.Property(e => e.SnarqDetUaprinc)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Código de unidade de jurisdição do devedor principal na RFB.")
                .HasColumnName("SNArqDetUAPrinc");
            entity.Property(e => e.SnarqDetUforig)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Sigla da unidade federativa do endereço do devedor original.")
                .HasColumnName("SNArqDetUFOrig");
            entity.Property(e => e.SnarqDetUfprinc)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Sigla da unidade federativa do endereço do devedor principal.")
                .HasColumnName("SNArqDetUFPrinc");
            entity.Property(e => e.SnarqDetUmv)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Sigla da unidade de medida de valor do débito.")
                .HasColumnName("SNArqDetUMV");
            entity.Property(e => e.SnarqDetValor)
                .HasComment("Valor originário do débito.")
                .HasColumnType("money")
                .HasColumnName("SNArqDetValor");
            entity.Property(e => e.SnarqDetVencimento)
                .HasComment("Data de vencimento do débito.")
                .HasColumnType("datetime")
                .HasColumnName("SNArqDetVencimento");
            entity.Property(e => e.SnarqId)
                .HasComment("Código de identificação do arquivo de dividas do Simples Nacional.")
                .HasColumnName("SNArqID");
            entity.Property(e => e.Snprocessado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Indica se ja foi realizado a importação das dívidas desse registro.")
                .HasColumnName("SNProcessado");

            entity.HasOne(d => d.Snarq).WithMany(p => p.TribSnarquivoDetalhes)
                .HasForeignKey(d => d.SnarqId)
                .HasConstraintName("FK_TribSNArquivoDetalhes_TribSNArquivo");
        });

        modelBuilder.Entity<TribSndivida>(entity =>
        {
            entity.HasKey(e => e.SndivId);

            entity.ToTable("TribSNDividas");

            entity.Property(e => e.SndivId)
                .ValueGeneratedNever()
                .HasComment("Código de identificacao das dividas geradas conforme arquivo importado.")
                .HasColumnName("SNDivID");
            entity.Property(e => e.ConIddivida).HasColumnName("ConIDDivida");
            entity.Property(e => e.DivEmpId)
                .HasComment("Código de identificação das dividas de empresas.")
                .HasColumnName("DivEmpID");
            entity.Property(e => e.SnarqDetId)
                .HasComment("Código de identificação de cada linha de divida contida no arquivo.")
                .HasColumnName("SNArqDetID");

            entity.HasOne(d => d.DivEmp).WithMany(p => p.TribSndivida)
                .HasForeignKey(d => d.DivEmpId)
                .HasConstraintName("FK_TribSNDividas_TribDividasEmpresas");

            entity.HasOne(d => d.SnarqDet).WithMany(p => p.TribSndivida)
                .HasForeignKey(d => d.SnarqDetId)
                .HasConstraintName("FK_TribSNDividas_TribSNArquivoDetalhes");
        });

        modelBuilder.Entity<TribTap>(entity =>
        {
            entity.HasKey(e => e.TapId);

            entity.ToTable("TribTap");

            entity.HasIndex(e => e.ConIddestino, "IX_ConIDDestino").HasFillFactor(90);

            entity.HasIndex(e => e.EdificacaoIddestino, "IX_EdificacaoIDDestino").HasFillFactor(90);

            entity.HasIndex(e => e.EmprCmcDestino, "IX_EmprCmcDestino").HasFillFactor(90);

            entity.HasIndex(e => e.TapNumero, "IX_TapNumero").HasFillFactor(90);

            entity.HasIndex(e => e.LeiDescId, "IX_TribTap_LeiDescID_inc_TapID");

            entity.HasIndex(e => new { e.TapId, e.EdificacaoIddestino }, "IX_TribTap_TapID_EdificacaoIDDestino").HasFillFactor(90);

            entity.HasIndex(e => new { e.TapSituacao, e.TapId }, "IX_TribTap_TapSituacao_TapID_inc_TapNumero");

            entity.HasIndex(e => new { e.TapSituacao, e.TapId }, "_dta_index_TribTap_8_281208202__K21_K1");

            entity.HasIndex(e => new { e.TapSituacao, e.TapId }, "_dta_index_TribTap_8_281208202__K21_K1_3");

            entity.Property(e => e.TapId)
                .ValueGeneratedNever()
                .HasColumnName("TapID");
            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.ConIddestino).HasColumnName("ConIDDestino");
            entity.Property(e => e.DataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.EdificacaoIddestino).HasColumnName("EdificacaoIDDestino");
            entity.Property(e => e.IpRequest)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LeiDescId).HasColumnName("LeiDescID");
            entity.Property(e => e.TapData).HasColumnType("datetime");
            entity.Property(e => e.TapLeiNum)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength();
            entity.Property(e => e.TapNumParcelas).HasDefaultValue(0);
            entity.Property(e => e.TapNumero).HasDefaultValue(0L);
            entity.Property(e => e.TapPercDescCorrec)
                .HasDefaultValue(0m)
                .HasColumnType("money");
            entity.Property(e => e.TapPercDescJuros)
                .HasDefaultValue(0m)
                .HasColumnType("money");
            entity.Property(e => e.TapPercDescMulta)
                .HasDefaultValue(0m)
                .HasColumnType("money");
            entity.Property(e => e.TapPercDescMultaDa)
                .HasDefaultValue(0m)
                .HasColumnType("money")
                .HasColumnName("TapPercDescMultaDA");
            entity.Property(e => e.TapPossuiEntrada)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TapPossuiRescisao)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TapSituacao)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("Pendente")
                .HasComment("Marca a situação das dividas DESTINO do TAP: 'Pendente' ou 'Baixada'");
            entity.Property(e => e.TapTipoLanc)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("Automático")
                .HasComment("Tipo do lançamento do tap: Automático=Lançamento do Sistema, Manual=>Lançamento do Usuário.");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");

            entity.HasOne(d => d.Con).WithMany(p => p.TribTapCons)
                .HasForeignKey(d => d.ConId)
                .HasConstraintName("FK_TribTap_Contribuintes");

            entity.HasOne(d => d.ConIddestinoNavigation).WithMany(p => p.TribTapConIddestinoNavigations)
                .HasForeignKey(d => d.ConIddestino)
                .HasConstraintName("FK_TribTap_Contribuintes1");

            entity.HasOne(d => d.EdificacaoIddestinoNavigation).WithMany(p => p.TribTaps)
                .HasForeignKey(d => d.EdificacaoIddestino)
                .HasConstraintName("FK_TribTap_TribEdificacoes");

            entity.HasOne(d => d.EmprCmcDestinoNavigation).WithMany(p => p.TribTaps)
                .HasForeignKey(d => d.EmprCmcDestino)
                .HasConstraintName("FK_TribTap_TribEmpresas");

            entity.HasOne(d => d.LeiDesc).WithMany(p => p.TribTaps)
                .HasForeignKey(d => d.LeiDescId)
                .HasConstraintName("FK_TribTap_TribLeisDesc");
        });

        modelBuilder.Entity<TribTapDestino>(entity =>
        {
            entity.HasKey(e => e.TapDestinoId);

            entity.ToTable("TribTapDestino", tb =>
                {
                    tb.HasTrigger("TgTribTapDestinoInsert");
                    tb.HasTrigger("TgTribTapDestinoInsertUpdate");
                });

            entity.HasIndex(e => e.ConIddivida, "IX_ConIDDivida").HasFillFactor(90);

            entity.HasIndex(e => e.EmpIddivida, "IX_EmpIDDivida").HasFillFactor(90);

            entity.HasIndex(e => e.ImoIddivida, "IX_ImoIDDivida").HasFillFactor(90);

            entity.HasIndex(e => e.TapId, "IX_TapID").HasFillFactor(90);

            entity.HasIndex(e => new { e.EmpIddivida, e.TapId, e.TapDestinoId }, "IX_TribTapDestino_EmpIDDivida_TapID_TapDestinoID").HasFillFactor(90);

            entity.HasIndex(e => e.ImoIddivida, "IX_TribTapDestino_ImoIDDivida_inc_TapID");

            entity.HasIndex(e => new { e.TapId, e.ConIddivida, e.ImoIddivida }, "IX_TribTapDestino_TapID_ConIDDivida_ImoIDDivida");

            entity.HasIndex(e => new { e.TapId, e.EmpIddivida }, "IX_TribTapDestino_TapID_EmpIDDivida");

            entity.HasIndex(e => new { e.TapId, e.EmpIddivida, e.ImoIddivida, e.ConIddivida }, "IX_TribTapDestino_TapID_EmpIDDivida_ImoIDDivida_ConIDDivida");

            entity.HasIndex(e => new { e.TapId, e.EmpIddivida }, "IX_TribTapDestino_TapID_EmpIDDivida_inc_TapDestinoID").HasFillFactor(90);

            entity.HasIndex(e => new { e.TapId, e.ImoIddivida }, "IX_TribTapDestino_TapID_ImoIDDivida");

            entity.HasIndex(e => e.TapId, "IX_TribTapDestino_TapID_inc_EmpIDDivida");

            entity.HasIndex(e => e.TapId, "IX_TribTapDestino_TapID_inc_ImoIDDivida");

            entity.HasIndex(e => new { e.TapId, e.ImoIddivida, e.TapDestinoId, e.EmpIddivida, e.ConIddivida }, "_dta_index_TribTapDestino_8_1306800063__K2_K3_K1_K5_K4").HasFillFactor(90);

            entity.HasIndex(e => new { e.TapId, e.ImoIddivida, e.EmpIddivida, e.ConIddivida }, "_dta_index_TribTapDestino_8_1306800063__K2_K3_K5_K4");

            entity.HasIndex(e => new { e.ConIddivida, e.TapId, e.ImoIddivida, e.TapDestinoId, e.EmpIddivida }, "_dta_index_TribTapDestino_8_1306800063__K4_K2_K3_K1_K5").HasFillFactor(90);

            entity.HasIndex(e => new { e.TapId, e.ConIddivida }, "ix_TribTapDestino_TapID_ConIDDivida").HasFillFactor(90);

            entity.Property(e => e.TapDestinoId)
                .ValueGeneratedNever()
                .HasColumnName("TapDestinoID");
            entity.Property(e => e.ConIddivida).HasColumnName("ConIDDivida");
            entity.Property(e => e.DataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.EmpIddivida).HasColumnName("EmpIDDivida");
            entity.Property(e => e.ImoIddivida)
                .HasComment("Código de identificação da dívida.")
                .HasColumnName("ImoIDDivida");
            entity.Property(e => e.TapDestPercRescisao).HasColumnType("money");
            entity.Property(e => e.TapDestVlrCorrec)
                .HasDefaultValue(0m)
                .HasColumnType("money");
            entity.Property(e => e.TapDestVlrDesc)
                .HasDefaultValue(0m)
                .HasColumnType("money");
            entity.Property(e => e.TapDestVlrEntrada).HasColumnType("money");
            entity.Property(e => e.TapDestVlrJuros)
                .HasDefaultValue(0m)
                .HasColumnType("money");
            entity.Property(e => e.TapDestVlrMulta)
                .HasDefaultValue(0m)
                .HasColumnType("money");
            entity.Property(e => e.TapDestVlrMultaDa)
                .HasDefaultValue(0m)
                .HasColumnType("money")
                .HasColumnName("TapDestVlrMultaDA");
            entity.Property(e => e.TapDestVlrPrinc)
                .HasDefaultValue(0m)
                .HasColumnType("money");
            entity.Property(e => e.TapId).HasColumnName("TapID");
            entity.Property(e => e.TipoBxId)
                .HasComment("Este campo é sincronizado por Trigger")
                .HasColumnName("TipoBxID");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");

            entity.HasOne(d => d.ConIddividaNavigation).WithMany(p => p.TribTapDestinos)
                .HasForeignKey(d => d.ConIddivida)
                .HasConstraintName("FK_TribTapDestino_TribDividasContribuinte");

            entity.HasOne(d => d.EmpIddividaNavigation).WithMany(p => p.TribTapDestinos)
                .HasForeignKey(d => d.EmpIddivida)
                .HasConstraintName("FK_TribTapDestino_TribDividasEmpresas");

            entity.HasOne(d => d.ImoIddividaNavigation).WithMany(p => p.TribTapDestinos)
                .HasForeignKey(d => d.ImoIddivida)
                .HasConstraintName("FK_TribTapDestino_TribDividasImo");

            entity.HasOne(d => d.Tap).WithMany(p => p.TribTapDestinos)
                .HasForeignKey(d => d.TapId)
                .HasConstraintName("FK_TribTapDestino_TribTap");

            entity.HasOne(d => d.TipoBx).WithMany(p => p.TribTapDestinos)
                .HasForeignKey(d => d.TipoBxId)
                .HasConstraintName("FK_TribTapDestino_TribTipoBaixa");
        });

        modelBuilder.Entity<TribTapInscrOrigem>(entity =>
        {
            entity.HasKey(e => e.TaInId);

            entity.ToTable("tribTapInscrOrigem");

            entity.HasIndex(e => e.ConId, "IX_ConID").HasFillFactor(90);

            entity.HasIndex(e => e.EdificacaoId, "IX_EdificacaoID").HasFillFactor(90);

            entity.HasIndex(e => e.EmprCmc, "IX_EmprCmc").HasFillFactor(90);

            entity.HasIndex(e => e.TapId, "IX_TapID").HasFillFactor(90);

            entity.HasIndex(e => new { e.TapId, e.EdificacaoId, e.ConId, e.EmprCmc }, "IX_tribTapInscrOrigem_TapID_EdificacaoID_ConID_EmprCMC").HasFillFactor(90);

            entity.Property(e => e.TaInId).HasColumnName("TaInID");
            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.TapId).HasColumnName("TapID");

            entity.HasOne(d => d.Con).WithMany(p => p.TribTapInscrOrigems)
                .HasForeignKey(d => d.ConId)
                .HasConstraintName("FK_tribTapInscrOrigem_Contribuintes");

            entity.HasOne(d => d.Edificacao).WithMany(p => p.TribTapInscrOrigems)
                .HasForeignKey(d => d.EdificacaoId)
                .HasConstraintName("FK_tribTapInscrOrigem_TribEdificacoes");

            entity.HasOne(d => d.EmprCmcNavigation).WithMany(p => p.TribTapInscrOrigems)
                .HasForeignKey(d => d.EmprCmc)
                .HasConstraintName("FK_tribTapInscrOrigem_TribEmpresas");

            entity.HasOne(d => d.Tap).WithMany(p => p.TribTapInscrOrigems)
                .HasForeignKey(d => d.TapId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tribTapInscrOrigem_TribTap");
        });

        modelBuilder.Entity<TribTapMapa>(entity =>
        {
            entity.HasKey(e => e.TapMapaId);

            entity.ToTable("TribTapMapa");

            entity.HasIndex(e => e.TapId, "IX_TribTapMapa").HasFillFactor(90);

            entity.HasIndex(e => new { e.DataBaixa, e.TapId }, "IX_TribTapMapa_1").HasFillFactor(90);

            entity.HasIndex(e => e.ConIddivida, "IX_TribTapMapa_ConIDDivida_inc_TapParcelaPaga_TapId");

            entity.HasIndex(e => e.ImoIddivida, "IX_TribTapMapa_ImoIDDivida_TapMapaID").HasFillFactor(90);

            entity.HasIndex(e => new { e.TapParcelaPaga, e.ImoIddivida, e.EmpIddivida, e.TapId, e.ConIddivida }, "_dta_index_TribTapMapa_8_83895766__K13_K15_K17_K18_K16_12_20");

            entity.HasIndex(e => new { e.ImoIddivida, e.TapMapaId, e.TapId, e.TapParcelaPaga, e.EmpIddivida, e.ConIddivida }, "_dta_index_TribTapMapa_8_83895766__K15_K1_K18_K13_K17_K16_12_20");

            entity.HasIndex(e => new { e.ConIddivida, e.TapParcelaPaga, e.TapId, e.ImoIddivida, e.TapMapaId, e.EmpIddivida }, "_dta_index_TribTapMapa_8_83895766__K16_K13_K18_K15_K1_K17_12_20");

            entity.HasIndex(e => new { e.EmpIddivida, e.TapParcelaPaga, e.TapId, e.ImoIddivida, e.TapMapaId, e.ConIddivida }, "_dta_index_TribTapMapa_8_83895766__K17_K13_K18_K15_K1_K16_12_20");

            entity.Property(e => e.TapMapaId).HasColumnName("TapMapaID");
            entity.Property(e => e.ConIddivida).HasColumnName("ConIDDivida");
            entity.Property(e => e.CorrecaoTap).HasColumnType("money");
            entity.Property(e => e.DataBaixa).HasColumnType("datetime");
            entity.Property(e => e.DescontoTap).HasColumnType("money");
            entity.Property(e => e.EmpIddivida).HasColumnName("EmpIDDivida");
            entity.Property(e => e.ImoIddivida).HasColumnName("ImoIDDivida");
            entity.Property(e => e.JurosTap).HasColumnType("money");
            entity.Property(e => e.MultaDaTap).HasColumnType("money");
            entity.Property(e => e.MultaTap).HasColumnType("money");
            entity.Property(e => e.TapPagamentoParcial)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TapParcelaPaga)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TapValorPagamentoParcial).HasColumnType("money");
            entity.Property(e => e.TapVlAcrescimo).HasColumnType("money");
            entity.Property(e => e.TapVlBonificacao).HasColumnType("money");
            entity.Property(e => e.TapVlCorrecao).HasColumnType("money");
            entity.Property(e => e.TapVlDesconto).HasColumnType("money");
            entity.Property(e => e.TapVlJuros).HasColumnType("money");
            entity.Property(e => e.TapVlJurosParc).HasColumnType("money");
            entity.Property(e => e.TapVlMulta).HasColumnType("money");
            entity.Property(e => e.TapVlMultaDa)
                .HasColumnType("money")
                .HasColumnName("TapVlMultaDA");
            entity.Property(e => e.TapVlOriginal).HasColumnType("money");
            entity.Property(e => e.TapVlPrincipal).HasColumnType("money");
            entity.Property(e => e.TapVlTotal).HasColumnType("money");
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");

            entity.HasOne(d => d.ConIddividaNavigation).WithMany(p => p.TribTapMapas)
                .HasForeignKey(d => d.ConIddivida)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_TribTapMapa_TribDividasContribuinte");

            entity.HasOne(d => d.EmpIddividaNavigation).WithMany(p => p.TribTapMapas)
                .HasForeignKey(d => d.EmpIddivida)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_TribTapMapa_TribDividasEmpresas");

            entity.HasOne(d => d.ImoIddividaNavigation).WithMany(p => p.TribTapMapas)
                .HasForeignKey(d => d.ImoIddivida)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_TribTapMapa_TribDividasImo");

            entity.HasOne(d => d.Tap).WithMany(p => p.TribTapMapas)
                .HasForeignKey(d => d.TapId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_TribTapMapa_TribTap");

            entity.HasOne(d => d.TipoTrib).WithMany(p => p.TribTapMapas)
                .HasForeignKey(d => d.TipoTribId)
                .HasConstraintName("FK_TribTapMapa_TribTipoTributos");
        });

        modelBuilder.Entity<TribTapMapaDiferenca>(entity =>
        {
            entity.HasKey(e => e.TapId).HasName("PK_TapMap");

            entity.ToTable("TribTapMapa_Diferenca");

            entity.Property(e => e.TapId).ValueGeneratedNever();
            entity.Property(e => e.Maior)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ValorDiferenca)
                .HasColumnType("money")
                .HasColumnName("valorDiferenca");
        });

        modelBuilder.Entity<TribTapMapaOld>(entity =>
        {
            entity.HasKey(e => e.TapMapaId);

            entity.ToTable("TribTapMapa_old");

            entity.HasIndex(e => e.EmpIddivida, "IX_TribTapMapa_2").HasFillFactor(90);

            entity.Property(e => e.TapMapaId).HasColumnName("TapMapaID");
            entity.Property(e => e.ConIddivida).HasColumnName("ConIDDivida");
            entity.Property(e => e.CorrecaoTap).HasColumnType("money");
            entity.Property(e => e.DataBaixa).HasColumnType("datetime");
            entity.Property(e => e.DescontoTap).HasColumnType("money");
            entity.Property(e => e.EmpIddivida).HasColumnName("EmpIDDivida");
            entity.Property(e => e.ImoIddivida).HasColumnName("ImoIDDivida");
            entity.Property(e => e.JurosTap).HasColumnType("money");
            entity.Property(e => e.MultaDaTap).HasColumnType("money");
            entity.Property(e => e.MultaTap).HasColumnType("money");
            entity.Property(e => e.TapPagamentoParcial)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TapParcelaPaga)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TapSituacao)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TapValorPagamentoParcial).HasColumnType("money");
            entity.Property(e => e.TapVlAcrescimo).HasColumnType("money");
            entity.Property(e => e.TapVlCorrecao).HasColumnType("money");
            entity.Property(e => e.TapVlDesconto).HasColumnType("money");
            entity.Property(e => e.TapVlJuros).HasColumnType("money");
            entity.Property(e => e.TapVlJurosParc).HasColumnType("money");
            entity.Property(e => e.TapVlMulta).HasColumnType("money");
            entity.Property(e => e.TapVlMultaDa)
                .HasColumnType("money")
                .HasColumnName("TapVlMultaDA");
            entity.Property(e => e.TapVlOriginal).HasColumnType("money");
            entity.Property(e => e.TapVlPrincipal).HasColumnType("money");
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
        });

        modelBuilder.Entity<TribTapMapaPagamento>(entity =>
        {
            entity.HasKey(e => e.TribMapaPagtoId);

            entity.HasIndex(e => e.TapMapaId, "IX_TribTapMapaPagamentos").HasFillFactor(90);

            entity.HasIndex(e => e.ImoIddivida, "IX_TribTapMapaPagamentos_1").HasFillFactor(90);

            entity.HasIndex(e => e.BaiId, "IX_TribTapMapaPagamentos_2").HasFillFactor(90);

            entity.HasIndex(e => new { e.DataBaixa, e.TapMapaId }, "IX_TribTapMapaPagamentos_3").HasFillFactor(90);

            entity.Property(e => e.BaiId).HasColumnName("BaiID");
            entity.Property(e => e.BoleDivId).HasColumnName("boleDivID");
            entity.Property(e => e.ConIddivida).HasColumnName("ConIDDivida");
            entity.Property(e => e.DataBaixa).HasColumnType("datetime");
            entity.Property(e => e.EmpIddivida).HasColumnName("EmpIDDivida");
            entity.Property(e => e.ImoIddivida).HasColumnName("ImoIDDivida");
            entity.Property(e => e.TapMapaId).HasColumnName("TapMapaID");
            entity.Property(e => e.TapVlAcrescimosAtraso).HasColumnType("money");
            entity.Property(e => e.TapVlCorrecao).HasColumnType("money");
            entity.Property(e => e.TapVlDesconto).HasColumnType("money");
            entity.Property(e => e.TapVlJuros).HasColumnType("money");
            entity.Property(e => e.TapVlJurosParcelas).HasColumnType("money");
            entity.Property(e => e.TapVlMulta).HasColumnType("money");
            entity.Property(e => e.TapVlMultaDa)
                .HasColumnType("money")
                .HasColumnName("TapVlMultaDA");
            entity.Property(e => e.TapVlPago).HasColumnType("money");
            entity.Property(e => e.TapVlPrincipal).HasColumnType("money");

            entity.HasOne(d => d.TapMapa).WithMany(p => p.TribTapMapaPagamentos)
                .HasForeignKey(d => d.TapMapaId)
                .HasConstraintName("FK_TribTapMapaPagamentos_TribTapMapa");
        });

        modelBuilder.Entity<TribTapOrigem>(entity =>
        {
            entity.HasKey(e => e.TapOrigemId);

            entity.ToTable("TribTapOrigem");

            entity.HasIndex(e => e.ConIddivida, "IX_ConIDDivida").HasFillFactor(90);

            entity.HasIndex(e => e.EmpIddivida, "IX_EmpIDDivida").HasFillFactor(90);

            entity.HasIndex(e => e.ImoIddivida, "IX_ImoIDDivida").HasFillFactor(90);

            entity.HasIndex(e => e.TapId, "IX_TapID").HasFillFactor(90);

            entity.HasIndex(e => new { e.ConIddivida, e.TapId }, "IX_TribTapOrigem_ConIDDivida_TapID");

            entity.HasIndex(e => e.TapId, "IX_TribTapOrigem_TapID");

            entity.HasIndex(e => new { e.TapId, e.ImoIddivida }, "IX_TribTapOrigem_TapID_ImoIDDivida");

            entity.HasIndex(e => new { e.TapId, e.TapOrigemId, e.ImoIddivida, e.EmpIddivida, e.ConIddivida }, "_dta_index_TribTapOrigem_8_1039498932__K2_K1_K3_K5_K4").HasFillFactor(90);

            entity.HasIndex(e => new { e.ImoIddivida, e.EmpIddivida, e.ConIddivida, e.TapId, e.TapOrigemId }, "_dta_index_TribTapOrigem_8_1039498932__K3_K5_K4_K2_K1").HasFillFactor(90);

            entity.HasIndex(e => new { e.EmpIddivida, e.TapOrigemId, e.TapId, e.ImoIddivida, e.ConIddivida }, "_dta_index_TribTapOrigem_8_1039498932__K5_K1_K2_K3_K4").HasFillFactor(90);

            entity.Property(e => e.TapOrigemId).HasColumnName("TapOrigemID");
            entity.Property(e => e.ConIddivida).HasColumnName("ConIDDivida");
            entity.Property(e => e.EmpIddivida).HasColumnName("EmpIDDivida");
            entity.Property(e => e.ImoIddivida)
                .HasComment("Código de identificação da dívida.")
                .HasColumnName("ImoIDDivida");
            entity.Property(e => e.TapId).HasColumnName("TapID");
            entity.Property(e => e.TapOrigVlrCorrec)
                .HasDefaultValue(0m)
                .HasColumnType("money");
            entity.Property(e => e.TapOrigVlrDesc)
                .HasDefaultValue(0m)
                .HasColumnType("money");
            entity.Property(e => e.TapOrigVlrJuros)
                .HasDefaultValue(0m)
                .HasColumnType("money");
            entity.Property(e => e.TapOrigVlrMulta)
                .HasDefaultValue(0m)
                .HasColumnType("money");
            entity.Property(e => e.TapOrigVlrMultaDa)
                .HasDefaultValue(0m)
                .HasColumnType("money")
                .HasColumnName("TapOrigVlrMultaDA");
            entity.Property(e => e.TapOrigVlrPrinc)
                .HasDefaultValue(0m)
                .HasColumnType("money");
            entity.Property(e => e.TapOrigVlrTotal)
                .HasComputedColumnSql("([TapOrigVlrPrinc] + [TapOrigVlrJuros] + [TapOrigVlrMulta] + [TapOrigVlrCorrec] + [TapOrigVlrMultaDA] - [TapOrigVlrDesc])", false)
                .HasColumnType("money");

            entity.HasOne(d => d.ConIddividaNavigation).WithMany(p => p.TribTapOrigems)
                .HasForeignKey(d => d.ConIddivida)
                .HasConstraintName("FK_TribTapOrigem_TribDividasContribuinte");

            entity.HasOne(d => d.EmpIddividaNavigation).WithMany(p => p.TribTapOrigems)
                .HasForeignKey(d => d.EmpIddivida)
                .HasConstraintName("FK_TribTapOrigem_TribDividasEmpresas");

            entity.HasOne(d => d.ImoIddividaNavigation).WithMany(p => p.TribTapOrigems)
                .HasForeignKey(d => d.ImoIddivida)
                .HasConstraintName("FK_TribTapOrigem_TribDividasImo");

            entity.HasOne(d => d.Tap).WithMany(p => p.TribTapOrigems)
                .HasForeignKey(d => d.TapId)
                .HasConstraintName("FK_TribTapOrigem_TribTap");
        });

        modelBuilder.Entity<TribTapRescisao>(entity =>
        {
            entity.HasKey(e => e.ResId);

            entity.ToTable("TribTapRescisao");

            entity.HasIndex(e => e.DataRescisao, "IX_TribTapRescisao_DataRescisao_inc_ResID_TapID");

            entity.Property(e => e.ResId).HasColumnName("ResID");
            entity.Property(e => e.AlteradoSimulaAutom)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BaDeId)
                .HasComment("Identificação da Devolução da Receita")
                .HasColumnName("BaDeID");
            entity.Property(e => e.ComDesconto)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DataRescisao).HasColumnType("datetime");
            entity.Property(e => e.HostInclusao)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValueSql("(host_name())");
            entity.Property(e => e.Motivo)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Proporcional)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SaldoRestituir).HasColumnType("money");
            entity.Property(e => e.TapId).HasColumnName("TapID");
            entity.Property(e => e.Termo).HasColumnType("text");
            entity.Property(e => e.TextoId).HasColumnName("TextoID");
            entity.Property(e => e.TotalCorrecao).HasColumnType("money");
            entity.Property(e => e.TotalDeduzir).HasColumnType("money");
            entity.Property(e => e.TotalDividaOrigem).HasColumnType("money");
            entity.Property(e => e.TotalJurosTap)
                .HasColumnType("money")
                .HasColumnName("TotalJurosTAP");
            entity.Property(e => e.TotalPagamento).HasColumnType("money");
            entity.Property(e => e.TotalSemJurosMulta).HasColumnType("money");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");
        });

        modelBuilder.Entity<TribTapRescisaoDiv>(entity =>
        {
            entity.HasKey(e => e.ResDivId);

            entity.ToTable("TribTapRescisaoDiv");

            entity.HasIndex(e => e.ConIddivida, "IX_TribTapRescisaoDiv_ConIDDivida").HasFillFactor(90);

            entity.HasIndex(e => e.DivEmpId, "IX_TribTapRescisaoDiv_DivEmpID").HasFillFactor(90);

            entity.HasIndex(e => e.ImoIddivida, "IX_TribTapRescisaoDiv_ImoIDDivida").HasFillFactor(90);

            entity.HasIndex(e => e.ResId, "IX_TribTapRescisaoDiv_ResID");

            entity.Property(e => e.ResDivId).HasColumnName("ResDivID");
            entity.Property(e => e.ConIddivida).HasColumnName("ConIDDivida");
            entity.Property(e => e.DivEmpId).HasColumnName("DivEmpID");
            entity.Property(e => e.IddividaOrigem).HasColumnName("IDDividaOrigem");
            entity.Property(e => e.ImoIddivida)
                .HasComment("Código de identificação da dívida.")
                .HasColumnName("ImoIDDivida");
            entity.Property(e => e.ResId).HasColumnName("ResID");

            entity.HasOne(d => d.ConIddividaNavigation).WithMany(p => p.TribTapRescisaoDivs)
                .HasForeignKey(d => d.ConIddivida)
                .HasConstraintName("FK_TribTapRescisaoDiv_TribDividasContribuinte");

            entity.HasOne(d => d.DivEmp).WithMany(p => p.TribTapRescisaoDivs)
                .HasForeignKey(d => d.DivEmpId)
                .HasConstraintName("FK_TribTapRescisaoDiv_TribDividasEmpresas");

            entity.HasOne(d => d.ImoIddividaNavigation).WithMany(p => p.TribTapRescisaoDivs)
                .HasForeignKey(d => d.ImoIddivida)
                .HasConstraintName("FK_TribTapRescisaoDiv_TribDividasImo");
        });

        modelBuilder.Entity<TribTapRescisaoMapa>(entity =>
        {
            entity.HasKey(e => e.IdMapaRescisao);

            entity.ToTable("TribTapRescisaoMapa");

            entity.HasIndex(e => e.ResId, "IX_TribTapRescisaoMapa").HasFillFactor(90);

            entity.HasIndex(e => e.TapMapaId, "IX_TribTapRescisaoMapa_1").HasFillFactor(90);

            entity.Property(e => e.ConIddivida).HasColumnName("ConIDDivida");
            entity.Property(e => e.DtBaixa)
                .HasColumnType("datetime")
                .HasColumnName("dtBaixa");
            entity.Property(e => e.EmpIddivida).HasColumnName("EmpIDDivida");
            entity.Property(e => e.FlPago)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flPago");
            entity.Property(e => e.FlParcial)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flParcial");
            entity.Property(e => e.ImoIddivida).HasColumnName("ImoIDDivida");
            entity.Property(e => e.ResId).HasColumnName("ResID");
            entity.Property(e => e.TapMapaId).HasColumnName("TapMapaID");
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
            entity.Property(e => e.VlCompensado)
                .HasColumnType("money")
                .HasColumnName("vlCompensado");
            entity.Property(e => e.VlPrincipal)
                .HasColumnType("money")
                .HasColumnName("vlPrincipal");
            entity.Property(e => e.VlPrincipalPago)
                .HasColumnType("money")
                .HasColumnName("vlPrincipalPago");
            entity.Property(e => e.VlTotalDivida)
                .HasColumnType("money")
                .HasColumnName("vlTotalDivida");

            entity.HasOne(d => d.Res).WithMany(p => p.TribTapRescisaoMapas)
                .HasForeignKey(d => d.ResId)
                .HasConstraintName("FK_TribTapRescisaoMapa_TribTapRescisao");

            entity.HasOne(d => d.TapMapa).WithMany(p => p.TribTapRescisaoMapas)
                .HasForeignKey(d => d.TapMapaId)
                .HasConstraintName("FK_TribTapRescisaoMapa_TribTapMapa");
        });

        modelBuilder.Entity<TribTapRescisaoReceitum>(entity =>
        {
            entity.HasKey(e => e.ResRecId);

            entity.Property(e => e.ResRecId)
                .ValueGeneratedNever()
                .HasColumnName("ResRecID");
            entity.Property(e => e.Receita)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ResId).HasColumnName("ResID");
            entity.Property(e => e.Tipo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Valor).HasColumnType("money");
        });

        modelBuilder.Entity<TribTempDam>(entity =>
        {
            entity.HasKey(e => new { e.TDamsessionId, e.TDamdivida });

            entity.ToTable("TribTempDAM");

            entity.Property(e => e.TDamsessionId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("tDAMSessionID");
            entity.Property(e => e.TDamdivida)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tDAMDivida");
            entity.Property(e => e.TCadastro)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("Imovel")
                .IsFixedLength()
                .HasColumnName("tCadastro");
        });

        modelBuilder.Entity<TribTempFormulasValorVenal>(entity =>
        {
            entity.HasKey(e => e.Idformulas).HasName("PK_TribTempFormulas");

            entity.ToTable("TribTempFormulasValorVenal");

            entity.Property(e => e.Idformulas).HasColumnName("IDFormulas");
            entity.Property(e => e.CalculoValorVenal)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.CalculoValorVenalIptu)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("CalculoValorVenalIPTU");
            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.EdificacaoIdenglobado).HasColumnName("EdificacaoIDEnglobado");
            entity.Property(e => e.FormulaValorVenal)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.FormulaValorVenalIptu)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("FormulaValorVenalIPTU");
            entity.Property(e => e.InscricaoImobiliaria)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TipoCaracteristica)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("I = Imovel, E = Englobado, T = Terreno");
        });

        modelBuilder.Entity<TribTempParcelamento>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TribTempParcelamento");

            entity.HasIndex(e => e.TempSessao, "IX_TempSessao").HasFillFactor(90);

            entity.HasIndex(e => new { e.TempSessao, e.ImoIddivida }, "IX_TribTempParcelamento_TempSessao_ImoIDDivida");

            entity.Property(e => e.ConIddivida).HasColumnName("ConIDDivida");
            entity.Property(e => e.ConIdorigem)
                .HasComment("Contribuinte que originou o TAP")
                .HasColumnName("ConIDOrigem");
            entity.Property(e => e.DivEmpId).HasColumnName("DivEmpID");
            entity.Property(e => e.EdificacaoIdorigem)
                .HasComment("Edificação que originou o TAP")
                .HasColumnName("EdificacaoIDOrigem");
            entity.Property(e => e.EmprCmcorigem)
                .HasComment("CMC que originou o TAP")
                .HasColumnName("EmprCMCOrigem");
            entity.Property(e => e.ImoIddivida).HasColumnName("ImoIDDivida");
            entity.Property(e => e.LeiDescId).HasColumnName("LeiDescID");
            entity.Property(e => e.TempSessao)
                .HasMaxLength(37)
                .IsUnicode(false);
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
            entity.Property(e => e.ValorCorrecao).HasColumnType("money");
            entity.Property(e => e.ValorDesconto)
                .HasDefaultValue(0m)
                .HasColumnType("money");
            entity.Property(e => e.ValorJuros).HasColumnType("money");
            entity.Property(e => e.ValorMulta).HasColumnType("money");
            entity.Property(e => e.ValorMultaDa)
                .HasColumnType("money")
                .HasColumnName("ValorMultaDA");
            entity.Property(e => e.ValorPrincipal).HasColumnType("money");
            entity.Property(e => e.ValorTotal)
                .HasComputedColumnSql("([ValorPrincipal] + [ValorCorrecao] + [ValorJuros] + [ValorMulta] + [ValorMultaDA] - [ValorDesconto])", false)
                .HasColumnType("money");
            entity.Property(e => e.Vencimento).HasColumnType("datetime");
        });

        modelBuilder.Entity<TribTerreno>(entity =>
        {
            entity.HasKey(e => e.TerrenoId);

            entity.ToTable("TribTerreno", tb =>
                {
                    tb.HasTrigger("TgTribTerrenoDeleteOcorrencias");
                    tb.HasTrigger("TgTribTerrenoInsertUpdate");
                });

            entity.HasIndex(e => e.QuadraId, "IX_QuadraID").HasFillFactor(90);

            entity.HasIndex(e => new { e.TerrenoId, e.TerrAreaTerreno, e.ValorVenalTerreno }, "IX_TerrenoID_TerrAreaTerreno_ValorVenalTerreno").HasFillFactor(90);

            entity.HasIndex(e => new { e.QuadraId, e.TerrLote, e.TerrenoId }, "IX_TribTerreno_QuadraID_TerrLote_TerrenoID").HasFillFactor(90);

            entity.HasIndex(e => e.TerrReferenciaAnterior, "IX_TribTerreno_TerrReferenciaAnterior");

            entity.HasIndex(e => new { e.TerrenoId, e.QuadraId }, "IX_TribTerreno_TerrenoID_QuadraID_inc_TerrAreaTerreno");

            entity.HasIndex(e => new { e.TerrenoId, e.QuadraId }, "_idx_TribTerreno_TerrenoID_QuadraID").HasFillFactor(90);

            entity.Property(e => e.TerrenoId)
                .ValueGeneratedNever()
                .HasColumnName("TerrenoID");
            entity.Property(e => e.AreaAbertaCoberta).HasColumnType("money");
            entity.Property(e => e.AreaUsoComum).HasColumnType("money");
            entity.Property(e => e.CalcaId).HasColumnName("CalcaID");
            entity.Property(e => e.FundoId).HasColumnName("FundoID");
            entity.Property(e => e.InciId).HasColumnName("InciID");
            entity.Property(e => e.JuriId).HasColumnName("JuriID");
            entity.Property(e => e.LimTid).HasColumnName("LimTID");
            entity.Property(e => e.LocQid).HasColumnName("LocQID");
            entity.Property(e => e.LoteCondominio)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength();
            entity.Property(e => e.LoteLoteamento)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.NumeroCadastroCanadas)
                .HasDefaultValue(0L)
                .HasColumnName("NumeroCadastroCANADAS");
            entity.Property(e => e.PatrId).HasColumnName("PatrID");
            entity.Property(e => e.PedoId).HasColumnName("PedoID");
            entity.Property(e => e.QuadraId)
                .HasDefaultValue(0)
                .HasColumnName("QuadraID");
            entity.Property(e => e.QuadraLoteamento)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.TerrAreaTerreno)
                .HasDefaultValue(0m)
                .HasColumnType("money");
            entity.Property(e => e.TerrLote)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasDefaultValueSql("(0)");
            entity.Property(e => e.TerrObs)
                .HasComment("Observacoes sobre o terreno.")
                .HasColumnType("text");
            entity.Property(e => e.TerrReferenciaAnterior)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.TipoCondominio)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TopoId).HasColumnName("TopoID");
            entity.Property(e => e.ValorVenalTerreno)
                .HasComment("Valor Venal Terreno (trigger)")
                .HasColumnType("money");
            entity.Property(e => e.VegeId).HasColumnName("VegeID");

            entity.HasOne(d => d.Calca).WithMany(p => p.TribTerrenos)
                .HasForeignKey(d => d.CalcaId)
                .HasConstraintName("FK_TribTerreno_TribCalcada");

            entity.HasOne(d => d.Fundo).WithMany(p => p.TribTerrenos)
                .HasForeignKey(d => d.FundoId)
                .HasConstraintName("FK_TribTerreno_TribFundoVale");

            entity.HasOne(d => d.Inci).WithMany(p => p.TribTerrenos)
                .HasForeignKey(d => d.InciId)
                .HasConstraintName("FK_TribTerreno_TribIncidencia");

            entity.HasOne(d => d.Juri).WithMany(p => p.TribTerrenos)
                .HasForeignKey(d => d.JuriId)
                .HasConstraintName("FK_TribTerreno_TribCondJuridica");

            entity.HasOne(d => d.LimT).WithMany(p => p.TribTerrenos)
                .HasForeignKey(d => d.LimTid)
                .HasConstraintName("FK_TribTerreno_TribLimiteTestada");

            entity.HasOne(d => d.LocQ).WithMany(p => p.TribTerrenos)
                .HasForeignKey(d => d.LocQid)
                .HasConstraintName("FK_TribTerreno_TribLocalizacaoQuadra");

            entity.HasOne(d => d.Patr).WithMany(p => p.TribTerrenos)
                .HasForeignKey(d => d.PatrId)
                .HasConstraintName("FK_TribTerreno_TribPatrimonio");

            entity.HasOne(d => d.Pedo).WithMany(p => p.TribTerrenos)
                .HasForeignKey(d => d.PedoId)
                .HasConstraintName("FK_TribTerreno_tribPedologia");

            entity.HasOne(d => d.Quadra).WithMany(p => p.TribTerrenos)
                .HasForeignKey(d => d.QuadraId)
                .HasConstraintName("FK_TribTerreno_TribQuadra");

            entity.HasOne(d => d.Topo).WithMany(p => p.TribTerrenos)
                .HasForeignKey(d => d.TopoId)
                .HasConstraintName("FK_TribTerreno_TribTopografia");

            entity.HasOne(d => d.Vege).WithMany(p => p.TribTerrenos)
                .HasForeignKey(d => d.VegeId)
                .HasConstraintName("FK_TribTerreno_TribVegetacao");
        });

        modelBuilder.Entity<TribTerrenoDimensao>(entity =>
        {
            entity.HasKey(e => e.DimenId);

            entity.ToTable("TribTerrenoDimensao");

            entity.HasIndex(e => e.TerrenoId, "IX_TribTerrenoDimensao_TerrenoID").HasFillFactor(90);

            entity.Property(e => e.DimenId)
                .ValueGeneratedNever()
                .HasColumnName("DimenID");
            entity.Property(e => e.DimenData).HasColumnType("datetime");
            entity.Property(e => e.DimenDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.DimenMetragem)
                .HasDefaultValue(0m)
                .HasColumnType("money");
            entity.Property(e => e.TerrenoId).HasColumnName("TerrenoID");

            entity.HasOne(d => d.Terreno).WithMany(p => p.TribTerrenoDimensaos)
                .HasForeignKey(d => d.TerrenoId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_TribTerrenoDimensao_TribTerreno");
        });

        modelBuilder.Entity<TribTerrenoFace>(entity =>
        {
            entity.HasKey(e => e.IdFace);

            entity.ToTable("TribTerrenoFace");

            entity.Property(e => e.IdFace)
                .ValueGeneratedNever()
                .HasColumnName("idFace");
            entity.Property(e => e.DsFace)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dsFace");
            entity.Property(e => e.DsValor)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dsValor");
            entity.Property(e => e.TerrenoId).HasColumnName("TerrenoID");
        });

        modelBuilder.Entity<TribTestadasTerreno>(entity =>
        {
            entity.HasKey(e => new { e.TerrenoId, e.LogradId });

            entity.ToTable("TribTestadasTerreno", tb =>
                {
                    tb.HasTrigger("TgTribTestadasTerrenoInsert");
                    tb.HasTrigger("TgTribTestadasTerrenoUpdate");
                });

            entity.HasIndex(e => e.TerrenoId, "IX_TribTestadasTerreno_TerrenoID_TestadasMetragem").HasFillFactor(90);

            entity.HasIndex(e => new { e.TestadasPrincipal, e.TerrenoId, e.LogradId }, "IX_TribTestadasTerreno_TestadaPrincipal_TerrenoID_LogradID");

            entity.HasIndex(e => new { e.TestadasPrincipal, e.LogradId }, "IX_TribTestadasTerreno_TestadasPrincipal_LogradID").HasFillFactor(90);

            entity.Property(e => e.TerrenoId).HasColumnName("TerrenoID");
            entity.Property(e => e.LogradId).HasColumnName("LogradID");
            entity.Property(e => e.SecaoId).HasColumnName("SecaoID");
            entity.Property(e => e.TestadasMetragem)
                .HasDefaultValue(0m)
                .HasColumnType("money");
            entity.Property(e => e.TestadasPrincipal)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength()
                .HasComment("Sim ou Não");

            entity.HasOne(d => d.Lograd).WithMany(p => p.TribTestadasTerrenos)
                .HasForeignKey(d => d.LogradId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribTestadasTerreno_Logradouro");

            entity.HasOne(d => d.Terreno).WithMany(p => p.TribTestadasTerrenos)
                .HasForeignKey(d => d.TerrenoId)
                .HasConstraintName("FK_TribTestadasTerreno_TribTerreno");
        });

        modelBuilder.Entity<TribTexto>(entity =>
        {
            entity.HasKey(e => e.TextoId);

            entity.Property(e => e.TextoId)
                .ValueGeneratedNever()
                .HasColumnName("TextoID");
            entity.Property(e => e.DivId).HasColumnName("DivID");
            entity.Property(e => e.TextoCargoAssinatura)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("Descricação do cargo da pessoa que assina o documento.");
            entity.Property(e => e.TextoDescricao)
                .HasDefaultValue("")
                .HasColumnType("text");
            entity.Property(e => e.TextoImagemAssinatura)
                .HasComment("Imagem da assinatura da pessoa que assina o documento.")
                .HasColumnType("image");
            entity.Property(e => e.TextoNomeAssinatura)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("Nome da pessoa que assina o documento que o possui o texto.");
            entity.Property(e => e.TextoNotaRodape)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("Nota de rodapé do documento que será impresso com o texto.");
            entity.Property(e => e.TextoSuperior).HasColumnType("text");
            entity.Property(e => e.TextoTitulo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("Titulo do texto. Não obrigatório. (Esta sendo utilizado nas certidões negativas e positivas).");
        });

        modelBuilder.Entity<TribTipoAlvaraConstrucao>(entity =>
        {
            entity.HasKey(e => e.TipoAlvaraId);

            entity.ToTable("TribTipoAlvaraConstrucao");

            entity.Property(e => e.TipoAlvaraId)
                .ValueGeneratedNever()
                .HasColumnName("TipoAlvaraID");
            entity.Property(e => e.TipoAlvaraNome)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribTipoAlvaraTributo>(entity =>
        {
            entity.HasKey(e => new { e.TalvId, e.TipoTribId }).HasName("PK_TribTipoAlvaraTributo");

            entity.Property(e => e.TalvId).HasColumnName("TAlvID");
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
        });

        modelBuilder.Entity<TribTipoBaixa>(entity =>
        {
            entity.HasKey(e => e.TipoBxId);

            entity.ToTable("TribTipoBaixa");

            entity.Property(e => e.TipoBxId)
                .ValueGeneratedNever()
                .HasColumnName("TipoBxID");
            entity.Property(e => e.GrupoId).HasColumnName("GrupoID");
            entity.Property(e => e.TipoBxBaixaParcelasNormais)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Sim")
                .IsFixedLength()
                .HasComment("Este campo permite efetuar uma baixa em parcela unica sem baixar as parcelas normais");
            entity.Property(e => e.TipoBxConsiderarLancamento)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength()
                .HasComment("Marca se o tipo de baixa é considerado como lançamento, para controlar casos de \"BAIXA POR RECÁLCULO\" por exemplo, que são baixas realizadas pelo sistema para um novo lançamento da dívida. Esta checagem esta na SP: TribDividasRelPorAnoPeriodoLanc_SP.");
            entity.Property(e => e.TipoBxContrInterno)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Sim")
                .IsFixedLength()
                .HasComment("Tipo de baixa de controle interno do sistema.");
            entity.Property(e => e.TipoBxDescricao)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("Descreve onde e quando utilizar o tipo de baixa");
            entity.Property(e => e.TipoBxModuloContador)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength()
                .HasComment("Tipo de baixa utilizado para filtros em relatórios e formulários do módulo dos contadores.");
            entity.Property(e => e.TipoBxNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TipoBxPermiteRecalculo)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength()
                .HasComment("Marca se o tipo de baixa permite recalcular dividas de imóveis.");
        });

        modelBuilder.Entity<TribTipoBaixaGrupo>(entity =>
        {
            entity.HasKey(e => e.GrupoId).HasName("PK_GrupoTipoBaixaId");

            entity.ToTable("TribTipoBaixaGrupo");

            entity.Property(e => e.GrupoId).ValueGeneratedNever();
            entity.Property(e => e.GrupoTipoBxNome)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribTipoBaixaTexto>(entity =>
        {
            entity.HasKey(e => e.BaTeId);

            entity.ToTable("tribTipoBaixaTextos");

            entity.Property(e => e.BaTeId)
                .ValueGeneratedNever()
                .HasColumnName("BaTeID");
            entity.Property(e => e.TextoId).HasColumnName("TextoID");
            entity.Property(e => e.TipoBxId).HasColumnName("TipoBxID");

            entity.HasOne(d => d.Texto).WithMany(p => p.TribTipoBaixaTextos)
                .HasForeignKey(d => d.TextoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tribTipoBaixaTextos_TribTextos");

            entity.HasOne(d => d.TipoBx).WithMany(p => p.TribTipoBaixaTextos)
                .HasForeignKey(d => d.TipoBxId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tribTipoBaixaTextos_TribTipoBaixa");
        });

        modelBuilder.Entity<TribTipoDividum>(entity =>
        {
            entity.HasKey(e => e.TipoDivId);

            entity.Property(e => e.TipoDivId)
                .ValueGeneratedNever()
                .HasColumnName("TipoDivID");
            entity.Property(e => e.TipoDivNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TipoDivUsaCertidao)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Sim")
                .IsFixedLength()
                .HasComment("Informa se o tipo da divida pode ser feito parcelamento pelo REFIS");

            entity.HasMany(d => d.TribLeisDescTributos).WithMany(p => p.TipoDivs)
                .UsingEntity<Dictionary<string, object>>(
                    "TribLeisDescTributosTipoDividum",
                    r => r.HasOne<TribLeisDescTributo>().WithMany()
                        .HasForeignKey("LeiDescId", "TipoTribId", "QtdeParcelas")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_TribLeisDescTributosTipoDivida_TribLeisDescTributos"),
                    l => l.HasOne<TribTipoDividum>().WithMany()
                        .HasForeignKey("TipoDivId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_TribLeisDescTributosTipoDivida_TribTipoDivida"),
                    j =>
                    {
                        j.HasKey("TipoDivId", "LeiDescId", "TipoTribId", "QtdeParcelas");
                        j.ToTable("TribLeisDescTributosTipoDivida");
                        j.HasIndex(new[] { "TipoDivId", "TipoTribId", "QtdeParcelas", "LeiDescId" }, "IX_TribLeisDescTributosTipoDivida_TipoDivID_TipoTribID_QtdeParcelas_LeiDescID").HasFillFactor(90);
                        j.IndexerProperty<int>("TipoDivId").HasColumnName("TipoDivID");
                        j.IndexerProperty<long>("LeiDescId").HasColumnName("LeiDescID");
                        j.IndexerProperty<int>("TipoTribId").HasColumnName("TipoTribID");
                        j.IndexerProperty<short>("QtdeParcelas").HasDefaultValue((short)1);
                    });
        });

        modelBuilder.Entity<TribTipoIsencao>(entity =>
        {
            entity.HasKey(e => e.TipoIseId);

            entity.ToTable("TribTipoIsencao");

            entity.Property(e => e.TipoIseId)
                .ValueGeneratedNever()
                .HasColumnName("TipoIseID");
            entity.Property(e => e.Descricao)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TipoBxId).HasColumnName("TipoBxID");

            entity.HasOne(d => d.TipoBx).WithMany(p => p.TribTipoIsencaos)
                .HasForeignKey(d => d.TipoBxId)
                .HasConstraintName("FK_TribTipoIsencao_TribTipoBaixa");

            entity.HasMany(d => d.TipoTribs).WithMany(p => p.TipoIses)
                .UsingEntity<Dictionary<string, object>>(
                    "TribTipoIsencaoTributo",
                    r => r.HasOne<TribTipoTributo>().WithMany()
                        .HasForeignKey("TipoTribId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_dbo.TribTipoIsencaoTributo_TribTipoTributos"),
                    l => l.HasOne<TribTipoIsencao>().WithMany()
                        .HasForeignKey("TipoIseId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_dbo.TribTipoIsencaoTributo_TribTipoIsencao"),
                    j =>
                    {
                        j.HasKey("TipoIseId", "TipoTribId");
                        j.ToTable("TribTipoIsencaoTributo");
                        j.IndexerProperty<int>("TipoIseId").HasColumnName("TipoIseID");
                        j.IndexerProperty<int>("TipoTribId").HasColumnName("TipoTribID");
                    });
        });

        modelBuilder.Entity<TribTipoOrigemDividum>(entity =>
        {
            entity.HasKey(e => e.TribTipoId);

            entity.Property(e => e.TribTipoId)
                .ValueGeneratedNever()
                .HasColumnName("TribTipoID");
            entity.Property(e => e.PossuiEdital)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TribTipoNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TribTipoSigla)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribTipoParamCalculo>(entity =>
        {
            entity.HasKey(e => e.TparamId);

            entity.ToTable("TribTipoParamCalculo");

            entity.Property(e => e.TparamId)
                .ValueGeneratedNever()
                .HasColumnName("TParamID");
            entity.Property(e => e.MultiValor)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OrdemFatorMultiplicacao).HasComment("Ordem para multiplicar os fatores nos calculos");
            entity.Property(e => e.OrdemVisualizacao).HasComment("Ordem para exibição dos fatores nos controles");
            entity.Property(e => e.TparamNome)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TParamNome");
            entity.Property(e => e.TptipoCadastro)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TPTipoCadastro");
            entity.Property(e => e.Visualizar)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Sim")
                .IsFixedLength();
        });

        modelBuilder.Entity<TribTipoPlantasValore>(entity =>
        {
            entity.HasKey(e => e.Idplanta);

            entity.HasIndex(e => new { e.AnoPlanta, e.CategId }, "IX_TribTipoPlantasValores").HasFillFactor(90);

            entity.Property(e => e.Idplanta)
                .ValueGeneratedNever()
                .HasColumnName("IDPlanta");
            entity.Property(e => e.CategId).HasColumnName("CategID");
            entity.Property(e => e.IdplantaOrigem).HasColumnName("IDPlantaOrigem");
            entity.Property(e => e.NomePlanta)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ValorM2).HasColumnType("money");

            entity.HasOne(d => d.Categ).WithMany(p => p.TribTipoPlantasValores)
                .HasForeignKey(d => d.CategId)
                .HasConstraintName("FK_TribTipoPlantasValores_TribCategoriaEdificacao");

            entity.HasMany(d => d.TribParamCalculos).WithMany(p => p.Idplanta)
                .UsingEntity<Dictionary<string, object>>(
                    "TribParamPlantaValore",
                    r => r.HasOne<TribParamCalculo>().WithMany()
                        .HasForeignKey("TparamId", "ParamId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_TribParamPlantaValores_TribParamCalculos"),
                    l => l.HasOne<TribTipoPlantasValore>().WithMany()
                        .HasForeignKey("Idplanta")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_TribParamPlantaValores_TribTipoPlantasValores"),
                    j =>
                    {
                        j.HasKey("Idplanta", "TparamId", "ParamId");
                        j.ToTable("TribParamPlantaValores");
                        j.HasIndex(new[] { "TparamId", "ParamId" }, "IX_TParamID_ParamID").HasFillFactor(90);
                        j.IndexerProperty<int>("Idplanta").HasColumnName("IDPlanta");
                        j.IndexerProperty<int>("TparamId").HasColumnName("TParamID");
                        j.IndexerProperty<int>("ParamId").HasColumnName("ParamID");
                    });
        });

        modelBuilder.Entity<TribTipoProcesso>(entity =>
        {
            entity.HasKey(e => e.TipoProcessoId);

            entity.ToTable("TribTipoProcesso");

            entity.Property(e => e.DsTipoProcesso)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("dsTipoProcesso");
        });

        modelBuilder.Entity<TribTipoProcessoTributo>(entity =>
        {
            entity.HasKey(e => e.TipoProcessoTributoId).HasName("PK_TribTipoAlvaraTributoFormula");

            entity.ToTable("TribTipoProcessoTributo");

            entity.Property(e => e.DsFormulaDesconto)
                .HasColumnType("text")
                .HasColumnName("dsFormulaDesconto");
            entity.Property(e => e.DsFormulaTipoBaixa)
                .HasColumnType("text")
                .HasColumnName("dsFormulaTipoBaixa");
            entity.Property(e => e.DsFormulaTributo)
                .HasColumnType("text")
                .HasColumnName("dsFormulaTributo");
            entity.Property(e => e.DsSqlFormulaDesconto)
                .HasColumnType("text")
                .HasColumnName("dsSqlFormulaDesconto");
            entity.Property(e => e.DsSqlFormulaTipoBaixa)
                .HasColumnType("text")
                .HasColumnName("dsSqlFormulaTipoBaixa");
            entity.Property(e => e.DsSqlFormulaTributo)
                .HasColumnType("text")
                .HasColumnName("dsSqlFormulaTributo");

            entity.HasOne(d => d.TipoProcesso).WithMany(p => p.TribTipoProcessoTributos)
                .HasForeignKey(d => d.TipoProcessoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribTipoAlvaraTributoFormula_TribEmpresasTiposAlvara");

            entity.HasOne(d => d.TipoTrib).WithMany(p => p.TribTipoProcessoTributos)
                .HasForeignKey(d => d.TipoTribId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribTipoAlvaraTributoFormula_TribTipoTributos");
        });

        modelBuilder.Entity<TribTipoPublicidade>(entity =>
        {
            entity.HasKey(e => e.PublicTipoId);

            entity.ToTable("TribTipoPublicidade");

            entity.Property(e => e.PublicTipoId)
                .ValueGeneratedNever()
                .HasColumnName("PublicTipoID");
            entity.Property(e => e.PublicQtdeUfm)
                .HasColumnType("money")
                .HasColumnName("PublicQtdeUFM");
            entity.Property(e => e.PublicTipoNome)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.Tcid)
                .HasComment("Tipo da Base Calculo")
                .HasColumnName("TCID");
            entity.Property(e => e.UnMedId).HasComment("Unidade de medida da Publicidade");

            entity.HasOne(d => d.Tc).WithMany(p => p.TribTipoPublicidades)
                .HasForeignKey(d => d.Tcid)
                .HasConstraintName("FK_TribTipoPublicidade_TribTiposBaseCalculo");

            entity.HasOne(d => d.UnMed).WithMany(p => p.TribTipoPublicidades)
                .HasForeignKey(d => d.UnMedId)
                .HasConstraintName("FK_TribTipoPublicidade_AlmUnMed");
        });

        modelBuilder.Entity<TribTipoTributo>(entity =>
        {
            entity.HasKey(e => e.TipoTribId);

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("TgTribTipoTributosInsert");
                    tb.HasTrigger("TgTribTipoTributosUpdate");
                });

            entity.HasIndex(e => new { e.TipoTribAgrupaIptu, e.TipoTribId }, "IX_TipoTribAgrupaIPTU_TipoTribID").HasFillFactor(90);

            entity.HasIndex(e => new { e.TipoTribAgrupaIptu, e.TipoTribId, e.TipoTribSiglaTributo, e.TipoTribNome }, "IX_TipoTribAgrupaIPTU_TipoTribID_TipoTribSiglaTributo_TipoTribNome").HasFillFactor(90);

            entity.HasIndex(e => new { e.TipoTribAgrupaIptu, e.TipoTribCalcParaEdificacoesEnglobadas, e.TipoTribId }, "IX_TribTipoTributos_TipoTribAgrupaIPTU_TipoTribCalcParaEdificacoesEnglobadas_TipoTribID").HasFillFactor(90);

            entity.HasIndex(e => e.TipoTribId, "IX_TribTipoTributos_TipoTribID_inc_TipoTribNome_TipoTribTipo").HasFillFactor(90);

            entity.HasIndex(e => e.TipoTribId, "IX_TribTipoTributos_TipoTribID_inc_TipoTribNome_TrGrID").HasFillFactor(90);

            entity.HasIndex(e => e.TipoTribNome, "IX_TribTipoTributos_TipoTribNome");

            entity.HasIndex(e => new { e.TipoTribEspecifico, e.TipoTribId }, "_dta_index_TribTipoTributos_10_1202311543__K25_K1_2_3_29").HasFillFactor(90);

            entity.HasIndex(e => e.TipoTribId, "_dta_index_TribTipoTributos_8_1202311543__K1_2").HasFillFactor(90);

            entity.Property(e => e.TipoTribId)
                .ValueGeneratedNever()
                .HasColumnName("TipoTribID");
            entity.Property(e => e.ConvenioId).HasComment("Código do convênio para cobrança do tributo através de boleto bancário.");
            entity.Property(e => e.IdTipoBxDesativar).HasColumnName("idTipoBxDesativar");
            entity.Property(e => e.TipoTribAceitaIsencaoRequerimento)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Sim")
                .IsFixedLength()
                .HasComment("Identifica se o tributo Aceita isencao por requerimento");
            entity.Property(e => e.TipoTribAgrupaCalculo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("Taxas Diversas")
                .HasComment("Pode Ser: Bonificações, Coleta de Lixo, IPTU, Limpeza Pública, Iluminação Publica, Serviço de Bombeiros, Taxas Diversas");
            entity.Property(e => e.TipoTribAgrupaIptu)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength()
                .HasComment("Informa se o tributo faz parte do IPTU")
                .HasColumnName("TipoTribAgrupaIPTU");
            entity.Property(e => e.TipoTribCalcParaEdificacoesEnglobadas)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Sim")
                .IsFixedLength()
                .HasComment("Informa se o tributo vai ser calculado individualmente por estar englobado em outra unidade imobiliaria");
            entity.Property(e => e.TipoTribClassifProporcional)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength()
                .HasComment("Forma como sera classificado o tributo, se for proporcional o valor sera repartido entre os demais tributos.");
            entity.Property(e => e.TipoTribContaCorr)
                .HasMaxLength(12)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TipoTribContaCorrDa)
                .HasMaxLength(12)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TipoTribContaCorrDA");
            entity.Property(e => e.TipoTribContaJuro)
                .HasMaxLength(12)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TipoTribContaJuroDa)
                .HasMaxLength(12)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TipoTribContaJuroDA");
            entity.Property(e => e.TipoTribContaMulta)
                .HasMaxLength(12)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TipoTribContaMultaDa)
                .HasMaxLength(12)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TipoTribContaMultaDA");
            entity.Property(e => e.TipoTribContaPrinc)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength();
            entity.Property(e => e.TipoTribContaPrincDa)
                .HasMaxLength(12)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TipoTribContaPrincDA");
            entity.Property(e => e.TipoTribDiasAvencer).HasColumnName("TipoTribDiasAVencer");
            entity.Property(e => e.TipoTribEspecifico)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength()
                .HasComment("Quando a divida é especifica e naum deva ser agrupada na DAM - ex .ITBI");
            entity.Property(e => e.TipoTribFormaCorrecao)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.TipoTribFormulaCalculo)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.TipoTribIncideBonificacao)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength()
                .HasComment("Informa se o tributo compoe o valor base da bonificacao");
            entity.Property(e => e.TipoTribIncideDescPagUnica)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength()
                .HasComment("Informa se incide desconto quando for parcela unica na tabela de vencimentos.");
            entity.Property(e => e.TipoTribIncideMultaDa)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Sim")
                .IsFixedLength()
                .HasColumnName("TipoTribIncideMultaDA");
            entity.Property(e => e.TipoTribIncidencia)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("Predial/Territorial")
                .HasComment("Incidencia do tributo de acordo com a caracteristica do terreno");
            entity.Property(e => e.TipoTribInscreveDa)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Sim")
                .IsFixedLength()
                .HasComment("Marca se o tributo é utilizado para inscrição em divida ativa.")
                .HasColumnName("TipoTribInscreveDA");
            entity.Property(e => e.TipoTribNome)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TipoTribPadraoImoveis)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Sim")
                .IsFixedLength()
                .HasComment("Se for sim grava a incidencia em todas as quadras/logradouros o tributo");
            entity.Property(e => e.TipoTribPertenceAlvara)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength()
                .HasComment("Informa se o tributo pertence as dividas de alvara (para poder emitir alvara sem olhar as dividas de ISS)");
            entity.Property(e => e.TipoTribSiglaTributo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Siga do Tributo (NÃO REMOVA) - FELA");
            entity.Property(e => e.TipoTribTipo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("Imposto")
                .HasComment("Diferenciar os codigos de impostos e taxas. pode ser: \"Imposto\" ou \"Taxa\".");
            entity.Property(e => e.TipoTribVlrUfm)
                .HasColumnType("money")
                .HasColumnName("TipoTribVlrUFM");
            entity.Property(e => e.TipoTribVlrUfmminParcela)
                .HasComment("Valor mínimo em UFM de cada parcela do Tributo.")
                .HasColumnType("money")
                .HasColumnName("TipoTribVlrUFMMinParcela");
            entity.Property(e => e.TrGrId).HasColumnName("TrGrID");
            entity.Property(e => e.TrOrId).HasColumnName("TrOrID");

            entity.HasOne(d => d.Convenio).WithMany(p => p.TribTipoTributos)
                .HasForeignKey(d => d.ConvenioId)
                .HasConstraintName("FK_TribTipoTributos_ConvenioBanco");

            entity.HasOne(d => d.TrGr).WithMany(p => p.TribTipoTributos)
                .HasForeignKey(d => d.TrGrId)
                .HasConstraintName("FK_TribTipoTributos_tribTipoTributosGrupo");

            entity.HasOne(d => d.TrOr).WithMany(p => p.TribTipoTributos)
                .HasForeignKey(d => d.TrOrId)
                .HasConstraintName("FK_TribTipoTributos_tribTipoTributoOrigem");

            entity.HasMany(d => d.Usus).WithMany(p => p.TipoTribs)
                .UsingEntity<Dictionary<string, object>>(
                    "TribTipoTributosUsuario",
                    r => r.HasOne<Usuario>().WithMany()
                        .HasForeignKey("UsuId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_tribTipoTributosUsuarios_Usuarios"),
                    l => l.HasOne<TribTipoTributo>().WithMany()
                        .HasForeignKey("TipoTribId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_tribTipoTributosUsuarios_TribTipoTributos"),
                    j =>
                    {
                        j.HasKey("TipoTribId", "UsuId");
                        j.ToTable("tribTipoTributosUsuarios");
                        j.IndexerProperty<int>("TipoTribId").HasColumnName("TipoTribID");
                        j.IndexerProperty<string>("UsuId")
                            .HasMaxLength(255)
                            .IsUnicode(false)
                            .HasColumnName("UsuID");
                    });
        });

        modelBuilder.Entity<TribTipoTributoLei>(entity =>
        {
            entity.HasKey(e => e.IdTributoLei);

            entity.Property(e => e.DsLogin)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsLogin");
            entity.Property(e => e.DsLoginExclusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsLoginExclusao");
            entity.Property(e => e.DsTipoOperacao)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("dsTipoOperacao");
            entity.Property(e => e.DtExclusao)
                .HasColumnType("datetime")
                .HasColumnName("dtExclusao");
            entity.Property(e => e.DtFimVigencia)
                .HasColumnType("datetime")
                .HasColumnName("dtFimVigencia");
            entity.Property(e => e.DtInclusao)
                .HasColumnType("datetime")
                .HasColumnName("dtInclusao");
            entity.Property(e => e.DtInicioVigencia)
                .HasColumnType("datetime")
                .HasColumnName("dtInicioVigencia");
            entity.Property(e => e.FlExcluida).HasColumnName("flExcluida");
        });

        modelBuilder.Entity<TribTipoTributoOrigem>(entity =>
        {
            entity.HasKey(e => e.TrOrId);

            entity.ToTable("tribTipoTributoOrigem");

            entity.Property(e => e.TrOrId)
                .ValueGeneratedNever()
                .HasColumnName("TrOrID");
            entity.Property(e => e.TrOrDescricao)
                .HasMaxLength(80)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribTipoTributosConf>(entity =>
        {
            entity.HasKey(e => e.TipoTribId);

            entity.ToTable("TribTipoTributosConf");

            entity.Property(e => e.TipoTribId).ValueGeneratedNever();
            entity.Property(e => e.ConfTribInfo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ConfTribTipo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ConfTribValor).HasColumnType("money");
            entity.Property(e => e.Idmoeda).HasColumnName("IDMoeda");
        });

        modelBuilder.Entity<TribTipoTributosGrupo>(entity =>
        {
            entity.HasKey(e => e.TrGrId).HasName("PK_tribTipoTributoGrupo");

            entity.ToTable("tribTipoTributosGrupo");

            entity.Property(e => e.TrGrId)
                .ValueGeneratedNever()
                .HasColumnName("TrGrID");
            entity.Property(e => e.TrGrDescricao)
                .HasMaxLength(40)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribTipoTributosTipoProcesso>(entity =>
        {
            entity.HasKey(e => new { e.TipoProId, e.TipoTribId });

            entity.ToTable("tribTipoTributosTipoProcesso");

            entity.Property(e => e.TipoProId).HasColumnName("TipoProID");
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
            entity.Property(e => e.GeraDividasAutomatico)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Marca se as dividas referente ao processo gera automático ou opcional no momento da abetura do processo. Serve para controlar a entidade tribTipoTributosTipoProcesso.");
            entity.Property(e => e.Idmoeda).HasColumnName("IDMoeda");
            entity.Property(e => e.QtdeDiasVenc).HasComment("Quantidade de dias para vencimento a contar da data de abertura do processo no protocolo.");
            entity.Property(e => e.ValorReferenciaMoeda).HasColumnType("money");

            entity.HasOne(d => d.TipoPro).WithMany(p => p.TribTipoTributosTipoProcessos)
                .HasForeignKey(d => d.TipoProId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tribTipoTributosTipoProcesso_TipoProcesso");

            entity.HasOne(d => d.TipoTrib).WithMany(p => p.TribTipoTributosTipoProcessos)
                .HasForeignKey(d => d.TipoTribId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tribTipoTributosTipoProcesso_TribTipoTributos");
        });

        modelBuilder.Entity<TribTipoTributosVenc>(entity =>
        {
            entity.HasKey(e => new { e.TipoTribId, e.Tcid });

            entity.ToTable("TribTipoTributosVenc");

            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
            entity.Property(e => e.Tcid).HasColumnName("TCID");
            entity.Property(e => e.TipoTribDiasAvencer).HasColumnName("TipoTribDiasAVencer");
            entity.Property(e => e.UsaTabVencimento)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Sim")
                .IsFixedLength();

            entity.HasOne(d => d.Tc).WithMany(p => p.TribTipoTributosVencs)
                .HasForeignKey(d => d.Tcid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribTipoTributosVenc_TribTiposBaseCalculo");

            entity.HasOne(d => d.TipoTrib).WithMany(p => p.TribTipoTributosVencs)
                .HasForeignKey(d => d.TipoTribId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribTipoTributosVenc_TribTipoTributos");
        });

        modelBuilder.Entity<TribTiposBaseCalculo>(entity =>
        {
            entity.HasKey(e => e.Tcid);

            entity.ToTable("TribTiposBaseCalculo");

            entity.Property(e => e.Tcid)
                .ValueGeneratedNever()
                .HasColumnName("TCID");
            entity.Property(e => e.Tcdescricao)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("TCDescricao");
        });

        modelBuilder.Entity<TribTiposBaseCalculoTributo>(entity =>
        {
            entity.HasKey(e => new { e.TipoTribId, e.Tcid });

            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
            entity.Property(e => e.Tcid).HasColumnName("TCID");
            entity.Property(e => e.Tctate)
                .HasColumnType("money")
                .HasColumnName("TCTAte");
            entity.Property(e => e.Tctde)
                .HasColumnType("money")
                .HasColumnName("TCTDe");
            entity.Property(e => e.TctqtdeUf)
                .HasColumnType("money")
                .HasColumnName("TCTQtdeUF");

            entity.HasOne(d => d.Tc).WithMany(p => p.TribTiposBaseCalculoTributos)
                .HasForeignKey(d => d.Tcid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribTiposBaseCalculoTributos_TribTiposBaseCalculo");
        });

        modelBuilder.Entity<TribTiposComponenteLegislacao>(entity =>
        {
            entity.HasKey(e => e.TipoCompId);

            entity.ToTable("TribTiposComponenteLegislacao");

            entity.Property(e => e.TipoCompId)
                .ValueGeneratedNever()
                .HasColumnName("TipoCompID");
            entity.Property(e => e.TipoCompNome)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribTiposConstrucao>(entity =>
        {
            entity.HasKey(e => e.TipoConId);

            entity.ToTable("TribTiposConstrucao", tb => tb.HasTrigger("TgTribTiposConstrucaoUpdate"));

            entity.Property(e => e.TipoConId).HasColumnName("TipoConID");
            entity.Property(e => e.TipoConFator).HasColumnType("money");
            entity.Property(e => e.TipoConNome)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribTiposOperacoesReceitum>(entity =>
        {
            entity.HasKey(e => e.IdTipoOperacaoReceita);

            entity.Property(e => e.IdTipoOperacaoReceita).ValueGeneratedNever();
            entity.Property(e => e.DsTipoOperacaoReceita)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("dsTipoOperacaoReceita");
        });

        modelBuilder.Entity<TribTiposServico>(entity =>
        {
            entity.HasKey(e => e.ServId).HasName("PK_servicos");

            entity.Property(e => e.ServId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ServID");
            entity.Property(e => e.ServAliquota)
                .HasDefaultValue(3m)
                .HasColumnType("money");
            entity.Property(e => e.ServAliquotaFixa)
                .HasDefaultValue(0m)
                .HasComment("Aliquota para O ISS FIXO")
                .HasColumnType("money");
            entity.Property(e => e.ServDescricao)
                .HasMaxLength(512)
                .IsUnicode(false);
            entity.Property(e => e.ServEnquadraMicroEmpresa)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength()
                .HasComment("deve ser informado se este serviço deve ou não ser enquadrado como micro empresa");
            entity.Property(e => e.ServPeriodo)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<TribTiposServicosVelha>(entity =>
        {
            entity.HasKey(e => e.ServId).HasName("PK_TribTiposServicos");

            entity.ToTable("TribTiposServicosVELHA");

            entity.Property(e => e.ServId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ServID");
            entity.Property(e => e.ServAliquota).HasColumnType("money");
            entity.Property(e => e.ServDescricao)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ServEnquadraMicroEmpresa)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength()
                .HasComment("deve ser informado se este serviço deve ou não ser enquadrado como micro empresa");
            entity.Property(e => e.ServPeriodo)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TribTopografium>(entity =>
        {
            entity.HasKey(e => e.TopoId).HasName("PK_TribTopologia");

            entity.ToTable(tb => tb.HasTrigger("TgTribTopografiaUpdate"));

            entity.Property(e => e.TopoId).HasColumnName("TopoID");
            entity.Property(e => e.TopoFator).HasColumnType("money");
            entity.Property(e => e.TopoNome)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribTransfDivida>(entity =>
        {
            entity.HasKey(e => e.TransfId).HasName("PK_TribTransfDividas_1");

            entity.Property(e => e.TransfId)
                .ValueGeneratedNever()
                .HasColumnName("TransfID");
            entity.Property(e => e.ConIddestino).HasColumnName("ConIDDestino");
            entity.Property(e => e.ConIdorigem).HasColumnName("ConIDOrigem");
            entity.Property(e => e.DataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.EdificacaoIddestino).HasColumnName("EdificacaoIDDestino");
            entity.Property(e => e.EdificacaoIdorigem).HasColumnName("EdificacaoIDOrigem");
            entity.Property(e => e.Motivo)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");

            entity.HasOne(d => d.ConIddestinoNavigation).WithMany(p => p.TribTransfDividaConIddestinoNavigations)
                .HasForeignKey(d => d.ConIddestino)
                .HasConstraintName("FK_TribTransfDividas_Contribuintes");

            entity.HasOne(d => d.ConIdorigemNavigation).WithMany(p => p.TribTransfDividaConIdorigemNavigations)
                .HasForeignKey(d => d.ConIdorigem)
                .HasConstraintName("FK_TribTransfDividas_Contribuintes1");

            entity.HasOne(d => d.EdificacaoIddestinoNavigation).WithMany(p => p.TribTransfDividaEdificacaoIddestinoNavigations)
                .HasForeignKey(d => d.EdificacaoIddestino)
                .HasConstraintName("FK_TribTransfDividas_TribEdificacoes");

            entity.HasOne(d => d.EdificacaoIdorigemNavigation).WithMany(p => p.TribTransfDividaEdificacaoIdorigemNavigations)
                .HasForeignKey(d => d.EdificacaoIdorigem)
                .HasConstraintName("FK_TribTransfDividas_TribEdificacoes1");

            entity.HasOne(d => d.EmprCmcDestinoNavigation).WithMany(p => p.TribTransfDividaEmprCmcDestinoNavigations)
                .HasForeignKey(d => d.EmprCmcDestino)
                .HasConstraintName("FK_TribTransfDividas_TribEmpresas");

            entity.HasOne(d => d.EmprCmcOrigemNavigation).WithMany(p => p.TribTransfDividaEmprCmcOrigemNavigations)
                .HasForeignKey(d => d.EmprCmcOrigem)
                .HasConstraintName("FK_TribTransfDividas_TribEmpresas1");
        });

        modelBuilder.Entity<TribTransfDividasContribuinte>(entity =>
        {
            entity.HasKey(e => e.IdTransfDividasContribuintes);

            entity.Property(e => e.NmContribuinte)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nmContribuinte");
            entity.Property(e => e.NrCnpj)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("nrCNPJ");
            entity.Property(e => e.TransfId).HasColumnName("TransfID");

            entity.HasOne(d => d.Con).WithMany(p => p.TribTransfDividasContribuintes)
                .HasForeignKey(d => d.ConId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribTransfDividasContribuintes_Contribuintes");

            entity.HasOne(d => d.Transf).WithMany(p => p.TribTransfDividasContribuintes)
                .HasForeignKey(d => d.TransfId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribTransfDividasContribuintes_TribTransfDividas");
        });

        modelBuilder.Entity<TribTransfDividasDestino>(entity =>
        {
            entity.HasKey(e => e.TransfDestId);

            entity.ToTable("TribTransfDividasDestino", tb => tb.HasTrigger("TgTribTransfDividasDestinoDelete"));

            entity.HasIndex(e => e.ConIddivida, "IX_TribTransfDividasDestino_ConIDDivida").HasFillFactor(90);

            entity.HasIndex(e => e.DivEmpId, "IX_TribTransfDividasDestino_DivEmpID").HasFillFactor(90);

            entity.HasIndex(e => e.ImoIddivida, "IX_TribTransfDividasDestino_ImoIDDivida").HasFillFactor(90);

            entity.HasIndex(e => e.TransfId, "IX_TribTransfDividasDestino_TransfID_inc_ConIDDivida").HasFillFactor(90);

            entity.HasIndex(e => e.TransfId, "IX_TribTransfDividasDestino_TransfID_inc_DivEmpID").HasFillFactor(90);

            entity.HasIndex(e => e.TransfId, "IX_TribTransfDividasDestino_TransfID_inc_ImoIDDivida").HasFillFactor(90);

            entity.Property(e => e.TransfDestId)
                .ValueGeneratedNever()
                .HasColumnName("TransfDestID");
            entity.Property(e => e.ConIddivida).HasColumnName("ConIDDivida");
            entity.Property(e => e.DivEmpId).HasColumnName("DivEmpID");
            entity.Property(e => e.ImoIddivida)
                .HasComment("Codigo da Divida Imobiliaria")
                .HasColumnName("ImoIDDivida");
            entity.Property(e => e.TransfId).HasColumnName("TransfID");

            entity.HasOne(d => d.ConIddividaNavigation).WithMany(p => p.TribTransfDividasDestinos)
                .HasForeignKey(d => d.ConIddivida)
                .HasConstraintName("FK_TribTransfDividasDestino_TribDividasContribuinte");

            entity.HasOne(d => d.DivEmp).WithMany(p => p.TribTransfDividasDestinos)
                .HasForeignKey(d => d.DivEmpId)
                .HasConstraintName("FK_TribTransfDividasDestino_TribDividasEmpresas");

            entity.HasOne(d => d.ImoIddividaNavigation).WithMany(p => p.TribTransfDividasDestinos)
                .HasForeignKey(d => d.ImoIddivida)
                .HasConstraintName("FK_TribTransfDividasDestino_TribDividasImo");

            entity.HasOne(d => d.Transf).WithMany(p => p.TribTransfDividasDestinos)
                .HasForeignKey(d => d.TransfId)
                .HasConstraintName("FK_TribTransfDividasDestino_TribTransfDividas");
        });

        modelBuilder.Entity<TribTransfDividasOrigem>(entity =>
        {
            entity.HasKey(e => e.TransfOriId).HasName("PK_TribTransfDividas");

            entity.ToTable("TribTransfDividasOrigem", tb =>
                {
                    tb.HasTrigger("TgTribTransfDividasOrigemDelete");
                    tb.HasTrigger("TgTribTransfDividasOrigemInsert");
                });

            entity.HasIndex(e => e.ConIddivida, "IX_TribTransfDividasOrigem_ConIDDivida").HasFillFactor(90);

            entity.HasIndex(e => e.DivEmpId, "IX_TribTransfDividasOrigem_DivEmpID").HasFillFactor(90);

            entity.HasIndex(e => e.ImoIddivida, "IX_TribTransfDividasOrigem_ImoIDDivida").HasFillFactor(90);

            entity.Property(e => e.TransfOriId)
                .ValueGeneratedNever()
                .HasColumnName("TransfOriID");
            entity.Property(e => e.ConIddivida).HasColumnName("ConIDDivida");
            entity.Property(e => e.DivEmpId).HasColumnName("DivEmpID");
            entity.Property(e => e.ImoIddivida)
                .HasComment("Codigo da Divida Imobiliaria")
                .HasColumnName("ImoIDDivida");
            entity.Property(e => e.TransfId).HasColumnName("TransfID");

            entity.HasOne(d => d.ConIddividaNavigation).WithMany(p => p.TribTransfDividasOrigems)
                .HasForeignKey(d => d.ConIddivida)
                .HasConstraintName("FK_TribTransfDividasOrigem_TribDividasContribuinte");

            entity.HasOne(d => d.DivEmp).WithMany(p => p.TribTransfDividasOrigems)
                .HasForeignKey(d => d.DivEmpId)
                .HasConstraintName("FK_TribTransfDividasOrigem_TribDividasEmpresas");

            entity.HasOne(d => d.ImoIddividaNavigation).WithMany(p => p.TribTransfDividasOrigems)
                .HasForeignKey(d => d.ImoIddivida)
                .HasConstraintName("FK_TribTransfDividasOrigem_TribDividasImo");

            entity.HasOne(d => d.Transf).WithMany(p => p.TribTransfDividasOrigems)
                .HasForeignKey(d => d.TransfId)
                .HasConstraintName("FK_TribTransfDividasOrigem_TribTransfDividas");
        });

        modelBuilder.Entity<TribTransferencia>(entity =>
        {
            entity.HasKey(e => e.TransfId);

            entity.HasIndex(e => new { e.EdificacaoId, e.FormaInclusaoTransf }, "IX_EdificacaoID_FormaInclusaoTransf").HasFillFactor(90);

            entity.Property(e => e.TransfId)
                .ValueGeneratedNever()
                .HasColumnName("TransfID");
            entity.Property(e => e.DataTransfAnterior).HasColumnType("datetime");
            entity.Property(e => e.DataTransfAtual).HasColumnType("datetime");
            entity.Property(e => e.DeConId).HasColumnName("DeConID");
            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.FormaInclusaoTransf)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("Manual")
                .HasComment(" (Manual ou Automática) Se o registro foi incluido manual sera calculado a taxa, se foi trigger ou conversão não calcula");
            entity.Property(e => e.Observacao)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ParaConId).HasColumnName("ParaConID");
            entity.Property(e => e.ProcId).HasColumnName("ProcID");

            entity.HasOne(d => d.DeCon).WithMany(p => p.TribTransferenciaDeCons)
                .HasForeignKey(d => d.DeConId)
                .HasConstraintName("FK_TribTransferencias_Contribuintes");

            entity.HasOne(d => d.Edificacao).WithMany(p => p.TribTransferencia)
                .HasForeignKey(d => d.EdificacaoId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_TribTransferencias_TribEdificacoes");

            entity.HasOne(d => d.ParaCon).WithMany(p => p.TribTransferenciaParaCons)
                .HasForeignKey(d => d.ParaConId)
                .HasConstraintName("FK_TribTransferencias_Contribuintes1");
        });

        modelBuilder.Entity<TribUnificacao>(entity =>
        {
            entity.HasKey(e => e.IdUnificacao);

            entity.ToTable("TribUnificacao");

            entity.Property(e => e.IdUnificacao).HasColumnName("idUnificacao");
            entity.Property(e => e.DsTabela)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsTabela");
            entity.Property(e => e.FlUnificado).HasColumnName("flUnificado");
            entity.Property(e => e.IdColunaUnificado)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("idColunaUnificado");
            entity.Property(e => e.IdDestino).HasColumnName("idDestino");
            entity.Property(e => e.IdOrigem).HasColumnName("idOrigem");
            entity.Property(e => e.NmColunaUnificado)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nmColunaUnificado");
        });

        modelBuilder.Entity<TribUso>(entity =>
        {
            entity.HasKey(e => e.UsoId);

            entity.ToTable("TribUso", tb => tb.HasTrigger("TgTribUsoUpdate"));

            entity.Property(e => e.UsoId).HasColumnName("UsoID");
            entity.Property(e => e.UsoFator).HasColumnType("money");
            entity.Property(e => e.UsoNome)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribUtilizTributo>(entity =>
        {
            entity.HasKey(e => e.TipoUtilizTribId);

            entity.ToTable("TribUtilizTributo");

            entity.HasIndex(e => new { e.TipoUtilizAno, e.TipoTribId, e.TipoUtilizTribAreaDe, e.TipoUtilizTribAreaAte, e.ParamId, e.CategId, e.TipoUtilizAreaTerrenoDe, e.TipoUtilizAreaTerrenoAte }, "_dta_index_TribUtilizTributo_8_1781177691__K9_K2_K6_K7_K5_K10_K11_K12_8");

            entity.Property(e => e.TipoUtilizTribId).HasColumnName("TipoUtilizTribID");
            entity.Property(e => e.CategId).HasColumnName("CategID");
            entity.Property(e => e.ParamId).HasColumnName("ParamID");
            entity.Property(e => e.TipoIseId).HasColumnName("TipoIseID");
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
            entity.Property(e => e.TipoUtilizAreaTerrenoAte).HasColumnType("money");
            entity.Property(e => e.TipoUtilizAreaTerrenoDe).HasColumnType("money");
            entity.Property(e => e.TipoUtilizTribAreaAte).HasColumnType("money");
            entity.Property(e => e.TipoUtilizTribAreaDe).HasColumnType("money");
            entity.Property(e => e.TipoUtilizTribQtdeUfm)
                .HasColumnType("money")
                .HasColumnName("TipoUtilizTribQtdeUFM");
            entity.Property(e => e.TparamId).HasColumnName("TParamID");

            entity.HasOne(d => d.TipoTrib).WithMany(p => p.TribUtilizTributos)
                .HasForeignKey(d => d.TipoTribId)
                .HasConstraintName("FK_TribUtilizTributo_TribTipoTributos");

            entity.HasOne(d => d.TribParamCalculo).WithMany(p => p.TribUtilizTributos)
                .HasForeignKey(d => new { d.TparamId, d.ParamId })
                .HasConstraintName("FK_TribUtilizTributo_TribParamCalculos");
        });

        modelBuilder.Entity<TribUtilizacao>(entity =>
        {
            entity.HasKey(e => e.UtilizId);

            entity.ToTable("TribUtilizacao", tb => tb.HasTrigger("TgTribUtilizacaoUpdate"));

            entity.Property(e => e.UtilizId).HasColumnName("UtilizID");
            entity.Property(e => e.UtilizFator).HasColumnType("money");
            entity.Property(e => e.UtilizNome)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribUvciluminacao>(entity =>
        {
            entity.HasKey(e => e.UvciluData);

            entity.ToTable("TribUVCIluminacao");

            entity.Property(e => e.UvciluData)
                .HasColumnType("datetime")
                .HasColumnName("UVCIluData");
            entity.Property(e => e.UvciluValor)
                .HasColumnType("money")
                .HasColumnName("UVCIluValor");
        });

        modelBuilder.Entity<TribVariosProprietariosDaEdificacao>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("TribVariosProprietariosDaEdificacao");

            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
        });

        modelBuilder.Entity<TribVegetacao>(entity =>
        {
            entity.HasKey(e => e.VegeId);

            entity.ToTable("TribVegetacao", tb => tb.HasTrigger("TgTribVegetacaoUpdate"));

            entity.Property(e => e.VegeId).HasColumnName("VegeID");
            entity.Property(e => e.VegeFator)
                .HasDefaultValue(0m)
                .HasColumnType("money");
            entity.Property(e => e.VegeNome)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<TribVencimento>(entity =>
        {
            entity.HasKey(e => new { e.TipoTribRotina, e.TribVencAno, e.TipoTribId, e.TipoTribParcela });

            entity.ToTable("TribVencimento");

            entity.HasIndex(e => new { e.TipoTribId, e.TribVencAno, e.TipoTribParcelaUnica }, "IX_TipoTribID_TribVencAno_TipoTribParcelaUnica").HasFillFactor(90);

            entity.Property(e => e.TipoTribRotina)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Informa qual rotina que vai utilizar a tabela de vencimentos");
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
            entity.Property(e => e.DataInclusao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.HostInclusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(host_name())");
            entity.Property(e => e.ParcelaValorTotal)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.TipoTribDiasAvencer)
                .HasComment("Dias a vencer após a data corrente")
                .HasColumnName("TipoTribDiasAVencer");
            entity.Property(e => e.TipoTribIdpagAntecipado)
                .HasComment("Tributo que sera gerado para o desconto antecipado.")
                .HasColumnName("TipoTribIDPagAntecipado");
            entity.Property(e => e.TipoTribParcelaUnica)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength()
                .HasComment("Informa se a parcela é Unica ou não.");
            entity.Property(e => e.TipoTribPercDescPagAntecipado)
                .HasComment("Percentual de Desconto para pagamento antecipado")
                .HasColumnType("money");
            entity.Property(e => e.TipoTribTipoVencimento)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("Específico")
                .HasComment("Específico = No vencimento informado no TipoTribVencimento, A Vencer = Irá vencer X dias após a data corrente");
            entity.Property(e => e.TipoTribVencimento).HasColumnType("datetime");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())");
        });

        modelBuilder.Entity<TribVisaoQuadraLogradFk>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("TribVisaoQuadraLogradFK");

            entity.Property(e => e.FatorKid).HasColumnName("FatorKID");
            entity.Property(e => e.FatorKnome)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FatorKNome");
            entity.Property(e => e.LogradId).HasColumnName("LogradID");
            entity.Property(e => e.LogradNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.QuadraCodLocal)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.QuadraId).HasColumnName("QuadraID");
        });

        modelBuilder.Entity<TribVisaoTipoConstrucao>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("TribVisaoTipoConstrucao");
        });

        modelBuilder.Entity<TribVisaoUtilizacao>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("TribVisaoUtilizacao");
        });

        modelBuilder.Entity<TribZona>(entity =>
        {
            entity.HasKey(e => e.ZonaId).HasName("PK_tribZona_1");

            entity.ToTable("tribZona");

            entity.Property(e => e.ZonaId)
                .ValueGeneratedNever()
                .HasColumnName("zonaID");
            entity.Property(e => e.ZonaDescricao)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("zonaDescricao");
        });

        modelBuilder.Entity<TribZonaAlertum>(entity =>
        {
            entity.HasKey(e => e.ZoalId);

            entity.Property(e => e.ZoalId)
                .ValueGeneratedNever()
                .HasColumnName("zoalId");
            entity.Property(e => e.TerrenoId).HasColumnName("TerrenoID");
            entity.Property(e => e.ZoalComplemento)
                .IsUnicode(false)
                .HasColumnName("zoalComplemento");
            entity.Property(e => e.ZomsId).HasColumnName("zomsId");
        });

        modelBuilder.Entity<TribZonaClassificacaoVium>(entity =>
        {
            entity.HasKey(e => e.ClViId);

            entity.ToTable("tribZonaClassificacaoVia");

            entity.Property(e => e.ClViId)
                .ValueGeneratedNever()
                .HasColumnName("ClViID");
            entity.Property(e => e.ClViClassificacao)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.ClViCorMapa)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ClViDescricao).HasColumnType("text");
        });

        modelBuilder.Entity<TribZonaLimite>(entity =>
        {
            entity.HasKey(e => e.ZoliId);

            entity.ToTable("tribZonaLimites");

            entity.Property(e => e.ZoliId)
                .ValueGeneratedNever()
                .HasColumnName("zoliID");
            entity.Property(e => e.ZoliObservacoes)
                .IsUnicode(false)
                .HasColumnName("zoliObservacoes");
            entity.Property(e => e.ZoliOperador)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasComment("Pode ser: '=', '>=', '<=', '>', '>' e '<>'")
                .HasColumnName("zoliOperador");
            entity.Property(e => e.ZoliQuantidade)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("zoliQuantidade");
            entity.Property(e => e.ZoliUnidadeMedida)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("zoliUnidadeMedida");
            entity.Property(e => e.ZotiId).HasColumnName("zotiID");
            entity.Property(e => e.ZozoId).HasColumnName("zozoID");

            entity.HasOne(d => d.Zoti).WithMany(p => p.TribZonaLimites)
                .HasForeignKey(d => d.ZotiId)
                .HasConstraintName("FK_tribZonaLimites_tribZonaTipoLimite");

            entity.HasOne(d => d.Zozo).WithMany(p => p.TribZonaLimites)
                .HasForeignKey(d => d.ZozoId)
                .HasConstraintName("FK_tribZonaLimites_tribZonaZoneamento");
        });

        modelBuilder.Entity<TribZonaMensagem>(entity =>
        {
            entity.HasKey(e => e.ZomsId);

            entity.ToTable("tribZonaMensagem");

            entity.Property(e => e.ZomsId)
                .ValueGeneratedNever()
                .HasColumnName("zomsId");
            entity.Property(e => e.ZomsImprimeGuia)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("zomsImprimeGuia");
            entity.Property(e => e.ZomsMensagem)
                .IsUnicode(false)
                .HasColumnName("zomsMensagem");
        });

        modelBuilder.Entity<TribZonaTabCalcadum>(entity =>
        {
            entity.HasKey(e => e.TiTaId);

            entity.ToTable("tribZonaTabCalcada");

            entity.Property(e => e.TiTaId)
                .ValueGeneratedNever()
                .HasColumnName("TiTaID");
            entity.Property(e => e.TiFaId).HasColumnName("TiFaID");
            entity.Property(e => e.TiFaTamMaximo).HasColumnType("money");
            entity.Property(e => e.TiFaTamMinimo).HasColumnType("money");
            entity.Property(e => e.TiMaId).HasColumnName("TiMaID");
            entity.Property(e => e.TiTaAte).HasColumnType("money");
            entity.Property(e => e.TiTaDe).HasColumnType("money");
            entity.Property(e => e.TiViId).HasColumnName("TiViID");

            entity.HasOne(d => d.TiFa).WithMany(p => p.TribZonaTabCalcada)
                .HasForeignKey(d => d.TiFaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tribZonaTabCalcada_tribZonaTipoFaixaCalcada");

            entity.HasOne(d => d.TiMa).WithMany(p => p.TribZonaTabCalcada)
                .HasForeignKey(d => d.TiMaId)
                .HasConstraintName("FK_tribZonaTabCalcada_tribZonaTipoMaterialCalcada");

            entity.HasOne(d => d.TiVi).WithMany(p => p.TribZonaTabCalcada)
                .HasForeignKey(d => d.TiViId)
                .HasConstraintName("FK_tribZonaTabCalcada_tribZonaTipoViaUrbana");
        });

        modelBuilder.Entity<TribZonaTipoCalcadum>(entity =>
        {
            entity.HasKey(e => e.TiCaId);

            entity.ToTable("tribZonaTipoCalcada");

            entity.Property(e => e.TiCaId)
                .ValueGeneratedNever()
                .HasColumnName("TiCaID");
            entity.Property(e => e.TiCaImagemTipo).HasColumnType("image");
            entity.Property(e => e.TiCaTipoCalcada)
                .HasMaxLength(60)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribZonaTipoFaixaCalcadum>(entity =>
        {
            entity.HasKey(e => e.TiFaId);

            entity.ToTable("tribZonaTipoFaixaCalcada");

            entity.Property(e => e.TiFaId)
                .ValueGeneratedNever()
                .HasColumnName("TiFaID");
            entity.Property(e => e.TiFaTipoFaixa)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribZonaTipoLiberacao>(entity =>
        {
            entity.HasKey(e => e.ZotlId).HasName("PK_tribZonaPermissoes");

            entity.ToTable("tribZonaTipoLiberacao");

            entity.Property(e => e.ZotlId)
                .ValueGeneratedNever()
                .HasColumnName("zotlID");
            entity.Property(e => e.ZotlNome)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("zotlNome");
        });

        modelBuilder.Entity<TribZonaTipoLimite>(entity =>
        {
            entity.HasKey(e => e.ZotiId);

            entity.ToTable("tribZonaTipoLimite");

            entity.Property(e => e.ZotiId)
                .ValueGeneratedNever()
                .HasColumnName("zotiID");
            entity.Property(e => e.ZotiNome)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("zotiNome");
            entity.Property(e => e.ZotiOrdenacao)
                .HasComment("Utilizado para ordenar os limites no relatório que demonstra os detalhes do zoneamento e na consulta de alvará.")
                .HasColumnName("zotiOrdenacao");
        });

        modelBuilder.Entity<TribZonaTipoMaterialCalcadum>(entity =>
        {
            entity.HasKey(e => e.TiMaId);

            entity.ToTable("tribZonaTipoMaterialCalcada");

            entity.Property(e => e.TiMaId)
                .ValueGeneratedNever()
                .HasColumnName("TiMaID");
            entity.Property(e => e.TiMaTipoMaterial)
                .HasMaxLength(60)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TribZonaTipoUso>(entity =>
        {
            entity.HasKey(e => e.ZotuId);

            entity.ToTable("tribZonaTipoUsos");

            entity.Property(e => e.ZotuId)
                .ValueGeneratedNever()
                .HasColumnName("zotuID");
            entity.Property(e => e.ZotuNome)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("zotuNome");
        });

        modelBuilder.Entity<TribZonaTipoViaUrbana>(entity =>
        {
            entity.HasKey(e => e.TiViId);

            entity.ToTable("tribZonaTipoViaUrbana");

            entity.Property(e => e.TiViId)
                .ValueGeneratedNever()
                .HasColumnName("TiViID");
            entity.Property(e => e.TiViTipoVia)
                .HasMaxLength(60)
                .IsUnicode(false);

            entity.HasMany(d => d.TiCas).WithMany(p => p.TiVis)
                .UsingEntity<Dictionary<string, object>>(
                    "TribZonaTipoCalcadaTipoViaUrbana",
                    r => r.HasOne<TribZonaTipoCalcadum>().WithMany()
                        .HasForeignKey("TiCaId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_tribZonaTipoCalcadaTipoViaUrbana_tribZonaTipoCalcada"),
                    l => l.HasOne<TribZonaTipoViaUrbana>().WithMany()
                        .HasForeignKey("TiViId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_tribZonaTipoCalcadaTipoViaUrbana_tribZonaTipoViaUrbana"),
                    j =>
                    {
                        j.HasKey("TiViId", "TiCaId");
                        j.ToTable("tribZonaTipoCalcadaTipoViaUrbana");
                        j.IndexerProperty<int>("TiViId").HasColumnName("TiViID");
                        j.IndexerProperty<int>("TiCaId").HasColumnName("TiCaID");
                    });
        });

        modelBuilder.Entity<TribZonaTipoViaUrbanaTipoFaixaCalcadum>(entity =>
        {
            entity.HasKey(e => new { e.TiViId, e.TiFaId });

            entity.ToTable("tribZonaTipoViaUrbanaTipoFaixaCalcada");

            entity.Property(e => e.TiViId).HasColumnName("TiViID");
            entity.Property(e => e.TiFaId).HasColumnName("TiFaID");
            entity.Property(e => e.ViFaInstrucoes).HasColumnType("text");

            entity.HasOne(d => d.TiFa).WithMany(p => p.TribZonaTipoViaUrbanaTipoFaixaCalcada)
                .HasForeignKey(d => d.TiFaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tribZonaTipoViaUrbanaTipoFaixaCalcada_tribZonaTipoFaixaCalcada");

            entity.HasOne(d => d.TiVi).WithMany(p => p.TribZonaTipoViaUrbanaTipoFaixaCalcada)
                .HasForeignKey(d => d.TiViId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tribZonaTipoViaUrbanaTipoFaixaCalcada_tribZonaTipoViaUrbana");
        });

        modelBuilder.Entity<TribZonaUso>(entity =>
        {
            entity.HasKey(e => e.ZousId);

            entity.ToTable("tribZonaUsos");

            entity.Property(e => e.ZousId)
                .ValueGeneratedNever()
                .HasColumnName("zousID");
            entity.Property(e => e.ZotuId).HasColumnName("zotuID");
            entity.Property(e => e.ZousDescricao)
                .IsUnicode(false)
                .HasColumnName("zousDescricao");
            entity.Property(e => e.ZousNome)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("zousNome");

            entity.HasOne(d => d.Zotu).WithMany(p => p.TribZonaUsos)
                .HasForeignKey(d => d.ZotuId)
                .HasConstraintName("FK_tribZonaUsos_tribZonaTipoUsos");
        });

        modelBuilder.Entity<TribZonaUsoAtividade>(entity =>
        {
            entity.HasKey(e => new { e.ZousId, e.Atividade });

            entity.ToTable("TribZonaUsoAtividade");

            entity.Property(e => e.ZousId).HasColumnName("zousID");
            entity.Property(e => e.Atividade)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ZotlId).HasColumnName("zotlID");

            entity.HasOne(d => d.Zotl).WithMany(p => p.TribZonaUsoAtividades)
                .HasForeignKey(d => d.ZotlId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TribZonaUsoAtividade_TribZonaUsoAtividade");
        });

        modelBuilder.Entity<TribZonaZoneamento>(entity =>
        {
            entity.HasKey(e => e.ZozoId).HasName("PK_tribZona");

            entity.ToTable("tribZonaZoneamento");

            entity.Property(e => e.ZozoId)
                .ValueGeneratedNever()
                .HasColumnName("zozoID");
            entity.Property(e => e.ZoliOrdenacao)
                .HasComment("Ordem em que o limite será apresentado no relatório de detalhamento e consulta prévia.")
                .HasColumnName("zoliOrdenacao");
            entity.Property(e => e.ZonaId).HasColumnName("zonaID");
            entity.Property(e => e.ZozoIdorigem)
                .HasComment("Informa que o zoneamento vai utilizar os parametros de outro zoneamento.")
                .HasColumnName("zozoIDOrigem");
            entity.Property(e => e.ZozoNome)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("zozoNome");
            entity.Property(e => e.ZozoObservacoes)
                .IsUnicode(false)
                .HasColumnName("zozoObservacoes");
            entity.Property(e => e.ZozoSigla)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("zozoSigla");

            entity.HasOne(d => d.Zona).WithMany(p => p.TribZonaZoneamentos)
                .HasForeignKey(d => d.ZonaId)
                .HasConstraintName("FK_tribZonaZoneamento_tribZona");
        });

        modelBuilder.Entity<TribZonaZoneamentoAtividade>(entity =>
        {
            entity.HasKey(e => new { e.ZozoId, e.Atividade });

            entity.ToTable("tribZonaZoneamentoAtividade", tb => tb.HasTrigger("trgtribZonaZoneamentoAtividadeLog"));

            entity.Property(e => e.ZozoId).HasColumnName("zozoID");
            entity.Property(e => e.Atividade)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ZotlId).HasColumnName("zotlID");

            entity.HasOne(d => d.AtividadeNavigation).WithMany(p => p.TribZonaZoneamentoAtividades)
                .HasForeignKey(d => d.Atividade)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tribZonaZoneamentoAtividade_TribAtivAtividade");

            entity.HasOne(d => d.Zotl).WithMany(p => p.TribZonaZoneamentoAtividades)
                .HasForeignKey(d => d.ZotlId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tribZonaZoneamentoAtividade_tribZonaTipoLiberacao");

            entity.HasOne(d => d.Zozo).WithMany(p => p.TribZonaZoneamentoAtividades)
                .HasForeignKey(d => d.ZozoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tribZonaZoneamentoAtividade_tribZonaZoneamento");
        });

        modelBuilder.Entity<TribZonaZoneamentoAtividadeLog>(entity =>
        {
            entity.HasKey(e => e.LogId);

            entity.ToTable("tribZonaZoneamentoAtividadeLog");

            entity.Property(e => e.LogId).HasColumnName("LogID");
            entity.Property(e => e.Atividade)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Data).HasColumnType("datetime");
            entity.Property(e => e.Operacao)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Usuario)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ZotlId).HasColumnName("zotlID");
            entity.Property(e => e.ZozoId).HasColumnName("zozoID");
        });

        modelBuilder.Entity<TribZonaZoneamentoQuadraLograd>(entity =>
        {
            entity.HasKey(e => new { e.QuadraId, e.LogradId, e.ZozoId });

            entity.ToTable("tribZonaZoneamentoQuadraLograd", tb => tb.HasTrigger("trgtribZonaZoneamentoQuadraLogradLog"));

            entity.Property(e => e.QuadraId).HasColumnName("QuadraID");
            entity.Property(e => e.LogradId).HasColumnName("LogradID");
            entity.Property(e => e.ZozoId).HasColumnName("zozoID");
            entity.Property(e => e.ZoqlCaixaLogradouro)
                .HasColumnType("money")
                .HasColumnName("zoqlCaixaLogradouro");
            entity.Property(e => e.ZoqlRecuo)
                .HasColumnType("money")
                .HasColumnName("zoqlRecuo");

            entity.HasOne(d => d.Zozo).WithMany(p => p.TribZonaZoneamentoQuadraLograds)
                .HasForeignKey(d => d.ZozoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tribZonaZoneamentoQuadraLograd_tribZonaZoneamento");

            entity.HasOne(d => d.TribQuadraLograd).WithMany(p => p.TribZonaZoneamentoQuadraLograds)
                .HasForeignKey(d => new { d.QuadraId, d.LogradId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tribZonaZoneamentoQuadraLograd_TribQuadraLograd");
        });

        modelBuilder.Entity<TribZonaZoneamentoQuadraLogradLog>(entity =>
        {
            entity.HasKey(e => e.LogId);

            entity.ToTable("tribZonaZoneamentoQuadraLogradLog");

            entity.Property(e => e.LogId).HasColumnName("LogID");
            entity.Property(e => e.Data).HasColumnType("datetime");
            entity.Property(e => e.LogradId).HasColumnName("LogradID");
            entity.Property(e => e.Operacao)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.QuadraId).HasColumnName("QuadraID");
            entity.Property(e => e.Usuario)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ZoqlCaixaLogradouro)
                .HasColumnType("money")
                .HasColumnName("zoqlCaixaLogradouro");
            entity.Property(e => e.ZoqlRecuo)
                .HasColumnType("money")
                .HasColumnName("zoqlRecuo");
            entity.Property(e => e.ZozoId).HasColumnName("zozoID");
        });

        modelBuilder.Entity<TribZonaZoneamentoTerreno>(entity =>
        {
            entity.HasKey(e => new { e.TerrenoId, e.ZozoId });

            entity.ToTable("TribZonaZoneamentoTerreno");

            entity.Property(e => e.TerrenoId).HasColumnName("terrenoID");
            entity.Property(e => e.ZozoId).HasColumnName("zozoID");
            entity.Property(e => e.ZotrCaixaLogradouro)
                .HasColumnType("money")
                .HasColumnName("zotrCaixaLogradouro");
            entity.Property(e => e.ZotrRecuo)
                .HasColumnType("money")
                .HasColumnName("zotrRecuo");
        });

        modelBuilder.Entity<TribZonaZoneamentoUso>(entity =>
        {
            entity.HasKey(e => new { e.ZozoId, e.ZousId });

            entity.ToTable("tribZonaZoneamentoUsos");

            entity.Property(e => e.ZozoId).HasColumnName("zozoID");
            entity.Property(e => e.ZousId).HasColumnName("zousID");
            entity.Property(e => e.ZotlId).HasColumnName("zotlID");

            entity.HasOne(d => d.Zotl).WithMany(p => p.TribZonaZoneamentoUsos)
                .HasForeignKey(d => d.ZotlId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tribZonaUsosAtividadePermissoes_tribZonaPermissoes");

            entity.HasOne(d => d.Zous).WithMany(p => p.TribZonaZoneamentoUsos)
                .HasForeignKey(d => d.ZousId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tribZonaUsosAtividadePermissoes_tribZonaUsos");

            entity.HasOne(d => d.Zozo).WithMany(p => p.TribZonaZoneamentoUsos)
                .HasForeignKey(d => d.ZozoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tribZonaUsosAtividadePermissoes_tribZonaZoneamento");
        });

        modelBuilder.Entity<Tribedificacoesdivergencium>(entity =>
        {
            entity.HasKey(e => e.Idedificacaodivergencia).HasName("PK_tribedificacaodivergencia");

            entity.ToTable("tribedificacoesdivergencia");

            entity.Property(e => e.Idedificacaodivergencia)
                .ValueGeneratedNever()
                .HasColumnName("idedificacaodivergencia");
            entity.Property(e => e.Dsobservacao)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dsobservacao");
            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.Iddivergencia).HasColumnName("iddivergencia");

            entity.HasOne(d => d.Edificacao).WithMany(p => p.Tribedificacoesdivergencia)
                .HasForeignKey(d => d.EdificacaoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tribedificacoesdivergencia_TribEdificacoes");

            entity.HasOne(d => d.IddivergenciaNavigation).WithMany(p => p.Tribedificacoesdivergencia)
                .HasForeignKey(d => d.Iddivergencia)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tribedificacoesdivergencia_tbrevisaodivergencia");
        });

        modelBuilder.Entity<Tribquadradivergencium>(entity =>
        {
            entity.HasKey(e => e.Idquadradivergencia);

            entity.ToTable("tribquadradivergencia");

            entity.Property(e => e.Idquadradivergencia)
                .ValueGeneratedNever()
                .HasColumnName("idquadradivergencia");
            entity.Property(e => e.Dsobservacao)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dsobservacao");
            entity.Property(e => e.Iddivergencia).HasColumnName("iddivergencia");
            entity.Property(e => e.Idquadra).HasColumnName("idquadra");

            entity.HasOne(d => d.IddivergenciaNavigation).WithMany(p => p.Tribquadradivergencia)
                .HasForeignKey(d => d.Iddivergencia)
                .HasConstraintName("FK_tribquadradivergencia_tbrevisaodivergencia");

            entity.HasOne(d => d.IdquadraNavigation).WithMany(p => p.Tribquadradivergencia)
                .HasForeignKey(d => d.Idquadra)
                .HasConstraintName("FK_tribquadradivergencia_TribQuadra");
        });

        modelBuilder.Entity<TridArqMortoBoleto>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.BoleIp)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("boleIP");
            entity.Property(e => e.BoleOrigem)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("boleOrigem");
            entity.Property(e => e.BoleValorCorrecao)
                .HasColumnType("money")
                .HasColumnName("boleValorCorrecao");
            entity.Property(e => e.BoleValorDesconto)
                .HasColumnType("money")
                .HasColumnName("boleValorDesconto");
            entity.Property(e => e.BoleValorJuros)
                .HasColumnType("money")
                .HasColumnName("boleValorJuros");
            entity.Property(e => e.BoleValorMulta)
                .HasColumnType("money")
                .HasColumnName("boleValorMulta");
            entity.Property(e => e.BoleValorPrinc)
                .HasColumnType("money")
                .HasColumnName("boleValorPrinc");
            entity.Property(e => e.Cgccpf)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CGCCPF");
            entity.Property(e => e.Cmc).HasColumnName("CMC");
            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.ConIddivida).HasColumnName("ConIDDivida");
            entity.Property(e => e.DataBoleto).HasColumnType("datetime");
            entity.Property(e => e.DataInclusao).HasColumnType("datetime");
            entity.Property(e => e.DataVencimento).HasColumnType("datetime");
            entity.Property(e => e.EdificacaoId)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("EdificacaoID");
            entity.Property(e => e.EmpIddivida).HasColumnName("EmpIDDivida");
            entity.Property(e => e.ImoIddivida).HasColumnName("ImoIDDivida");
            entity.Property(e => e.NossoNumero)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
            entity.Property(e => e.UsuarioInclusao)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Txvisa>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("txvisa");

            entity.Property(e => e.Data)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EmprCmc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EmprCMC");
            entity.Property(e => e.Numerolaudo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("numerolaudo");
            entity.Property(e => e.Procedimento)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("procedimento");
            entity.Property(e => e.RazãoSocial)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Razão social");
        });

        modelBuilder.Entity<Uffi>(entity =>
        {
            entity.HasKey(e => e.Uffidata).HasName("PK_ScgUFFI");

            entity.ToTable("UFFI");

            entity.Property(e => e.Uffidata)
                .HasColumnType("datetime")
                .HasColumnName("UFFIData");
            entity.Property(e => e.UffidtUltAlt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("UFFIDtUltAlt");
            entity.Property(e => e.UffitecUltAlt)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())")
                .HasColumnName("UFFITecUltAlt");
            entity.Property(e => e.Uffivalor)
                .HasColumnType("money")
                .HasColumnName("UFFIValor");
        });

        modelBuilder.Entity<Unidade>(entity =>
        {
            entity.HasKey(e => e.UniId);

            entity.ToTable(tb => tb.HasTrigger("TgUnidadesInsert"));

            entity.Property(e => e.UniId).HasColumnName("UniID");
            entity.Property(e => e.UniDtExtincao).HasColumnType("datetime");
            entity.Property(e => e.UniExtincao)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UniNome)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.UniOrgaoId)
                .HasDefaultValue(0)
                .HasColumnName("UniOrgaoID");

            entity.HasOne(d => d.UniOrgao).WithMany(p => p.Unidades)
                .HasForeignKey(d => d.UniOrgaoId)
                .HasConstraintName("FK_Unidades_Orgaos");
        });

        modelBuilder.Entity<UnidadeSaude>(entity =>
        {
            entity.HasKey(e => e.IdUnidadeSaude);

            entity.ToTable("UnidadeSaude");

            entity.Property(e => e.IdUnidadeSaude).ValueGeneratedNever();
            entity.Property(e => e.Cnpj)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CNPJ");
            entity.Property(e => e.Complemento)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IdCnes)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("IdCNES");
            entity.Property(e => e.IdEsferaAdministrativa).HasColumnName("IdEsfera_Administrativa");
            entity.Property(e => e.IdNaturezaOrganizacao).HasColumnName("IdNatureza_Organizacao");
            entity.Property(e => e.NomeUnidadeSaude)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Nome_UnidadeSaude");
            entity.Property(e => e.NuPredial)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("Nu_Predial");
            entity.Property(e => e.RazaoSocial)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("Razao_Social");
        });

        modelBuilder.Entity<Usuario>(entity =>
        {
            entity.HasKey(e => e.UsuId);

            entity.HasIndex(e => new { e.UsuServidorId, e.UsuId }, "IX_Usuarios_UsuServidorID_UsuID_inc_UsuNivelAcesso_UsuAvisaGravacao");

            entity.Property(e => e.UsuId)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("UsuID");
            entity.Property(e => e.UsuAdministrador)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength()
                .HasComment("Esse campo é utilizado para dar permissão automática para formulários cadastrados no sistema.");
            entity.Property(e => e.UsuArquivaReabre)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength();
            entity.Property(e => e.UsuAudSis)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Sim")
                .IsFixedLength();
            entity.Property(e => e.UsuAvisaGravacao)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength();
            entity.Property(e => e.UsuAvisoEmailBaixa)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength();
            entity.Property(e => e.UsuDistrProc)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength();
            entity.Property(e => e.UsuDtvalidade)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("UsuDTValidade");
            entity.Property(e => e.UsuEmail)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.UsuFone)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UsuLogger)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Sim")
                .IsFixedLength()
                .HasComment("Grava Log do Sistema");
            entity.Property(e => e.UsuNivelAcesso)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength();
            entity.Property(e => e.UsuRecProc)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Não")
                .IsFixedLength();
            entity.Property(e => e.UsuSenha).HasMaxLength(50);
            entity.Property(e => e.UsuServidorId)
                .HasDefaultValue(0L)
                .HasColumnName("UsuServidorID");

            entity.HasOne(d => d.UsuServidor).WithMany(p => p.Usuarios)
                .HasForeignKey(d => d.UsuServidorId)
                .HasConstraintName("FK_Usuarios_Servidores");

            entity.HasMany(d => d.Almoxes).WithMany(p => p.Usus)
                .UsingEntity<Dictionary<string, object>>(
                    "SaudeUsuarioAlmox",
                    r => r.HasOne<Almoxarifado>().WithMany()
                        .HasForeignKey("AlmoxId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_Saude_UsuarioAlmox_Almoxarifados"),
                    l => l.HasOne<Usuario>().WithMany()
                        .HasForeignKey("UsuId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_Saude_UsuarioAlmox_Usuarios"),
                    j =>
                    {
                        j.HasKey("UsuId", "AlmoxId");
                        j.ToTable("Saude_UsuarioAlmox");
                        j.IndexerProperty<string>("UsuId")
                            .HasMaxLength(255)
                            .IsUnicode(false)
                            .HasColumnName("UsuID");
                    });

            entity.HasMany(d => d.DivAutDivisaos).WithMany(p => p.DivAutUsuarios)
                .UsingEntity<Dictionary<string, object>>(
                    "DivAutorizada",
                    r => r.HasOne<Diviso>().WithMany()
                        .HasForeignKey("DivAutDivisaoId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_DivAutorizadas_Divisoes"),
                    l => l.HasOne<Usuario>().WithMany()
                        .HasForeignKey("DivAutUsuarioId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_DivAutorizadas_Usuarios"),
                    j =>
                    {
                        j.HasKey("DivAutUsuarioId", "DivAutDivisaoId");
                        j.ToTable("DivAutorizadas");
                        j.IndexerProperty<string>("DivAutUsuarioId")
                            .HasMaxLength(255)
                            .IsUnicode(false);
                    });

            entity.HasMany(d => d.IdEstoques).WithMany(p => p.Usus)
                .UsingEntity<Dictionary<string, object>>(
                    "SaudeUsuarioEstoque",
                    r => r.HasOne<SaudeEstoque>().WithMany()
                        .HasForeignKey("IdEstoque")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_Saude_UsuarioEstoque_Saude_Estoque"),
                    l => l.HasOne<Usuario>().WithMany()
                        .HasForeignKey("UsuId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_Saude_UsuarioEstoque_Usuarios"),
                    j =>
                    {
                        j.HasKey("UsuId", "IdEstoque");
                        j.ToTable("Saude_UsuarioEstoque");
                        j.IndexerProperty<string>("UsuId")
                            .HasMaxLength(255)
                            .IsUnicode(false)
                            .HasColumnName("UsuID");
                        j.IndexerProperty<int>("IdEstoque").HasColumnName("Id_Estoque");
                    });

            entity.HasMany(d => d.Mods).WithMany(p => p.Usus)
                .UsingEntity<Dictionary<string, object>>(
                    "UsuariosModulo",
                    r => r.HasOne<Modulo>().WithMany()
                        .HasForeignKey("ModId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_UsuariosModulo_Modulo"),
                    l => l.HasOne<Usuario>().WithMany()
                        .HasForeignKey("UsuId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_UsuariosModulo_Usuarios"),
                    j =>
                    {
                        j.HasKey("UsuId", "ModId");
                        j.ToTable("UsuariosModulo");
                        j.IndexerProperty<string>("UsuId")
                            .HasMaxLength(255)
                            .IsUnicode(false)
                            .HasColumnName("UsuID");
                    });
        });

        modelBuilder.Entity<UsuarioPermisso>(entity =>
        {
            entity.HasKey(e => e.UsuId);

            entity.Property(e => e.UsuId)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("UsuID");
            entity.Property(e => e.DsLoginAlteracao)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dsLoginAlteracao");
            entity.Property(e => e.DsLoginInclusao)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dsLoginInclusao");
            entity.Property(e => e.DtInclusao)
                .HasColumnType("datetime")
                .HasColumnName("dtInclusao");
            entity.Property(e => e.DtUltAlteracao)
                .HasColumnType("datetime")
                .HasColumnName("dtUltAlteracao");
            entity.Property(e => e.FlDividasContribuinte).HasColumnName("flDividasContribuinte");
            entity.Property(e => e.FlDividasEmpresa).HasColumnName("flDividasEmpresa");
            entity.Property(e => e.FlDividasExerciciosAnteriores).HasColumnName("flDividasExerciciosAnteriores");
            entity.Property(e => e.FlDividasImovel).HasColumnName("flDividasImovel");
        });

        modelBuilder.Entity<VeicSolicitacao>(entity =>
        {
            entity.HasKey(e => e.VeicSolicId);

            entity.ToTable("VeicSolicitacao");

            entity.Property(e => e.VeicSolicId).ValueGeneratedNever();
            entity.Property(e => e.DescrRecusa)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.DescrUtilizacao)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.DivId).HasComment("Divisão que está solicitando o veículo, a fim de resolver problemas do tipo usuario da div A, solicita carro para a divisão B");
            entity.Property(e => e.DtAtendimento)
                .HasComment("Data que a Solicitacao foi atendida")
                .HasColumnType("datetime");
            entity.Property(e => e.DtCadastro).HasColumnType("datetime");
            entity.Property(e => e.DtSolicFim).HasColumnType("datetime");
            entity.Property(e => e.DtSolicIni).HasColumnType("datetime");
            entity.Property(e => e.EspecieId).HasComment("Tipo do Veiculo-Tem o objetivo de definir se usuario precisa de um caminhão, uma kombi ou um veiculo de passeio-ver se isso pode ser resolvido na especie");
            entity.Property(e => e.ServId).HasComment("Servidor que esta efetuando a solicitação de veículo");
            entity.Property(e => e.ServSolicitante)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasComment("Servidor que efetivamente utilizará o veículo, ");
            entity.Property(e => e.VeicStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Aguardando,Reservado, Negado");

            entity.HasOne(d => d.Div).WithMany(p => p.VeicSolicitacaos)
                .HasForeignKey(d => d.DivId)
                .HasConstraintName("FK_VeicSolicitacao_Divisoes");

            entity.HasOne(d => d.Especie).WithMany(p => p.VeicSolicitacaos)
                .HasForeignKey(d => d.EspecieId)
                .HasConstraintName("FK_VeicSolicitacao_Especie");

            entity.HasOne(d => d.Serv).WithMany(p => p.VeicSolicitacaos)
                .HasForeignKey(d => d.ServId)
                .HasConstraintName("FK_VeicSolicitacao_Servidores");
        });

        modelBuilder.Entity<Veiculo>(entity =>
        {
            entity.ToTable(tb =>
                {
                    tb.HasTrigger("TgVeiculosDelete");
                    tb.HasTrigger("TgVeiculosInsert");
                    tb.HasTrigger("TgVeiculosUpdate");
                });

            entity.Property(e => e.VeiculoId).ValueGeneratedNever();
            entity.Property(e => e.VeiAnoFabricacao).HasDefaultValue(0);
            entity.Property(e => e.VeiAnoModelo).HasDefaultValue(0);
            entity.Property(e => e.VeiCdTombamento)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VeiCodLocalVeic)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.VeiCodRenavam)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VeiCorPredominante)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.VeiDataAquisicao).HasColumnType("datetime");
            entity.Property(e => e.VeiDescricao)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.VeiEmpenhoAno).HasDefaultValue(0);
            entity.Property(e => e.VeiEmpenhoFilial)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength();
            entity.Property(e => e.VeiEmpenhoNum).HasDefaultValue(0L);
            entity.Property(e => e.VeiEstadoConservacao)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.VeiImgVeiculo).HasColumnType("image");
            entity.Property(e => e.VeiKmAtual).HasColumnType("money");
            entity.Property(e => e.VeiKmaquisicao)
                .HasDefaultValue(0m)
                .HasColumnType("money")
                .HasColumnName("VeiKMAquisicao");
            entity.Property(e => e.VeiNumChassi)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.VeiNumNotaFiscal)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VeiNumPassageiros).HasDefaultValue(0);
            entity.Property(e => e.VeiObservacao)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.VeiPlacaNumero)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength();
            entity.Property(e => e.VeiPlacaPrefixo)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength();
            entity.Property(e => e.VeiPotenciaUn)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.VeiValor).HasColumnType("money");
            entity.Property(e => e.VeiVenctoGarantia).HasColumnType("datetime");
            entity.Property(e => e.VeiVlrComponentes)
                .HasComputedColumnSql("([dbo].[VeicVlrComponentes]([VeiculoId]))", false)
                .HasColumnType("money");
            entity.Property(e => e.VeiVlrManutencao)
                .HasComputedColumnSql("([dbo].[VeicVlrManutencao]([VeiculoId]))", false)
                .HasColumnType("money");

            entity.HasOne(d => d.VeicItem).WithMany(p => p.Veiculos)
                .HasForeignKey(d => d.VeicItemId)
                .HasConstraintName("FK_Veiculos_VeiculosItens");

            entity.HasOne(d => d.Plaquetum).WithMany(p => p.Veiculos)
                .HasForeignKey(d => new { d.VeiEmpenhoFilial, d.VeiPlaquetaId })
                .HasConstraintName("FK_Veiculos_Plaqueta");
        });

        modelBuilder.Entity<VeiculosBaixado>(entity =>
        {
            entity.HasKey(e => e.VebIdBaixa);

            entity.Property(e => e.VebIdBaixa).ValueGeneratedNever();
            entity.Property(e => e.VebDataBaixa).HasColumnType("datetime");
            entity.Property(e => e.VebIdAtoBaixa).HasDefaultValue(0);
            entity.Property(e => e.VebLanceMinimo)
                .HasDefaultValue(0m)
                .HasColumnType("money");
            entity.Property(e => e.VebNumParcelas).HasDefaultValue(0);
            entity.Property(e => e.VebObservacao)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.VebValorBaixa)
                .HasDefaultValue(0m)
                .HasColumnType("money");
            entity.Property(e => e.VebVeiculoId).HasDefaultValue(0L);

            entity.HasOne(d => d.VebContribuinte).WithMany(p => p.VeiculosBaixados)
                .HasForeignKey(d => d.VebContribuinteId)
                .HasConstraintName("FK_VeiculosBaixados_Contribuintes");

            entity.HasOne(d => d.VebIdAtoBaixaNavigation).WithMany(p => p.VeiculosBaixados)
                .HasForeignKey(d => d.VebIdAtoBaixa)
                .HasConstraintName("FK_VeiculosBaixados_AtoBaixa");

            entity.HasOne(d => d.VebVeiculo).WithMany(p => p.VeiculosBaixados)
                .HasForeignKey(d => d.VebVeiculoId)
                .HasConstraintName("FK_VeiculosBaixados_Veiculos");
        });

        modelBuilder.Entity<VeiculosIten>(entity =>
        {
            entity.HasKey(e => e.VeicItemId);

            entity.Property(e => e.VeicItemId).ValueGeneratedNever();
            entity.Property(e => e.VeicItemCodBarra)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VeicItemImagem).HasColumnType("image");
            entity.Property(e => e.VeicItemNome)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.VeicItemVlrUnitario).HasColumnType("money");

            entity.HasOne(d => d.VeicItemEspecie).WithMany(p => p.VeiculosItens)
                .HasForeignKey(d => d.VeicItemEspecieId)
                .HasConstraintName("FK_VeiculosItens_Especie");

            entity.HasOne(d => d.VeicItemMarca).WithMany(p => p.VeiculosItens)
                .HasForeignKey(d => d.VeicItemMarcaId)
                .HasConstraintName("FK_VeiculosItens_Marca");

            entity.HasOne(d => d.VeicItemModelo).WithMany(p => p.VeiculosItens)
                .HasForeignKey(d => d.VeicItemModeloId)
                .HasConstraintName("FK_VeiculosItens_Modelo");
        });

        modelBuilder.Entity<VeiculosSeguro>(entity =>
        {
            entity.HasKey(e => new { e.VeiculoId, e.SeguroId });

            entity.ToTable("VeiculosSeguro", tb =>
                {
                    tb.HasTrigger("TgVeiculosSeguroDELETE");
                    tb.HasTrigger("TgVeiculosSeguroINSERT");
                    tb.HasTrigger("TgVeiculosSeguroUPDATE");
                });

            entity.Property(e => e.Valor).HasColumnType("money");

            entity.HasOne(d => d.Seguro).WithMany(p => p.VeiculosSeguros)
                .HasForeignKey(d => d.SeguroId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_VeiculosSeguro_Seguros");

            entity.HasOne(d => d.Veiculo).WithMany(p => p.VeiculosSeguros)
                .HasForeignKey(d => d.VeiculoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_VeiculosSeguro_Veiculos");
        });

        modelBuilder.Entity<ViagemVeiculo>(entity =>
        {
            entity.ToTable("ViagemVeiculo");

            entity.Property(e => e.DataChegada).HasColumnType("datetime");
            entity.Property(e => e.DataSaida).HasColumnType("datetime");
            entity.Property(e => e.Destino)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.HoraChegada).HasColumnType("datetime");
            entity.Property(e => e.HoraSaida).HasColumnType("datetime");
        });

        modelBuilder.Entity<VisaAltorisco>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("visa_altorisco");

            entity.Property(e => e.Codigo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CODIGO");
            entity.Property(e => e.Descricao)
                .HasMaxLength(5000)
                .IsUnicode(false);
            entity.Property(e => e.Inspsanitavaldoc)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Projetoaprovado)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("projetoaprovado");
        });

        modelBuilder.Entity<VisaBaixob>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("visa_baixob");

            entity.Property(e => e.Codigo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CODIGO");
            entity.Property(e => e.Descricao)
                .HasMaxLength(5000)
                .IsUnicode(false)
                .HasColumnName("DESCRICAO");
        });

        modelBuilder.Entity<VisaDepende>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("visa_depende");

            entity.Property(e => e.Codigo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CODIGO");
            entity.Property(e => e.Descricao)
                .HasMaxLength(5000)
                .IsUnicode(false)
                .HasColumnName("DESCRICAO");
            entity.Property(e => e.Graurisco)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("GRAURISCO");
            entity.Property(e => e.Inspsanitaria)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("INSPSANITARIA");
            entity.Property(e => e.Pergunta)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PERGUNTA");
            entity.Property(e => e.Projetoaprovado)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PROJETOAPROVADO");
        });

        modelBuilder.Entity<VisaoAnexosProcesso>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("visaoAnexosProcesso");

            entity.Property(e => e.AnexoComplemento)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.AnexoData).HasColumnType("datetime");
            entity.Property(e => e.AnexoDocId).HasColumnName("AnexoDocID");
            entity.Property(e => e.AnexoId).HasColumnName("AnexoID");
            entity.Property(e => e.AnexoImagem).HasColumnType("image");
            entity.Property(e => e.AnexoNumero)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AnexoOriginal)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AnexoPorUsuario)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DocNome)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.ProcId).HasColumnName("ProcID");
        });

        modelBuilder.Entity<VisaoBoletimCadImobiliario>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("visaoBoletimCadImobiliario");

            entity.Property(e => e.AcabExtFator).HasColumnType("money");
            entity.Property(e => e.AcabExtId).HasColumnName("AcabExtID");
            entity.Property(e => e.AcabExtNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AcabIntFator).HasColumnType("money");
            entity.Property(e => e.AcabIntId).HasColumnName("AcabIntID");
            entity.Property(e => e.AcabIntNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AgrupaFator).HasColumnType("money");
            entity.Property(e => e.AgrupaId).HasColumnName("AgrupaID");
            entity.Property(e => e.AgrupaNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BaiNome)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.CalcaFator).HasColumnType("money");
            entity.Property(e => e.CalcaId).HasColumnName("CalcaID");
            entity.Property(e => e.CalcaNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CategId).HasColumnName("CategID");
            entity.Property(e => e.CategNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CidNome)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.CidUf)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CidUF");
            entity.Property(e => e.CobertFator).HasColumnType("money");
            entity.Property(e => e.CobertId).HasColumnName("CobertID");
            entity.Property(e => e.CobertNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ConCep)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ConCEP");
            entity.Property(e => e.ConCnpjcpf)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ConCNPJCPF");
            entity.Property(e => e.ConComplemento)
                .HasMaxLength(120)
                .IsUnicode(false);
            entity.Property(e => e.ConEndereco)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.ConNome)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ConNomeFantasia)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ConNumero)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ConTipoLograd)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DenoId).HasColumnName("DenoID");
            entity.Property(e => e.DenoImagem).HasColumnType("image");
            entity.Property(e => e.DenoNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DescLoteamentoParalelaTransv)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.DescRegiaoParalelaTransv)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.DimenDescr)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DimenId).HasColumnName("DimenID");
            entity.Property(e => e.DimenMetragem).HasColumnType("money");
            entity.Property(e => e.EdifAlvara)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EdifAreaCoberta).HasColumnType("money");
            entity.Property(e => e.EdifAreaConstruida).HasColumnType("money");
            entity.Property(e => e.EdifBloco)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EdifCaracteristica)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.EdifComplemento)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.EdifFracaoIdealEdificacao).HasColumnType("numeric(19, 6)");
            entity.Property(e => e.EdifMatricula)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EdifNumAptoSalaLoja)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.EdifNumeracao)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.EletricaFator).HasColumnType("money");
            entity.Property(e => e.EletricaId).HasColumnName("EletricaID");
            entity.Property(e => e.EletricaNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EquipFator).HasColumnType("money");
            entity.Property(e => e.EquipId).HasColumnName("EquipID");
            entity.Property(e => e.EquipNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EsquadriasFator).HasColumnType("money");
            entity.Property(e => e.EsquadriasId).HasColumnName("EsquadriasID");
            entity.Property(e => e.EsquadriasNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EstConservFator).HasColumnType("money");
            entity.Property(e => e.EstConservId).HasColumnName("EstConservID");
            entity.Property(e => e.EstConservNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EstrutFator).HasColumnType("money");
            entity.Property(e => e.EstrutId).HasColumnName("EstrutID");
            entity.Property(e => e.EstrutNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ForroFator).HasColumnType("money");
            entity.Property(e => e.ForroId).HasColumnName("ForroID");
            entity.Property(e => e.ForroNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FundoFator).HasColumnType("money");
            entity.Property(e => e.FundoId).HasColumnName("FundoID");
            entity.Property(e => e.FundoNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.InciFator).HasColumnType("money");
            entity.Property(e => e.InciId).HasColumnName("InciID");
            entity.Property(e => e.InciNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.InscricaoImobiliaria)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.InscricaoImobiliariaGeo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("InscricaoImobiliariaGEO");
            entity.Property(e => e.JuriFator).HasColumnType("money");
            entity.Property(e => e.JuriId).HasColumnName("JuriID");
            entity.Property(e => e.JuriNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LimTfator)
                .HasColumnType("money")
                .HasColumnName("LimTFator");
            entity.Property(e => e.LimTid).HasColumnName("LimTID");
            entity.Property(e => e.LimTnome)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("LimTNome");
            entity.Property(e => e.LimTpontos).HasColumnName("LimTPontos");
            entity.Property(e => e.LocQfator)
                .HasColumnType("money")
                .HasColumnName("LocQFator");
            entity.Property(e => e.LocQid).HasColumnName("LocQID");
            entity.Property(e => e.LocQnome)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("LocQNome");
            entity.Property(e => e.LocQpontos).HasColumnName("LocQPontos");
            entity.Property(e => e.Locatario)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LogradIdparalelaTransv).HasColumnName("LogradIDParalelaTransv");
            entity.Property(e => e.LogradIdterreno).HasColumnName("LogradIDTerreno");
            entity.Property(e => e.LogradNomeParalelaTransv)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LogradNomeTerreno)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LogradTipoParalelaTransv)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LogradTipoTerreno)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OcupaFator).HasColumnType("money");
            entity.Property(e => e.OcupaId).HasColumnName("OcupaID");
            entity.Property(e => e.OcupaNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ParedeFator).HasColumnType("money");
            entity.Property(e => e.ParedeId).HasColumnName("ParedeID");
            entity.Property(e => e.ParedeNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PatrFator).HasColumnType("money");
            entity.Property(e => e.PatrId).HasColumnName("PatrID");
            entity.Property(e => e.PatrNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PedoFator).HasColumnType("money");
            entity.Property(e => e.PedoId).HasColumnName("PedoID");
            entity.Property(e => e.PedoNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PisoFator).HasColumnType("money");
            entity.Property(e => e.PisoId).HasColumnName("PisoID");
            entity.Property(e => e.PisoNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PosicaoFator).HasColumnType("money");
            entity.Property(e => e.PosicaoId).HasColumnName("PosicaoID");
            entity.Property(e => e.PosicaoNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Proprietario)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Responsavel)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SituacaoFator).HasColumnType("money");
            entity.Property(e => e.SituacaoId).HasColumnName("SituacaoID");
            entity.Property(e => e.SituacaoNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TerrAreaTerreno).HasColumnType("money");
            entity.Property(e => e.TerrReferenciaAnterior)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TerrenoId).HasColumnName("TerrenoID");
            entity.Property(e => e.TestadasMetragem).HasColumnType("money");
            entity.Property(e => e.TestadasPrincipal)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TipoConFator).HasColumnType("money");
            entity.Property(e => e.TipoConId).HasColumnName("TipoConID");
            entity.Property(e => e.TipoConNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TopoFator).HasColumnType("money");
            entity.Property(e => e.TopoId).HasColumnName("TopoID");
            entity.Property(e => e.TopoNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UsoFator).HasColumnType("money");
            entity.Property(e => e.UsoId).HasColumnName("UsoID");
            entity.Property(e => e.UsoNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UtilizFator).HasColumnType("money");
            entity.Property(e => e.UtilizId).HasColumnName("UtilizID");
            entity.Property(e => e.UtilizNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ValorVenalCalculo).HasColumnType("money");
            entity.Property(e => e.VegeFator).HasColumnType("money");
            entity.Property(e => e.VegeId).HasColumnName("VegeID");
            entity.Property(e => e.VegeNome)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VisaoBoleto>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VisaoBoleto");

            entity.Property(e => e.BolVlrDiv).HasColumnType("money");
            entity.Property(e => e.Categ)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ConDtNasc).HasColumnType("datetime");
            entity.Property(e => e.ConRespNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ConRespRg)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ConRespRG");
            entity.Property(e => e.DtFim).HasColumnType("datetime");
            entity.Property(e => e.DtIni).HasColumnType("datetime");
            entity.Property(e => e.HorFim)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.HorIni)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NmContr)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.NossoNum)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Situacao)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TaxNm)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.TsnmTipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TSNmTipo");
            entity.Property(e => e.VlrLoc).HasColumnType("money");
        });

        modelBuilder.Entity<VisaoComprovanteProcesso>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("visaoComprovanteProcesso");

            entity.Property(e => e.ConCnpjcpf)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ConCNPJCPF");
            entity.Property(e => e.ConNome)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ProcDataEntrada).HasColumnType("datetime");
            entity.Property(e => e.ProcDescricao)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ProcId).HasColumnName("ProcID");
            entity.Property(e => e.ProcPublicaWeb)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProcTipoProcId).HasColumnName("ProcTipoProcID");
            entity.Property(e => e.TipoProNome)
                .HasMaxLength(60)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VisaoConsultaProcesso>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("visaoConsultaProcessos");

            entity.Property(e => e.CargaId).HasColumnName("CargaID");
            entity.Property(e => e.Cnpjcpf)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CNPJCPF");
            entity.Property(e => e.DataEntrada)
                .HasColumnType("datetime")
                .HasColumnName("Data Entrada");
            entity.Property(e => e.DataEnvio)
                .HasColumnType("datetime")
                .HasColumnName("Data Envio");
            entity.Property(e => e.DataPrevistaAtendimento)
                .HasColumnType("datetime")
                .HasColumnName("Data Prevista Atendimento");
            entity.Property(e => e.DataRecebimentoDestinatário)
                .HasColumnType("datetime")
                .HasColumnName("Data Recebimento Destinatário");
            entity.Property(e => e.DespachoEnvio)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasColumnName("Despacho Envio");
            entity.Property(e => e.Destinatário)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.DivAtribuicao)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.DivDescTramitacao)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.DivNomeOrigem)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.NomeContribuinte)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("Nome Contribuinte");
            entity.Property(e => e.ObjetoDoProcesso)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("Objeto do Processo");
            entity.Property(e => e.PublicaNaInternet)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Publica na Internet");
            entity.Property(e => e.RecIdrecebimento).HasColumnName("RecIDRecebimento");
            entity.Property(e => e.RecebidoPor)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("Recebido Por");
            entity.Property(e => e.SituacaoAtual)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Situacao Atual");
            entity.Property(e => e.SituacaoRecebimento)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("Situacao Recebimento");
            entity.Property(e => e.TipoProcesso)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("Tipo Processo");
        });

        modelBuilder.Entity<VisaoDividasCanceladasCtv>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("visaoDividasCanceladasCTV");

            entity.Property(e => e.AuItValor).HasColumnType("money");
            entity.Property(e => e.AutiDataAuto)
                .HasColumnType("datetime")
                .HasColumnName("autiDataAuto");
            entity.Property(e => e.AutiDataNotificacao)
                .HasColumnType("datetime")
                .HasColumnName("autiDataNotificacao");
            entity.Property(e => e.AutiId).HasColumnName("autiID");
            entity.Property(e => e.AutiNumNotificacao).HasColumnName("autiNumNotificacao");
            entity.Property(e => e.DivMotivoBaixa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("divMotivoBaixa");
            entity.Property(e => e.InfrId).HasColumnName("infrID");
            entity.Property(e => e.TipoBxId).HasColumnName("TipoBxID");
            entity.Property(e => e.TipoBxNome)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VisaoDividassemDtultcorr>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VisaoDividassemDTULTCORR");

            entity.Property(e => e.EmprDivDataUltCorrecao).HasColumnType("datetime");
            entity.Property(e => e.EmprDivVencimento).HasColumnType("datetime");
            entity.Property(e => e.EmprDivVlrUltCorrecao).HasColumnType("money");
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
        });

        modelBuilder.Entity<VisaoEdifeinscricao>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("visaoEdifeinscricao");

            entity.Property(e => e.EdifFracaoIdealEdificacao).HasColumnType("money");
            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.InscricaoImobiliaria)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TerrenoId).HasColumnName("TerrenoID");
        });

        modelBuilder.Entity<VisaoEmpresasComDividasDobrada>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VisaoEmpresasComDividasDobradas");

            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
        });

        modelBuilder.Entity<VisaoFeriado>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("visaoFeriados");

            entity.Property(e => e.Data).HasColumnType("datetime");
            entity.Property(e => e.Descrição)
                .HasMaxLength(256)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Tipo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VisaoFormulario>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VisaoFormularios");

            entity.Property(e => e.FrmId)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.FrmNome)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.FrmTipo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VisaoGruposServico>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VisaoGruposServicos");

            entity.Property(e => e.IdGrupo).HasColumnName("ID Grupo");
            entity.Property(e => e.NomeDoGrupo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Nome do Grupo");
        });

        modelBuilder.Entity<VisaoLocarRelTaxa>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("visaoLocarRelTaxa");

            entity.Property(e => e.LocId).HasColumnName("LocID");
            entity.Property(e => e.LocNome)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.PerDescricao)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ReceitaCodigo)
                .HasMaxLength(14)
                .IsUnicode(false);
            entity.Property(e => e.SubLocNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TaxNome)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.TaxVlrEmUffi)
                .HasColumnType("money")
                .HasColumnName("TaxVlr_em_UFFI");
            entity.Property(e => e.TsnmTipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TSNmTipo");
            entity.Property(e => e.Uffivalor)
                .HasColumnType("money")
                .HasColumnName("UFFIValor");
        });

        modelBuilder.Entity<VisaoOrgao>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VisaoOrgaos");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.NomeDoÓrgão)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("Nome do Órgão");
            entity.Property(e => e.RazãoSocial)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("Razão Social");
        });

        modelBuilder.Entity<VisaoPermissaodeFormulariosPorFormId>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Visao_PermissaodeFormulariosPorFormId");

            entity.Property(e => e.FrmDescr)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.FrmEnderecoForm)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.FrmId)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.FrmNome)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.FrmTipo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PrmAlteracao)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PrmConsultas)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PrmIdform)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PrmIDForm");
            entity.Property(e => e.PrmIdusuario)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PrmIDUsuario");
            entity.Property(e => e.PrmInclusao)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PrmRelatorios)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PrmRemocao)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UsuEmail)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.UsuId)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("UsuID");
            entity.Property(e => e.UsuServidorId).HasColumnName("UsuServidorID");
        });

        modelBuilder.Entity<VisaoProcessoRl>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("visaoProcessoRLS");

            entity.Property(e => e.LogId).HasColumnName("LogID");
            entity.Property(e => e.ProcId).HasColumnName("ProcID");
        });

        modelBuilder.Entity<VisaoProcessosArquivado>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("visaoProcessosArquivados");

            entity.Property(e => e.Descricao)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.IdDivisao).HasColumnName("ID Divisao");
            entity.Property(e => e.SituacaoProcesso)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Situacao Processo");
            entity.Property(e => e.SituaçãoRecebimento)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("Situação Recebimento");
        });

        modelBuilder.Entity<VisaoProcessosDivisao>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("visaoProcessosDivisao");

            entity.Property(e => e.Descricao)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.IdDivisao).HasColumnName("ID Divisao");
            entity.Property(e => e.SituacaoProcesso)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Situacao Processo");
            entity.Property(e => e.SituaçãoRecebimento)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("Situação Recebimento");
        });

        modelBuilder.Entity<VisaoRecebimento>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("visaoRecebimentos");

            entity.Property(e => e.CargaData).HasColumnType("datetime");
            entity.Property(e => e.CargaId).HasColumnName("CargaID");
            entity.Property(e => e.CargaProcId).HasColumnName("CargaProcID");
            entity.Property(e => e.RecData).HasColumnType("datetime");
            entity.Property(e => e.RecIdrecebimento).HasColumnName("RecIDRecebimento");
            entity.Property(e => e.ServNome)
                .HasMaxLength(60)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VisaoRelatorioServiçosEquipamento>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("visaoRelatorioServiçosEquipamentos");

            entity.Property(e => e.EmprInfraNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GrTiDescricao)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GrTiId).HasColumnName("GrTiID");
            entity.Property(e => e.GrupoServEquipNome)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Qtde).HasColumnName("qtde");
            entity.Property(e => e.ServEquipId).HasColumnName("ServEquipID");
            entity.Property(e => e.ServEquipNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TipoEstabId).HasColumnName("TipoEstabID");
            entity.Property(e => e.TipoEstabNome)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VisaoRlstacogrfoPorVeiculo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("visaoRLSTacogrfoPorVeiculo");

            entity.Property(e => e.Chassi)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EspecieNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FzveiId).HasColumnName("FZVeiID");
            entity.Property(e => e.ItemVistId).HasColumnName("ItemVistID");
            entity.Property(e => e.ItemVistNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MarcaNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ModNome)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Placa)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VistData).HasColumnType("datetime");
            entity.Property(e => e.VistDataValidade).HasColumnType("datetime");
            entity.Property(e => e.VistId).HasColumnName("VistID");
            entity.Property(e => e.Vvobs)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("VVObs");
        });

        modelBuilder.Entity<VisaoSimulado4>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("visaoSimulado4");

            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.SimuId).HasColumnName("SimuID");
            entity.Property(e => e.ValorVenalCalculo).HasColumnType("money");
        });

        modelBuilder.Entity<VisaoTiposProcesso>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("visaoTiposProcessos");

            entity.Property(e => e.TipoId).HasColumnName("Tipo ID");
            entity.Property(e => e.TipoNome)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("Tipo Nome");
        });

        modelBuilder.Entity<VisaoTramiteProcesso>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("visaoTramiteProcessos");

            entity.Property(e => e.DataCarga)
                .HasColumnType("datetime")
                .HasColumnName("Data Carga");
            entity.Property(e => e.Descritivo)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Iddiv).HasColumnName("IDDiv");
            entity.Property(e => e.LocalizadoEm)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("Localizado em");
            entity.Property(e => e.NoCarga).HasColumnName("No Carga");
            entity.Property(e => e.NomeDivisão)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("Nome Divisão");
            entity.Property(e => e.ProcDataPrevResp).HasColumnType("datetime");
            entity.Property(e => e.ProcSituacao)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VisaoUnidade>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VisaoUnidades");

            entity.Property(e => e.MemRazaoSocial)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.OrgNome)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.UniId).HasColumnName("UniID");
            entity.Property(e => e.UniNome)
                .HasMaxLength(60)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VisaoUsuario>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("visaoUsuarios");

            entity.Property(e => e.DivNome)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.MemRazaoSocial)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.OrgNome)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ServCargo)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.ServFuncao)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.ServNome)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.UniNome)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.UsuArquivaReabre)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UsuAvisaGravacao)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UsuDistrProc)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UsuDtvalidade)
                .HasColumnType("datetime")
                .HasColumnName("UsuDTValidade");
            entity.Property(e => e.UsuId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("UsuID");
            entity.Property(e => e.UsuNivelAcesso)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UsuRecProc)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<Visaolocacaobaixa>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("visaolocacaobaixa");

            entity.Property(e => e.BolVlrDivida)
                .HasColumnType("money")
                .HasColumnName("bolVlrDivida");
            entity.Property(e => e.ConCnpjcpf)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ConCNPJCPF");
            entity.Property(e => e.ConNome)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.LbnossoNumero)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LBNossoNumero");
            entity.Property(e => e.LcCategoria)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LcDataFim).HasColumnType("datetime");
            entity.Property(e => e.LcDataIni).HasColumnType("datetime");
            entity.Property(e => e.LcDtGeracao).HasColumnType("datetime");
            entity.Property(e => e.LcHorarioFim)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LcHorarioIni)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LcSituacao)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LcTecAutorizacao)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LcValorLocacao).HasColumnType("money");
            entity.Property(e => e.LcVlrEmUffi)
                .HasColumnType("money")
                .HasColumnName("LcVlr_em_UFFI");
            entity.Property(e => e.SubLocNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TaxNome)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.TipoPdescricao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TipoPDescricao");
            entity.Property(e => e.TsnmTipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TSNmTipo");
        });

        modelBuilder.Entity<VwAgendamento>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_agendamentos");

            entity.Property(e => e.Dtagendamento).HasColumnName("dtagendamento");
            entity.Property(e => e.Dtnascimento)
                .HasColumnType("datetime")
                .HasColumnName("dtnascimento");
            entity.Property(e => e.Flstatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("flstatus");
            entity.Property(e => e.Horafinal).HasColumnName("horafinal");
            entity.Property(e => e.Horainicial).HasColumnName("horainicial");
            entity.Property(e => e.Idagendamento).HasColumnName("idagendamento");
            entity.Property(e => e.Nmlocal)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("nmlocal");
            entity.Property(e => e.Nmservico)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nmservico");
        });

        modelBuilder.Entity<VwAnalisesPendente>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_AnalisesPendentes");

            entity.Property(e => e.DsRazaoSocial)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dsRazaoSocial");
            entity.Property(e => e.DsTipoSolicitacao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsTipoSolicitacao");
            entity.Property(e => e.Dsnomedocumento)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsnomedocumento");
            entity.Property(e => e.EmprCmc).HasColumnName("EmprCMC");
            entity.Property(e => e.FlStatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("flStatus");
            entity.Property(e => e.NrCnpjCpf)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("nrCnpjCpf");
            entity.Property(e => e.NrLocalizadorAlvara)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nrLocalizadorAlvara");
        });

        modelBuilder.Entity<VwAnalisesPendentesDocumento>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_AnalisesPendentesDocumentos");

            entity.Property(e => e.DsRazaoSocial)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dsRazaoSocial");
            entity.Property(e => e.DsTipoSolicitacao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsTipoSolicitacao");
            entity.Property(e => e.Dsnomedocumento)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dsnomedocumento");
            entity.Property(e => e.EmprCmc).HasColumnName("EmprCMC");
            entity.Property(e => e.NrCnpjCpf)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("nrCnpjCpf");
            entity.Property(e => e.NrLocalizadorAlvara)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nrLocalizadorAlvara");
            entity.Property(e => e.ObjConteudo).HasColumnType("image");
        });

        modelBuilder.Entity<VwAtividadesPergunta>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_AtividadesPerguntas");

            entity.Property(e => e.Atividade)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.AtividadeDenom)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Pergunta)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.PerguntaNumero).HasColumnName("Pergunta_Numero");
        });

        modelBuilder.Entity<VwCelioSimple>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwCelioSimples");

            entity.Property(e => e.ConCnpjcpf)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("ConCNPJCPF");
            entity.Property(e => e.ConId).HasColumnName("ConID");
            entity.Property(e => e.ConNome)
                .HasMaxLength(120)
                .IsUnicode(false);
            entity.Property(e => e.EmprCmc).HasColumnName("EmprCMC");
            entity.Property(e => e.Tipo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
            entity.Property(e => e.TipoTribNome)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ValorTotalCorr).HasColumnType("money");
        });

        modelBuilder.Entity<VwCepcorreio>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_CEPCORREIOS");

            entity.Property(e => e.BairroNovo)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Cep)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CEP");
            entity.Property(e => e.Flexistenosite)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flexistenosite");
            entity.Property(e => e.Logradouro)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.TipoLogradouro)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwConferenciaIssqnhoteisSimilare>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwConferenciaISSQNHoteisSimilares");

            entity.Property(e => e.EmprConstitNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NomeFantasia)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.RazaoSocial)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TipoBxNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Tirubo206)
                .HasColumnType("money")
                .HasColumnName("Tirubo 206");
            entity.Property(e => e.Tirubo214)
                .HasColumnType("money")
                .HasColumnName("Tirubo 214");
            entity.Property(e => e.Tirubo230)
                .HasColumnType("money")
                .HasColumnName("Tirubo 230");
            entity.Property(e => e.Tirubo236)
                .HasColumnType("money")
                .HasColumnName("Tirubo 236");
            entity.Property(e => e.Tirubo74)
                .HasColumnType("money")
                .HasColumnName("Tirubo 74");
            entity.Property(e => e.Tirubo9)
                .HasColumnType("money")
                .HasColumnName("Tirubo 9");
            entity.Property(e => e.Total).HasColumnType("money");
        });

        modelBuilder.Entity<VwConferenciaIssqnhoteisSimilaresPorCompetencium>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwConferenciaISSQNHoteisSimilaresPorCompetencia");

            entity.Property(e => e.EmprConstitNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NomeFantasia)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.RazaoSocial)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TipoBxNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Tirubo206)
                .HasColumnType("money")
                .HasColumnName("Tirubo 206");
            entity.Property(e => e.Tirubo214)
                .HasColumnType("money")
                .HasColumnName("Tirubo 214");
            entity.Property(e => e.Tirubo230)
                .HasColumnType("money")
                .HasColumnName("Tirubo 230");
            entity.Property(e => e.Tirubo236)
                .HasColumnType("money")
                .HasColumnName("Tirubo 236");
            entity.Property(e => e.Tirubo74)
                .HasColumnType("money")
                .HasColumnName("Tirubo 74");
            entity.Property(e => e.Tirubo9)
                .HasColumnType("money")
                .HasColumnName("Tirubo 9");
            entity.Property(e => e.Total).HasColumnType("money");
        });

        modelBuilder.Entity<VwConsultapreviaAtividadesinserida>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_consultaprevia_atividadesinseridas");

            entity.Property(e => e.Atividade)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("atividade");
            entity.Property(e => e.AtividadeDenom)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Inscricaoimobiliaria)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("inscricaoimobiliaria");
        });

        modelBuilder.Entity<VwConsultapreviaAtividadesinserir>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_consultaprevia_atividadesinserir");

            entity.Property(e => e.Atividade)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("atividade");
            entity.Property(e => e.AtividadeDenom)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwConsultapreviaListadocumento>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_consultaprevia_listadocumentos");

            entity.Property(e => e.Atividade)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("atividade");
            entity.Property(e => e.Dsdocumento)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dsdocumento");
            entity.Property(e => e.Iddocumento).HasColumnName("iddocumento");
            entity.Property(e => e.SetorId).HasColumnName("setorID");
            entity.Property(e => e.SetorNome)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwConsultapreviaListagraurisco>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_consultaprevia_listagraurisco");

            entity.Property(e => e.Atividade)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("atividade");
            entity.Property(e => e.Risco)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SetorId).HasColumnName("setorID");
            entity.Property(e => e.SetorNome)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwConsultapreviaListaimovel>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_consultaprevia_listaimovel");

            entity.Property(e => e.Cep)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("CEP");
            entity.Property(e => e.Complemento)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.InscricaoImobiliaria)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LogradDaQuadra)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.LogradId).HasColumnName("LogradID");
            entity.Property(e => e.LogradNome)
                .HasMaxLength(75)
                .IsUnicode(false);
            entity.Property(e => e.LogradNumero)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LogradTipo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.LoteamentoNome)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.QuadraId).HasColumnName("quadraID");
        });

        modelBuilder.Entity<VwConsultapreviaListazoneamento>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_consultaprevia_listazoneamentos");

            entity.Property(e => e.LogradId).HasColumnName("LogradID");
            entity.Property(e => e.NomeZona)
                .HasMaxLength(83)
                .IsUnicode(false);
            entity.Property(e => e.QuadraId).HasColumnName("quadraID");
            entity.Property(e => e.ZozoId).HasColumnName("zozoID");
            entity.Property(e => e.ZozoSigla)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("zozoSigla");
        });

        modelBuilder.Entity<VwConsultapreviaPerguntar>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_consultaprevia_perguntar");

            entity.Property(e => e.Pergunta)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.PerguntaNumero).HasColumnName("Pergunta_Numero");
        });

        modelBuilder.Entity<VwContribuintesIdSmsp>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_Contribuintes_id_SMSP");

            entity.Property(e => e.Celular)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("celular");
            entity.Property(e => e.Cep)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cep");
            entity.Property(e => e.Cidade)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("cidade");
            entity.Property(e => e.Complemento)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("complemento");
            entity.Property(e => e.DataNascimento)
                .HasColumnType("datetime")
                .HasColumnName("data_nascimento");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.Endereco)
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasColumnName("endereco");
            entity.Property(e => e.Estado)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("estado");
            entity.Property(e => e.Fonecomercial)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("fonecomercial");
            entity.Property(e => e.Foneresidencial)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("foneresidencial");
            entity.Property(e => e.IndicacaoFiscal)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Inscricaoimobiliaria)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("inscricaoimobiliaria");
            entity.Property(e => e.NomeContribuinte)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("Nome_Contribuinte");
            entity.Property(e => e.NomeMae)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nome_mae");
            entity.Property(e => e.Nomebairro)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("nomebairro");
            entity.Property(e => e.Nomepai)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("nomepai");
            entity.Property(e => e.NrCpfCnpj)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nr_cpf_cnpj");
            entity.Property(e => e.Nroresidencia)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("nroresidencia");
            entity.Property(e => e.RgEmissor)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RG_emissor");
            entity.Property(e => e.RgEstado)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RG_estado");
            entity.Property(e => e.RgProprietario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RG_proprietario");
            entity.Property(e => e.Sexo).HasColumnName("sexo");
        });

        modelBuilder.Entity<VwDeducoesTributosExercicio>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDeducoesTributosExercicio");

            entity.Property(e => e.DsTributo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("dsTributo");
            entity.Property(e => e.GrupoTipoBxNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
            entity.Property(e => e.Tipobxid).HasColumnName("tipobxid");
            entity.Property(e => e.Tipobxnome)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tipobxnome");
            entity.Property(e => e.Total)
                .HasColumnType("money")
                .HasColumnName("total");
        });

        modelBuilder.Entity<VwDividasPagasServicos901>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDividasPagasServicos901");

            entity.Property(e => e.ConCnpjcpf)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ConCNPJCPF");
            entity.Property(e => e.ConNome)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Mes1)
                .HasColumnType("money")
                .HasColumnName("MES1");
            entity.Property(e => e.Mes10)
                .HasColumnType("money")
                .HasColumnName("MES10");
            entity.Property(e => e.Mes2)
                .HasColumnType("money")
                .HasColumnName("MES2");
            entity.Property(e => e.Mes3)
                .HasColumnType("money")
                .HasColumnName("MES3");
            entity.Property(e => e.Mes4)
                .HasColumnType("money")
                .HasColumnName("MES4");
            entity.Property(e => e.Mes5)
                .HasColumnType("money")
                .HasColumnName("MES5");
            entity.Property(e => e.Mes6)
                .HasColumnType("money")
                .HasColumnName("MES6");
            entity.Property(e => e.Mes7)
                .HasColumnType("money")
                .HasColumnName("MES7");
            entity.Property(e => e.Mes8)
                .HasColumnType("money")
                .HasColumnName("MES8");
            entity.Property(e => e.Mes9)
                .HasColumnType("money")
                .HasColumnName("MES9");
            entity.Property(e => e.Total).HasColumnType("money");
        });

        modelBuilder.Entity<VwEmpresa>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwEmpresas");

            entity.Property(e => e.AnteriorAreaConstr).HasColumnType("money");
            entity.Property(e => e.ConCnpjcpf)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ConCNPJCPF");
            entity.Property(e => e.ConEndereco)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.ConNome)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ConNomeFantasia)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DataEntrada)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Data_Entrada");
            entity.Property(e => e.DataSaida)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Data_Saida");
            entity.Property(e => e.EmprAreaAberta).HasColumnType("money");
            entity.Property(e => e.EmprEnqSimples)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EmprSituacaoDescricao)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TipoBxNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
            entity.Property(e => e.TipoTribNome)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ValorIss)
                .HasColumnType("money")
                .HasColumnName("ValorISS");
        });

        modelBuilder.Entity<VwEmpresasAbertasAutomatica>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwEmpresasAbertasAutomaticas");

            entity.Property(e => e.Atividades)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.Cnpj)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CNPJ");
            entity.Property(e => e.Constituicao)
                .HasMaxLength(63)
                .IsUnicode(false);
            entity.Property(e => e.DomicilioTributario)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EmprCmc).HasColumnName("EmprCMC");
            entity.Property(e => e.EmprDataInscricao).HasColumnType("datetime");
            entity.Property(e => e.GerouComprovanteInscricao)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.GerouTaxaInscricao)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.NomeFantasia)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.RazaoSocial)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwEmpresasPorAtividadeQuadrimestral>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_EmpresasPorATividadeQuadrimestral");

            entity.Property(e => e.Atividade)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.AtividadeDenom)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwFatoSimplesNacionalProsiga>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VW_FATO_SIMPLES_NACIONAL_PROSIGA");

            entity.Property(e => e.CnpjCpf)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CNPJ/CPF");
            entity.Property(e => e.DataDaBaixa)
                .HasColumnType("datetime")
                .HasColumnName("DATA DA BAIXA");
            entity.Property(e => e.ValorPago)
                .HasColumnType("money")
                .HasColumnName("VALOR PAGO");
        });

        modelBuilder.Entity<VwGeomais01Terreno>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_geomais_01_terrenos");

            entity.Property(e => e.CdBairro)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("cd_bairro");
            entity.Property(e => e.CdDistrito)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("cd_distrito");
            entity.Property(e => e.CdEdificio).HasColumnName("cd_edificio");
            entity.Property(e => e.CdLogradouro).HasColumnName("cd_logradouro");
            entity.Property(e => e.CdLoteamento).HasColumnName("cd_loteamento");
            entity.Property(e => e.CdPessoa).HasColumnName("cd_pessoa");
            entity.Property(e => e.CdPessoaResponsavel).HasColumnName("cd_pessoa_responsavel");
            entity.Property(e => e.CdSetor)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("cd_setor");
            entity.Property(e => e.CdZona).HasColumnName("cd_zona");
            entity.Property(e => e.CdZoneamento).HasColumnName("cd_zoneamento");
            entity.Property(e => e.Comentarios).HasColumnName("comentarios");
            entity.Property(e => e.Desativado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("desativado");
            entity.Property(e => e.DsComplemento)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ds_complemento");
            entity.Property(e => e.MdArea)
                .HasColumnType("money")
                .HasColumnName("md_area");
            entity.Property(e => e.MdAreaEscriturada)
                .HasColumnType("money")
                .HasColumnName("md_area_escriturada");
            entity.Property(e => e.MdProfundidade).HasColumnName("md_profundidade");
            entity.Property(e => e.NrAgua).HasColumnName("nr_agua");
            entity.Property(e => e.NrCadastroImobiliario).HasColumnName("nr_cadastro_imobiliario");
            entity.Property(e => e.NrEnergia).HasColumnName("nr_energia");
            entity.Property(e => e.NrImovel)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("nr_imovel");
            entity.Property(e => e.NrInscricaoAnterior)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("nr_inscricao_anterior");
            entity.Property(e => e.NrInscricaoAtual)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nr_inscricao_atual");
            entity.Property(e => e.NrLote)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("nr_lote");
            entity.Property(e => e.NrLoteLoteamento).HasColumnName("nr_lote_loteamento");
            entity.Property(e => e.NrMatricula)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nr_matricula");
            entity.Property(e => e.NrQuadra)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("nr_quadra");
            entity.Property(e => e.NrQuadraLoteamento).HasColumnName("nr_quadra_loteamento");
            entity.Property(e => e.NrUnidadesConstruidas).HasColumnName("nr_unidades_construidas");
        });

        modelBuilder.Entity<VwGeomais02Unidade>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_geomais_02_unidades");

            entity.Property(e => e.CdDistrito)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("cd_distrito");
            entity.Property(e => e.CdEdificio).HasColumnName("cd_edificio");
            entity.Property(e => e.CdPessoa).HasColumnName("cd_pessoa");
            entity.Property(e => e.CdPessoaResponsavel).HasColumnName("cd_pessoa_responsavel");
            entity.Property(e => e.CdSetor)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("cd_setor");
            entity.Property(e => e.Comentarios).HasColumnName("comentarios");
            entity.Property(e => e.Desativado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("desativado");
            entity.Property(e => e.DsBloco).HasColumnName("ds_bloco");
            entity.Property(e => e.DsComplemento)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ds_complemento");
            entity.Property(e => e.DtAnoConstrucao).HasColumnName("dt_ano_construcao");
            entity.Property(e => e.IdLote).HasColumnName("id_lote");
            entity.Property(e => e.MdAreaConstruidaUnidade)
                .HasColumnType("money")
                .HasColumnName("md_area_construida_unidade");
            entity.Property(e => e.NrAgua).HasColumnName("nr_agua");
            entity.Property(e => e.NrAndar).HasColumnName("nr_andar");
            entity.Property(e => e.NrAptoSalaLoja)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("nr_apto_sala_loja");
            entity.Property(e => e.NrCadastroImobiliario).HasColumnName("nr_cadastro_imobiliario");
            entity.Property(e => e.NrEdificacaoEnglobamento).HasColumnName("nr_edificacao_englobamento");
            entity.Property(e => e.NrEnergia).HasColumnName("nr_energia");
            entity.Property(e => e.NrImovel)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("nr_imovel");
            entity.Property(e => e.NrInscricaoAnterior)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("nr_inscricao_anterior");
            entity.Property(e => e.NrInscricaoAtual)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nr_inscricao_atual");
            entity.Property(e => e.NrLote)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("nr_lote");
            entity.Property(e => e.NrMatricula)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nr_matricula");
            entity.Property(e => e.NrQuadra)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("nr_quadra");
            entity.Property(e => e.NrUnidade)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nr_unidade");
        });

        modelBuilder.Entity<VwGeomais03CadastroTerreno>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_geomais_03_cadastro_terrenos");

            entity.Property(e => e.CdDistrito)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("cd_distrito");
            entity.Property(e => e.CdItem).HasColumnName("cd_item");
            entity.Property(e => e.CdSetor)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("cd_setor");
            entity.Property(e => e.CdSubItem).HasColumnName("cd_sub_item");
            entity.Property(e => e.DtItem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("dt_item");
            entity.Property(e => e.NrCadastroImobiliario).HasColumnName("nr_cadastro_imobiliario");
            entity.Property(e => e.NrLote)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("nr_lote");
            entity.Property(e => e.NrQuadra)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("nr_quadra");
            entity.Property(e => e.TextoItem)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("texto_item");
            entity.Property(e => e.VlrItem).HasColumnName("vlr_item");
        });

        modelBuilder.Entity<VwGeomais04CadastroUnidade>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_geomais_04_cadastro_unidades");

            entity.Property(e => e.CdDistrito)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("cd_distrito");
            entity.Property(e => e.CdItem).HasColumnName("cd_item");
            entity.Property(e => e.CdSetor)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("cd_setor");
            entity.Property(e => e.CdSubItem).HasColumnName("cd_sub_item");
            entity.Property(e => e.DtItem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("dt_item");
            entity.Property(e => e.IdLote).HasColumnName("id_lote");
            entity.Property(e => e.NrCadastroImobiliario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nr_cadastro_imobiliario");
            entity.Property(e => e.NrLote)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("nr_lote");
            entity.Property(e => e.NrQuadra)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("nr_quadra");
            entity.Property(e => e.NrUnidade)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nr_unidade");
            entity.Property(e => e.TextoItem)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("texto_item");
            entity.Property(e => e.VlrItem).HasColumnName("vlr_item");
        });

        modelBuilder.Entity<VwGeomais05Testada>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_geomais_05_testadas");

            entity.Property(e => e.CdDistrito)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("cd_distrito");
            entity.Property(e => e.CdLadoSecao).HasColumnName("cd_lado_secao");
            entity.Property(e => e.CdLogradouro).HasColumnName("cd_logradouro");
            entity.Property(e => e.CdSecao).HasColumnName("cd_secao");
            entity.Property(e => e.CdSetor)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("cd_setor");
            entity.Property(e => e.MdTestada)
                .HasColumnType("money")
                .HasColumnName("md_testada");
            entity.Property(e => e.NrCadastroImobiliario).HasColumnName("nr_cadastro_imobiliario");
            entity.Property(e => e.NrLote)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("nr_lote");
            entity.Property(e => e.NrQuadra)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("nr_quadra");
            entity.Property(e => e.NrTestada).HasColumnName("nr_testada");
            entity.Property(e => e.Origem).HasColumnName("origem");
        });

        modelBuilder.Entity<VwGeomais06ItemCadastro>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_geomais_06_item_cadastro");

            entity.Property(e => e.CdItem).HasColumnName("cd_item");
            entity.Property(e => e.DsItem)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ds_item");
        });

        modelBuilder.Entity<VwGeomais07SubItemCadastro>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_geomais_07_sub_item_cadastro");

            entity.Property(e => e.CdItem).HasColumnName("cd_item");
            entity.Property(e => e.CdSubItem).HasColumnName("cd_sub_item");
            entity.Property(e => e.DsItem)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ds_item");
            entity.Property(e => e.Fator).HasColumnType("money");
        });

        modelBuilder.Entity<VwGeomais08TipoLogradouro>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_geomais_08_tipo_logradouro");

            entity.Property(e => e.CdTipoLogradouro)
                .ValueGeneratedOnAdd()
                .HasColumnName("cd_tipo_logradouro");
            entity.Property(e => e.DsTipoLogradouro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ds_tipo_logradouro");
            entity.Property(e => e.DsTipoLogradouroAbreviado).HasColumnName("ds_tipo_logradouro_abreviado");
        });

        modelBuilder.Entity<VwGeomais09Logradouro>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_geomais_09_logradouro");

            entity.Property(e => e.CdLogradouro).HasColumnName("cd_logradouro");
            entity.Property(e => e.CdTipoLogradouro).HasColumnName("cd_tipo_logradouro");
            entity.Property(e => e.DsLeiRegulamentacao).HasColumnName("ds_lei_regulamentacao");
            entity.Property(e => e.NmLogradouro)
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasColumnName("nm_logradouro");
        });

        modelBuilder.Entity<VwGeomais10LogradouroSecao>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_geomais_10_logradouro_secao");

            entity.Property(e => e.CdBairro)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("cd_bairro");
            entity.Property(e => e.CdDistrito)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("cd_distrito");
            entity.Property(e => e.CdLadoSecao)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("cd_lado_secao");
            entity.Property(e => e.CdLogradouro).HasColumnName("cd_logradouro");
            entity.Property(e => e.CdSecao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cd_secao");
            entity.Property(e => e.CdSetor)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("cd_setor");
            entity.Property(e => e.NrCep)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("nr_cep");
            entity.Property(e => e.VlMetroQuadrado)
                .HasColumnType("money")
                .HasColumnName("vl_metro_quadrado");
            entity.Property(e => e.Zona)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("zona");
        });

        modelBuilder.Entity<VwGeomais11Bairro>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_geomais_11_bairro");

            entity.Property(e => e.CdBairro).HasColumnName("cd_bairro");
            entity.Property(e => e.DtAprovacao).HasColumnName("dt_aprovacao");
            entity.Property(e => e.NmBairro)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("nm_bairro");
            entity.Property(e => e.NrLeiAprovacao).HasColumnName("nr_lei_aprovacao");
        });

        modelBuilder.Entity<VwGeomais12Edificio>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_geomais_12_edificio");

            entity.Property(e => e.CdDistrito)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("cd_distrito");
            entity.Property(e => e.CdEdificio).HasColumnName("cd_edificio");
            entity.Property(e => e.CdSetor)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("cd_setor");
            entity.Property(e => e.DsBloco)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ds_bloco");
            entity.Property(e => e.DtConstrucao)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dt_construcao");
            entity.Property(e => e.MdAreaComum).HasColumnName("md_area_comum");
            entity.Property(e => e.MdAreaGaragem).HasColumnName("md_area_garagem");
            entity.Property(e => e.MdAreaPrivativa).HasColumnName("md_area_privativa");
            entity.Property(e => e.NmEdificio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nm_edificio");
            entity.Property(e => e.NrEdificacao)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("nr_edificacao");
            entity.Property(e => e.NrLote)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("nr_lote");
            entity.Property(e => e.NrPavimentos).HasColumnName("nr_pavimentos");
            entity.Property(e => e.NrQuadra)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("nr_quadra");
            entity.Property(e => e.TipoCondominio)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("tipo_condominio");
        });

        modelBuilder.Entity<VwGeomais13Loteamento>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_geomais_13_loteamento");

            entity.Property(e => e.CdLoteamento).HasColumnName("cd_loteamento");
            entity.Property(e => e.CdPessoa).HasColumnName("cd_pessoa");
            entity.Property(e => e.DtAprovacao).HasColumnName("dt_aprovacao");
            entity.Property(e => e.MdArea).HasColumnName("md_area");
            entity.Property(e => e.MdAreaComum).HasColumnName("md_area_comum");
            entity.Property(e => e.MdAreaVerde).HasColumnName("md_area_verde");
            entity.Property(e => e.NmLoteamento)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("nm_loteamento");
            entity.Property(e => e.NrAprovacao).HasColumnName("nr_aprovacao");
        });

        modelBuilder.Entity<VwGeomais14Pessoa>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_geomais_14_pessoas");

            entity.Property(e => e.CdCpfCnpj)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cd_cpf_cnpj");
            entity.Property(e => e.CdPessoa).HasColumnName("cd_pessoa");
            entity.Property(e => e.NmPessoaRazaoSocial)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("nm_pessoa_razao_social");
            entity.Property(e => e.TipoPessoa)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("tipo_pessoa");
        });

        modelBuilder.Entity<VwGeomaisCadastroImovelRemover>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_geomais_CADASTRO_IMOVEL_REMOVER");

            entity.Property(e => e.CdDistrito)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("cd_distrito");
            entity.Property(e => e.CdItem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("cd_item");
            entity.Property(e => e.CdSetor)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("cd_setor");
            entity.Property(e => e.CdSubItem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("cd_sub_item");
            entity.Property(e => e.DtItem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("dt_item");
            entity.Property(e => e.NrCadastroImobiliario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nr_cadastro_imobiliario");
            entity.Property(e => e.NrEdificacao)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("nr_edificacao");
            entity.Property(e => e.NrLote)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("nr_lote");
            entity.Property(e => e.NrQuadra)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("nr_quadra");
            entity.Property(e => e.NrUnidade)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nr_unidade");
            entity.Property(e => e.TextoItem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("texto_item");
            entity.Property(e => e.VlrItem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("vlr_item");
        });

        modelBuilder.Entity<VwGeomaisImovel>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_geomais_IMOVEL");

            entity.Property(e => e.CdBairro)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("cd_bairro");
            entity.Property(e => e.CdDistrito)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("cd_distrito");
            entity.Property(e => e.CdEdificio).HasColumnName("cd_edificio");
            entity.Property(e => e.CdLogradouro).HasColumnName("cd_logradouro");
            entity.Property(e => e.CdLoteamento).HasColumnName("cd_loteamento");
            entity.Property(e => e.CdPessoa).HasColumnName("cd_pessoa");
            entity.Property(e => e.CdPessoaResponsavel).HasColumnName("cd_pessoa_responsavel");
            entity.Property(e => e.CdSetor)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("cd_setor");
            entity.Property(e => e.CdZona).HasColumnName("cd_zona");
            entity.Property(e => e.CdZoneamento).HasColumnName("cd_zoneamento");
            entity.Property(e => e.Comentarios).HasColumnName("comentarios");
            entity.Property(e => e.Desativado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("desativado");
            entity.Property(e => e.DsBloco).HasColumnName("ds_bloco");
            entity.Property(e => e.DsComplemento)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ds_complemento");
            entity.Property(e => e.DtAnoConstrucao).HasColumnName("dt_ano_construcao");
            entity.Property(e => e.EnglobaCom).HasColumnName("engloba_com");
            entity.Property(e => e.MdArea)
                .HasColumnType("money")
                .HasColumnName("md_area");
            entity.Property(e => e.MdAreaConstruidaUnidade)
                .HasColumnType("money")
                .HasColumnName("md_area_construida_unidade");
            entity.Property(e => e.MdAreaEscriturada)
                .HasColumnType("money")
                .HasColumnName("md_area_escriturada");
            entity.Property(e => e.MdAreaTotalConstruida)
                .HasColumnType("money")
                .HasColumnName("md_area_total_construida");
            entity.Property(e => e.MdProfundidade).HasColumnName("md_profundidade");
            entity.Property(e => e.NrAgua).HasColumnName("nr_agua");
            entity.Property(e => e.NrAndar).HasColumnName("nr_andar");
            entity.Property(e => e.NrAptoSalaLoja)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("nr_apto_sala_loja");
            entity.Property(e => e.NrCadastroImobiliario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nr_cadastro_imobiliario");
            entity.Property(e => e.NrEdificacao)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("nr_edificacao");
            entity.Property(e => e.NrEdificacaoEnglobamento).HasColumnName("nr_edificacao_englobamento");
            entity.Property(e => e.NrEnergia).HasColumnName("nr_energia");
            entity.Property(e => e.NrImovel)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("nr_imovel");
            entity.Property(e => e.NrInscricaoAnterior).HasColumnName("nr_inscricao_anterior");
            entity.Property(e => e.NrInscricaoAtual)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nr_inscricao_atual");
            entity.Property(e => e.NrLote)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("nr_lote");
            entity.Property(e => e.NrLoteLoteamento).HasColumnName("nr_lote_loteamento");
            entity.Property(e => e.NrMatricula)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nr_matricula");
            entity.Property(e => e.NrQuadra)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("nr_quadra");
            entity.Property(e => e.NrQuadraLoteamento).HasColumnName("nr_quadra_loteamento");
            entity.Property(e => e.NrUnidade)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nr_unidade");
            entity.Property(e => e.NrUnidadeEnglobamento).HasColumnName("nr_unidade_englobamento");
            entity.Property(e => e.NrUnidadesConstruidas).HasColumnName("nr_unidades_construidas");
        });

        modelBuilder.Entity<VwGeomaisItemCadastroImovel>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_geomais_ITEM_CADASTRO_IMOVEL");

            entity.Property(e => e.CdDistrito)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("cd_distrito");
            entity.Property(e => e.CdItem).HasColumnName("cd_item");
            entity.Property(e => e.CdSetor)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("cd_setor");
            entity.Property(e => e.CdSubItem).HasColumnName("cd_sub_item");
            entity.Property(e => e.DtItem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("dt_item");
            entity.Property(e => e.NrCadastroImobiliario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nr_cadastro_imobiliario");
            entity.Property(e => e.NrEdificacao)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("nr_edificacao");
            entity.Property(e => e.NrLote)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("nr_lote");
            entity.Property(e => e.NrQuadra)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("nr_quadra");
            entity.Property(e => e.NrUnidade)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nr_unidade");
            entity.Property(e => e.TextoItem)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("texto_item");
            entity.Property(e => e.VlrItem).HasColumnName("vlr_item");
        });

        modelBuilder.Entity<VwGeomaisTestadum>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_geomais_TESTADA");

            entity.Property(e => e.CdDistrito)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("cd_distrito");
            entity.Property(e => e.CdLadoSecao).HasColumnName("cd_lado_secao");
            entity.Property(e => e.CdLogradouro).HasColumnName("cd_logradouro");
            entity.Property(e => e.CdSecao).HasColumnName("cd_secao");
            entity.Property(e => e.CdSetor)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("cd_setor");
            entity.Property(e => e.MdTestada)
                .HasColumnType("money")
                .HasColumnName("md_testada");
            entity.Property(e => e.NrCadastroImobiliario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nr_cadastro_imobiliario");
            entity.Property(e => e.NrLote)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("nr_lote");
            entity.Property(e => e.NrQuadra)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("nr_quadra");
            entity.Property(e => e.NrTestada).HasColumnName("nr_testada");
            entity.Property(e => e.Origem).HasColumnName("origem");
        });

        modelBuilder.Entity<VwGetdate>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_getdate");

            entity.Property(e => e.Now)
                .HasColumnType("datetime")
                .HasColumnName("now");
        });

        modelBuilder.Entity<VwImovei>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_imoveis");

            entity.Property(e => e.Cep)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("CEP");
            entity.Property(e => e.Complemento)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Descricao)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.InscricaoImobiliaria)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LogradNome)
                .HasMaxLength(75)
                .IsUnicode(false);
            entity.Property(e => e.LogradTipo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.Numero)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwImoveisVilaA>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_imoveis_VilaA");

            entity.Property(e => e.AreaConstruida).HasColumnType("money");
            entity.Property(e => e.AreaTerreno).HasColumnType("money");
            entity.Property(e => e.Cep)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("CEP");
            entity.Property(e => e.Complemento)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Descricao)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.EdifMatricula)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.InscricaoImobiliaria)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LogradNome)
                .HasMaxLength(75)
                .IsUnicode(false);
            entity.Property(e => e.LogradTipo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.Numero)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Proprietario)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Utilizacao)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ValorBaixadoIptu)
                .HasColumnType("money")
                .HasColumnName("ValorBaixadoIPTU");
            entity.Property(e => e.ValorIptu)
                .HasColumnType("money")
                .HasColumnName("ValorIPTU");
        });

        modelBuilder.Entity<VwMapaBaixaParcelamento>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwMapaBaixaParcelamento");

            entity.Property(e => e.CorrecaoBaixada).HasColumnType("money");
            entity.Property(e => e.CorrecaoOriginal).HasColumnType("money");
            entity.Property(e => e.CorrecaoTap).HasColumnType("money");
            entity.Property(e => e.DataBaixa)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Desconto).HasColumnType("money");
            entity.Property(e => e.DescontoTap).HasColumnType("money");
            entity.Property(e => e.JurosBaixado).HasColumnType("money");
            entity.Property(e => e.JurosParcelamento).HasColumnType("money");
            entity.Property(e => e.JurosTap).HasColumnType("money");
            entity.Property(e => e.MultaBaixada).HasColumnType("money");
            entity.Property(e => e.MultaDa)
                .HasColumnType("money")
                .HasColumnName("MultaDA");
            entity.Property(e => e.MultaDaTap).HasColumnType("money");
            entity.Property(e => e.MultaTap).HasColumnType("money");
            entity.Property(e => e.PrincipalBaixado).HasColumnType("money");
            entity.Property(e => e.PrincipalOriginal).HasColumnType("money");
            entity.Property(e => e.Situacao)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.TapValorPagamentoParcial).HasColumnType("money");
            entity.Property(e => e.Tapmapaid).HasColumnName("tapmapaid");
            entity.Property(e => e.Tapnumero).HasColumnName("tapnumero");
            entity.Property(e => e.TipoTribId).HasColumnName("TipoTribID");
            entity.Property(e => e.Tributo)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<WflowAnexo>(entity =>
        {
            entity.HasKey(e => e.AnexoId);

            entity.ToTable("WFlowAnexos");

            entity.Property(e => e.AnexoId)
                .ValueGeneratedNever()
                .HasColumnName("AnexoID");
            entity.Property(e => e.AnexoData).HasColumnType("datetime");
            entity.Property(e => e.AnexoObjDescr)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.AnexoObjeto).HasColumnType("image");
            entity.Property(e => e.AnexoTipoObjeto)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Extensao)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.FluxoTramId).HasColumnName("FluxoTramID");
            entity.Property(e => e.RemId).HasColumnName("RemID");
            entity.Property(e => e.UsuId)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("UsuID");

            entity.HasOne(d => d.Rem).WithMany(p => p.WflowAnexos)
                .HasForeignKey(d => d.RemId)
                .HasConstraintName("FK_WFlowAnexos_WFlowRemessa");

            entity.HasOne(d => d.Usu).WithMany(p => p.WflowAnexos)
                .HasForeignKey(d => d.UsuId)
                .HasConstraintName("FK_WFlowAnexos_Usuarios");
        });

        modelBuilder.Entity<WflowDespachoFluxo>(entity =>
        {
            entity.HasKey(e => new { e.UsuId, e.FluxoTramId, e.DespPadraoId });

            entity.ToTable("WFlowDespachoFluxo");

            entity.HasIndex(e => new { e.UsuId, e.Recebimentos }, "IX_UsuID_Recebimentos").HasFillFactor(90);

            entity.Property(e => e.UsuId)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("UsuID");
            entity.Property(e => e.FluxoTramId).HasColumnName("FluxoTramID");
            entity.Property(e => e.DespPadraoId).HasColumnName("DespPadraoID");
            entity.Property(e => e.Encaminhamento)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Recebimentos)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.DespPadrao).WithMany(p => p.WflowDespachoFluxos)
                .HasForeignKey(d => d.DespPadraoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WFlowDespachoFluxo_WFlowDespachoPadrao");

            entity.HasOne(d => d.FluxoTram).WithMany(p => p.WflowDespachoFluxos)
                .HasForeignKey(d => d.FluxoTramId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WFlowDespachoFluxo_WFlowFluxoTramitacao");

            entity.HasOne(d => d.Usu).WithMany(p => p.WflowDespachoFluxos)
                .HasForeignKey(d => d.UsuId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WFlowDespachoFluxo_Usuarios");
        });

        modelBuilder.Entity<WflowDespachoPadrao>(entity =>
        {
            entity.HasKey(e => e.DespPadraoId).HasName("PK_WFlowDespPadrao");

            entity.ToTable("WFlowDespachoPadrao");

            entity.Property(e => e.DespPadraoId)
                .ValueGeneratedNever()
                .HasColumnName("DespPadraoID");
            entity.Property(e => e.AprovaRequisicao)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CancelaRequisicao)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DespPadraoNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.InterrompeFluxo)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.RetornaOrigem)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<WflowFluxoTramitacao>(entity =>
        {
            entity.HasKey(e => e.FluxoTramId).HasName("PK_WFlowFluxoTram");

            entity.ToTable("WFlowFluxoTramitacao");

            entity.Property(e => e.FluxoTramId)
                .ValueGeneratedNever()
                .HasColumnName("FluxoTramID");
            entity.Property(e => e.TipoFluxoId).HasColumnName("TipoFluxoID");
            entity.Property(e => e.TipoProcId).HasColumnName("TipoProcID");

            entity.HasOne(d => d.TipoFluxo).WithMany(p => p.WflowFluxoTramitacaos)
                .HasForeignKey(d => d.TipoFluxoId)
                .HasConstraintName("FK_WFlowFluxoTramitacao_WFlowTiposFluxos");

            entity.HasOne(d => d.TipoProc).WithMany(p => p.WflowFluxoTramitacaos)
                .HasForeignKey(d => d.TipoProcId)
                .HasConstraintName("FK_WFlowFluxoTramitacao_WFlowTipoProcesso");
        });

        modelBuilder.Entity<WflowItem>(entity =>
        {
            entity.HasKey(e => e.WflowItemId).HasName("PK_WFlowSolicItem");

            entity.ToTable("WFlowItem");

            entity.Property(e => e.WflowItemId)
                .ValueGeneratedNever()
                .HasColumnName("WFlowItemID");
            entity.Property(e => e.WflowItemDescr)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("WFlowItemDescr");
        });

        modelBuilder.Entity<WflowRececimento>(entity =>
        {
            entity.HasKey(e => e.RecId);

            entity.ToTable("WFlowRececimentos");

            entity.Property(e => e.RecId)
                .ValueGeneratedNever()
                .HasColumnName("RecID");
            entity.Property(e => e.RecData).HasColumnType("datetime");
            entity.Property(e => e.UsuId)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("UsuID");

            entity.HasMany(d => d.Rems).WithMany(p => p.Recs)
                .UsingEntity<Dictionary<string, object>>(
                    "WflowProcRec",
                    r => r.HasOne<WflowRemessa>().WithMany()
                        .HasForeignKey("RemId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_WFlowProcRec_WFlowRemessa"),
                    l => l.HasOne<WflowRececimento>().WithMany()
                        .HasForeignKey("RecId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_WFlowProcRec_WFlowRececimentos"),
                    j =>
                    {
                        j.HasKey("RecId", "RemId");
                        j.ToTable("WFlowProcRec");
                        j.IndexerProperty<long>("RecId").HasColumnName("RecID");
                        j.IndexerProperty<long>("RemId").HasColumnName("RemID");
                    });
        });

        modelBuilder.Entity<WflowRemessa>(entity =>
        {
            entity.HasKey(e => e.RemId);

            entity.ToTable("WFlowRemessa");

            entity.HasIndex(e => e.FluxoDestinoId, "IX_FluxoDestinoID").HasFillFactor(90);

            entity.HasIndex(e => new { e.RequiId, e.RemData }, "IX_RequiID_RemData").HasFillFactor(90);

            entity.Property(e => e.RemId)
                .ValueGeneratedNever()
                .HasColumnName("RemID");
            entity.Property(e => e.DespPadraoId).HasColumnName("DespPadraoID");
            entity.Property(e => e.DespachoDescr)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.FluxoDestinoId).HasColumnName("FluxoDestinoID");
            entity.Property(e => e.FluxoRemId).HasColumnName("FluxoRemID");
            entity.Property(e => e.RemData).HasColumnType("datetime");
            entity.Property(e => e.RequiId).HasColumnName("RequiID");
            entity.Property(e => e.UsuRemetenteId)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("UsuRemetenteID");

            entity.HasOne(d => d.DespPadrao).WithMany(p => p.WflowRemessas)
                .HasForeignKey(d => d.DespPadraoId)
                .HasConstraintName("FK_WFlowRemessa_WFlowDespachoPadrao");

            entity.HasOne(d => d.Requi).WithMany(p => p.WflowRemessas)
                .HasForeignKey(d => d.RequiId)
                .HasConstraintName("FK_WFlowRemessa_WFlowRequisicao");
        });

        modelBuilder.Entity<WflowRequisicao>(entity =>
        {
            entity.HasKey(e => e.RequiId).HasName("PK_WFlowSolicitacao");

            entity.ToTable("WFlowRequisicao");

            entity.Property(e => e.RequiId)
                .ValueGeneratedNever()
                .HasColumnName("RequiID");
            entity.Property(e => e.RequiData).HasColumnType("datetime");
            entity.Property(e => e.RequiJust)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.RequiSolicitante)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<WflowRequisicaoIten>(entity =>
        {
            entity.HasKey(e => new { e.RequiId, e.WflowItemId }).HasName("PK_WFlowSolicitacaoItens");

            entity.ToTable("WFlowRequisicaoItens");

            entity.Property(e => e.RequiId).HasColumnName("RequiID");
            entity.Property(e => e.WflowItemId).HasColumnName("WFlowItemID");

            entity.HasOne(d => d.Requi).WithMany(p => p.WflowRequisicaoItens)
                .HasForeignKey(d => d.RequiId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WFlowSolicitacaoItens_WFlowRequisicao");

            entity.HasOne(d => d.WflowItem).WithMany(p => p.WflowRequisicaoItens)
                .HasForeignKey(d => d.WflowItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WFlowSolicitacaoItens_WFlowItem");
        });

        modelBuilder.Entity<WflowTipoProcesso>(entity =>
        {
            entity.HasKey(e => e.TipoProcId).HasName("PK_WFlowTipoDespesa");

            entity.ToTable("WFlowTipoProcesso");

            entity.Property(e => e.TipoProcId)
                .ValueGeneratedNever()
                .HasColumnName("TipoProcID");
            entity.Property(e => e.TipoProcNome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WorkFlow)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<WflowTiposFluxo>(entity =>
        {
            entity.HasKey(e => e.TipoFluxoId);

            entity.ToTable("WFlowTiposFluxos");

            entity.Property(e => e.TipoFluxoId)
                .ValueGeneratedNever()
                .HasColumnName("TipoFluxoID");
            entity.Property(e => e.TipoFluxoDescricao)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.TipoFluxoNome)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.TipoFluxoRestringeOrgaoUnidade)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("Sim")
                .IsFixedLength();
        });

        modelBuilder.Entity<XFrotaMovOrdensServico>(entity =>
        {
            entity.HasKey(e => e.XFmovOsid);

            entity.ToTable("xFrotaMovOrdensServicos");

            entity.Property(e => e.XFmovOsid).HasColumnName("xFMovOSID");
            entity.Property(e => e.XFmovOsdata)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("xFMovOSData");
            entity.Property(e => e.XFmovOsdivisao)
                .HasDefaultValue(0)
                .HasColumnName("xFMovOSDivisao");
            entity.Property(e => e.XFmovOshistorico)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("xFMovOSHistorico");
            entity.Property(e => e.XFmovOskmFinal).HasColumnName("xFMovOSKmFinal");
            entity.Property(e => e.XFmovOskmInicial)
                .HasDefaultValue(0)
                .HasColumnName("xFMovOSKmInicial");
            entity.Property(e => e.XFmovOsnum)
                .HasDefaultValue(0L)
                .HasColumnName("xFMovOSNum");
            entity.Property(e => e.XFrotaOsidCondut).HasColumnName("xFrotaOSIdCondut");

            entity.HasOne(d => d.XFmovOsnumNavigation).WithMany(p => p.XFrotaMovOrdensServicos)
                .HasForeignKey(d => d.XFmovOsnum)
                .HasConstraintName("FK_xFrotaMovOrdensServicos_xFrotaOrdensServicos");

            entity.HasOne(d => d.XFrotaOsidCondutNavigation).WithMany(p => p.XFrotaMovOrdensServicos)
                .HasForeignKey(d => d.XFrotaOsidCondut)
                .HasConstraintName("FK_xFrotaMovOrdensServicos_Condutores1");
        });

        modelBuilder.Entity<XFrotaOrdensServico>(entity =>
        {
            entity.HasKey(e => e.XFosnum);

            entity.ToTable("xFrotaOrdensServicos");

            entity.Property(e => e.XFosnum).HasColumnName("xFOSNum");
            entity.Property(e => e.ServId).HasComment("Servidor que efetuou ultima alteração ou que esta atendendo a solicitação de veiculos");
            entity.Property(e => e.XFosdataFim)
                .HasColumnType("datetime")
                .HasColumnName("xFOSDataFim");
            entity.Property(e => e.XFosdataIni)
                .HasColumnType("datetime")
                .HasColumnName("xFOSDataIni");
            entity.Property(e => e.XFosdtUltAlt)
                .HasComment("Data da Ultima Alteração da Ordem de Serviço")
                .HasColumnType("datetime")
                .HasColumnName("xFOSDtUltAlt");
            entity.Property(e => e.XFosidVeiculo)
                .HasDefaultValue(0L)
                .HasColumnName("xFOSIdVeiculo");
            entity.Property(e => e.XFoskmInicial)
                .HasDefaultValue(0)
                .HasColumnName("xFOSKmInicial");
            entity.Property(e => e.XFoskmfinal)
                .HasDefaultValue(0)
                .HasComment("campo totalizador")
                .HasColumnName("xFOSKMFinal");
            entity.Property(e => e.XFoskms).HasColumnName("xFOSKms");

            entity.HasOne(d => d.Serv).WithMany(p => p.XFrotaOrdensServicos)
                .HasForeignKey(d => d.ServId)
                .HasConstraintName("FK_xFrotaOrdensServicos_Servidores");

            entity.HasOne(d => d.VeicSolic).WithMany(p => p.XFrotaOrdensServicos)
                .HasForeignKey(d => d.VeicSolicId)
                .HasConstraintName("FK_xFrotaOrdensServicos_VeicSolicitacao");

            entity.HasOne(d => d.XFosidVeiculoNavigation).WithMany(p => p.XFrotaOrdensServicos)
                .HasForeignKey(d => d.XFosidVeiculo)
                .HasConstraintName("FK_xFrotaOrdensServicos_Veiculos");
        });

        modelBuilder.Entity<XMovLogMovEquipamento>(entity =>
        {
            entity.HasKey(e => e.IdLog);

            entity.ToTable("xMovLogMovEquipamentos");

            entity.Property(e => e.AcesMovEquipId).HasColumnName("AcesMovEquipID");
            entity.Property(e => e.Data).HasColumnType("datetime");
            entity.Property(e => e.Descricao)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.MoeMovEquipId)
                .HasDefaultValue(0L)
                .HasColumnName("moeMovEquipID");
            entity.Property(e => e.ServId).HasColumnName("ServID");
        });

        modelBuilder.Entity<XTbTmpDeParaReceita>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("xTbTmpDeParaReceitas");

            entity.Property(e => e.CdReceita2021).HasMaxLength(255);
            entity.Property(e => e.CdReceita2022).HasMaxLength(255);
            entity.Property(e => e.F3).HasMaxLength(255);
            entity.Property(e => e.F4).HasMaxLength(255);
            entity.Property(e => e.F5).HasMaxLength(255);
        });

        modelBuilder.Entity<XtbTempRelDividas20072011>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("XtbTempRelDividas20072011");

            entity.Property(e => e.EdificacaoId).HasColumnName("EdificacaoID");
            entity.Property(e => e.InscricaoImobiliaria)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NmProprietario)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("nmProprietario");
            entity.Property(e => e.NrAno).HasColumnName("nrAno");
            entity.Property(e => e.VlBonificacao)
                .HasColumnType("money")
                .HasColumnName("vlBonificacao");
            entity.Property(e => e.VlColetaLixo)
                .HasColumnType("money")
                .HasColumnName("vlColetaLixo");
            entity.Property(e => e.VlEmissaoGuias)
                .HasColumnType("money")
                .HasColumnName("vlEmissaoGuias");
            entity.Property(e => e.VlIluminacaoPublica)
                .HasColumnType("money")
                .HasColumnName("vlIluminacaoPublica");
            entity.Property(e => e.VlImpostoPredial)
                .HasColumnType("money")
                .HasColumnName("vlImpostoPredial");
            entity.Property(e => e.VlImpostoTerritorial)
                .HasColumnType("money")
                .HasColumnName("vlImpostoTerritorial");
            entity.Property(e => e.VlLimpezaPublica)
                .HasColumnType("money")
                .HasColumnName("vlLimpezaPublica");
            entity.Property(e => e.VlServicoBombeiro)
                .HasColumnType("money")
                .HasColumnName("vlServicoBombeiro");
            entity.Property(e => e.VlTotal)
                .HasColumnType("money")
                .HasColumnName("vlTotal");
            entity.Property(e => e.VlTotalAtual)
                .HasColumnType("money")
                .HasColumnName("vlTotalAtual");
            entity.Property(e => e.VlVenal)
                .HasColumnType("money")
                .HasColumnName("vlVenal");
        });

        modelBuilder.Entity<Zoneamento>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("zoneamento");

            entity.Property(e => e.AreaRural)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AREA RURAL");
            entity.Property(e => e.Codigo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CODIGO");
            entity.Property(e => e.Descricao)
                .HasMaxLength(5000)
                .IsUnicode(false)
                .HasColumnName("DESCRICAO");
            entity.Property(e => e.Evb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EVB");
            entity.Property(e => e.Zc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZC");
            entity.Property(e => e.Zce)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZCE");
            entity.Property(e => e.Zcs)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZCS");
            entity.Property(e => e.Zcsp)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZCSP");
            entity.Property(e => e.Zein)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZEIN");
            entity.Property(e => e.Zeis1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZEIS1");
            entity.Property(e => e.Zeis2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZEIS2");
            entity.Property(e => e.Zep)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZEP");
            entity.Property(e => e.Zeu1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZEU1");
            entity.Property(e => e.Zeu2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZEU2");
            entity.Property(e => e.Zfa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZFA");
            entity.Property(e => e.Zfc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZFC");
            entity.Property(e => e.Zfi)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZFI");
            entity.Property(e => e.Zie)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZIE");
            entity.Property(e => e.Zm1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZM1");
            entity.Property(e => e.Zm2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZM2");
            entity.Property(e => e.Zm3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZM3");
            entity.Property(e => e.Zm4)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZM4");
            entity.Property(e => e.Zm5)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZM5");
            entity.Property(e => e.Zpp)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZPP");
            entity.Property(e => e.Zr1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZR1");
            entity.Property(e => e.Zr2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZR2");
            entity.Property(e => e.Zr3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZR3");
            entity.Property(e => e.Zr4)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZR4");
            entity.Property(e => e.Zr5)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZR5");
            entity.Property(e => e.Zro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZRO");
            entity.Property(e => e.Zsi)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZSI");
            entity.Property(e => e.Zt1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZT1");
            entity.Property(e => e.Zt2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZT2");
            entity.Property(e => e.Zt3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZT3");
            entity.Property(e => e.Zt4)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZT4");
        });

        modelBuilder.Entity<_24hrsAcesso>(entity =>
        {
            entity.HasKey(e => e.Guia);

            entity.ToTable("24HrsAcessos");

            entity.Property(e => e.Guia)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<_24hrsGuia>(entity =>
        {
            entity.HasKey(e => e.Nomeguia);

            entity.ToTable("24HrsGuias");

            entity.Property(e => e.Nomeguia)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nomeguia");
            entity.Property(e => e.Link)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("link");
            entity.Property(e => e.Titulopagina)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Visivel)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("visivel");
        });

        modelBuilder.Entity<_24hrsImpCarne>(entity =>
        {
            entity.HasKey(e => e.IdImpCarne);

            entity.ToTable("24HrsImpCarne");

            entity.Property(e => e.IdImpCarne)
                .ValueGeneratedNever()
                .HasColumnName("idImpCarne");
            entity.Property(e => e.DataImpCarne)
                .HasColumnType("datetime")
                .HasColumnName("dataImpCarne");
            entity.Property(e => e.Inscricaoimobiliaria)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("inscricaoimobiliaria");
        });

        modelBuilder.Entity<_24hrsMenu>(entity =>
        {
            entity.HasKey(e => e.Idmenu);

            entity.ToTable("24HrsMenu");

            entity.Property(e => e.Idmenu).HasColumnName("IDMenu");
            entity.Property(e => e.Link)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("link");
            entity.Property(e => e.LinkFoto)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("linkFoto");
            entity.Property(e => e.Nomeguia)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nomeguia");
            entity.Property(e => e.Texto)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Titulo)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.Visivel)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("visivel");

            entity.HasOne(d => d.NomeguiaNavigation).WithMany(p => p._24hrsMenus)
                .HasForeignKey(d => d.Nomeguia)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_24HrsMenu_24HrsGuias");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}
