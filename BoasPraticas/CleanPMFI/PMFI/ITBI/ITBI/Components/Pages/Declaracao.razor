@page "/declaracao"
@using System.ComponentModel.DataAnnotations
@using ITBI.Components.Pages
@using ITBI.Services
@using ITBI.Entities.DBProsiga
@using Microsoft.EntityFrameworkCore
@inject IDialogService DialogService
@inject IImovelService imovelService
@inject IContribuinteService contribuinteService
@rendermode InteractiveServer

<FluentWizard StepperPosition="StepperPosition.Left"
              DisplayStepNumber="@(WizardStepStatus.Current | WizardStepStatus.Next)"
              Border="WizardBorder.Outside"
              StepTitleHiddenWhen="@GridItemHidden.XsAndDown"
              Height="auto"
              Style="min-height: 300px;"
              OnFinish="@OnFinishedAsync">
             <Steps>
                    <FluentWizardStep Label="Inscrição Imobiliária"
                                      OnChange="@OnStepChange">
                           <FluentEditForm Model="imovel" FormName="inscricaoInfo" OnValidSubmit="@OnValidSubmit" OnInvalidSubmit="OnInvalidSubmit">
                            <DataAnnotationsValidator />
                            <FluentStack Orientation="Orientation.Vertical">
                                <FluentTextField Placeholder="Inscrição Imobiliária" @bind-Value="imovel.InscricaoImobiliaria">Inscrição Imobiliária:</FluentTextField> 
                            </FluentStack>
                            <FluentValidationSummary style="color:darkred" />
                        </FluentEditForm>
                    </FluentWizardStep>
                    <FluentWizardStep Label="Informações do Imóvel"
                              OnChange="@OnStepChange">
                            <FluentEditForm Model="imovel" FormName="imovelInfo" OnValidSubmit="@OnValidSubmit" OnInvalidSubmit="@OnInvalidSubmit">
                            <DataAnnotationsValidator />
                            <FluentStack Orientation="Orientation.Horizontal">
                            <FluentTextField Placeholder="Inscrição Imobiliária" @bind-Value="imovel.InscricaoImobiliaria"> Inscrição Imobiliária</FluentTextField> 
                            <FluentTextField Placeholder="Matrícula" @bind-Value="imovel.EdifMatricula">Matrícula</FluentTextField> 
                            <FluentNumberField Placeholder="Número do Cartório de Ofício" @bind-Value="imovel.EdifNumOficio">Número do Cartório de Ofício</FluentNumberField> 
                            </FluentStack>
                            <FluentStack Orientation="Orientation.Horizontal">
                            <FluentTextField Placeholder="Caracteristica" @bind-Value="imovel.EdifCaracteristica">Caracteristica</FluentTextField> 
                            <FluentNumberField Placeholder="Área Terreno" @bind-Value="imovel.Terreno.TerrAreaTerreno">Área do Terreno</FluentNumberField> 
                            <FluentNumberField Placeholder="Área Construída" @bind-Value="imovel.EdifAreaConstruida">Área do Construída</FluentNumberField> 
                            <FluentNumberField Placeholder="Fração" @bind-Value="imovel.EdifFracaoIdealEdificacao">Fração</FluentNumberField> 
                            </FluentStack>
                            <FluentStack Orientation="Orientation.Horizontal">
                            <FluentTextField Placeholder="TipoLogradouro" @bind-Value="imovel.Lograd.LogradTipo">TipoLogradouro</FluentTextField> 
                            <FluentTextField Placeholder="Logradouro" @bind-Value="imovel.Lograd.LogradNome">Logradouro</FluentTextField> 
                            <FluentTextField Placeholder="Número" @bind-Value="imovel.EdifNumeracao">Numero</FluentTextField> 
                            <FluentTextField Placeholder="Bairro" @bind-Value="imovel.IdloteamentoNavigation.Descricao">Bairro</FluentTextField>

                      <!-- 
                        <FluentTextField Placeholder="Logradouro" @bind-Value="@logradouroimovelConcat">Logradouro</FluentTextField> 

                        <Endereco logradouro="@logradouroimovel" ></Endereco>
                        <Endereco></Endereco>

                      --> 

                            </FluentStack>
                            <FluentValidationSummary style="color:darkred" />
                        </FluentEditForm>
                    </FluentWizardStep>
                    <FluentWizardStep Label="Transmitentes"  OnChange="@OnStepChange">
                <FluentDataGrid Items="transmitentes">
                    @*<FluentButton OnClick="@( ()=> BuscarContribuinteDialog("Transmitente"))" Appearance="Appearance.Accent">Adicionar Transmitente</FluentButton>*@
                    <PropertyColumn Property="@(t => t.Con.ConCnpjcpf)" Sortable="true"/>
                    <PropertyColumn Property="@(t => t.Con.ConNome)" Sortable="true" />
                     <PropertyColumn Property="@(t => t.Responsavel)" Sortable="true" />
                    <PropertyColumn Property="@(t => t.Locatario)" Sortable="true" />
                    <PropertyColumn Property="@(t => t.CoResponsavel)" Sortable="true" />
                    <PropertyColumn Property="@(t => t.Correspondencia)" Sortable="true" />
                    <PropertyColumn Property="@(t => t.Percentual)" Sortable="true" />
                <TemplateColumn Align="@Align.End">
                    
                    <FluentCheckbox @bind-Value="@value2" Disabled="false" Label="Bananas (disabled)" />
                    </TemplateColumn>

                </FluentDataGrid>
        </FluentWizardStep>

             </Steps>
</FluentWizard>



<FluentOverlay @bind-Visible=@_overlayIsVisible
               Opacity="0.4"
               Alignment="Align.Center"
               Justification="@JustifyContent.Center">
    <FluentProgressRing />
</FluentOverlay>
@code {
    bool value2 = true;
    private bool _overlayIsVisible = false;
    //public string InscricaoImobiliaria { get; set; } = string.Empty;
    private IQueryable<Contribuinte>? adquirentes;
    private List<Contribuinte>? transmitentesList;
    private List<Contribuinte>? adquirentesList;
    private Contribuinte? adquirente = new Contribuinte() { ConCnpjcpf = string.Empty };
    private Contribuinte? transmitente = new Contribuinte() { ConCnpjcpf = string.Empty };
    public IQueryable<TribEdificaco>?  imovelQ ;
    private IQueryable<TribEdificacoesContrib>? transmitentes; 
    public string? tipoContribuinte = null;

    TribEdificaco imovel { get; set; } = new TribEdificaco(){ 
                                                                        InscricaoImobiliaria=string.Empty, 
                                                                        Lograd = new Logradouro(),
                                                                        Terreno= new TribTerreno(),
                                                                        IdloteamentoNavigation=new Loteamento(),
                                                                        TribEdificacoesContribs = new List<TribEdificacoesContrib>()
                                                                       };

    Contribuinte Transmitente { get; set; } = new Contribuinte();
    Contribuinte Adquirente   { get; set; } = new Contribuinte();
    async protected override void OnInitialized()
    {

        //imovelQ = await imovelService.GetImovelQueryable(InscricaoImobiliaria);
        //imovel = imovelService.GetImovelQueryable("");
        //Content = new Contribuinte();
       // _overlayIsVisible = true;
       // await Task.Delay(600);
       // _overlayIsVisible = false;
    }
    async Task OnStepChange(FluentWizardStepChangeEventArgs step)
    {
     
        
        // Você pode acessar a propriedade 'Label' ou outra propriedade identificadora do passo
        //var stepLabel = step.TargetLabel;
        if(step.TargetIndex==1){

            imovel = await imovelService.GetImovel(imovel.InscricaoImobiliaria);
            //transmitentes = imovel.TribEdificacoesContribs.AsQueryable() ?? null;
            
            transmitentes = imovel.TribEdificacoesContribs.AsQueryable() ?? null;
            if(imovel ==null)
            {
                await DialogService.ShowInfoAsync("Inscrição não Encontrada!");
                
            }

        }
         if(step.TargetIndex==2){
            //transmitentes = imovel.TribEdificacoesContribs.AsQueryable();
            //await DialogService.ShowInfoAsync("estou no passo 2");
        }

        // Código para lidar com a mudança de passo
        // ... 
       
    }
     async Task OnFinishedAsync()
    {
       // await DialogService.ShowInfoAsync("Wizard completed");
    }
    async Task OnValidSubmit()
    {
        //DemoLogger.WriteLine($"OnValidSubmit called");
      //  _overlayIsVisible = true;
       // await Task.Delay(2000);
       // _overlayIsVisible = false;
    }
    void OnInvalidSubmit()
    {
        //DemoLogger.WriteLine($"OnInvalidSubmit called");
    }
    private async Task BuscarContribuinteDialog(string _tipoContribuinte)
    {
        tipoContribuinte = _tipoContribuinte;
        //Contribuinte contribuinte = new Contribuinte();
        if (tipoContribuinte == "Transmitente")
        {

            await DialogService.ShowDialogAsync<BuscarContribuinteDialog>(transmitente, new DialogParameters()
                {
                    Title = $"Buscar {tipoContribuinte}",
                    OnDialogResult = DialogService.CreateDialogCallback(this, HandleBuscarContribuinteDialog),
                    //   Width = "500px",
                    //   Height = "500px",
                });
        }
        if (tipoContribuinte == "Adquirente")
        {

            await DialogService.ShowDialogAsync<BuscarContribuinteDialog>(adquirente, new DialogParameters()
                {
                    Title = $"Buscar {tipoContribuinte}",
                    OnDialogResult = DialogService.CreateDialogCallback(this, HandleBuscarContribuinteDialog),
                    //   Width = "500px",
                    //   Height = "500px",
                });
        }


    }
    private async Task HandleBuscarContribuinteDialog(DialogResult result)
    {
        if (result.Cancelled)
        {
            return;
        }
        if (result.Data is not null)
        {

            if (tipoContribuinte == "Transmitente")
            {
                transmitente = result.Data as Contribuinte;
                transmitente = await contribuinteService.GetContribuinte(transmitente.ConCnpjcpf);
                if (transmitente != null)
                {
                    await ContribuinteFormDialog();
                }
                else
                {
                    await DialogService.ShowInfoAsync("Transmitente Não Encontrado, Adicione-o!");

                }

            }
            if (tipoContribuinte == "Adquirente")
            {
                adquirente = result.Data as Contribuinte;
                adquirente = await contribuinteService.GetContribuinte(adquirente.ConCnpjcpf);
                if (adquirente != null)
                {
                    await ContribuinteFormDialog();
                }
                else
                {
                    await DialogService.ShowInfoAsync("Adquirente Não Encontrado, Adicione-o!");

                }

            }
        }

        //await Task.Run(() => DemoLogger.WriteLine($"Dialog closed"));

    }
    private async Task ContribuinteFormDialog()
    {
        if (tipoContribuinte == "Transmitente")
        {


            await DialogService.ShowDialogAsync<ContribuinteFormDialog>(transmitente, new DialogParameters()
                {
                    Title = $"Cadastro de {tipoContribuinte}",
                    OnDialogResult = DialogService.CreateDialogCallback(this, HandleContribuinteFormDialog),
                    //  Width = "500px",
                    //  Height = "500px",
                });
        }
        if (tipoContribuinte == "Adquirente")
        {


            await DialogService.ShowDialogAsync<ContribuinteFormDialog>(adquirente, new DialogParameters()
                {
                    Title = $"Cadastro de {tipoContribuinte}",
                    OnDialogResult = DialogService.CreateDialogCallback(this, HandleContribuinteFormDialog),
                    //  Width = "500px",
                    //  Height = "500px",
                });
        }
    }
    private async Task HandleContribuinteFormDialog(DialogResult result)
    {
        if (result.Cancelled)
        {
            return;
        }
        if (result.Data is not null)
        {

            if (tipoContribuinte == "Adquirente")
            {

                adquirente = result.Data as Contribuinte;
                adquirentesList = new List<Contribuinte>();
                //  adquirentesList = adquirentes.ToList();
                // await Task.Run(() => DemoLogger.WriteLine($"Dialog closed by {simplePerson?.Firstname} {simplePerson?.Lastname} ({simplePerson?.Age})"));
                adquirente = await contribuinteService.GetContribuinte(adquirente.ConCnpjcpf);
                if (adquirente != null)
                {
                    adquirentesList.Add(adquirente);
                    adquirentes = adquirentesList.AsQueryable();
                    //await ContribuinteFormDialog();
                }
                else
                {
                    //await DialogService.ShowInfoAsync("Dilog com informações do Contribuinte");
                    await DialogService.ShowInfoAsync("Adquirente Não Encontrado, Adicione-o!");
                }
                return;
            }
            if (tipoContribuinte == "Transmitente")
            {

                transmitente = result.Data as Contribuinte;
                transmitentesList = new List<Contribuinte>();
                //   transmitentesList = adquirentes.ToList();
                // await Task.Run(() => DemoLogger.WriteLine($"Dialog closed by {simplePerson?.Firstname} {simplePerson?.Lastname} ({simplePerson?.Age})"));
                transmitente = await contribuinteService.GetContribuinte(transmitente.ConCnpjcpf);
                if (transmitente != null)
                {
                    transmitentesList.Add(transmitente);
                    // transmitentes = transmitentesList.AsQueryable();
                    //await ContribuinteFormDialog();
                }
                else
                {
                    //await DialogService.ShowInfoAsync("Dilog com informações do Contribuinte");
                    await DialogService.ShowInfoAsync("Transmitente Não Encontrado, Adicione-o!");
                }
                return;
            }
        }

        //await Task.Run(() => DemoLogger.WriteLine($"Dialog closed"));

    }


}
