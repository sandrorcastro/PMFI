@using System.ComponentModel.DataAnnotations
@implements IDialogContentComponent<ContribuinteEditDialog.RegisterContent>

<!-- Header -->
<FluentDialogHeader ShowDismiss="true">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Value="@(new Icons.Regular.Size24.WindowApps())" />
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

<!-- Body -->
<FluentDialogBody>
    <EditForm EditContext="@_editContext" FormName="contribuinte_register">
        <DataAnnotationsValidator />

        <FluentLabel Style="margin-bottom: 16px;">
            Digite o CPF/CNPJ desejado.
        </FluentLabel>

        <FluentTextField Name="register_cpfcnpj"
                         @bind-Value="@Content.cpfcnpj"
                         Label="CPF/CNPJ"
                         Required />
        

        <FluentTextField Name="register_nome"
                         @bind-Value="@Content.Nome"
                         Label="Nome"
                         Required />
        <FluentTextField Name="register_nomemeio"
                           @bind-Value="@Content.NomeMeio"
                           Label="Nome do Meio"
                           Required />

        <FluentTextField Name="register_sobrenome"
                           @bind-Value="@Content.SobreNome"
                           Label="SobreNome"
                           Required />

        <div style="color: var(--error);">
            <FluentValidationSummary />
        </div>
    </EditForm>
</FluentDialogBody>

<!-- Footer -->
<FluentDialogFooter>
    <FluentButton Appearance="Appearance.Accent"
                  Disabled="@(!_editContext.Validate())"
                  OnClick="@SaveAsync">
        Save
    </FluentButton>
    <FluentButton Appearance="Appearance.Neutral"
                  OnClick="@CancelAsync">
        Cancel
    </FluentButton>
</FluentDialogFooter>

@code
{
    private EditContext _editContext = default!;

    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    [Parameter]
    public ContribuinteEditDialog.RegisterContent Content { get; set; } = default!;

    protected override void OnInitialized()
    {
        _editContext = new EditContext(Content);
    }

    private async Task SaveAsync()
    {
        if (_editContext.Validate())
        {
            await Dialog.CloseAsync(Content);
        }
    }

    private async Task CancelAsync()
    {
        await Dialog.CancelAsync();
    }

    public record RegisterContent
    {
        //   public int Id = 0;
       
        public string cpfcnpj { get; set; } =  string.Empty;

        public string Nome { get; set; } = string.Empty;

        public string NomeMeio { get; set; } =string.Empty;

        public string SobreNome { get; set; } =string.Empty;

        
    }
}
