@page "/AutoDeclaracaojjj"
@using System.ComponentModel.DataAnnotations
@rendermode InteractiveServer
@inherits Microsoft.AspNetCore.Components.ComponentBase
@inject ITribEdificacoesAppService tribEdificacoAppService
@inject IDialogService DialogService

<FluentWizard StepperPosition="StepperPosition.Left"
              StepSequence="@WizardStepSequence.Visited"
              DisplayStepNumber="@(WizardStepStatus.Current | WizardStepStatus.Next)"
              Border="WizardBorder.Outside"
              StepTitleHiddenWhen="@GridItemHidden.XsAndDown"
              Height="auto"
              Style="min-height: 300px;"
              OnFinish="@OnFinishedAsync">
    <Steps>
        <FluentWizardStep Label="Inscrição"
                          OnChange="@(e=>OnStepChange1(e,editContext))">
            <FluentEditForm EditContext="editContext" FormName="inscricaoForm" OnValidSubmit="OnValidSubmit" OnInvalidSubmit="OnInvalidSubmit">
                <DataAnnotationsValidator />
                <FluentStack Orientation="Orientation.Vertical">
                    <FluentTextField Placeholder="Inscrição Imobiliária:" @bind-Value="autoDeclaracao.Imovel!.InscricaoImobiliaria" Required />
                     <ValidationMessage For="() => autoDeclaracao.Imovel!.InscricaoImobiliaria" />
                </FluentStack>
                <FluentValidationSummary style="color:darkred" />
            </FluentEditForm>
        </FluentWizardStep>
        <FluentWizardStep Label="Address Info"
                          OnChange="@OnStepChange">
            <FluentEditForm Model="_formData2" FormName="addressInfo" OnValidSubmit="OnValidSubmit" OnInvalidSubmit="OnInvalidSubmit">
                <DataAnnotationsValidator />
                <FluentStack Orientation="Orientation.Vertical">
                    <FluentTextField Placeholder="Address Line 1" @bind-Value="_formData2.AddressLine1" />
                    <FluentTextField Placeholder="Address Line 2" @bind-Value="_formData2.AddressLine2" />
                    <FluentTextField Placeholder="City" @bind-Value="_formData2.City" />
                    <FluentTextField Placeholder="State or Province" @bind-Value="_formData2.StateOrProvince" />
                    <FluentTextField Placeholder="Country" @bind-Value="_formData2.Country" />
                    <FluentTextField Placeholder="Postal Code" @bind-Value="_formData2.PostalCode" />
                </FluentStack>
                <FluentValidationSummary style="color:darkred" />
            </FluentEditForm>
        </FluentWizardStep>
        <FluentWizardStep Label="Set budget"
                          Summary="Identify the best price"
                          IconPrevious="@(new Icons.Filled.Size24.Star())"
                          IconCurrent="@(new Icons.Filled.Size24.StarEmphasis())"
                          IconNext="@(new Icons.Regular.Size24.Star())"
                          DisplayStepNumber="false"
                          OnChange="@OnStepChange">
            Phasellus quis augue convallis, congue velit ac, aliquam ex. In egestas porttitor massa
            aliquet porttitor. Donec bibendum faucibus urna vitae elementum. Phasellus vitae efficitur
            turpis, eget molestie ipsum.
            <FluentSelect Items="@(Enumerable.Range(10, 80).Select(i => i.ToString()))"
                          Style="min-width: 70px;"
                          Height="300px" />
        </FluentWizardStep>
        <FluentWizardStep Label="Finish">
            <FluentEditForm Model="_finishFormData" FormName="finishForm" OnValidSubmit="OnValidSubmit" OnInvalidSubmit="OnInvalidSubmit">
                <DataAnnotationsValidator />
                <FluentStack Orientation="Orientation.Vertical">
                    <FluentTextField Label="Signature" Placeholder="Type your signature" @bind-Value="_finishFormData.Signature" />
                </FluentStack>
                <FluentValidationSummary style="color:darkred" />
            </FluentEditForm>
        </FluentWizardStep>
    </Steps>
</FluentWizard>

<FluentOverlay @bind-Visible=@_overlayIsVisible
               Opacity="0.4"
               Alignment="Align.Center"
               Justification="@JustifyContent.Center">
    <FluentProgressRing />
</FluentOverlay>

@code
{

    public AutoDeclaracao autoDeclaracao { get; set; } = new AutoDeclaracao() { Imovel = new TribEdificaco() {InscricaoImobiliaria=string.Empty } } ;
    public DbSet<TribEdificaco> dbSet; 
    public IQueryable queryInscricao; 
    private EditContext? editContext;
    ////////////
    private FormData1 _formData1 = new FormData1();
    private FormData2 _formData2 = new FormData2();
    private FinishFormData _finishFormData = new FinishFormData();
    bool  _overlayIsVisible = false;
    async void OnStepChange(FluentWizardStepChangeEventArgs e)
    {
        
    }
    async void OnStepChange1(FluentWizardStepChangeEventArgs e, EditContext editContext)
    {
        if (!editContext.Validate())
        {
            // Bloquear a mudança de etapa se o formulário não for válido
            e.IsCancelled = true;
        }
        else
        {

            if (e.TargetIndex == 1)
            {
                _overlayIsVisible = true;
                await Task.Delay(2000);
                Domain.Specs.DBProsiga.EdificacaoByInscricaoImobiliariaSpec edificacaoSpec = new Domain.Specs.DBProsiga.EdificacaoByInscricaoImobiliariaSpec(autoDeclaracao.Imovel!.InscricaoImobiliaria.ToString().PadLeft(14, '0'));
                autoDeclaracao.Imovel = await tribEdificacoAppService.GetBySpecAsync(edificacaoSpec, CancellationToken.None);
                this._overlayIsVisible = false;
            }
        }
            _overlayIsVisible = false;
    }

    async Task OnFinishedAsync()
    {
        await DialogService.ShowInfoAsync("Wizard completed");
    }

    async Task OnValidSubmit()
    {
        //DemoLogger.WriteLine($"OnValidSubmit called");

        _overlayIsVisible = true;
        await Task.Delay(2000);
        _overlayIsVisible = false;
    }

    void OnInvalidSubmit()
    {
        //DemoLogger.WriteLine($"OnInvalidSubmit called");
    }

    private class FormData1
    {
        [Required]
        [MaxLength(3)]
        public string? FirstName { get; set; }

        [Required]
        [MinLength(10)]
        public string? LastName { get; set; }
    }
    protected override async void OnInitialized()
    {
        _overlayIsVisible = true;
        //Task.Delay(2000);
       // dbSet   = await  tribEdificacoAppService.GetDbSet();
        //queryInscricao = dbSet.Where(i => i.InscricaoImobiliaria == autoDeclaracao.Imovel!.InscricaoImobiliaria); //.AsNoTracking(); 
        //queryInscricao = dbSet.FirstOrDefaultAsync(i => i.InscricaoImobiliaria == autoDeclaracao.Imovel!.InscricaoImobiliaria); //.AsNoTracking();
        
        editContext = new EditContext(autoDeclaracao);
        _overlayIsVisible = false;
    }

    private class FormData2
    {
        [Required]
        public string? AddressLine1 { get; set; }

        public string? AddressLine2 { get; set; }

        [Required]
        public string? City { get; set; }

        [Required]
        public string? StateOrProvince { get; set; }

        [Required]
        public string? Country { get; set; }

        [Required]
        public string? PostalCode { get; set; }
    }

    private class FinishFormData
    {
        [Required]
        [MinLength(5)]
        public string? Signature { get; set; }
    }
}
