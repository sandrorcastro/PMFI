
@* @inherits Microsoft.AspNetCore.Components.ComponentBase *@
@using System.ComponentModel.DataAnnotations
@using Microsoft.FluentUI.AspNetCore.Components
@inject ITribItbidocumentoTipoAppService tribItbidocumentoTipoAppService
<!--
    @using ITBI.Services
    @implements IDialogContentComponent<IQueryable<Contribuinte>>
    @inject IContribuinteService contribuinteService
--> 
@inject IDialogService DialogService
@rendermode InteractiveServer

<FluentCard Justify="@JustifyContent.Center" >

   <FluentRadioGroup Required="true" aria-labelledby="label1" @bind-Value=tipotransferencia  @onchange="OnRadioChange" Name="tipo" Orientation="Orientation.Vertical" Label="TIPO DE TRANSFERÊNCIA:">
   
        <FluentRadio Value="@("COMPRA_VENDA")">Compra e Venda</FluentRadio>
        <FluentRadio Disabled="true" Value="@("Arrematação")" >Arrematação</FluentRadio>
        <FluentRadio Disabled="true" Value="@("Adjudicacao")">Adjudicação</FluentRadio>
        <FluentRadio Disabled="true" Value="@("Permuta")">Permuta</FluentRadio>
        <FluentRadio Disabled="true" Value="@("DivisaoAmigavel")">Divisão Amigável</FluentRadio>
        <FluentRadio Disabled="true" Value="@("CessaoDeDireitos")">Cessão De Direitos</FluentRadio>
        <FluentRadio Disabled="true" Value="@("Integralizacao Guia")">Integralização de Capital/Incorporação, Fusão, Cisão ou Extinção de Pessoa Jurídica- Emissão de Guia </FluentRadio>
        <FluentRadio Disabled="true" Value="@("Integralizacao Certidao")">Integralização de Capital/Incorporação, Fusão, Cisão ou Extinção de Pessoa Jurídica- Emissão de Certidão</FluentRadio>
        
    </FluentRadioGroup>

</FluentCard>
<FluentCard Justify="@JustifyContent.Center" AreaRestricted="false">
       <FluentStack Orientation="Orientation.Horizontal">
        <!--
                   <FluentSelect Position="SelectPosition.Below" @bind-Value="selectedModoCompra" TOption="string" Label="Imóvel Financiado?">
                    
                   <FluentSelect Position="SelectPosition.Below" ValueChanged="@(e => selectedModoCompra = e)"  TOption="string" Label="Imóvel Financiado?">
        -->
        <FluentSelect Position="SelectPosition.Below" @bind-Value="selectedOption" @onchange="@OnSelectChange" TOption="string" Label="Imóvel Financiado?">
            <FluentOption Value="Não" Selected="true">Não</FluentOption>
            <FluentOption Value="Financiamento Normal">Financiamento Normal</FluentOption>
            <FluentOption Value="Financiamento-Minha Casa Minha Vida">Financiamento-Minha Casa Minha Vida</FluentOption>
        
            
            <!-- 

            @foreach (var option in ParcelasOption)
            {
                <FluentOption Value="@option.Parcela.ToString()">@option.Parcela parcela(s) - @option.Valor.ToString("C", CultureInfo.GetCultureInfo("pt-BR"))</FluentOption>
            }
            -->
        </FluentSelect>
        @if (selectedOption=="Não")
        {
            <FluentTextField Required="true" @bind-Value=valordeclarado @onchange="OnTextFildChange" Placeholder="VALOR DECLARADO" />
            @if (mostraobservacaoValorDeclarado)
            {
                <FluentTextArea ReadOnly @bind-Value=observacaoValorDeclarado style="width: 100%;" />
            }
        }
        else if (selectedOption != "Não")
        {
            <FluentTextField Required="true" @bind-Value=valorfinanciado @onchange="OnTextFildChangeValorFinanciado" Placeholder="VALOR FINANCIADO" />
                <FluentTextField  Required="true" @bind-Value=valorRecursoProprio @onchange="OnTextFildChangeValorRecursoProprio" Placeholder="RECURSO PRÓPRIO" />
                <FluentTextField ReadOnly Required="true" @bind-Value=valordeclarado @onchange="OnTextFildChange" Placeholder="VALOR DECLARADO" />
        }
      </FluentStack>
</FluentCard>
<FluentCard Justify="@JustifyContent.Center">
    <FluentDataGrid Items=@AnexosOperacao.AsQueryable() TGridItem=Anexo>
        <PropertyColumn Title="Documento Obrigatório" Property="@(c => c!.Doc.ItbidsDocumento)" Sortable="true" Align=Align.Start />
        <PropertyColumn Title="Arquivo" Property="@(c => c!.nomearquivo)" Sortable="true" Align=Align.Start />
        <TemplateColumn Title="Ação" Sortable="true" Align=Align.Start>
            @{
                var anexo = context as Anexo;
                <FluentButton Appearance="Appearance.Outline" OnClick="()=>OpenFileSelector(anexo)" IconStart="GetIcon(anexo)"></FluentButton>
                <FluentInputFile @ref="@anexo.fluentInputFile"
                         
                                 DragDropZoneVisible="false"
                                 Mode="InputFileMode.Buffer"
                                 Multiple="true"
                                 MaximumFileSize="@(1000 * 1024 * 1024)"
                                 Accept="*/*" 
                                 OnInputFileChange="OnProgressChangeAsyncOperacao"
                                 OnCompleted="@OnCompleted" />
            }
        </TemplateColumn>
    </FluentDataGrid>
</FluentCard>
<FluentCard Justify="@JustifyContent.Center" >
        <FluentTextArea  @bind-Value=observacao Label="OBSERVAÇÕES:" style="width: 100%;"/>
</FluentCard>


@code {
    [Parameter]
    public TribEdificaco Content { get; set; } = default!;
    private Anexo currentAnexo;
    private Dictionary<string, bool> itemStates = new Dictionary<string, bool>();
    FluentInputFile? myFileByBuffer = default!;
    private string selectedOption { get; set; } = "Não";
    private bool isTextFieldDisabled { get; set; } = true;
    private string? selectedModoCompra { get; set; } = "Não";
    private string? tipotransferencia { get; set; } = "COMPRA_VENDA";
    private string? valordeclarado { get; set; }
    private string? valorfinanciado { get; set; }
    private string? valorRecursoProprio { get; set; }
    private string? observacao = "BASE DE CÁLCULO CONFORME VALOR DECLARADO. SE VERIFICADA DIVERGÊNCIA NO VALOR DECLARADO PELO CONTRIBUINTE INFORMAMOS QUE SERÁ ABERTO PROCEDIMENTO ADMINISTRATIVO FISCAL PARA APURAÇÃO DA BASE DE CÁLCULO CONFORME LEI COMPLEMENTAR 403/2023. PROT 54226/2024.";
    private string? observacaoValorDeclarado= "Você pode prosseguir! No entando estará sujeito a um Procedimento Administrativo, pois o Valor Declarado está abaixo do Valor Venal do Imóvel. ";
    private bool mostraobservacaoValorDeclarado = false;
    private bool enableValorDeclarado = false;
    private bool enableFinanciado = false;
    private decimal Uffi = 111.87m;
    private ValoresOperacao? valoresOperacao { get; set; } = new ValoresOperacao();
    public IQueryable<Anexo>? AnexosExigidosQ { get; set; }
    public List<Anexo>? AnexosOperacao;
    public IQueryable<TribItbidocumentoTipo>? docsExigidosQ { get; set; }
    [Parameter]
    public TribEdificaco? Imovel { get; set; }
    [Parameter]
    public EventCallback<string> TipoDeTransferenciaChanged { get; set; }
    [Parameter]
    public EventCallback<ValoresOperacao> ValoresOperacaoChanged { get; set; }
    [Parameter]
    public EventCallback<string> ObservacaoChanged { get; set; }
    [Parameter]
    public EventCallback<string> ValorDeclaradoChanged { get; set; }
    [Parameter]
    public EventCallback<ValoresOperacao> ValoresOperacao { get; set; }
    //public TribItbidocumentoTipoSpec tribItbidocumentoTipoSpec = new TribItbidocumentoTipoSpec("Operacao");
    [Parameter]
    public EventCallback<List<Anexo>> AnexosOperacaoChanged { get; set; }
    protected override async Task OnInitializedAsync()
    {
        /*   List<Anexo> listdoc = new List<Anexo>();
        var DbSetDocsExigidos = await tribItbidocumentoTipoAppService.GetDbSet();
        var QueryDocsExigidos = DbSetDocsExigidos.Where(d => d.ItbidsDocDescricao == "Operação");
        docsExigidosQ = QueryDocsExigidos.AsQueryable();
        foreach (var doc in docsExigidosQ)
            {
            listdoc.Add(new Anexo() { Doc = doc, carregado = false, nomearquivo = null });
        }
        //AnexosExigidosQ = listdoc.AsQueryable();
        AnexosOperacao = listdoc;
        */
        AnexosOperacao = await InsereDocsExigidosOperacao("OperaçãoNormal");
        AnexosOperacaoChanged.InvokeAsync(AnexosOperacao);
        //AnexosOperacao = new List<Anexo>();
        await base.OnInitializedAsync();
    }
    public  async Task<List<Anexo>> InsereDocsExigidosOperacao(string tipo)
    {
        List<Anexo> listdoc = new List<Anexo>();
        var DbSetDocsExigidos = await tribItbidocumentoTipoAppService.GetDbSet();
        var QueryDocsExigidos = DbSetDocsExigidos.Where(d => d.ItbidsDocDescricao == tipo);
        docsExigidosQ = QueryDocsExigidos.AsQueryable();
        foreach (var doc in docsExigidosQ)
        {
            listdoc.Add(new Anexo() { Doc = doc, carregado = false, nomearquivo = null });
        }
        //AnexosExigidosQ = listdoc.AsQueryable();
        //AnexosOperacao = listdoc;
        return listdoc;
    }
    public async Task  OnRadioChange(ChangeEventArgs e)
    {
        tipotransferencia = e.Value.ToString();
        await TipoDeTransferenciaChanged.InvokeAsync(tipotransferencia);
    }
    public async Task OnTextAreaChange(ChangeEventArgs e)
    {
        observacao = e.Value.ToString();
        await ObservacaoChanged.InvokeAsync(observacao);
    }
    public async Task OnTextFildChange(ChangeEventArgs e)
    {
        //if(valordeclarado==null)
        valordeclarado = e.Value.ToString();
        valoresOperacao.Financimanto = selectedOption;
        valoresOperacao.ValorDeclarado = decimal.Parse(valordeclarado);
        //valoresOperacao.ValorFinanciado = decimal.Parse(valorfinanciado);
        //valoresOperacao.ValorRecursoProprio = decimal.Parse(valorRecursoProprio);
        valoresOperacao.isFinanciado = selectedOption != "Não" ? true : false;

        // if (decimal.Parse(valordeclarado) <= Imovel.ValorVenalCalculo)
        // {
        //   mostraobservacaoValorDeclarado = true;
        // }
        await ValoresOperacaoChanged.InvokeAsync(valoresOperacao);
        await ValorDeclaradoChanged.InvokeAsync(valordeclarado);
        //await ValoresOperacao.InvokeAsync(new Models.ValoresOperacao() { ValorDeclarado=decimal.Parse(valordeclarado),ValorFinanciado=decimal.Parse() };
        if (decimal.TryParse(e.Value.ToString(), out decimal valorDecimal))
        {
            valordeclarado = valorDecimal.ToString("N2");
        }
    }
    public async Task OnTextFildChangeValorFinanciado(ChangeEventArgs e)
    {
        valorfinanciado = e.Value?.ToString();
        valordeclarado = valorfinanciado;

        valoresOperacao.Financimanto = selectedOption;
        valoresOperacao.ValorDeclarado = decimal.Parse(valordeclarado);
        valoresOperacao.ValorFinanciado = decimal.Parse(valorfinanciado);
        //valoresOperacao.ValorRecursoProprio = decimal.Parse(valorRecursoProprio);
        valoresOperacao.isFinanciado = selectedOption != "Não" ? true : false;
        await ValoresOperacaoChanged.InvokeAsync(valoresOperacao);
        await ValorDeclaradoChanged.InvokeAsync(valordeclarado);


    }
    public async Task OnTextFildChangeValorRecursoProprio(ChangeEventArgs e)
    {
        valorRecursoProprio = e.Value?.ToString();
        valordeclarado = (decimal.Parse(valorfinanciado) + decimal.Parse(valorRecursoProprio)).ToString();
        // valordeclarado = valorfinanciado;

        valoresOperacao.Financimanto = selectedOption;
        valoresOperacao.ValorDeclarado = decimal.Parse(valordeclarado);
        valoresOperacao.ValorFinanciado = decimal.Parse(valorfinanciado);
        valoresOperacao.ValorRecursoProprio = decimal.Parse(valorRecursoProprio);
        valoresOperacao.isFinanciado = selectedOption != "Não" ? true : false;
        await ValoresOperacaoChanged.InvokeAsync(valoresOperacao);
        await ValorDeclaradoChanged.InvokeAsync(valordeclarado);

    }
    private async void OnSelectChange(ChangeEventArgs e)
    {


        selectedOption = e.Value?.ToString();
        if (selectedOption == "Não")
        {
            AnexosOperacao = await InsereDocsExigidosOperacao("OperaçãoNormal");
        }
        if (selectedOption == "Financiamento Normal")
        {
            AnexosOperacao = await InsereDocsExigidosOperacao("OperaçãoComFinanciamento");
        }
        if (selectedOption == "Financiamento-Minha Casa Minha Vida")
        {
            AnexosOperacao = await InsereDocsExigidosOperacao("OperaçãoComFinanciamentoMinhaCasaMinhaVIda");
        }
        //AnexosOperacaoChanged.InvokeAsync(AnexosOperacao);
        StateHasChanged();
    }

    private async void OpenFileSelector(Anexo anexo)
    {
        if (anexo.carregado)
        {
            anexo.nomearquivo = string.Empty;
            anexo.nomeDEFINITIVO = string.Empty;
            anexo.carregado = false;
            anexo.InputFile = null;
            anexo.AnexoBf.Clear();
            anexo.pertenceA = null;
            await AnexosOperacaoChanged.InvokeAsync(AnexosOperacao);
            //await AnexoChanged.InvokeAsync(AnexosOperacao);



        }
        else
        {
            currentAnexo = anexo;
            //myFileByBuffer?.ShowFilesDialogAsync();
            currentAnexo.fluentInputFile.ShowFilesDialogAsync();
        }
        //await AnexosOperacaoChanged.InvokeAsync(AnexosOperacao);
        //StateHasChanged();
    }
    private Icon GetIcon(Anexo anexoselecionado)
    {
        // var result = Content.  .FirstOrDefault(a => a.pertenceA == anexoselecionado.pertenceA && a.Doc.ItbidsDocumento == anexoselecionado.Doc.ItbidsDocumento);
        //return result.carregado ? new Icons.Regular.Size24.SubtractSquare().WithColor(Color.Accent)
        return anexoselecionado.carregado ? new Icons.Regular.Size24.SubtractSquare().WithColor(Color.Accent)
          : new Icons.Regular.Size24.AddSquare().WithColor(Color.Accent);
    }
    async Task OnProgressChangeAsyncOperacao(InputFileChangeEventArgs file)
    {
        var inputFile = file.GetMultipleFiles();

        if (inputFile != null && currentAnexo != null)
        {
            foreach (var f in inputFile)
            {
                try
                {
                    var extensao = Path.GetExtension(f.Name);
                    var novoNomeArquivo = $"{currentAnexo.Doc.ItbidocId}-{Content.InscricaoImobiliaria.Trim().PadLeft(14, '0')}{extensao}";
                    var arquivoExistente = currentAnexo.AnexoBf.FirstOrDefault(bf => bf.Name == f.Name);
                    if (arquivoExistente == null)
                    {
                        currentAnexo.nomeDEFINITIVO = novoNomeArquivo;
                        currentAnexo.nomearquivo = f.Name;
                        currentAnexo.carregado = true;
                        //currentAnexo.AnexoBf = f;
                        currentAnexo.AnexoBf.Add(f);
                        currentAnexo.browserFile = f;
                        currentAnexo.pertenceA = Content.InscricaoImobiliaria;
                        //currentAnexo.InputFile = f;
                        //currentAnexo.fluentInputFile = file.GetMultipleFiles();
                        //var indiceAdquirente = await ObterIndiceAdquirente(currentAdquirente);
                        var indiceAnexo = await ObterIndiceAnexo(currentAnexo);
                        if (indiceAnexo >= 0)
                        {
                            AnexosOperacao[indiceAnexo] = currentAnexo;
                        }
                        await AnexosOperacaoChanged.InvokeAsync(AnexosOperacao);
                        StateHasChanged();
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error processing file {f.Name}: {ex.Message}");
                }
            }
        }

    }
    public async Task<int> ObterIndiceAnexo(Anexo anexoChanged)
    {

        var indiceAnexo =  await Task.FromResult(AnexosOperacao.FindIndex(a => a.Doc.ItbidsDocumento == anexoChanged.Doc.ItbidsDocumento));
        if (indiceAnexo >= 0)
        {
            return indiceAnexo;
            
        }
        return -1;
    }

    void OnCompleted(IEnumerable<FluentInputFileEventArgs> files)
    {
        //progressPercent = myFileByBuffer!.ProgressPercent;
        //progressTitle = myFileByBuffer!.ProgressTitle;

        // For the demo, delete these files.
        //foreach (var file in Files)
       // {
         //   File.Delete(file.Value);
        //}
    }

   
}
