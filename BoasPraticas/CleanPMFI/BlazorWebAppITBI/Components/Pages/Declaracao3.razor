@page "/declaracao3"
@using BlazorWebAppITBI.MetaData
@using BlazorWebAppITBI.Models
@using System.Text;

@inherits Microsoft.AspNetCore.Components.ComponentBase
@rendermode InteractiveServer
@inject IDialogService DialogService
@inject ITribEdificacoesAppService edificacoesAppService
@inject ITribITBIAppService itbiAppService
@inject ITribITBIEdifAppService itbiEdifAppService
@inject ITribITBICompradoresAppService itbiCimpradoresAppService
@inject ITribITBIVendedoresAppService itbiVendedoresAppService

@inject IAutoNumAnoNumeroAppService autoNumANoNumeroAppService
@inject IAutoNumEntidadesAppService autoNumEntidadesAppService
@inject ITribITBIAppService tribITBIAppService
@inject ITribITBIEdifAppService tribITBIEdifAppService
@inject ITribITBICompradoresAppService tribITBICompradoresAppService
@inject ITribITBIVendedoresAppService tribITBIVendedoresAppService
@inject ITribDividasImoAppService tribDividasImoAppService
@inject ITribComposicaoDivImoAppService tribComposicaoDivImoAppService



<h1>Página de Declaração ITBI</h1>
<FluentWizard StepperPosition="StepperPosition.Left"
              StepSequence="@WizardStepSequence.Visited"
              DisplayStepNumber="@(WizardStepStatus.Current  | WizardStepStatus.Next)"
              Border="WizardBorder.Outside"
              StepTitleHiddenWhen="@GridItemHidden.XsAndDown"
              Height="auto"
              Style="min-height: 300px;"
              OnFinish="@OnFinishedAsync">
    <Steps>
        <FluentWizardStep Label="Inscrição Imobiliária:"
                        OnChange="@(e=>OnStepChange1(e,editContext))">
            <FluentEditForm EditContext="editContext" FormName="imovelInfo" OnValidSubmit="OnValidSubmit" OnInvalidSubmit="OnInvalidSubmit">
                <DataAnnotationsValidator />
                <FluentStack Orientation="Orientation.Vertical">
                    <FluentTextField Placeholder="Inscrição Imobiliária" @bind-Value="Imovel!.InscricaoImobiliaria" Required />
                    <ValidationMessage For="() => Imovel!.InscricaoImobiliaria" />
                </FluentStack>
                <FluentValidationSummary style="color:darkred" />
            </FluentEditForm>
        </FluentWizardStep>
        <FluentWizardStep Label="Informações do Imóvel"
                          OnChange="@OnStepChange">
            <FluentEditForm Model="Imovel" FormName="imovelInfo" OnValidSubmit="OnValidSubmit" OnInvalidSubmit="OnInvalidSubmit">
                <DataAnnotationsValidator />
                <FluentStack Orientation="Orientation.Vertical">
                    <ImovelForm Content="Imovel" />
                 <!-- 
                 <EnderecoForm Content="Imovel.Lograd" Bairro="@(Imovel.IdloteamentoNavigation.Descricao ?? " ")" Numero="@(Imovel.EdifNumeracao ?? " ")" />
                  --> 
                </FluentStack>
                <FluentValidationSummary style="color:darkred" />
            </FluentEditForm>
        </FluentWizardStep>
         <FluentWizardStep Label="Transmitentes"
                          OnChange="(e=>OnStepChange2(e,editContext2))">
            <FluentEditForm EditContext="editContext2" FormName="transmitenteInfo" OnValidSubmit="OnValidSubmit" OnInvalidSubmit="OnInvalidSubmit">
                <DataAnnotationsValidator />
                <FluentStack Orientation="Orientation.Vertical">
                    <TransmitentesForm3 Content="Transmitentes" ListaDeTransmitentes=@ListaDeTransmitentes ListaDeTransmitentesChanged="HandleListaDeTransmitentesChanged" />
                     <ValidationMessage For="() => ListaDeTransmitentes" />
                </FluentStack>
                <FluentValidationSummary style="color:darkred" />
            </FluentEditForm>
        </FluentWizardStep>
         <FluentWizardStep Label="Adquirentes"
                          OnChange="(e=>OnStepChange3(e,editContext3))">
            <FluentEditForm EditContext="editContext3" FormName="adquirentesInfo" OnValidSubmit="OnValidSubmit" OnInvalidSubmit="OnInvalidSubmit">
                <DataAnnotationsValidator />
                <FluentStack Orientation="Orientation.Vertical">
                    <AdquirentesForm3 ListaDeAdquirentes=@ListaDeAdquirentes ListaDeAdquirentesChanged ="HandleListaDeAdquirentesChanged" />
                </FluentStack>
                <FluentValidationSummary style="color:darkred" />
            </FluentEditForm>
        </FluentWizardStep>
       <FluentWizardStep Label="Transação Imobiliária"
                        
                          IconPrevious="@(new Icons.Filled.Size24.Star())"
                          IconCurrent="@(new Icons.Filled.Size24.StarEmphasis())"
                          IconNext="@(new Icons.Regular.Size24.Star())"
                          DisplayStepNumber="false"
                          OnChange="@OnStepChange">
           
            <FluentEditForm Model="Imovel" FormName="transãcaoInfo" OnValidSubmit="OnValidSubmit" OnInvalidSubmit="OnInvalidSubmit">
                <DataAnnotationsValidator />
                <FluentStack Orientation="Orientation.Vertical">
                    <OperacaoForm TipoDeTransferenciaChanged="HandleTipoDeTransferenciaChanged" ObservacaoChanged="HandleObservacaoChanged"  ValorDeclaradoChanged="HandleValorDeclaradoChanged" />
                </FluentStack>
                <FluentValidationSummary style="color:darkred" />
            </FluentEditForm>


           <!--  

                   <FluentSelect Items="@(Enumerable.Range(10, 80).Select(i => i.ToString()))"
                                  Style="min-width: 70px;"
                                  Height="300px" />
           --> 
        </FluentWizardStep>
         <FluentWizardStep Label="Emitir Guia"
                          OnChange="@OnStepChange">
           
                    <LegislacaoForm  ValorDeclarado=@ValorDeclarado AutoNumAnoNumero="HandleAutoNumAnoNumero" ValorDeclaradoChanged="HandleValorDeclaradoChanged" />
                
        </FluentWizardStep>
   

   <FluentWizardStep Label="Fim">
       <FluentEditForm Model="Imovel" FormName="adquirentesInfo" OnValidSubmit="OnValidSubmit" OnInvalidSubmit="OnInvalidSubmit">
                <DataAnnotationsValidator />
                <FluentStack Orientation="Orientation.Vertical">
                    
            </FluentStack>
                <FluentValidationSummary style="color:darkred" />
            </FluentEditForm>
        </FluentWizardStep>
    
    </Steps>
</FluentWizard>

<FluentOverlay @bind-Visible=@_overlayIsVisible
               Opacity="0.4"
               Alignment="Align.Center"
               Justification="@JustifyContent.Center">
    <FluentProgressRing />
</FluentOverlay>
@code{
    public string? Inscricao { get; set; } = string.Empty;
    // [MetadataType(typeof(ImovelMetaData))]
    public TribEdificaco? Imovel { get; set; } = new TribEdificaco() 
        {
            InscricaoImobiliaria=string.Empty,
            Lograd = new Logradouro(),
            Terreno = new TribTerreno(),
            IdloteamentoNavigation = new Loteamento(),
            TribEdificacoesContribs = new List<TribEdificacoesContrib>()
        };
    private EditContext? editContext;
    private EditContext? editContext2;
    private EditContext? editContext3;
    public List<Transmitente>? ListaDeTransmitentes = new List<Transmitente>();
    public List<Adquirente>? ListaDeAdquirentes = new List<Adquirente>();
    public AutoNumAnoNumero? AutoNumAnoNumero {get;set;}= new AutoNumAnoNumero();
    public AutoNumEntidade? AutoNumEntidade { get; set; } = new AutoNumEntidade();
    public TribItbi? TribItbi { get; set; } = new TribItbi();
    public TribItbiedif? TribItbiEdif { get; set; } = new TribItbiedif();
    public TribItbicompradore? TribItbiCompradores { get; set; } = new TribItbicompradore();
    public TribItbivendedore? TribItbiVendedores { get; set; } = new TribItbivendedore();
    public TribDividasImo TribDividasImo { get; set; } = new TribDividasImo();
    public TribComposicaoDivImo TribComposicaoDivImo { get; set; } = new TribComposicaoDivImo();
    public int ITBINumero { get; set; } = 0;
    public long ITBIID { get; set; } = 0;
    public long ITBIEdifID { get; set; } = 0;
    public long ImoIDDivida { get; set; } = 0;

    private IQueryable<TribEdificacoesContrib>? Transmitentes;
    public string? TipoDeTransferencia { get; set; } = "COMPRA_VENDA"; // string.Empty;
    public string? Observacao = string.Empty;
    public string? ObservacaoITBI = string.Empty;
    public string? ObservacaoIBTIEdif = string.Empty;
    public string? ValorDeclarado = string.Empty;
    public string? TxITBI = "0,02";// string.Empty;
    public Domain.Specs.DBProsiga.EdificacaoByInscricaoImobiliariaSpec edificacaoSpec;
    private bool _overlayIsVisible = false;
    async Task OnStepChange1(FluentWizardStepChangeEventArgs e, EditContext editContext)
    {

        if (!editContext.Validate())
        {
            // Bloquear a mudança de etapa se o formulário não for válido
            e.IsCancelled = true;
        }
        else
        {

            if (e.TargetIndex == 1)
            {
                _overlayIsVisible = true;
                await Task.Delay(2000);
                edificacaoSpec = new Domain.Specs.DBProsiga.EdificacaoByInscricaoImobiliariaSpec(Imovel.InscricaoImobiliaria.ToString().PadLeft(14, '0'));
                Imovel = await edificacoesAppService.GetBySpecAsync(edificacaoSpec, CancellationToken.None);
                //  if(Imovel == null)
                // {
                //    await DialogService.ShowInfoAsync("Inscrição Informada Não Existe");
                //  e.IsCancelled = true;
                // _overlayIsVisible = false;
                //return;
                //}
                Transmitentes = Imovel.TribEdificacoesContribs?.AsQueryable();
                //await InsereDeclaracao();
                _overlayIsVisible = false;
            }
        }
    }
    async Task OnStepChange2(FluentWizardStepChangeEventArgs e, EditContext editContext)
    {
        if (ListaDeTransmitentes.Count() == 0)
        {
            e.IsCancelled = true;
        }
        else
        {
            if (!editContext2.Validate())
            {
                // Bloquear a mudança de etapa se o formulário não for válido
                e.IsCancelled = true;
            }
        }
    }
    async Task OnStepChange3(FluentWizardStepChangeEventArgs e, EditContext editContext)
    {
        if (ListaDeAdquirentes.Count() == 0)
        {
            e.IsCancelled = true;
        }
        else
        {
            if (!editContext3.Validate())
            {
                // Bloquear a mudança de etapa se o formulário não for válido
                e.IsCancelled = true;
            }
        }
    }
    async Task OnStepChange(FluentWizardStepChangeEventArgs e)
    {
        //DilogService($"Go to step {e.TargetLabel} (#{e.TargetIndex})");
        // await DialogService.ShowInfoAsync($"Go to step {e.TargetLabel} (#{e.TargetIndex})");
        //if (!editContext.Validate())
        //{
        // Bloquear a mudança de etapa se o formulário não for válido
        //  e.IsCancelled = true;
        //}
        //  if (!editContext.Validate())
        //{
        // Bloquear a mudança de etapa se o formulário não for válido
        // e.IsCancelled=true; // = true;


        if (e.TargetIndex == 1)
        {
            _overlayIsVisible = true;
            await Task.Delay(2000);
            edificacaoSpec = new Domain.Specs.DBProsiga.EdificacaoByInscricaoImobiliariaSpec(Imovel.InscricaoImobiliaria.ToString().PadLeft(14, '0'));
            Imovel = await edificacoesAppService.GetBySpecAsync(edificacaoSpec, CancellationToken.None);
            //  if(Imovel == null)
            // {
            //    await DialogService.ShowInfoAsync("Inscrição Informada Não Existe");
            //  e.IsCancelled = true;
            // _overlayIsVisible = false;
            //return;
            //}
            Transmitentes = Imovel.TribEdificacoesContribs?.AsQueryable();
            //await InsereDeclaracao();
            _overlayIsVisible = false;
        }
    }
    private async Task PegaNovosIds(){
        AutoNumAnoNumero = await autoNumANoNumeroAppService.GetMaxAutoNumAnoNumero(2024, "ITBI");
        ITBINumero = (int) AutoNumAnoNumero.AutNumero;
        AutoNumEntidade = await autoNumEntidadesAppService.GetMaxAutoNumEntidade("TRIBITBI");
        ITBIID = AutoNumEntidade.AutNumId;
        AutoNumEntidade = await autoNumEntidadesAppService.GetMaxAutoNumEntidade("TRIBITBIEDIF");
        ITBIEdifID = AutoNumEntidade.AutNumId;
        AutoNumEntidade = await autoNumEntidadesAppService.GetMaxAutoNumEntidade("TribDividasImo");
        ImoIDDivida = AutoNumEntidade.AutNumId;
    }
    private async Task InsereNovoITBI(){
        TribItbi.Itbiid = ITBIID;
        TribItbi.ItbidataLanc = DateTime.Now.Date;
        TribItbi.Itbiobservacao = ObservacaoITBI;
        TribItbi.ItbiusuarioInclusao = null;
        TribItbi.ItbidataInclusao = DateTime.Now;
        TribItbi.Itbinumero = ITBINumero;
        TribItbi.Itbiano = DateTime.Now.Date.Year;
        TribItbi.ItbidsTipo = TipoDeTransferencia;
        TribItbi.ConId = null;
        TribItbi.ItbidsAlerta = "Atenção - ITBI";
        await tribITBIAppService.AddAsync(TribItbi, CancellationToken.None);

    }
    private async Task InsereDivida(){
        TribDividasImo.ImoIddivida = ImoIDDivida;
        TribDividasImo.EdificacaoId = Imovel.EdificacaoId;
        TribDividasImo.ImoDivAno = DateTime.Now.Date.Year;
        TribDividasImo.TipoTribId = 79;
        TribDividasImo.ImoDivSubDivida = 0;
        TribDividasImo.ImoDivParcela = 0;
        TribDividasImo.ImoDivVencimento = DateTime.Now.Date.AddDays(180);
        //   TribDividasImo.ImoDivDataGeracao = DateTime.Now;
        TribDividasImo.ImoDivTipoDivida = 1;
        TribDividasImo.ImoDivDataBloqCorrecao = null;
        TribDividasImo.ImoDivDataBloqJuros=null;
        TribDividasImo.ImoDivDataBloqMulta = null;
        TribDividasImo.ImoDivVlrUltimaCorrecao = 0; //  decimal.Parse(ValorDeclarado) * decimal.Parse(TxITBI);
        TribDividasImo.ImoDivDataUltimaCorrecao = null; // DateTime.Now.Date;
        TribDividasImo.ImoDivOrigemLancamento = "Automática";
        TribDividasImo.ImoDivParcelaUnica = "Não";
        TribDividasImo.TipoBxId = 1;
        TribDividasImo.ImoDivMes =  DateTime.Now.Month;
        TribDividasImo.ImoDivDataBaixa = null;
        //    TribDividasImo.ImoDivValorHistorico = decimal.Parse(ValorDeclarado) * decimal.Parse(TxITBI);
        //  TribDividasImo.ImoDivValorBaixa = 0;
        TribDividasImo.UsuarioInclusao = "Sandro.src"; // null;
                                                       //  TribDividasImo.ImoDivMotivoBaixa = "";
                                                       //  TribDividasImo.ImoDivObs = null;
                                                       //  TribDividasImo.ImoDivTipoLancamentoIptu = "";
                                                       //  TribDividasImo.ImoDivQtdeBaixas = null;
        TribDividasImo.AutoInfrId = null;
        //  TribDividasImo.ImoDivBxVlrJuros = null;
        //  TribDividasImo.ImoDivBxVlrMulta = null;
        //  TribDividasImo.ImoDivBxVlrCorrecao = null;
        //  TribDividasImo.ImoDivBxVlrDesconto = null;
        //  TribDividasImo.ImoDivBxVlrMultaDa = null;
        //  TribDividasImo.ImoDivDescDivida = null;
        TribDividasImo.ImoDivSaiBoleto = "Sim";
        TribDividasImo.Idmoeda = 1;// null; //1;
                                   //   TribDividasImo.EdiId = null;
        TribDividasImo.ImoDivValor = decimal.Parse(ValorDeclarado) * decimal.Parse(TxITBI);
        //  TribDividasImo.Multa = null;
        //  TribDividasImo.Juros = null;
        //  TribDividasImo.Correcao = null;
        //  TribDividasImo.MultaDividaAtiva = null;
        //  TribDividasImo.DataCalculo=null;
        //  TribDividasImo.ImoDivValorBkp = null;
        TribDividasImo.ImoDivExcluido = null;
        await tribDividasImoAppService.AddAsync(TribDividasImo, CancellationToken.None);


    }
    private async Task InsereComposicaoDivida(){
        TribComposicaoDivImo.ImoIddivida = ImoIDDivida;
        TribComposicaoDivImo.TipoTribId = 79;
        TribComposicaoDivImo.CompDivImoValor = decimal.Parse(ValorDeclarado) * decimal.Parse(TxITBI);
        await tribComposicaoDivImoAppService.AddAsync(TribComposicaoDivImo, CancellationToken.None);

    }
    private async Task InsereNovoITBIEdif(){
        TribItbiEdif.ItbiedifId = ITBIEdifID;
        TribItbiEdif.Itbiid = ITBIID;
        TribItbiEdif.EdificacaoId = Imovel.EdificacaoId;
        TribItbiEdif.ImoIddivida = ImoIDDivida;
        TribItbiEdif.ItbiedifPercTransacao = decimal.Parse(TxITBI);
        TribItbiEdif.ItbiedifAreaConstr = Imovel.EdifAreaConstruida;
        TribItbiEdif.ItbiedifVlrVenalIptu = Imovel.ValorVenalCalculo;
        TribItbiEdif.ItbiedifVlrDeclarado = decimal.Parse(ValorDeclarado);
        TribItbiEdif.ItbiedifFinanciado = "Não";
        TribItbiEdif.ItbiedifBaseCalcFin = 0;
        TribItbiEdif.ItbiedifAliqFinanc = 0;
        TribItbiEdif.ItbiedifVlrDevido = decimal.Parse(ValorDeclarado) * decimal.Parse(TxITBI);             ///
        TribItbiEdif.ItbiedifDataVenc = DateTime.Now.Date.AddDays(180);
        TribItbiEdif.ItbiedifAnoDiv = DateTime.Now.Date.Year;
        TribItbiEdif.ItbiedifSubDivida = 0;
        TribItbiEdif.ItbiedifMesDivida = DateTime.Now.Date.Month;
        TribItbiEdif.ItbiedifParc=0;
        TribItbiEdif.TipoTribId = 79;
        //TribItbiEdif.ItbiedifTipoConstrucao;          ///
        //TribItbiEdif.ItbiedifObservacao               ///
        TribItbiEdif.ItbiedifBaseCalcImovel = decimal.Parse(ValorDeclarado); 
        TribItbiEdif.ItbisomaEconomias = null;
        TribItbiEdif.Itbiendereco = null;
        TribItbiEdif.ItbiinscIncra = null;
        TribItbiEdif.ItbiareaTotalImo = null;
        TribItbiEdif.ConIddivida=null;
        TribItbiEdif.Matricula = Imovel.EdifMatricula;
        TribItbiEdif.ItbiedifPercTransmitir = 100;      ///
        TribItbiEdif.ItbiedifDtMinhaCasa = null;
        TribItbiEdif.InscricaoImobiliaria = Imovel.InscricaoImobiliaria;
        TribItbiEdif.PStrEdifEnderecoCompleto = "nulo por enquanto";    /////
        TribItbiEdif.EdifMatricula = Imovel.EdifMatricula;
        TribItbiEdif.EdifCaracteristica = Imovel.EdifCaracteristica;
        TribItbiEdif.TerrenoId = Imovel.TerrenoId;
        TribItbiEdif.Idloteamento = Imovel.Idloteamento;
        TribItbiEdif.QuadraLoteamento = Imovel.Terreno.QuadraLoteamento;                ///
        TribItbiEdif.Loteamento = Imovel.Terreno.Loteamento;   /// Imovel.Idloteamento;   ///
        TribItbiEdif.TerrReferenciaAnterior = Imovel.Terreno.TerrReferenciaAnterior;       ///
        TribItbiEdif.InscricaoImobiliariaGeo = "";
        TribItbiEdif.TerrAreaTerreno = Imovel.Terreno.TerrAreaTerreno;
        TribItbiEdif.LoteLoteamento = Imovel.Terreno.LoteLoteamento;           ////
        TribItbiEdif.QuadraId = Imovel.Terreno.QuadraId;                 //////
       // TribItbiEdif.PStredifBairro = Imovel.;               ////
        TribItbiEdif.AreaAbertaCoberta = Imovel.Terreno.AreaAbertaCoberta;            ////
        TribItbiEdif.LogradId = Imovel.LogradId;             /////
        TribItbiEdif.DenoId = Imovel.DenoId;                ///
        TribItbiEdif.EdifNumeracao = Imovel.EdifNumeracao;
        TribItbiEdif.EdifComplemento = Imovel.EdifComplemento;
        TribItbiEdif.EdifAndarConstrucao = Imovel.EdifAndarConstrucao;
        TribItbiEdif.EdifBloco = Imovel.EdifBloco;
        TribItbiEdif.EdifNumAptoSalaLoja = Imovel.EdifNumAptoSalaLoja;
        TribItbiEdif.EdifAreaCoberta = Imovel.EdifAreaCoberta;
        await tribITBIEdifAppService.AddAsync(TribItbiEdif, CancellationToken.None);

    }
    private async Task InsereCompradores(){
        if (ListaDeAdquirentes.Count > 0)
        {
            foreach (var adquirente in ListaDeAdquirentes)
            {
                await tribITBICompradoresAppService.AddAsync(new TribItbicompradore()
                    {
                        ItbiedifId = ITBIEdifID,
                        ConId = adquirente.Contribuinte.ConId,
                        ImprimeNaGuia = "Sim"

                    }, CancellationToken.None);
            }
        }
    }
    private async Task InsereVendedores(){
        //  TribItbiVendedores.ItbiedifId = ITBIEdifID;
        if(ListaDeTransmitentes.Count>0){
            // await tribITBIVendedoresAppService.DeleteAsync(TribItbiVendedores, CancellationToken.None);
            foreach (var transmitente in ListaDeTransmitentes)
            {

                //TribItbiVendedores.ItbiedifId = ITBIEdifID;
                //TribItbiVendedores.ConId = transmitente.Contribuinte.ConId;
                //TribItbiVendedores.ImprimeNaGuia = "Sim";
                await tribITBIVendedoresAppService.AddAsync(new TribItbivendedore()
                {
                        ItbiedifId = ITBIEdifID,
                        ConId = transmitente.Contribuinte.ConId,
                        ImprimeNaGuia = "Sim"

                }, CancellationToken.None);
            }
        }
    }
    private async Task InsereDeclaracao(){
        await PegaNovosIds();
        await InsereNovoITBI();
        await InsereDivida();
        await InsereComposicaoDivida();
        await InsereNovoITBIEdif();
        await InsereCompradores();
        await InsereVendedores();
    }
    private async void HandleAutoNumAnoNumero()
    {
        // AutoNumAnoNumero = await autoNumANoNumeroAppService.GetMaxAutoNumAnoNumero(2024,"ITBI");
        ///  AutoNumAnoNumeroSpec autoNumAnoNumeroSpec = new Domain.Specs.DBProsiga.AutoNumAnoNumeroSpec(2024,"ITBI");

        ///AutoNumAnoNumero = await autoNumANoNumeroAppService.GetBySpecAsync(autoNumAnoNumeroSpec, CancellationToken.None);
        /// AutoNumAnoNumero = await autoNumANoNumeroAppService.ProjectToFirstOrDefaultAsync<AutoNumAnoNumero>(autoNumAnoNumeroSpec, CancellationToken.None);
        //AutoNumAnoNumero = await autoNumANoNumeroAppService.
        //AutoNumAnoNumero = await autoNumANoNumeroAppService.GetMaxAutoNumAnoNumero(2024, "ITBI");
        _overlayIsVisible = true;
        await InsereDeclaracao();
        _overlayIsVisible = false;

    }

    private void HandleListaDeTransmitentesChanged(List<Transmitente> listaAtualizada)
    {
        ListaDeTransmitentes = listaAtualizada;

        StringBuilder sbITBI = new StringBuilder(ObservacaoITBI);
        sbITBI.AppendLine("Transmitentes: ");
        if (ListaDeTransmitentes.Count > 0)
        {
            foreach (var transmitente in ListaDeTransmitentes)
            {
                //sbITBI.AppendLine(transmitente.Contribuinte.ConCnpjcpf.ToString() + "-" + transmitente.Contribuinte.ConNome + " Transmite: " + transmitente.percentualtransmitido + "|");
                sbITBI.AppendLine(transmitente.Contribuinte.ConCnpjcpf.ToString() + "Transmite: " + transmitente.percentualtransmitido + "|");
            }
        }
        ObservacaoITBI = sbITBI.ToString();
    }
    private void HandleListaDeAdquirentesChanged(List<Adquirente> listaAtualizada)
    {
        ListaDeAdquirentes = listaAtualizada;

        StringBuilder sbITBI = new StringBuilder(ObservacaoITBI);
        sbITBI.AppendLine("Adquirentes: ");
        if (ListaDeAdquirentes.Count > 0)
        {
            foreach (var adquirente in ListaDeAdquirentes)
            {
                // sbITBI.AppendLine(adquirente.Contribuinte.ConCnpjcpf.ToString() + "-" + adquirente.Contribuinte.ConNome + " Transmite: " + adquirente.percentualAdquirido + " || ");
                sbITBI.AppendLine(adquirente.Contribuinte.ConCnpjcpf.ToString()  + " Transmite: " + adquirente.percentualAdquirido + " || ");
            }
        }
        ObservacaoITBI = sbITBI.ToString();
    }
    private void HandleTipoDeTransferenciaChanged(string tipodetransferencia)
    {
        TipoDeTransferencia = tipodetransferencia;
        StringBuilder sbITBI = new StringBuilder(ObservacaoITBI);
        sbITBI.AppendLine("Tipo de Transação: " + TipoDeTransferencia );
        ObservacaoITBI = sbITBI.ToString();
    }
    private void HandleObservacaoChanged(string observacao)
    {
        Observacao = observacao;
    }
    private void HandleValorDeclaradoChanged(string valordeclarado)
    {
        //ValorDeclarado = valordeclarado;
        if (decimal.TryParse(valordeclarado.ToString(), out decimal valorDecimal))
        {
            ValorDeclarado = valorDecimal.ToString("N2");
        }
    }
    protected override void OnInitialized()
    {
        //DialogService.ShowInfoAsync("Iniciando!");
        // Imovel = new TribEdificaco();
        //   s1 = new Domain.Specs.EdificacaoByInscricaoImobiliariaSpec(Imovel.InscricaoImobiliaria.ToString().PadLeft(14,'0'));
        
        ////var validator = new TribEdificacoesValidator();
       editContext = new EditContext(Imovel);
        editContext2 = new EditContext(ListaDeTransmitentes);
        editContext3 = new EditContext(ListaDeAdquirentes);
      //  edificacaoSpec = new Domain.Specs.DBProsiga.EdificacaoByInscricaoImobiliariaSpec(Imovel?.InscricaoImobiliaria.ToString().PadLeft(14, '0'));
        //editContext. .AddFluentValidation(validator);

    }
    async Task OnValidSubmit()
    {
        //DemoLogger.WriteLine($"OnValidSubmit called");

        _overlayIsVisible = true;
        await Task.Delay(2000);
        _overlayIsVisible = false;
    }
    void OnInvalidSubmit()
    {
        //  DemoLogger.WriteLine($"OnInvalidSubmit called");
    }
    private async Task HandleNextClick()
    {
        if (editContext.Validate())
        {
            // Move to the next step
            await GoToNextStep();
        }
        else
        {
            // Show validation errors
        }
    }
    private async Task GoToNextStep()
    {
        // Implement the logic to move to the next step
    }
    async Task OnFinishedAsync()
    {
        await DialogService.ShowInfoAsync("Wizard completed");
    }
    private bool ImovelIsValid()
    {
        var validationResults = new List<ValidationResult>();
        var context = new ValidationContext(Imovel);
        return Validator.TryValidateObject(Imovel, context, validationResults, true);
    }
   

}

