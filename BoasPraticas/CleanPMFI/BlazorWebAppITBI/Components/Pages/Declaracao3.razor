@page "/declaracao3"
@using BlazorWebAppITBI.Models
@inherits Microsoft.AspNetCore.Components.ComponentBase
@rendermode InteractiveServer
@inject IDialogService DialogService
@inject ITribEdificacoesAppService edificacoesAppService
@inject ITribITBIAppService itbiAppService
@inject ITribITBIEdifAppService itbiEdifAppService
@inject ITribITBICompradoresAppService itbiCimpradoresAppService
@inject ITribITBIVendedoresAppService itbiVendedoresAppService

@inject IAutoNumAnoNumeroAppService autoNumANoNumeroAppService
@inject IAutoNumEntidadesAppService autoNumEntidadesAppService
@inject ITribITBIAppService tribITBIAppService
@inject ITribITBIEdifAppService tribITBIEdifAppService
@inject ITribITBICompradoresAppService tribITBICompradoresAppService
@inject ITribITBIVendedoresAppService tribITBIVendedoresAppService
@inject ITribDividasImoAppService tribDividasImoAppService
@inject ITribComposicaoDivImoAppService tribComposicaoDivImoAppService



<h1>Pagina de Declaração ITBI</h1>
<FluentWizard StepperPosition="StepperPosition.Left"
              StepSequence="@WizardStepSequence.Visited"
              DisplayStepNumber="@(WizardStepStatus.Current  | WizardStepStatus.Next)"
              Border="WizardBorder.Outside"
              StepTitleHiddenWhen="@GridItemHidden.XsAndDown"
              Height="auto"
              Style="min-height: 300px;"
              OnFinish="@OnFinishedAsync">
    <Steps>
        <FluentWizardStep Label="Inscrição Imobiliária:"
                          OnChange="@OnStepChange">
            <FluentEditForm Model="Imovel" FormName="imovelInfo" OnValidSubmit="OnValidSubmit" OnInvalidSubmit="OnInvalidSubmit">
                <DataAnnotationsValidator />
                <FluentStack Orientation="Orientation.Vertical">
                    <FluentTextField Placeholder="Inscrição Imobiliária" @bind-Value="Imovel!.InscricaoImobiliaria" />
                </FluentStack>
                <FluentValidationSummary style="color:darkred" />
            </FluentEditForm>
        </FluentWizardStep>
        <FluentWizardStep Label="Informações do Imóvel"
                          OnChange="@OnStepChange">
            <FluentEditForm Model="Imovel" FormName="imovelInfo" OnValidSubmit="OnValidSubmit" OnInvalidSubmit="OnInvalidSubmit">
                <DataAnnotationsValidator />
                <FluentStack Orientation="Orientation.Vertical">
                    <ImovelForm Content="Imovel" />
                 <!-- 
                 <EnderecoForm Content="Imovel.Lograd" Bairro="@(Imovel.IdloteamentoNavigation.Descricao ?? " ")" Numero="@(Imovel.EdifNumeracao ?? " ")" />
                  --> 
                </FluentStack>
                <FluentValidationSummary style="color:darkred" />
            </FluentEditForm>
        </FluentWizardStep>
         <FluentWizardStep Label="Transmitentes"
                          OnChange="@OnStepChange">
            <FluentEditForm Model="Imovel" FormName="transmitenteInfo" OnValidSubmit="OnValidSubmit" OnInvalidSubmit="OnInvalidSubmit">
                <DataAnnotationsValidator />
                <FluentStack Orientation="Orientation.Vertical">
                    <TransmitentesForm3 Content="Transmitentes" ListaDeTransmitentes=@ListaDeTransmitentes ListaDeTransmitentesChanged="HandleListaDeTransmitentesChanged" />
                </FluentStack>
                <FluentValidationSummary style="color:darkred" />
            </FluentEditForm>
        </FluentWizardStep>
         <FluentWizardStep Label="Adquirentes"
                          OnChange="@OnStepChange">
            <FluentEditForm Model="Imovel" FormName="adquirentesInfo" OnValidSubmit="OnValidSubmit" OnInvalidSubmit="OnInvalidSubmit">
                <DataAnnotationsValidator />
                <FluentStack Orientation="Orientation.Vertical">
                    <AdquirentesForm3 ListaDeAdquirentes=@ListaDeAdquirentes ListaDeAdquirentesChanged ="HandleListaDeAdquirentesChanged" />
                </FluentStack>
                <FluentValidationSummary style="color:darkred" />
            </FluentEditForm>
        </FluentWizardStep>
       <FluentWizardStep Label="Transação Imobiliária"
                        
                          IconPrevious="@(new Icons.Filled.Size24.Star())"
                          IconCurrent="@(new Icons.Filled.Size24.StarEmphasis())"
                          IconNext="@(new Icons.Regular.Size24.Star())"
                          DisplayStepNumber="false"
                          OnChange="@OnStepChange">
           
            <FluentEditForm Model="Imovel" FormName="transãcaoInfo" OnValidSubmit="OnValidSubmit" OnInvalidSubmit="OnInvalidSubmit">
                <DataAnnotationsValidator />
                <FluentStack Orientation="Orientation.Vertical">
                    <OperacaoForm TipoDeTransferenciaChanged="HandleTipoDeTransferenciaChanged" ObservacaoChanged="HandleObservacaoChanged"  ValorDeclaradoChanged="HandleValorDeclaradoChanged" />
                </FluentStack>
                <FluentValidationSummary style="color:darkred" />
            </FluentEditForm>


           <!--  

                   <FluentSelect Items="@(Enumerable.Range(10, 80).Select(i => i.ToString()))"
                                  Style="min-width: 70px;"
                                  Height="300px" />
           --> 
        </FluentWizardStep>
         <FluentWizardStep Label="Emitir Guia"
                          OnChange="@OnStepChange">
           
                    <LegislacaoForm  ValorDeclarado=@ValorDeclarado AutoNumAnoNumero="HandleAutoNumAnoNumero" ValorDeclaradoChanged="HandleValorDeclaradoChanged" />
                
        </FluentWizardStep>
   

   <FluentWizardStep Label="Fim">
       <FluentEditForm Model="Imovel" FormName="adquirentesInfo" OnValidSubmit="OnValidSubmit" OnInvalidSubmit="OnInvalidSubmit">
                <DataAnnotationsValidator />
                <FluentStack Orientation="Orientation.Vertical">
                    
            </FluentStack>
                <FluentValidationSummary style="color:darkred" />
            </FluentEditForm>
        </FluentWizardStep>
    
    </Steps>
</FluentWizard>

<FluentOverlay @bind-Visible=@_overlayIsVisible
               Opacity="0.4"
               Alignment="Align.Center"
               Justification="@JustifyContent.Center">
    <FluentProgressRing />
</FluentOverlay>
@code{
    public string? Inscricao { get; set; } = string.Empty;
    public TribEdificaco? Imovel { get; set; } = new TribEdificaco() 
        {
            Lograd = new Logradouro(),
            Terreno = new TribTerreno(),
            IdloteamentoNavigation = new Loteamento(),
            TribEdificacoesContribs = new List<TribEdificacoesContrib>()
        };
    public List<Transmitente>? ListaDeTransmitentes = new List<Transmitente>();
    public List<Adquirente>? ListaDeAdquirentes = new List<Adquirente>();
    public AutoNumAnoNumero? AutoNumAnoNumero {get;set;}= new AutoNumAnoNumero();
    public AutoNumEntidade? AutoNumEntidade { get; set; } = new AutoNumEntidade();
    public TribItbi? TribItbi { get; set; } = new TribItbi();
    public TribItbiedif? TribItbiEdif { get; set; } = new TribItbiedif();
    public TribItbicompradore? TribItbiCompradores { get; set; } = new TribItbicompradore();
    public TribItbivendedore? TribItbiVendedores { get; set; } = new TribItbivendedore();
    public TribDividasImo TribDividasImo { get; set; } = new TribDividasImo();
    public TribComposicaoDivImo TribComposicaoDivImo { get; set; } = new TribComposicaoDivImo();
    public int ITBINumero { get; set; } = 0;
    public long ITBIID { get; set; } = 0;
    public long ITBIEdifID { get; set; } = 0;
    public long ImoIDDivida { get; set; } = 0;

    private IQueryable<TribEdificacoesContrib>? Transmitentes;
    public string? TipoDeTransferencia = string.Empty;
    public string? Observacao = string.Empty;
    public string? ValorDeclarado = "150000,00";// string.Empty;
    public string? TxITBI = "0,02";// string.Empty;
    public Domain.Specs.DBProsiga.EdificacaoByInscricaoImobiliariaSpec edificacaoSpec;
    private bool _overlayIsVisible = false;
    async Task OnStepChange(FluentWizardStepChangeEventArgs e)
    {
        //DilogService($"Go to step {e.TargetLabel} (#{e.TargetIndex})");
        // await DialogService.ShowInfoAsync($"Go to step {e.TargetLabel} (#{e.TargetIndex})");
        if (e.TargetIndex == 1)
        {
            _overlayIsVisible = true;
            await Task.Delay(2000);
            edificacaoSpec = new Domain.Specs.DBProsiga.EdificacaoByInscricaoImobiliariaSpec(Imovel.InscricaoImobiliaria.ToString().PadLeft(14, '0'));
            Imovel = await edificacoesAppService.GetBySpecAsync(edificacaoSpec, CancellationToken.None);
            Transmitentes = Imovel.TribEdificacoesContribs?.AsQueryable();
            //O que está abaixo é para falicilar- Excluir depois

            AutoNumAnoNumero = await autoNumANoNumeroAppService.GetMaxAutoNumAnoNumero(2024, "ITBI");
            ITBINumero = (int) AutoNumAnoNumero.AutNumero;
            AutoNumEntidade = await autoNumEntidadesAppService.GetMaxAutoNumEntidade("TRIBITBI");
            ITBIID = AutoNumEntidade.AutNumId;
            AutoNumEntidade = await autoNumEntidadesAppService.GetMaxAutoNumEntidade("TRIBITBIEDIF");
            ITBIEdifID = AutoNumEntidade.AutNumId;
            AutoNumEntidade = await autoNumEntidadesAppService.GetMaxAutoNumEntidade("TribDividasImo");
            ImoIDDivida = AutoNumEntidade.AutNumId;

            TribItbi.Itbiid = ITBIID;
            TribItbi.ItbidataLanc = DateTime.Now.Date;
            TribItbi.Itbiobservacao = "Teste";
            TribItbi.ItbiusuarioInclusao = null;
            TribItbi.ItbidataInclusao = DateTime.Now;
            TribItbi.Itbinumero = ITBINumero;
            TribItbi.Itbiano = DateTime.Now.Date.Year;
            TribItbi.ItbidsTipo = "COMPRA_VENDA";
            TribItbi.ConId = null;
            TribItbi.ItbidsAlerta = "Atenção - ITBI";
            await tribITBIAppService.AddAsync(TribItbi, CancellationToken.None);

            TribDividasImo.ImoIddivida = ImoIDDivida;
            TribDividasImo.EdificacaoId = Imovel.EdificacaoId;
            TribDividasImo.ImoDivAno = DateTime.Now.Date.Year;
            TribDividasImo.TipoTribId = 79;
            TribDividasImo.ImoDivSubDivida = 0;
            TribDividasImo.ImoDivParcela = 0;
            TribDividasImo.ImoDivVencimento = DateTime.Now.Date.AddDays(180);
            //   TribDividasImo.ImoDivDataGeracao = DateTime.Now;
            TribDividasImo.ImoDivTipoDivida = 1;
            TribDividasImo.ImoDivDataBloqCorrecao = null;
            TribDividasImo.ImoDivDataBloqJuros=null;
            TribDividasImo.ImoDivDataBloqMulta = null;
            TribDividasImo.ImoDivVlrUltimaCorrecao = 0; //  decimal.Parse(ValorDeclarado) * decimal.Parse(TxITBI);
            TribDividasImo.ImoDivDataUltimaCorrecao = null; // DateTime.Now.Date;
            TribDividasImo.ImoDivOrigemLancamento = "Automática";
            TribDividasImo.ImoDivParcelaUnica = "Não";
            TribDividasImo.TipoBxId = 1;
            TribDividasImo.ImoDivMes =  DateTime.Now.Month;
            TribDividasImo.ImoDivDataBaixa = null;
            //    TribDividasImo.ImoDivValorHistorico = decimal.Parse(ValorDeclarado) * decimal.Parse(TxITBI);
            //  TribDividasImo.ImoDivValorBaixa = 0;
            TribDividasImo.UsuarioInclusao = "Sandro.src"; // null;
                                                           //  TribDividasImo.ImoDivMotivoBaixa = "";
                                                           //  TribDividasImo.ImoDivObs = null;
                                                           //  TribDividasImo.ImoDivTipoLancamentoIptu = "";
                                                           //  TribDividasImo.ImoDivQtdeBaixas = null;
            TribDividasImo.AutoInfrId = null;
            //  TribDividasImo.ImoDivBxVlrJuros = null;
            //  TribDividasImo.ImoDivBxVlrMulta = null;
            //  TribDividasImo.ImoDivBxVlrCorrecao = null;
            //  TribDividasImo.ImoDivBxVlrDesconto = null;
            //  TribDividasImo.ImoDivBxVlrMultaDa = null;
            //  TribDividasImo.ImoDivDescDivida = null;
            TribDividasImo.ImoDivSaiBoleto = "Sim";
            TribDividasImo.Idmoeda = 1;// null; //1;
                                       //   TribDividasImo.EdiId = null;
            TribDividasImo.ImoDivValor = decimal.Parse(ValorDeclarado) * decimal.Parse(TxITBI);
            //  TribDividasImo.Multa = null;
            //  TribDividasImo.Juros = null;
            //  TribDividasImo.Correcao = null;
            //  TribDividasImo.MultaDividaAtiva = null;
            //  TribDividasImo.DataCalculo=null;
            //  TribDividasImo.ImoDivValorBkp = null;
            TribDividasImo.ImoDivExcluido = null;
            await tribDividasImoAppService.AddAsync(TribDividasImo, CancellationToken.None);

            TribComposicaoDivImo.ImoIddivida = ImoIDDivida;
            TribComposicaoDivImo.TipoTribId = 79;
            TribComposicaoDivImo.CompDivImoValor = decimal.Parse(ValorDeclarado) * decimal.Parse(TxITBI);
            await tribComposicaoDivImoAppService.AddAsync(TribComposicaoDivImo, CancellationToken.None);

            TribItbiEdif.ItbiedifId = ITBIEdifID;
            TribItbiEdif.Itbiid = ITBIID;
            TribItbiEdif.EdificacaoId = Imovel.EdificacaoId;
            TribItbiEdif.ImoIddivida = ImoIDDivida;
            TribItbiEdif.ItbiedifPercTransacao = 2;
            TribItbiEdif.ItbiedifAreaConstr = Imovel.EdifAreaConstruida;
            TribItbiEdif.ItbiedifVlrVenalIptu = Imovel.ValorVenalCalculo;
            TribItbiEdif.ItbiedifVlrDeclarado = decimal.Parse(ValorDeclarado);
            TribItbiEdif.ItbiedifFinanciado = "Não";
            TribItbiEdif.ItbiedifBaseCalcFin = 0;
            TribItbiEdif.ItbiedifAliqFinanc = 0;
            TribItbiEdif.ItbiedifVlrDevido = decimal.Parse(ValorDeclarado) * decimal.Parse(TxITBI);             ///
            TribItbiEdif.ItbiedifDataVenc = DateTime.Now.Date.AddDays(180);
            TribItbiEdif.ItbiedifAnoDiv = DateTime.Now.Date.Year;
            TribItbiEdif.ItbiedifSubDivida = 0;
            TribItbiEdif.ItbiedifMesDivida = DateTime.Now.Date.Month;
            TribItbiEdif.ItbiedifParc=0;
            TribItbiEdif.TipoTribId = 79;
            //TribItbiEdif.ItbiedifTipoConstrucao;          ///
            //TribItbiEdif.ItbiedifObservacao               ///
            TribItbiEdif.ItbiedifBaseCalcImovel = decimal.Parse(ValorDeclarado); 
            TribItbiEdif.ItbisomaEconomias = null;
            TribItbiEdif.Itbiendereco = null;
            TribItbiEdif.ItbiinscIncra = null;
            TribItbiEdif.ItbiareaTotalImo = null;
            TribItbiEdif.ConIddivida=null;
            TribItbiEdif.Matricula = Imovel.EdifMatricula;
            TribItbiEdif.ItbiedifPercTransmitir = 100;      ///
            TribItbiEdif.ItbiedifDtMinhaCasa = null;
            TribItbiEdif.InscricaoImobiliaria = Imovel.InscricaoImobiliaria;
            TribItbiEdif.PStrEdifEnderecoCompleto = "nulo por enquanto";    /////
            TribItbiEdif.EdifMatricula = Imovel.EdifMatricula;
            TribItbiEdif.EdifCaracteristica = Imovel.EdifCaracteristica;
            TribItbiEdif.TerrenoId = Imovel.TerrenoId;
            TribItbiEdif.Idloteamento = Imovel.Idloteamento;
            TribItbiEdif.QuadraLoteamento = null;                ///
            TribItbiEdif.Loteamento = Imovel.Idloteamento;   ///
            TribItbiEdif.TerrReferenciaAnterior = "Verificar de onde é isso";       ///
            TribItbiEdif.InscricaoImobiliariaGeo = "";
            TribItbiEdif.TerrAreaTerreno = Imovel.Terreno.TerrAreaTerreno;
            TribItbiEdif.LoteLoteamento = "";           ////
            TribItbiEdif.QuadraId = 0;                 //////
            TribItbiEdif.PStredifBairro = "";               ////
            TribItbiEdif.AreaAbertaCoberta = Imovel.EdifAreaCoberta;            ////
            TribItbiEdif.LogradId = Imovel.LogradId;             /////
            TribItbiEdif.DenoId = 0;                ///
            TribItbiEdif.EdifNumeracao = Imovel.EdifNumeracao;
            TribItbiEdif.EdifComplemento = Imovel.EdifComplemento;
            TribItbiEdif.EdifAndarConstrucao = Imovel.EdifAndarConstrucao;
            TribItbiEdif.EdifBloco = Imovel.EdifBloco;
            TribItbiEdif.EdifNumAptoSalaLoja = Imovel.EdifNumAptoSalaLoja;
            TribItbiEdif.EdifAreaCoberta = Imovel.EdifAreaCoberta;
            await tribITBIEdifAppService.AddAsync(TribItbiEdif, CancellationToken.None);


            TribItbiCompradores.ItbiedifId = ITBIEdifID;
            TribItbiCompradores.ConId = 1120830;
            TribItbiCompradores.ImprimeNaGuia = "Sim";
            await tribITBICompradoresAppService.AddAsync(TribItbiCompradores, CancellationToken.None);

            TribItbiVendedores.ItbiedifId = ITBIEdifID;
            TribItbiVendedores.ConId = 13277;
            TribItbiVendedores.ImprimeNaGuia = "Sim";
            await tribITBIVendedoresAppService.AddAsync(TribItbiVendedores, CancellationToken.None);









            // ITBIEdifDataVenc ITBIEdifAnoDiv ITBIEdifSubDivida ITBIEdifMesDivida ITBIEdifParc TipoTribID ITBIEdifTipoConstrucao ITBIEdifObservacao ITBIEdifBaseCalcImovel ITBISomaEconomias ITBIEndereco ITBIInscIncra ITBIAreaTotalImo ConIDDivida Matricula ITBIEdifPercTransmitir ITBIEdifDtMinhaCasa InscricaoImobiliaria pStrEdifEnderecoCompleto EdifMatricula EdifCaracteristica TerrenoID IDLoteamento QuadraLoteamento Loteamento TerrReferenciaAnterior InscricaoImobiliariaGEO TerrAreaTerreno LoteLoteamento QuadraID pStredifBairro AreaAbertaCoberta LogradID DenoID EdifNumeracao EdifComplemento EdifAndarConstrucao EdifAreaConstruida EdifBloco EdifNumAptoSalaLoja EdifAreaCoberta
        //22  14  10992   6800362 2,00    0,00    1162,81 3500,00 Não 0,00    0,00    70,00   2004 - 03 - 03 00:00:00.000 2004    0   2   0   79          0,00    NULL NULL    NULL NULL    NULL NULL    NULL NULL    06516190384001  RUA: MARIAPOLIS, Nº 132 - LOTEAMENTO JARDIM JASMIM, NAO INFORMADO  66117   Predial 10992   281     0   A MESMA     250,11      886 LOTEAMENTO JARDIM JASMIM    250,11  1745    0   132     NULL    0,00    NULL NULL    NULL







        //AutoNumAnoNumero = await autoNumANoNumeroAppService.GetMaxAutoNumAnoNumero(2024,"ITBI");
            ///  AutoNumAnoNumeroSpec autoNumAnoNumeroSpec = new Domain.Specs.DBProsiga.AutoNumAnoNumeroSpec(2024,"ITBI");
            /// AutoNumAnoNumero = await autoNumANoNumeroAppService.GetBySpecAsync(autoNumAnoNumeroSpec, CancellationToken.None);
            /// 


            ///////////////////////////////////////////////////////
            _overlayIsVisible = false;
            /*if(Imovel == null)
            {
            // await DialogService.ShowInfoAsync("Inscrição Informada Não Existe");
            e.IsCancelled = true;

            return;
            }*/
            //           Transmitentes = Imovel.TribEdificacoesContribs?.AsQueryable();
            /*   if(Imovel != null)
            {
            await DialogService.ShowInfoAsync("imovel Encontrado");
            } else
            {
            await DialogService.ShowInfoAsync("Imóvel Não Encontrado");

        }*/
        }

    }
    private async void HandleAutoNumAnoNumero()
    {
        // AutoNumAnoNumero = await autoNumANoNumeroAppService.GetMaxAutoNumAnoNumero(2024,"ITBI");
        ///  AutoNumAnoNumeroSpec autoNumAnoNumeroSpec = new Domain.Specs.DBProsiga.AutoNumAnoNumeroSpec(2024,"ITBI");

        ///AutoNumAnoNumero = await autoNumANoNumeroAppService.GetBySpecAsync(autoNumAnoNumeroSpec, CancellationToken.None);
        /// AutoNumAnoNumero = await autoNumANoNumeroAppService.ProjectToFirstOrDefaultAsync<AutoNumAnoNumero>(autoNumAnoNumeroSpec, CancellationToken.None);
        //AutoNumAnoNumero = await autoNumANoNumeroAppService.
        //AutoNumAnoNumero = await autoNumANoNumeroAppService.GetMaxAutoNumAnoNumero(2024, "ITBI");

           
    }
    private void HandleListaDeTransmitentesChanged(List<Transmitente> listaAtualizada)
    {
        ListaDeTransmitentes = listaAtualizada;
    }
    private void HandleListaDeAdquirentesChanged(List<Adquirente> listaAtualizada)
    {
        ListaDeAdquirentes = listaAtualizada;
    }
    private void HandleTipoDeTransferenciaChanged(string tipodetransferencia)
    {
        TipoDeTransferencia = tipodetransferencia;
    }
    private void HandleObservacaoChanged(string observacao)
    {
        Observacao = observacao;
    }
    private void HandleValorDeclaradoChanged(string valordeclarado)
    {
        //ValorDeclarado = valordeclarado;
        if (decimal.TryParse(valordeclarado.ToString(), out decimal valorDecimal))
        {
            ValorDeclarado = valorDecimal.ToString("N2");
        }
    }
    protected override void OnInitialized()
    {
        //DialogService.ShowInfoAsync("Iniciando!");
        // Imovel = new TribEdificaco();
        //   s1 = new Domain.Specs.EdificacaoByInscricaoImobiliariaSpec(Imovel.InscricaoImobiliaria.ToString().PadLeft(14,'0'));


    }
    async Task OnValidSubmit()
    {
        //DemoLogger.WriteLine($"OnValidSubmit called");

        _overlayIsVisible = true;
        await Task.Delay(2000);
        _overlayIsVisible = false;
    }
    void OnInvalidSubmit()
    {
        //  DemoLogger.WriteLine($"OnInvalidSubmit called");
    }
    async Task OnFinishedAsync()
    {
        await DialogService.ShowInfoAsync("Wizard completed");
    }
   

}

