@page "/declaracao3"
@using BlazorWebAppITBI.MetaData
@using BlazorWebAppITBI.Models
@using System.Text;

@inherits Microsoft.AspNetCore.Components.ComponentBase
@rendermode InteractiveServer
@inject IDialogService DialogService
@inject ITribEdificacoesAppService edificacoesAppService
@inject ITribITBIAppService itbiAppService
@inject ITribITBIEdifAppService itbiEdifAppService
@inject ITribITBICompradoresAppService itbiCimpradoresAppService
@inject ITribITBIVendedoresAppService itbiVendedoresAppService

@inject IAutoNumAnoNumeroAppService autoNumANoNumeroAppService
@inject IAutoNumEntidadesAppService autoNumEntidadesAppService
@inject ITribITBIAppService tribITBIAppService
@inject ITribITBIEdifAppService tribITBIEdifAppService
@inject ITribITBICompradoresAppService tribITBICompradoresAppService
@inject ITribITBIVendedoresAppService tribITBIVendedoresAppService
@inject ITribDividasImoAppService tribDividasImoAppService
@inject ITribComposicaoDivImoAppService tribComposicaoDivImoAppService
@inject IConvenioBancoAppService ConvenioBancoAppService
@inject ITribBoletoAppService tribBoletoAppService
@inject ITribBoletosDividasAppService tribBoletosDividasAppService
@inject ITribBoletosBarraAppService tribBoletosBarraAppService
@inject ITribObjetoAppService tribObjetoAppService
@inject ITribItbiexAnexoAppService tribItbiexAnexoAppService
<h1>Página de Declaração ITBI</h1>
<FluentWizard StepperPosition="StepperPosition.Left"
              StepSequence="@WizardStepSequence.Visited"
              DisplayStepNumber="@(WizardStepStatus.Current  | WizardStepStatus.Next)"
              Border="WizardBorder.Outside"
              StepTitleHiddenWhen="@GridItemHidden.XsAndDown"
              Height="auto"
              Style="min-height: 300px;"
              OnFinish="@OnFinishedAsync">
    <Steps>
        <FluentWizardStep Label="Inscrição Imobiliária:"
                        OnChange="@(e=>OnStepChange1(e,editContext))">
            <FluentEditForm EditContext="editContext" FormName="imovelInfo" OnValidSubmit="OnValidSubmit" OnInvalidSubmit="OnInvalidSubmit">
                <DataAnnotationsValidator />
                <FluentStack Orientation="Orientation.Vertical">
                    <FluentTextField Placeholder="Inscrição Imobiliária" @bind-Value="Imovel!.InscricaoImobiliaria" Required />
                    <ValidationMessage For="() => Imovel!.InscricaoImobiliaria" />
                </FluentStack>
                <FluentValidationSummary style="color:darkred" />
            </FluentEditForm>
        </FluentWizardStep>
        <FluentWizardStep Label="Informações do Imóvel"
                          OnChange="@OnStepChange">
            <FluentEditForm Model="Imovel" FormName="imovelInfo" OnValidSubmit="OnValidSubmit" OnInvalidSubmit="OnInvalidSubmit">
                <DataAnnotationsValidator />
                <FluentStack Orientation="Orientation.Vertical">
                    <ImovelForm Content="Imovel" AnexosImovelChanged="HandleAnexosImovelChanged" />
                 <!-- 
                 <EnderecoForm Content="Imovel.Lograd" Bairro="@(Imovel.IdloteamentoNavigation.Descricao ?? " ")" Numero="@(Imovel.EdifNumeracao ?? " ")" />
                  --> 
                </FluentStack>
                <FluentValidationSummary style="color:darkred" />
            </FluentEditForm>
        </FluentWizardStep>
         <FluentWizardStep Label="Transmitentes"
                          OnChange="(e=>OnStepChange2(e,editContext2))">
            <FluentEditForm EditContext="editContext2" FormName="transmitenteInfo" OnValidSubmit="OnValidSubmit" OnInvalidSubmit="OnInvalidSubmit">
                <DataAnnotationsValidator />
                <FluentStack Orientation="Orientation.Vertical">
                    <TransmitentesForm3 Content="Transmitentes" ListaDeTransmitentes=@ListaDeTransmitentes ListaDeTransmitentesChanged="HandleListaDeTransmitentesChanged" />
                     <ValidationMessage For="() => ListaDeTransmitentes" />
                </FluentStack>
                <FluentValidationSummary style="color:darkred" />
            </FluentEditForm>
        </FluentWizardStep>
         <FluentWizardStep Label="Adquirentes"
                          OnChange="(e=>OnStepChange3(e,editContext3))">
            <FluentEditForm EditContext="editContext3" FormName="adquirentesInfo" OnValidSubmit="OnValidSubmit" OnInvalidSubmit="OnInvalidSubmit">
                <DataAnnotationsValidator />
                <FluentStack Orientation="Orientation.Vertical">
                    <AdquirentesForm3 ListaDeAdquirentes=@ListaDeAdquirentes ListaDeAdquirentesChanged ="HandleListaDeAdquirentesChanged" />
                </FluentStack>
                <FluentValidationSummary style="color:darkred" />
            </FluentEditForm>
        </FluentWizardStep>
       <FluentWizardStep Label="Transação Imobiliária"
                        
                          IconPrevious="@(new Icons.Filled.Size24.Star())"
                          IconCurrent="@(new Icons.Filled.Size24.StarEmphasis())"
                          IconNext="@(new Icons.Regular.Size24.Star())"
                          DisplayStepNumber="false"
                          OnChange="@OnStepChange">
           
            <FluentEditForm Model="Imovel" FormName="transãcaoInfo" OnValidSubmit="OnValidSubmit" OnInvalidSubmit="OnInvalidSubmit">
                <DataAnnotationsValidator />
                <FluentStack Orientation="Orientation.Vertical">
                    <OperacaoForm ValoresOperacaoChanged="HandleValoresOperacaoChanged" Imovel="Imovel" TipoDeTransferenciaChanged="HandleTipoDeTransferenciaChanged" ObservacaoChanged="HandleObservacaoChanged"  ValorDeclaradoChanged="HandleValorDeclaradoChanged" />
                </FluentStack>
                <FluentValidationSummary style="color:darkred" />
            </FluentEditForm>


           <!--  

                   <FluentSelect Items="@(Enumerable.Range(10, 80).Select(i => i.ToString()))"
                                  Style="min-width: 70px;"
                                  Height="300px" />
           --> 
        </FluentWizardStep>
         <FluentWizardStep Label="Emitir Guia"
                          OnChange="@OnStepChange">
           
                    <LegislacaoForm ValoresOperacao="ValoresOperacao" ValoresOperacaoChanged="HandleValoresOperacaoChanged" ValorDeclarado=@ValorDeclarado AutoNumAnoNumero="HandleAutoNumAnoNumero" ValorDeclaradoChanged="HandleValorDeclaradoChanged"  ParcelaOptionSelecionadaChanged="HandleParcelaOptionSelecionadaChanged"/>
                
        </FluentWizardStep>
         <FluentWizardStep Label="Guia"
                          OnChange="@OnStepChange">

                    <Guia/>

        </FluentWizardStep>
   

   <FluentWizardStep Label="Fim">
       <FluentEditForm Model="Imovel" FormName="adquirentesInfo" OnValidSubmit="OnValidSubmit" OnInvalidSubmit="OnInvalidSubmit">
                <DataAnnotationsValidator />
                <FluentStack Orientation="Orientation.Vertical">
                    
            </FluentStack>
                <FluentValidationSummary style="color:darkred" />
            </FluentEditForm>
        </FluentWizardStep>
    
    </Steps>
</FluentWizard>

<FluentOverlay @bind-Visible=@_overlayIsVisible
               Opacity="0.4"
               Alignment="Align.Center"
               Justification="@JustifyContent.Center">
    <FluentProgressRing />
</FluentOverlay>
@code{
    //Dim objGeraBoleto As New vbFEBRABAN.cBoletoFEBRABAN;
    /// <summary>
    /// 
    /// </summary>
    //public vbFEBRABAN.cBoletoFEBRABAN objGeraBoleto = new vbFEBRABAN.cBoletoFEBRABAN();
    //public Tribuno.Boletos.Boleto objBol = new Tribuno.Boletos.Boleto();


    public string? Inscricao { get; set; } = string.Empty;
    // [MetadataType(typeof(ImovelMetaData))]
    public TribEdificaco? Imovel { get; set; } = new TribEdificaco() 
        {
            InscricaoImobiliaria=string.Empty,
            Lograd = new Logradouro(),
            Terreno = new TribTerreno(),
            IdloteamentoNavigation = new Loteamento(),
            TribEdificacoesContribs = new List<TribEdificacoesContrib>()
        };

    public ParcelasOption? ParcelaOptionSelecionada { get; set; }
    private EditContext? editContext;
    private EditContext? editContext2;
    private EditContext? editContext3;
    public List<Transmitente>? ListaDeTransmitentes = new List<Transmitente>();
    public List<Adquirente>? ListaDeAdquirentes = new List<Adquirente>();
    public AutoNumAnoNumero? AutoNumAnoNumero {get;set;}= new AutoNumAnoNumero();
    public AutoNumEntidade? AutoNumEntidade { get; set; } = new AutoNumEntidade();
    public TribItbi? TribItbi { get; set; } = new TribItbi();
    public TribItbiedif? TribItbiEdif { get; set; } = new TribItbiedif();
    public TribItbicompradore? TribItbiCompradores { get; set; } = new TribItbicompradore();
    public TribItbivendedore? TribItbiVendedores { get; set; } = new TribItbivendedore();
    public TribDividasImo TribDividasImo { get; set; } = new TribDividasImo();
    public TribComposicaoDivImo TribComposicaoDivImo { get; set; } = new TribComposicaoDivImo();
    public int ITBINumero { get; set; } = 0;
    public long ITBIID { get; set; } = 0;
    public long ITBIEdifID { get; set; } = 0;
    public long ImoIDDivida { get; set; } = 0;
    public ValoresOperacao ValoresOperacao { get; set; } = new ValoresOperacao();
    //public List<byte[]>? AnexosImovel =new List<byte[]>();
    public Anexo? AnexosImovel = new Anexo();
    private List<IBrowserFile> AnexosImovelBF = new List<IBrowserFile>();
    public List<byte[]> AnexosTransmitente;
    public List<byte[]> AnexosAdquirente;
    public List<byte[]> AnexosOperacao;


    private IQueryable<TribEdificacoesContrib>? Transmitentes;
    public string? TipoDeTransferencia { get; set; } = "COMPRA_VENDA"; // string.Empty;
    public string? Observacao = string.Empty;
    public string? ObservacaoITBI = string.Empty;
    public string? ObservacaoIBTIEdif = string.Empty;
    public string? ValorDeclarado = string.Empty;
    public string? TxITBI = "0,02";// string.Empty;
    public Domain.Specs.DBProsiga.EdificacaoByInscricaoImobiliariaSpec edificacaoSpec;
    private bool _overlayIsVisible = false;
    async Task OnStepChange1(FluentWizardStepChangeEventArgs e, EditContext editContext)
    {

        if (!editContext.Validate())
        {
            // Bloquear a mudança de etapa se o formulário não for válido
            e.IsCancelled = true;
        }
        else
        {

            if (e.TargetIndex == 1)
            {
                _overlayIsVisible = true;
                await Task.Delay(2000);
                edificacaoSpec = new Domain.Specs.DBProsiga.EdificacaoByInscricaoImobiliariaSpec(Imovel.InscricaoImobiliaria.ToString().PadLeft(14, '0'));
                Imovel = await edificacoesAppService.GetBySpecAsync(edificacaoSpec, CancellationToken.None);

                /*
                //var paramBancos =  objGeraBoleto.
                objBol.boleData = DateTime.Now;
                objBol.boleDataInclusao = DateTime.Now;
                objBol.boleVencimento = DateTime.Now; //DateValue("01/21/2024");
                objBol.ConvenioId = 52;
                //objBol.boleUsuarioInclusao = User.Identity.Name
                objBol.boleMoeda = "9";
                objBol.ConID = 827737;
                objBol.boleOrigem = "Interna";
                */
                //   decimal v = 100.00m;
                // await GeraBoleto(v ,DateTime.Now);




                //  if(Imovel == null)
                // {
                //    await DialogService.ShowInfoAsync("Inscrição Informada Não Existe");
                //  e.IsCancelled = true;
                // _overlayIsVisible = false;
                //return;
                //}
                Transmitentes = Imovel.TribEdificacoesContribs?.AsQueryable();
                //await InsereDeclaracao();
                _overlayIsVisible = false;
            }
        }
    }
    async Task OnStepChange2(FluentWizardStepChangeEventArgs e, EditContext editContext)
    {
        if (ListaDeTransmitentes.Count() == 0)
        {
            e.IsCancelled = true;
        }
        else
        {
            if (!editContext2.Validate())
            {
                // Bloquear a mudança de etapa se o formulário não for válido
                e.IsCancelled = true;
            }
        }
    }
    async Task OnStepChange3(FluentWizardStepChangeEventArgs e, EditContext editContext)
    {
        if (ListaDeAdquirentes.Count() == 0)
        {
            e.IsCancelled = true;
        }
        else
        {
            if (!editContext3.Validate())
            {
                // Bloquear a mudança de etapa se o formulário não for válido
                e.IsCancelled = true;
            }
        }
    }
    async Task OnStepChange(FluentWizardStepChangeEventArgs e)
    {
        //DilogService($"Go to step {e.TargetLabel} (#{e.TargetIndex})");
        // await DialogService.ShowInfoAsync($"Go to step {e.TargetLabel} (#{e.TargetIndex})");
        //if (!editContext.Validate())
        //{
        // Bloquear a mudança de etapa se o formulário não for válido
        //  e.IsCancelled = true;
        //}
        //  if (!editContext.Validate())
        //{
        // Bloquear a mudança de etapa se o formulário não for válido
        // e.IsCancelled=true; // = true;


        if (e.TargetIndex == 1)
        {
            _overlayIsVisible = true;
            await Task.Delay(2000);
            edificacaoSpec = new Domain.Specs.DBProsiga.EdificacaoByInscricaoImobiliariaSpec(Imovel.InscricaoImobiliaria.ToString().PadLeft(14, '0'));
            Imovel = await edificacoesAppService.GetBySpecAsync(edificacaoSpec, CancellationToken.None);
            //  if(Imovel == null)
            // {
            //    await DialogService.ShowInfoAsync("Inscrição Informada Não Existe");
            //  e.IsCancelled = true;
            // _overlayIsVisible = false;
            //return;
            //}
            Transmitentes = Imovel.TribEdificacoesContribs?.AsQueryable();
            //await InsereDeclaracao();
            _overlayIsVisible = false;
        }
    }
    private async Task PegaNovosIds(){
        AutoNumAnoNumero = await autoNumANoNumeroAppService.GetMaxAutoNumAnoNumero(2024, "ITBI");
        ITBINumero = (int) AutoNumAnoNumero.AutNumero;
        // AutoNumEntidade = await autoNumEntidadesAppService.GetMaxAutoNumEntidade("TRIBITBI");
        //ITBIID = AutoNumEntidade.AutNumId;
        // AutoNumEntidade = await autoNumEntidadesAppService.GetMaxAutoNumEntidade("TRIBITBIEDIF");
        // ITBIEdifID = AutoNumEntidade.AutNumId;
        // AutoNumEntidade = await autoNumEntidadesAppService.GetMaxAutoNumEntidade("TribDividasImo");
        // ImoIDDivida = AutoNumEntidade.AutNumId;
    }
    private async Task InsereNovoITBI(){
        TribItbi.Itbiid = await autoNumEntidadesAppService.GetMaxAutoNumEntidade("TRIBITBI");
        ITBIID = TribItbi.Itbiid;
        TribItbi.ItbidataLanc = DateTime.Now.Date;
        TribItbi.Itbiobservacao = ObservacaoITBI;
        TribItbi.ItbiusuarioInclusao = null;
        TribItbi.ItbidataInclusao = DateTime.Now;
        TribItbi.Itbinumero = ITBINumero;
        TribItbi.Itbiano = DateTime.Now.Date.Year;
        TribItbi.ItbidsTipo = TipoDeTransferencia;
        TribItbi.ConId = null;
        TribItbi.ItbidsAlerta = "Atenção - ITBI";
        await tribITBIAppService.AddAsync(TribItbi, CancellationToken.None);
        await InsereAnexoImovel(TribItbi);

    }
    private async Task InsereDivida(ParcelasOption parcelaOption){

        if (parcelaOption.Parcela == 1)
        {   

            await InsereTribDividasImo(79,parcelaOption,1);
            //await InsereTribIT           
        }
        else
        {
            for(int i = 1;i<= parcelaOption.Parcela; i++)
            {
                await InsereTribDividasImo(241, parcelaOption,i);
            } 
        }
    }
    private async Task InsereTribDividasImo(int tipoTribID,ParcelasOption parcelaOption,int parcela)
    {
        TribDividasImo tdi = new TribDividasImo();
        tdi.ImoIddivida = await autoNumEntidadesAppService.GetMaxAutoNumEntidade("TribDividasImo");
        tdi.EdificacaoId = Imovel.EdificacaoId;
        tdi.ImoDivAno = DateTime.Now.Date.Year;
        tdi.TipoTribId = tipoTribID;
        tdi.ImoDivSubDivida = 0;
        tdi.ImoDivParcela = parcelaOption.Parcela == 1 && tipoTribID == 79 ? 0 : parcela;//parcelaOption.Parcela;
                                                                                         //tdi.ImoDivParcela = parcelaOption  // == 1 && tipoTribID == 79 ? 0 : parcela;//parcelaOption.Parcela;
        tdi.ImoDivVencimento = parcelaOption.Parcela == 1 && tipoTribID == 79 ? DateTime.Now.Date.AddDays(180) : DateTime.Now.Date.AddDays(parcela * 30);
        //   TribDividasImo.ImoDivDataGeracao = DateTime.Now;
        tdi.ImoDivTipoDivida = 1;
        tdi.ImoDivDataBloqCorrecao = null;
        tdi.ImoDivDataBloqJuros = null;
        tdi.ImoDivDataBloqMulta = null;
        tdi.ImoDivVlrUltimaCorrecao = 0; //  decimal.Parse(ValorDeclarado) * decimal.Parse(TxITBI);
        tdi.ImoDivDataUltimaCorrecao = null; // DateTime.Now.Date;
        tdi.ImoDivOrigemLancamento = "Automática";
        tdi.ImoDivParcelaUnica = parcelaOption.Parcela==1 && tipoTribID == 79 ? "Sim" : "Não";
        tdi.TipoBxId = 1;
        int mesdiv = DateTime.Now.Date.AddMonths(parcela).Month; //parcelaOption.Parcela;
        tdi.ImoDivMes = parcelaOption.Parcela == 1 && tipoTribID == 79 ? DateTime.Now.Date.AddDays(180).Month : mesdiv;//parcelaOption.Parcela);
        tdi.ImoDivDataBaixa = null;
        //    TribDividasImo.ImoDivValorHistorico = decimal.Parse(ValorDeclarado) * decimal.Parse(TxITBI);
        //  TribDividasImo.ImoDivValorBaixa = 0;
        tdi.UsuarioInclusao = "Sandro.src"; // null;
                                            //  TribDividasImo.ImoDivMotivoBaixa = "";
                                            //  TribDividasImo.ImoDivObs = null;
                                            //  TribDividasImo.ImoDivTipoLancamentoIptu = "";
                                            //  TribDividasImo.ImoDivQtdeBaixas = null;
        tdi.AutoInfrId = null;
        //  TribDividasImo.ImoDivBxVlrJuros = null;
        //  TribDividasImo.ImoDivBxVlrMulta = null;
        //  TribDividasImo.ImoDivBxVlrCorrecao = null;
        //  TribDividasImo.ImoDivBxVlrDesconto = null;
        //  TribDividasImo.ImoDivBxVlrMultaDa = null;
        //  TribDividasImo.ImoDivDescDivida = null;
        tdi.ImoDivSaiBoleto = "Sim";
        tdi.Idmoeda = 1;// null; //1;
                        //   TribDividasImo.EdiId = null;
                        // tdi.ImoDivValor = decimal.Parse(ValorDeclarado) * decimal.Parse(TxITBI);
        tdi.ImoDivValor = parcelaOption.Valor;
        //  TribDividasImo.Multa = null;
        //  TribDividasImo.Juros = null;
        //  TribDividasImo.Correcao = null;
        //  TribDividasImo.MultaDividaAtiva = null;
        //  TribDividasImo.DataCalculo=null;
        //  TribDividasImo.ImoDivValorBkp = null;
        tdi.ImoDivExcluido = null;
        await tribDividasImoAppService.AddAsync(tdi, CancellationToken.None);
        await InsereTribComposicaoDivImo(tdi.ImoIddivida, tdi?.TipoTribId ?? 0, tdi.ImoDivValor);
        await InsereNovoITBIEdif(tdi.ImoIddivida, tdi?.TipoTribId ?? 0, parcelaOption,parcela);
        //        decimal v = 100.00m;
        var boleto = await GeraBoleto(tdi.ImoDivValor, tdi.ImoDivVencimento);
        await GeraBoletosDividas(boleto,tdi);
        await GeraBoletosBarra(boleto);


    }
    private async Task InsereTribComposicaoDivImo(long _ImoIddivida, int tipoTribID, decimal compDivImoValor){
        TribComposicaoDivImo cdi = new TribComposicaoDivImo()
            {
                ImoIddivida = _ImoIddivida,
                TipoTribId = tipoTribID, 
                CompDivImoValor = compDivImoValor    // decimal.Parse(ValorDeclarado) * decimal.Parse(TxITBI);
            };
        await tribComposicaoDivImoAppService.AddAsync(cdi, CancellationToken.None);

    }
    private async Task InsereComposicaoDivida()
    {
        TribComposicaoDivImo.ImoIddivida = ImoIDDivida;
        TribComposicaoDivImo.TipoTribId = 79;
        TribComposicaoDivImo.CompDivImoValor = decimal.Parse(ValorDeclarado) * decimal.Parse(TxITBI);
        await tribComposicaoDivImoAppService.AddAsync(TribComposicaoDivImo, CancellationToken.None);

    }

    private async Task InsereNovoITBIEdif(long imoIDDivida, int tipoTribID , ParcelasOption parcelaOption,int parcela)
    {
        TribItbiedif tief = new TribItbiedif();
        tief.ItbiedifId = await autoNumEntidadesAppService.GetMaxAutoNumEntidade("TRIBITBIEDIF"); 
        tief.Itbiid = ITBIID;
        tief.EdificacaoId = Imovel.EdificacaoId;
        tief.ImoIddivida = imoIDDivida;
        tief.ItbiedifPercTransacao = decimal.Parse(TxITBI);
        tief.ItbiedifAreaConstr = Imovel.EdifAreaConstruida;
        tief.ItbiedifVlrVenalIptu = Imovel.ValorVenalCalculo;
        tief.ItbiedifVlrDeclarado = decimal.Parse(ValorDeclarado);
        tief.ItbiedifFinanciado = "Não";
        tief.ItbiedifBaseCalcFin = 0;
        tief.ItbiedifAliqFinanc = 0;
        tief.ItbiedifVlrDevido = parcelaOption.Valor;//decimal.Parse(ValorDeclarado) * decimal.Parse(TxITBI);             //;/
                                                     //tief.ItbiedifDataVenc = parcelaOption.Parcela == 1 && tipoTribID == 79 ? DateTime.Now.Date.AddDays(180) : DateTime.Now.Date.AddDays(parcelaOption.Parcela * 30);
        tief.ItbiedifDataVenc = parcelaOption.Parcela == 1 && tipoTribID == 79 ? DateTime.Now.Date.AddDays(180) : DateTime.Now.Date.AddDays(parcela * 30);
        tief.ItbiedifAnoDiv = DateTime.Now.Date.Year;
        tief.ItbiedifSubDivida = 0;

        int mesdiv = DateTime.Now.Date.AddMonths(parcela).Month;//  parcelaOption.Parcela;
                                                                //tief.ItbiedifMesDivida = parcelaOption.Parcela == 1 ? DateTime.Now.Month : mesdiv;//parcelaOption.Parcela);
        tief.ItbiedifMesDivida = parcelaOption.Parcela == 1 && tipoTribID == 79 ? DateTime.Now.Date.AddDays(180).Month : mesdiv;//parcelaOption.Parcela);
        tief.ItbiedifParc = parcelaOption.Parcela == 1 && tipoTribID == 79 ? 0 : parcela; // parcelaOption.Parcela;
        tief.TipoTribId = tipoTribID;
        //TribItbiEdif.ItbiedifTipoConstrucao;          ///
        //TribItbiEdif.ItbiedifObservacao               ///
        tief.ItbiedifBaseCalcImovel = decimal.Parse(ValorDeclarado);
        tief.ItbisomaEconomias = null;
        tief.Itbiendereco = null;
        tief.ItbiinscIncra = null;
        tief.ItbiareaTotalImo = null;
        tief.ConIddivida = null;
        tief.Matricula = Imovel.EdifMatricula;
        tief.ItbiedifPercTransmitir = 100;      ///
        tief.ItbiedifDtMinhaCasa = null;
        tief.InscricaoImobiliaria = Imovel.InscricaoImobiliaria;
        tief.PStrEdifEnderecoCompleto = "nulo por enquanto";    /////
        tief.EdifMatricula = Imovel.EdifMatricula;
        tief.EdifCaracteristica = Imovel.EdifCaracteristica;
        tief.TerrenoId = Imovel.TerrenoId;
        tief.Idloteamento = Imovel.Idloteamento;
        tief.QuadraLoteamento = Imovel.Terreno.QuadraLoteamento;                ///
        tief.Loteamento = Imovel.Terreno.Loteamento;   /// Imovel.Idloteamento;   ///
        tief.TerrReferenciaAnterior = Imovel.Terreno.TerrReferenciaAnterior;       ///
        tief.InscricaoImobiliariaGeo = "";
        tief.TerrAreaTerreno = Imovel.Terreno.TerrAreaTerreno;
        tief.LoteLoteamento = Imovel.Terreno.LoteLoteamento;           ////
        tief.QuadraId = Imovel.Terreno.QuadraId;                 //////
                                                                 // TribItbiEdif.PStredifBairro = Imovel.;               ////
        tief.AreaAbertaCoberta = Imovel.Terreno.AreaAbertaCoberta;            ////
        tief.LogradId = Imovel.LogradId;             /////
        tief.DenoId = Imovel.DenoId;                ///
        tief.EdifNumeracao = Imovel.EdifNumeracao;
        tief.EdifComplemento = Imovel.EdifComplemento;
        tief.EdifAndarConstrucao = Imovel.EdifAndarConstrucao;
        tief.EdifBloco = Imovel.EdifBloco;
        tief.EdifNumAptoSalaLoja = Imovel.EdifNumAptoSalaLoja;
        tief.EdifAreaCoberta = Imovel.EdifAreaCoberta;
        await tribITBIEdifAppService.AddAsync(tief, CancellationToken.None);

        await InsereCompradores(tief.ItbiedifId);
        await InsereVendedores(tief.ItbiedifId);


    }
    private async Task InsereNovoITBIEdifbk()
    {

        TribItbiEdif.ItbiedifId = ITBIEdifID;
        TribItbiEdif.Itbiid = ITBIID;
        TribItbiEdif.EdificacaoId = Imovel.EdificacaoId;
        TribItbiEdif.ImoIddivida = ImoIDDivida;
        TribItbiEdif.ItbiedifPercTransacao = decimal.Parse(TxITBI);
        TribItbiEdif.ItbiedifAreaConstr = Imovel.EdifAreaConstruida;
        TribItbiEdif.ItbiedifVlrVenalIptu = Imovel.ValorVenalCalculo;
        TribItbiEdif.ItbiedifVlrDeclarado = decimal.Parse(ValorDeclarado);
        TribItbiEdif.ItbiedifFinanciado = "Não";
        TribItbiEdif.ItbiedifBaseCalcFin = 0;
        TribItbiEdif.ItbiedifAliqFinanc = 0;
        TribItbiEdif.ItbiedifVlrDevido = decimal.Parse(ValorDeclarado) * decimal.Parse(TxITBI);             ///
        TribItbiEdif.ItbiedifDataVenc = DateTime.Now.Date.AddDays(180);
        TribItbiEdif.ItbiedifAnoDiv = DateTime.Now.Date.Year;
        TribItbiEdif.ItbiedifSubDivida = 0;
        TribItbiEdif.ItbiedifMesDivida = DateTime.Now.Date.Month;
        TribItbiEdif.ItbiedifParc = 0;
        TribItbiEdif.TipoTribId = 79;
        //TribItbiEdif.ItbiedifTipoConstrucao;          ///
        //TribItbiEdif.ItbiedifObservacao               ///
        TribItbiEdif.ItbiedifBaseCalcImovel = decimal.Parse(ValorDeclarado);
        TribItbiEdif.ItbisomaEconomias = null;
        TribItbiEdif.Itbiendereco = null;
        TribItbiEdif.ItbiinscIncra = null;
        TribItbiEdif.ItbiareaTotalImo = null;
        TribItbiEdif.ConIddivida = null;
        TribItbiEdif.Matricula = Imovel.EdifMatricula;
        TribItbiEdif.ItbiedifPercTransmitir = 100;      ///
        TribItbiEdif.ItbiedifDtMinhaCasa = null;
        TribItbiEdif.InscricaoImobiliaria = Imovel.InscricaoImobiliaria;
        TribItbiEdif.PStrEdifEnderecoCompleto = "nulo por enquanto";    /////
        TribItbiEdif.EdifMatricula = Imovel.EdifMatricula;
        TribItbiEdif.EdifCaracteristica = Imovel.EdifCaracteristica;
        TribItbiEdif.TerrenoId = Imovel.TerrenoId;
        TribItbiEdif.Idloteamento = Imovel.Idloteamento;
        TribItbiEdif.QuadraLoteamento = Imovel.Terreno.QuadraLoteamento;                ///
        TribItbiEdif.Loteamento = Imovel.Terreno.Loteamento;   /// Imovel.Idloteamento;   ///
        TribItbiEdif.TerrReferenciaAnterior = Imovel.Terreno.TerrReferenciaAnterior;       ///
        TribItbiEdif.InscricaoImobiliariaGeo = "";
        TribItbiEdif.TerrAreaTerreno = Imovel.Terreno.TerrAreaTerreno;
        TribItbiEdif.LoteLoteamento = Imovel.Terreno.LoteLoteamento;           ////
        TribItbiEdif.QuadraId = Imovel.Terreno.QuadraId;                 //////
                                                                         // TribItbiEdif.PStredifBairro = Imovel.;               ////
        TribItbiEdif.AreaAbertaCoberta = Imovel.Terreno.AreaAbertaCoberta;            ////
        TribItbiEdif.LogradId = Imovel.LogradId;             /////
        TribItbiEdif.DenoId = Imovel.DenoId;                ///
        TribItbiEdif.EdifNumeracao = Imovel.EdifNumeracao;
        TribItbiEdif.EdifComplemento = Imovel.EdifComplemento;
        TribItbiEdif.EdifAndarConstrucao = Imovel.EdifAndarConstrucao;
        TribItbiEdif.EdifBloco = Imovel.EdifBloco;
        TribItbiEdif.EdifNumAptoSalaLoja = Imovel.EdifNumAptoSalaLoja;
        TribItbiEdif.EdifAreaCoberta = Imovel.EdifAreaCoberta;
        await tribITBIEdifAppService.AddAsync(TribItbiEdif, CancellationToken.None);


    }
    private async Task InsereAnexoImovel(TribItbi itbi)
    {
        if(AnexosImovel.AnexoBf.Count > 0)
        {
            foreach (var anex in AnexosImovel.AnexoBf)
            {
                var buffer = new byte[anex.Size];
                var extensao = Path.GetExtension(anex.Name);
                await anex.OpenReadStream().ReadAsync(buffer);

                var anexoinserido =  await InsereTribObjeto(buffer, extensao);
               
                if(anexoinserido != null)
                {
                    await InsereTribItbiexAnexo(itbi.Itbiid, anexoinserido.ObjetoId, AnexosImovel.Doc.ItbidocId, long.Parse(Imovel.InscricaoImobiliaria));
                }
            }

        }
    }
    private async Task InsereCompradores(long itbiedifid){
        if (ListaDeAdquirentes.Count > 0)
        {
            foreach (var adquirente in ListaDeAdquirentes)
            {
                await tribITBICompradoresAppService.AddAsync(new TribItbicompradore()
                    {
                        ItbiedifId = itbiedifid,
                        ConId = adquirente.Contribuinte.ConId,
                        ImprimeNaGuia = "Sim"

                    }, CancellationToken.None);
            }
        }
    }
    private async Task InsereVendedores(long itbiedifid)
    {
        //  TribItbiVendedores.ItbiedifId = ITBIEdifID;
        if(ListaDeTransmitentes.Count>0){
            // await tribITBIVendedoresAppService.DeleteAsync(TribItbiVendedores, CancellationToken.None);
            foreach (var transmitente in ListaDeTransmitentes)
            {

                //TribItbiVendedores.ItbiedifId = ITBIEdifID;
                //TribItbiVendedores.ConId = transmitente.Contribuinte.ConId;
                //TribItbiVendedores.ImprimeNaGuia = "Sim";
                await tribITBIVendedoresAppService.AddAsync(new TribItbivendedore()
                {
                        ItbiedifId = itbiedifid,
                        ConId = transmitente.Contribuinte.ConId,
                        ImprimeNaGuia = "Sim"

                }, CancellationToken.None);
            }
        }
    }

    private async Task<TribItbiexAnexo> InsereTribItbiexAnexo(long ITBIID, int OBJETOID, long ITBIDOCID,long? AnexoPertenceA)
    {
        TribItbiexAnexo ta = new TribItbiexAnexo()
            {
                ItbianexoId = await autoNumEntidadesAppService.GetMaxAutoNumEntidade("TribITBIExAnexo"),
                Itbiid = ITBIID,
                ObjetoId = OBJETOID,
                ItbidocId = ITBIDOCID,
                Ipsolicitante = null,
                DtAnexo = DateTime.Now,
                AnexoPertenceA = AnexoPertenceA,
                DsParecer = null,
                DtParecer = null,
                FlParecer = "N",
                Usuariologado = null
            };
        return await tribItbiexAnexoAppService.AddAsync(ta, CancellationToken.None);


    }
    private async Task<TribObjeto> InsereTribObjeto(byte[] anexo, string extensao)
    {
        TribObjeto to = new TribObjeto()
            {
                ObjetoId = (int) await autoNumEntidadesAppService.GetMaxAutoNumEntidade("TRIBOBJETOS"),
                ObjConteudo = anexo,
                ObjExtensao = extensao,
                DataInclusao = DateTime.Now
                //UsuarioInclusao = 
            };
        return await tribObjetoAppService.AddAsync(to, CancellationToken.None);


    }
    
    private async Task InsereDeclaracao(){
        await PegaNovosIds();
        await InsereNovoITBI();
        await InsereDivida(ParcelaOptionSelecionada);
        //await InsereComposicaoDivida();
        //await InsereNovoITBIEdif();
        //await InsereCompradores();
        //await InsereVendedores();
    }
    private async void HandleAutoNumAnoNumero()
    {
        // AutoNumAnoNumero = await autoNumANoNumeroAppService.GetMaxAutoNumAnoNumero(2024,"ITBI");
        ///  AutoNumAnoNumeroSpec autoNumAnoNumeroSpec = new Domain.Specs.DBProsiga.AutoNumAnoNumeroSpec(2024,"ITBI");

        ///AutoNumAnoNumero = await autoNumANoNumeroAppService.GetBySpecAsync(autoNumAnoNumeroSpec, CancellationToken.None);
        /// AutoNumAnoNumero = await autoNumANoNumeroAppService.ProjectToFirstOrDefaultAsync<AutoNumAnoNumero>(autoNumAnoNumeroSpec, CancellationToken.None);
        //AutoNumAnoNumero = await autoNumANoNumeroAppService.
        //AutoNumAnoNumero = await autoNumANoNumeroAppService.GetMaxAutoNumAnoNumero(2024, "ITBI");
        _overlayIsVisible = true;
        await InsereDeclaracao();
        _overlayIsVisible = false;

    }

    //private void HandleAnexosImovelChanged(List<byte[]> anexos)
    //private void HandleAnexosImovelChanged(List<IBrowserFile> anexos)
    private void HandleAnexosImovelChanged(Anexo anexos)
    
    {
        //AnexosImovelBF = anexos;
        AnexosImovel = anexos;
        /*
        if (addremove == "Adicionar")
        {
            AnexosImovel.Add(anexo);
            StateHasChanged();
        }
        if (addremove == "Remover")
        {
            AnexosImovel.Remove(anexo);
            StateHasChanged();
        }*/
    }
    private void HandleAnexosTransmitenteChanged(byte[] anexo, string addremove)
    {
        if (addremove == "Adicionar")
        {
            AnexosTransmitente.Add(anexo);
            StateHasChanged();
        }
        if (addremove == "Remover")
        {
            AnexosTransmitente.Remove(anexo);
            StateHasChanged();
        }
    }
    private void HandleAnexosAdquirenteChanged(byte[] anexo, string addremove)
    {
        if (addremove == "Adicionar")
        {
            AnexosAdquirente.Add(anexo);
            StateHasChanged();
        }
        if (addremove == "Remover")
        {
            AnexosAdquirente.Remove(anexo);
            StateHasChanged();
        }
    }
    
    private void HandleParcelaOptionSelecionadaChanged(ParcelasOption parcelaOptionSelecionada)
    {
        ParcelaOptionSelecionada = parcelaOptionSelecionada;
    }
    private void HandleValoresOperacaoChanged(ValoresOperacao _ValoresOperacao)
    {
        ValoresOperacao = _ValoresOperacao;
    }
    private void HandleListaDeTransmitentesChanged(List<Transmitente> listaAtualizada)
    {
        ListaDeTransmitentes = listaAtualizada;

        StringBuilder sbITBI = new StringBuilder(ObservacaoITBI);
        sbITBI.AppendLine("Transmitentes: ");
        if (ListaDeTransmitentes.Count > 0)
        {
            foreach (var transmitente in ListaDeTransmitentes)
            {
                //sbITBI.AppendLine(transmitente.Contribuinte.ConCnpjcpf.ToString() + "-" + transmitente.Contribuinte.ConNome + " Transmite: " + transmitente.percentualtransmitido + "|");
                sbITBI.AppendLine(transmitente.Contribuinte.ConCnpjcpf.ToString() + "Transmite: " + transmitente.percentualtransmitido + "|");
            }
        }
        ObservacaoITBI = sbITBI.ToString();
    }
    private void HandleListaDeAdquirentesChanged(List<Adquirente> listaAtualizada)
    {
        ListaDeAdquirentes = listaAtualizada;

        StringBuilder sbITBI = new StringBuilder(ObservacaoITBI);
        sbITBI.AppendLine("Adquirentes: ");
        if (ListaDeAdquirentes.Count > 0)
        {
            foreach (var adquirente in ListaDeAdquirentes)
            {
                // sbITBI.AppendLine(adquirente.Contribuinte.ConCnpjcpf.ToString() + "-" + adquirente.Contribuinte.ConNome + " Transmite: " + adquirente.percentualAdquirido + " || ");
                sbITBI.AppendLine(adquirente.Contribuinte.ConCnpjcpf.ToString()  + " Transmite: " + adquirente.percentualAdquirido + " || ");
            }
        }
        ObservacaoITBI = sbITBI.ToString();
    }
    private void HandleTipoDeTransferenciaChanged(string tipodetransferencia)
    {
        TipoDeTransferencia = tipodetransferencia;
        StringBuilder sbITBI = new StringBuilder(ObservacaoITBI);
        sbITBI.AppendLine("Tipo de Transação: " + TipoDeTransferencia );
        ObservacaoITBI = sbITBI.ToString();
    }
    private void HandleObservacaoChanged(string observacao)
    {
        Observacao = observacao;
    }
    private void HandleValorDeclaradoChanged(string valordeclarado)
    {
        //ValorDeclarado = valordeclarado;
        if (decimal.TryParse(valordeclarado.ToString(), out decimal valorDecimal))
        {
            ValorDeclarado = valorDecimal.ToString("N2");
        }
    }
    protected override void OnInitialized()
    {
        //DialogService.ShowInfoAsync("Iniciando!");
        // Imovel = new TribEdificaco();
        //   s1 = new Domain.Specs.EdificacaoByInscricaoImobiliariaSpec(Imovel.InscricaoImobiliaria.ToString().PadLeft(14,'0'));

        ////var validator = new TribEdificacoesValidator();
        editContext = new EditContext(Imovel);
        editContext2 = new EditContext(ListaDeTransmitentes);
        editContext3 = new EditContext(ListaDeAdquirentes);
        //  edificacaoSpec = new Domain.Specs.DBProsiga.EdificacaoByInscricaoImobiliariaSpec(Imovel?.InscricaoImobiliaria.ToString().PadLeft(14, '0'));
        //editContext. .AddFluentValidation(validator);

    }
    async Task OnValidSubmit()
    {
        //DemoLogger.WriteLine($"OnValidSubmit called");

        _overlayIsVisible = true;
        await Task.Delay(2000);
        _overlayIsVisible = false;
    }
    void OnInvalidSubmit()
    {
        //  DemoLogger.WriteLine($"OnInvalidSubmit called");
    }
    private async Task HandleNextClick()
    {
        if (editContext.Validate())
        {
            // Move to the next step
            await GoToNextStep();
        }
        else
        {
            // Show validation errors
        }
    }
    private async Task GoToNextStep()
    {
        // Implement the logic to move to the next step
    }
    async Task OnFinishedAsync()
    {
        await DialogService.ShowInfoAsync("Wizard completed");
    }
    private bool ImovelIsValid()
    {
        var validationResults = new List<ValidationResult>();
        var context = new ValidationContext(Imovel);
        return Validator.TryValidateObject(Imovel, context, validationResults, true);
    }
    public async Task<TribBoleto> GeraBoleto(decimal Valor,DateTime? DTVencimento)
    {
        vbFEBRABAN.cBoletoFEBRABAN objGeraBoleto = new vbFEBRABAN.cBoletoFEBRABAN();
        //Tribuno.CentralCobranca.NotificacaoDA bcImgBarra = new Tribuno.CentralCobranca.NotificacaoDA();
        
        ConvenioBanco convenioBanco = new ConvenioBanco() { ConvenioId=52};
        convenioBanco = await ConvenioBancoAppService.GeraNossoNumero(convenioBanco);
        objGeraBoleto.pStrCarteira = convenioBanco.ConvCarteira;
        objGeraBoleto.pStrNumeroConvenio = convenioBanco.ConvNumConvenio;
        objGeraBoleto.pIntSegmento = (int) convenioBanco.ConvSegmento;
        objGeraBoleto.pIntValorRealReferencia = (int) convenioBanco.ConvValorRealRef;
        objGeraBoleto.pIntIdentificacaoOrgao = convenioBanco.ConvIdentifOrgao.Trim();
        TribBoleto Boleto = new TribBoleto();
        /*Boleto.BoleValorCorrecao = 0;
        Boleto.BoleValorDesconto = 0;
        Boleto.BoleValorJuros = 0;
        Boleto.BoleValorMulta = 0;
        Boleto.BoleValorMultaDa = 0;
        Boleto.BoleValorPrinc = 0;*/
        objGeraBoleto.pStrUltimoNossoNumero = convenioBanco.ConvNossoNumero.ToString();
        objGeraBoleto.TipoConvenio = vbFEBRABAN.cBoletoFEBRABAN.TipoConvenios.REGISTRADO;
        objGeraBoleto.pCurValorBoleto = Valor;
        objGeraBoleto.pDatVencimentoBoleto = DTVencimento ?? DateTime.Now;
        objGeraBoleto.pStrCodBanco = convenioBanco.ConvBancoId.Trim();
        objGeraBoleto.pStrCodAgencia = convenioBanco.ConvAgenciaId.Trim();
        objGeraBoleto.pStrCodCedente= convenioBanco.ConvCodCedente.Trim();
        objGeraBoleto.pStrCodMoeda = "9" ; //oleMoeda  //' deve ser passado esta no membro
        objGeraBoleto.GeraNossoNumero();
        objGeraBoleto.GeraBarraLinhaDigitavel();
        Boleto.BoleNossoNumero = objGeraBoleto.pStrNossoNumeroGerado;
        Boleto.BoleData = DateTime.Now.Date;
        Boleto.BoleValorPrinc = Valor;
        Boleto.BoleValorDesconto = 0;
        Boleto.BoleValorJuros = 0;
        Boleto.BoleValorMulta = 0;
        Boleto.BoleValorCorrecao = 0;
        Boleto.BoleLinhaDigitavel = objGeraBoleto.pStrLinhaDigitavel;
        Boleto.BoleVencimento = DTVencimento;
        Boleto.BoleCodBarra = objGeraBoleto.pStrCodBarraNum;
        Boleto.BoleMoeda = "9";
        Boleto.BoleDataInclusao = DateTime.Now;
        Boleto.BoleUsuarioInclusao = "Sandro.src";
        Boleto.ConvenioId = 52;
        Boleto.BoleOrigem = "Externa";
        Boleto.BoleValorBoleto = Valor;
        Boleto.BoleValorMultaDa = 0;
        Boleto.ConId = null;
        Boleto.LeiDescId = null;
        Boleto.BoleIp = null;
        return await tribBoletoAppService.AddAsync(Boleto, CancellationToken.None);

        // await GeraBoletosDividas(Boleto);

    }
    public async Task GeraBoletosDividas(TribBoleto Boleto,TribDividasImo DividasImo)
    {
        TribBoletosDivida BoletosDivida = new TribBoletosDivida
            {
                //BoleDivId = 64005081,
                BoleNossoNumero = Boleto.BoleNossoNumero,
                ImoIddivida = DividasImo.ImoIddivida,
                BoleValorPrinc = DividasImo.ImoDivValor,
                BoleValorBoletoDivida = DividasImo.ImoDivValor,



            };
        await tribBoletosDividasAppService.AddAsync(BoletosDivida, CancellationToken.None);

    }
    public async Task<TribBoletosBarra> GeraBoletosBarra(TribBoleto Boleto)
    {
        var bc = new BC.barcode();
        TribBoletosBarra tribBoletosBarra = new TribBoletosBarra()
            {
                Bolenossonumero = Boleto.BoleNossoNumero,
                //BoleCodigoBarra = Encoding.ASCII.GetBytes(Boleto.BoleCodBarra)
                BoleCodigoBarra = bc.getBarCode(Boleto.BoleCodBarra)
    };
        return await tribBoletosBarraAppService.AddAsync(tribBoletosBarra, CancellationToken.None);

        

    }

}

