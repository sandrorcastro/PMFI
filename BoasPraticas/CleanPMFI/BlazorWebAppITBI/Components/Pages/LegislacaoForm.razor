@using BlazorWebAppITBI.Models
<FluentCard Justify="@JustifyContent.Center" >
    <FluentTextArea overflow: auto Value=@lei style="width: 100%;" Appearance="FluentInputAppearance.Filled" Label="Legislação:" ReadOnly="true" Rows="20">


    </FluentTextArea>



<FluentCheckbox @bind-Value="@IsAgreed" @onchange="AgreementChanged">Eu concordo com os termos e condições.</FluentCheckbox>

</FluentCard>
<FluentCard Justify="@JustifyContent.FlexEnd" AreaRestricted="false">
<!--  

<div class="fluent-select-container">
-->
    <FluentStack Orientation="Orientation.Horizontal">
    <FluentTextField Disabled="@(!IsAgreed)" @bind-Value="@valordeclarado" @onchange="OnTextFildChange"  Label="Valor Declarado/Base de Cálculo"></FluentTextField>
    <FluentTextField Disabled="@(!IsAgreed)" @bind-Value="@valorITBIdevido" @onchange="OnTextFildChange" Label="Valor ITBI Devido "></FluentTextField>
        <FluentSelect Disabled="@(!IsAgreed)" Position="SelectPosition.Below" @bind-Value="selectedParcela" TOption="string">
    @foreach (var option in ParcelasOption)
    {
        <FluentOption Value="@option.Parcela.ToString()">@option.Parcela parcela(s) - @option.Valor.ToString("C", CultureInfo.GetCultureInfo("pt-BR"))</FluentOption>
    }
</FluentSelect>
    <FluentButton Disabled="@(!IsAgreed)" OnClick="GerarGuia" Appearance="Appearance.Accent">Gerar</FluentButton>
    </FluentStack>
<!--   

</div>
-->
</FluentCard>



@code {
    private bool IsAgreed { get; set; } = false;
    [Parameter]
    public string? valordeclarado { get; set; } //= "12.000,00"; // { get; set; }
    [Parameter]
    public ValoresOperacao? ValoresOperacao { get; set; } //= "12.000,00"; // { get; set; }
                                                          //   [Parameter]
    public List<ParcelasOption> ParcelasOption { get; set; } = new List<ParcelasOption>();
    public string selectedParcela { get; set; }
    [Parameter]
    public ParcelasOption? ParcelaOptionSelecionada { get; set; }
    public string? valorITBIdevido { get; set; }
    decimal? vd = 0;
    decimal? vi = 0; //0.02m;

    private decimal Uffi = 111.87m;
    [Parameter]
    public EventCallback<string> ValorDeclaradoChanged { get; set; }
    [Parameter]
    public EventCallback<ValoresOperacao> ValoresOperacaoChanged { get; set; }
    [Parameter]
    public EventCallback Gerar { get; set; }
    [Parameter]
    public EventCallback<ParcelasOption> ParcelaOptionSelecionadaChanged { get; set; }
    protected override void OnInitialized()
    {
        // vd = decimal.Parse(valordeclarado.ToString());
        // vi = vd * vi;
        //ITBIdevido = (decimal.TryParse(valordeclarado.ToString(), out decimal valorDecimal){valorITBIdevido=valorDecimal * 0.02}).ToString();
        //valorITBIdevido = vi?.ToString("N2");
        //  vi = 0;
        // valorITBIdevido = "";
        //{
        //  valordeclarado = valorDecimal.ToString("N2");
        //}
        //  calculaParcelamento();
       
    }

    private void AgreementChanged(ChangeEventArgs e)
    {
        IsAgreed = !IsAgreed;
        if (IsAgreed)
        {
            // vi = 0;
            //   valorITBIdevido = "";
            Proceed();
            //   calculaParcelamento();
        }
        //IsAgreed = (bool)e.Value;
    }
    public async Task OnTextFildChange(ChangeEventArgs e)
    {
        valordeclarado = e.Value.ToString();

        await ValorDeclaradoChanged.InvokeAsync(valordeclarado);
        calculoITBI();
        calculaParcelamento();
    }
    public async Task GerarGuia()
    {
        ParcelaOptionSelecionada = ParcelasOption.Find(p => p.Parcela == int.Parse(selectedParcela));
        await ParcelaOptionSelecionadaChanged.InvokeAsync(ParcelaOptionSelecionada);
        await Gerar.InvokeAsync();

    }
    private void Proceed()
    {
        // Lógica para prosseguir se o usuário concordou
        //vd = decimal.Parse(valordeclarado.ToString());
        //vi = vd * vi;
        //ITBIdevido = (decimal.TryParse(valordeclarado.ToString(), out decimal valorDecimal){valorITBIdevido=valorDecimal * 0.02}).ToString();
        //valorITBIdevido = vi?.ToString("N2");
        //{
        //  valordeclarado = valorDecimal.ToString("N2");
        //}
        calculoITBI();
        calculaParcelamento();
    }
    private void calculoITBI(){
        if (ValoresOperacao.isFinanciado)
        {
            valorITBIdevido = (ValoresOperacao.ValorRecursoProprio * 0.02m + ValoresOperacao.ValorFinanciado * pegaTaxa()).ToString();


        } else
        {

            vd = decimal.Parse(valordeclarado.ToString());
            // vi = 0.02m;
            vi = pegaTaxa();
            vi = vd * vi;
            //ITBIdevido = (decimal.TryParse(valordeclarado.ToString(), out decimal valorDecimal){valorITBIdevido=valorDecimal * 0.02}).ToString();
            valorITBIdevido = vi?.ToString("N2");
        }
        //  valordeclarado = vd.ToString();

    }
    private void calculoITBIbk()
    {

        vd = decimal.Parse(valordeclarado.ToString());
        // vi = 0.02m;
        vi = pegaTaxa();
        vi = vd * vi;
        //ITBIdevido = (decimal.TryParse(valordeclarado.ToString(), out decimal valorDecimal){valorITBIdevido=valorDecimal * 0.02}).ToString();
        valorITBIdevido = vi?.ToString("N2");
        //  valordeclarado = vd.ToString();

    }
    private decimal pegaTaxa()
    {
        //var totalRecursoProprio = 0.00m

        var vl = decimal.Parse(valordeclarado.ToString());
        if (ValoresOperacao.isFinanciado)
        {

            if (vl < (4000 * Uffi))
            {
                if(vl > (2700 * Uffi))
                {
                    return 0.02m;
                }
                if ((vl > (1400 * Uffi)) && (vl <= (2700 * Uffi))){
                    return 0.01m;
                }
                if ((vl > (600 * Uffi)) && (vl <= (1400 * Uffi)))
                {
                    return 0.005m;
                }
                if (vl < (600 * Uffi))
                {
                    return 0.00m;
                }

            }

            return 0.02m;

        }
        return 0.02m;
    }
    private void AtualizaValorDeclarado()
    {
        //valordeclarado = vd.ToString();
        ValorDeclaradoChanged.InvokeAsync(valordeclarado);
    }
    private void calculaParcelamento(){
        int maxquantidadeparcelas = 12;
        int quantidadeparcelas = 12;
        ParcelasOption.Clear();
        StateHasChanged();
        decimal uffi = Convert.ToDecimal(111.87);
        //decimal impdevido = Convert.ToDecimal(valordeclarado) * Convert.ToDecimal(0.02);
        decimal impdevido = Convert.ToDecimal(valorITBIdevido); // * Convert.ToDecimal(0.02);
        //if(Math.Floor(impdevido/uffi) < 1)
        if(Math.Floor(impdevido/uffi) < 1 || ValoresOperacao.isFinanciado)
        {
            quantidadeparcelas = 1;
        }
        else
        {
            int contador=1;
            while (impdevido/contador >= uffi  && contador<=maxquantidadeparcelas)
            {
                quantidadeparcelas = contador;
                contador = contador + 1;

            }
        }
        for (int i = 1; i <= quantidadeparcelas; i++)
        {
            ParcelasOption.Add(new ParcelasOption
                {
                    Parcela = i,
                    Valor = impdevido  / i
                });
        }
        if(selectedParcela == null)
        {
            selectedParcela = ParcelasOption[0].Parcela.ToString();
        }
    }




    private string? lei = @"Declaro estar ciente quanto ao disposto nos arts. 420, incisos I a III, § 1º, 2º e 9º e 420-A, inciso I e II, § 1º a 6º, art.
432:
. A forma de lançamento do ITBI é por homologação (declaração);
. Todas as informações /declarações prestadas são de inteira responsabilidade do contribuinte;
. Se o valor declarado e pago não estiver de acordo com o valor de mercado, o fisco Municipal poderá arbitrar a base de
cálculo através da abertura de PAF (processo administrativo fiscal) para a identificação e arbitramento do valor relativo à
diferença do valor a ser recolhido e aplicação de multa de no mínimo 20% sobre do valor da diferença arbitrada;
. As formas de pagamento se encontram previstas no artigo 423 §3º da LC 82/2003;
. A omissão de informações ou a falsidade delas constituirá infração à legislação tributaria municipal punida com multas
previstas nos art. 435 e 436 da Lei Complementar nº 82, de 24 de dezembro de 2003; e tipifica crime de falsidade
ideológica (art. 299 do Código Penal), além de crime contra ordem tributária se resultar em supressão ou redução de
tributo (art. 1º da Lei 8137/1990).
Art. 420. A autoridade fiscal poderá arbitrar a base de cálculo sempre que:
I - O valor declarado pelo adquirente não for devidamente comprovado ou estiver em
desacordo com o valor de mercado;
II - quando se tratar de imóvel destinado a conjuntos residenciais de cunho social ou
destinados a adquirentes de baixa renda;
III - quando a transação não envolve pagamento em espécie.
§1º. Constatado que o valor pago não se encontra de acordo com o valor de mercado do
imóvel, o contribuinte será notificado da inconformidade apurada através da funcionalidade
disponibilizada no Portal do Município na internet ou outro meio estabelecido em regulamento.
§ 2º Nas hipóteses previstas no inciso II do caput deste artigo, a base de cálculo poderá ser
arbitrada tomando-se o valor contratado e aplicando apenas a correção com índices oficiais
utilizados pelo Município.
§ 9º Nas hipóteses previstas nos incisos I e III, a base de cálculo será arbitrada com base na
comparação de amostras e dados de mercado de imóveis que possuem atributos semelhantes
aos do bem avaliado, conforme metodologia prevista pela Associação Brasileira de Normas
Técnicas - ABNT, registros de declarações de contribuintes e documentos juntados pelo
contribuinte e pelos auditores fiscais, através do processo administrativo fiscal de apuração da
base de cálculo e lançamento do ITBI.
Art. 420-A. O imposto será lançado:
I - por homologação, devendo o contribuinte do imposto declarar e efetuar o pagamento sem
prévio exame da autoridade administrativa, ficando sujeito a posterior homologação por parte
da autoridade administrativa;

II - de ofício, nos casos em que o Fisco Municipal constatar a ocorrência do fato gerador sem o
devido pagamento do imposto, ou o pagamento a menor devidamente comprovado.
§ 1º O contribuinte que efetuar o pagamento do ITBI com valor de base de cálculo em
desacordo com o valor de mercado, será notificado da constatação e da abertura de Processo
Administrativo Fiscal - PAF de arbitramento da base de cálculo, bem como sempre que sejam
omissos ou não mereçam fé as declarações e esclarecimentos prestados, os documentos
expedidos pelo sujeito passivo ou pelo terceiro legalmente obrigado, ressalvado em caso de
contestação, avaliação contraditória, administrativa ou judicial.

§ 2º O lançamento decorrente do arbitramento deverá ser realizado mediante notificação de
lançamento, assegurada sua impugnação, nos termos dos arts. 208 a 251 desta Lei
Complementar.

§ 3º A notificação de lançamento deverá conter, além de outros dados necessários ou úteis à
administração do imposto, a critério da repartição fazendária competente:

I - a identificação do contribuinte;

II - o motivo do arbitramento;

III - a identificação do imóvel objeto da transmissão ou cessão;

IV - número do processo administrativo de origem no lançamento e os critérios de arbitramento
utilizados pela autoridade competente;

V - o valor da base de cálculo arbitrada, a alíquota e o valor do imposto;

VI - a identificação e a assinatura da autoridade que procedeu ao arbitramento/notificação de
lançamento;

VII - a autoridade competente para o processo de impugnação;

VIII - a assinatura do sujeito passivo, seu representante ou preposto e, se for o caso, a
indicação de que este se negou a apor sua assinatura na notificação de lançamento;

IX - determinação da exigência e a intimação para cumpri-la ou impugná-la no prazo de 30
(trinta) dias.

§ 4º A assinatura do sujeito passivo não importa em confissão, nem a sua falta ou recusa em
nulidade da notificação de lançamento.

§ 5º Para o auto de infração e notificação de lançamento do ITBI lavrado pela Diretoria de
Receita, será adotado rito processual abreviado, devendo a contestação ser encaminhada
diretamente para decisão de primeira instância prevista no art. 237 desta Lei Complementar.

§ 6º Para todas as solicitações de ITBI, será solicitado/formalizado o Termo de Aceite para
recebimento de todas as notificações relativas ao lançamento do imposto, via Portal, e-mail,
WhatsApp ou outros meios informados pelo contribuinte. (Redação acrescida pela Lei
Complementar nº 403/2023)
Art. 423. O Imposto Sobre a Transmissão de Propriedade Inter Vivos será recolhido através da
guia de recolhimento fornecida pela Secretaria Municipal da Fazenda, através da
funcionalidade disponibilizada no Portal do Município na internet, devendo ser apresentada a
certidão de pagamento do imposto por ocasião do registro do instrumento público de
transmissão de propriedade ou direitos reais.
Art. 432. A falta de recolhimento do imposto no prazo determinado através do Processo
Administrativo Fiscal - PAF ou a declaração e pagamento com valores em desacordo com o
valor de mercado do imóvel, sujeita o contribuinte a aplicação de multa de 20% (vinte por
249
cento) do valor da diferença do imposto apurado no PAF, observado o desconto previsto no
art.
desta
Lei
Complementar.
Parágrafo único. O disposto no caput deste artigo somente será aplicado ao contribuinte
através do PAF, oportunizado ampla defesa, na forma do contencioso previsto nesta Lei
Complementar.
Art. 435.  O contribuinte que apresentar documento com declaração fraudulenta que possa
reduzir a base de cálculo do imposto fica sujeito à multa de 100% (cem por cento) sobre o
valor do imposto não recolhido.”
Art. 436. A mesma penalidade prevista no artigo anterior será aplicada a qualquer pessoa que
intervenha no negócio jurídico ou que, por qualquer forma, contribua para a inexatidão ou
omissão praticadas.";





}