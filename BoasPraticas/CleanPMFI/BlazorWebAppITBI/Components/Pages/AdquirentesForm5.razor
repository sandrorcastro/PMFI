@using BlazorWebAppITBI.Models
@rendermode InteractiveServer
@inject IDialogService DialogService
@inject IContribuinteAppService contribuinteAppService
@inject ITribItbidocumentoTipoAppService tribItbidocumentoTipoAppService
<FluentButton OnClick="@(()=> BuscarContribuinteDialog("Adquirente"))" Appearance="Appearance.Accent">Adicionar Adquirente</FluentButton>
<FluentAccordionAdquirentes Content="@ListaDeAdquirentes" ListAdquirenteChanged="HandledListAdquirenteChanged" >  </FluentAccordionAdquirentes>

@code {
    [Parameter]
    public IEnumerable<TribItbidocumentoTipo> DocsExigidos { get; set; }
    [Parameter]
    public TribEdificaco Imovel { get; set; } = default!;
    public Domain.Specs.DBProsiga.ContribuinteByCPFCNPJSpec contribuinteSpec;
    [Parameter]
    public List<Adquirente>? ListaDeAdquirentes { get; set; }
    public string? tipoContribuinte = null;
    //private Contribuinte? adquirente = new Contribuinte() { ConCnpjcpf = string.Empty };
    private Adquirente? Adquirente = new Adquirente() { Contribuinte = new Contribuinte { ConCnpjcpf = string.Empty } };
    [CascadingParameter]
    public FluentDialog? Dialog { get; set; }
    string activeId = "accordion-1";
    FluentAccordionItem? changed;
    [Parameter]
    public EventCallback<List<Adquirente>> ListaDeAdquirentesChanged { get; set; }
    private async Task HandledListAdquirenteChanged(List<Adquirente> listAdquirentes)
    {
        ListaDeAdquirentes = listAdquirentes;
        await ListaDeAdquirentesChanged.InvokeAsync(ListaDeAdquirentes);
        // StateHasChanged();
    }
    private async Task  NovoAdquirente(Adquirente AdquirenteSelecionado)
    {
        /* var indice = await ObterIndiceAdquirente(AdquirenteSelecionado);
          if (indice > -1)
              {
              ListaDeAdquirentes.RemoveAt(indice);
              StateHasChanged();
          }
          else
          {*/
        var docsExigidosPF = await tribItbidocumentoTipoAppService.GetDocumentosExigidos("ContribuintePF");
        var docsExigidosPJ = await tribItbidocumentoTipoAppService.GetDocumentosExigidos("ContribuintePJ");
        var Adquirente = new Adquirente()
                {
                    Contribuinte = AdquirenteSelecionado.Contribuinte,
                    AnexosExigidos = new List<Anexo>(),
                    percentualAdquirido = string.Empty,
                };
        if (Adquirente.Contribuinte.ConTipoPessoa == "FISICA")
        {
            
             foreach (var docexigido in docsExigidosPF.ToList())
                            {
                                    Adquirente.AnexosExigidos.Add(new Anexo()
                                    {
                                        carregado = false,
                                        Doc = docexigido,
                                        nomearquivo = string.Empty,
                                        nomeDEFINITIVO = string.Empty,
                                        pertenceA = Adquirente.Contribuinte.ConCnpjcpf.Trim().PadLeft(14, '0'),
                                        AnexoBf = new List<IBrowserFile>()
                                        // InputFile = null,
                                    });
                            }
        }
        if (Adquirente.Contribuinte.ConTipoPessoa == "JURIDICA")
        {

            foreach (var docexigido in docsExigidosPJ.ToList())
            {
                Adquirente.AnexosExigidos.Add(new Anexo()
                    {
                        carregado = false,
                        Doc = docexigido,
                        nomearquivo = string.Empty,
                        nomeDEFINITIVO = string.Empty,
                        pertenceA = Adquirente.Contribuinte.ConCnpjcpf.Trim().PadLeft(14, '0'),
                        AnexoBf = new List<IBrowserFile>()
                        // InputFile = null,
                    });
            }
        }

        ListaDeAdquirentes.Add(Adquirente);
       // }
        ListaDeAdquirentesChanged.InvokeAsync(ListaDeAdquirentes);
        StateHasChanged();
    }
    private Task<int> ObterIndiceAdquirente(Adquirente AdquirenteSelecionado)
    {
        return Task.FromResult(ListaDeAdquirentes.FindIndex(t=>t.Contribuinte.ConCnpjcpf==AdquirenteSelecionado.Contribuinte.ConCnpjcpf));
    }
    private void HandleOnAccordionItemChange(FluentAccordionItem item)
    {
        changed = item;
    }
    protected override async Task OnInitializedAsync()
    {
      //  List<Anexo> listdoc = new List<Anexo>();
            await base.OnInitializedAsync();
    }
    private async Task BuscarContribuinteDialog(string _tipoContribuinte)
    {
        tipoContribuinte = _tipoContribuinte;
        //Contribuinte contribuinte = new Contribuinte();
        Adquirente = new Adquirente() { Contribuinte = new Contribuinte { ConCnpjcpf = string.Empty } };
        if (tipoContribuinte == "Adquirente")
        {
            await DialogService.ShowDialogAsync<BuscarContribuinteDialogAdquirente>(Adquirente, new DialogParameters()
                {
                    Title = $"Buscar {tipoContribuinte}",
                    OnDialogResult = DialogService.CreateDialogCallback(this, HandleBuscarContribuinteDialog),
                    //   Width = "500px",
                    //   Height = "500px",
                });
        }
    }
    private async Task HandleBuscarContribuinteDialog(DialogResult result)
    {
        if (result.Cancelled)
        {
            return;
        }
        if (result.Data is not null)
        {
            if (tipoContribuinte == "Adquirente")
            {
                Adquirente = result.Data as Adquirente;
                contribuinteSpec = new Domain.Specs.DBProsiga.ContribuinteByCPFCNPJSpec(Adquirente.Contribuinte.ConCnpjcpf);
                Adquirente.Contribuinte = await contribuinteAppService.GetBySpecAsync(contribuinteSpec, CancellationToken.None);
                if (Adquirente != null)
                {
                    await ContribuinteFormDialog();
                }
                else
                {
                    //await DialogService.ShowInfoAsync("Adquirente Não Encontrado!");
                    //  tipoContribuinte = "NovoAdquirente";
                    Adquirente.Contribuinte = new Contribuinte() { ConBairro = new Bairro(), ConCidade = new Cidade() { Pais = new Paise() } };
                    await ContribuinteFormDialog();

                }

            }

        }
    }
    private async Task ContribuinteFormDialog()
    {
        if (tipoContribuinte == "Adquirente")
        {
            if (Adquirente != null)
            {
                await DialogService.ShowDialogAsync<ContribuinteFormDialogAdquirente>(Adquirente, new DialogParameters()
                    {
                        Title = $"Cadastro de {tipoContribuinte}",
                        OnDialogResult = DialogService.CreateDialogCallback(this, HandleContribuinteFormDialog),
                        //  Width = "500px",
                        //  Height = "500px",
                    });
            }
            else
            {
                //Adquirente = new Contribuinte();
                await DialogService.ShowDialogAsync<ContribuinteFormDialog>(Adquirente, new DialogParameters()
                    {
                        Title = $"Cadastro de {tipoContribuinte}",
                        OnDialogResult = DialogService.CreateDialogCallback(this, HandleContribuinteFormDialog),
                        //  Width = "500px",
                        //  Height = "500px",
                    });
            }
        }
    }
    private async Task HandleContribuinteFormDialog(DialogResult result)
    {
        if (result.Cancelled)
        {
            return;
        }
        if (result.Data is not null)
        {
            if (tipoContribuinte == "Adquirente")
            {
                Adquirente = result.Data as Adquirente;
                await NovoAdquirente(Adquirente);
                return;
            }
        }

    

    }
}

