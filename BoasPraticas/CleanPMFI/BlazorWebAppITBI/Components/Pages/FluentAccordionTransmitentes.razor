@rendermode InteractiveServer
<FluentAccordion>
    @if(Content != null)
    {
        @foreach(var transmitente in Content.AsQueryable())
        {
            <FluentAccordionItem>
                <HeadingTemplate>
                    <FluentStack Orientation="Orientation.Horizontal">
                                <FluentTextField ReadOnly @bind-value="@transmitente.Contribuinte.ConCnpjcpf" style="width: 10%;font-size: 12px;" Maxlength="14">CPF/CNPJ:</FluentTextField>
                                <FluentTextField ReadOnly @bind-value="@transmitente.Contribuinte.ConNome" style="width: 25%;font-size: 12px;" Required Maxlength="50">Nome/Razão:</FluentTextField>
                                <FluentTextField @bind-Value="@transmitente.Contribuinte.ConEmail" Required style="width: 18%;font-size: 12px;" Maxlength="50">Email:</FluentTextField>
                                <FluentTextField @bind-Value="@transmitente.Contribuinte.ConTelefoneCelular" style="width: 10%;font-size: 12px;" Required Maxlength="14">Celular:</FluentTextField>
                                <FluentTextField ReadOnly @bind-Value="@transmitente.Titularidade" style="width: 10%;font-size: 12px;" Required Maxlength="14">Titularidade:</FluentTextField>
                                <FluentTextField @bind-Value="@transmitente.percentualtransmitido" Required style="width: 6%;font-size: 12px;" Maxlength="5">%Transmitido</FluentTextField>
                                      <FluentSpacer />
                        <FluentButton Appearance="Appearance.Outline" OnClick="()=>RemoveTransmitente(transmitente)"
                                          IconStart="@(new Icons.Regular.Size20.SubtractSquare().WithColor(Color.Accent))" >
                             </FluentButton>
                    </FluentStack>
                             <FluentStack Orientation="Orientation.Horizontal">
                                         <FluentTextField Size="2" ReadOnly @bind-value="@transmitente.Contribuinte.ConCep" style="width: 10%;font-size: 11px;" Maxlength="14"></FluentTextField>
                                        <FluentTextField ReadOnly @bind-value="@transmitente.Contribuinte.ConTipoLograd" style="width: 9%;font-size: 11px;" Maxlength="14"></FluentTextField>
                                        <FluentTextField ReadOnly @bind-value="@transmitente.Contribuinte.ConEndereco" style="width: 25%;font-size: 11px;" Required Maxlength="50"></FluentTextField>
                                        <FluentTextField ReadOnly @bind-value="@transmitente.Contribuinte.ConNumero" style="width: 6%;font-size: 11px;" Required Maxlength="50"></FluentTextField>
                                 
                                         <FluentTextField @bind-Value="@transmitente.Contribuinte.ConBairro.BaiNome" Required style="width: 10%;font-size: 11px;" Maxlength="50"></FluentTextField>
                                        <FluentTextField @bind-Value="@transmitente.Contribuinte.ConCidade.CidNome" style="width: 10%;font-size: 11px;" Required Maxlength="14"></FluentTextField>
                                        <FluentTextField ReadOnly @bind-Value="@transmitente.Contribuinte.ConCidade.CidUf" style="width: 5%;font-size: 11px;" Required Maxlength="14"></FluentTextField>
                                                            </FluentStack>
                </HeadingTemplate>

                <ChildContent>
                                <ChildContentDocsExigidos Content="transmitente.AnexosExigidos" AnexoChanged="HandledAnexoChanged"></ChildContentDocsExigidos>
                </ChildContent>
            </FluentAccordionItem>
        }
    }
</FluentAccordion>
@code{
    private Dictionary<Transmitente, bool> itemStates = new Dictionary<Transmitente, bool>();
    Dictionary<Transmitente, bool> itemStatesTransmitentes = new Dictionary<Transmitente, bool>();
    [Parameter]
    public List<Transmitente>? Content { get; set; }
    [Parameter]
    public EventCallback<List<Transmitente>> ListTransmitenteChanged { get; set; }
    private async void RemoveTransmitente(Transmitente transmitente)
    {
        await Task.FromResult(Content.Remove(transmitente));

        await ListTransmitenteChanged.InvokeAsync(Content);
    }
    private async Task HandledAnexoChanged(Anexo anexoChanged)
    {
        var indice = await ObterIndiceTransmitente(anexoChanged);
        var indiceanexo = await ObterIndiceAnexo(anexoChanged);
        Content[indice].AnexosExigidos[indiceanexo]= anexoChanged;//.AnexoBf;
        await ListTransmitenteChanged.InvokeAsync(Content);

    }
   /* public async Task<int> ObterIndiceTransmitente(Transmitente transmitente)
    {
        return await Task.FromResult(Content.FindIndex(t => a.Contribuinte.ConCnpjcpf == anexoChanged.pertenceA));
        

    }*/
    public async Task<int> ObterIndiceTransmitente(Anexo anexoChanged)
    {
        return await Task.FromResult(Content.FindIndex(a => a.Contribuinte.ConCnpjcpf == anexoChanged.pertenceA));
    }
    public async Task<int> ObterIndiceAnexo(Anexo anexochanged)
    {
        var indice = await ObterIndiceTransmitente(anexochanged);
        //var indiceanexo = Content[indice].AnexosExigidos.FindIndex(a => a.pertenceA == anexochanged.pertenceA && a.Doc.ItbidsDocumento==anexochanged.Doc.ItbidsDocumento);
        //return indiceanexo;
        return await Task.FromResult(Content[indice].AnexosExigidos.FindIndex(a => a.pertenceA == anexochanged.pertenceA && a.Doc.ItbidsDocumento == anexochanged.Doc.ItbidsDocumento));
    }

}
