@using BlazorWebAppITBI.Models
@* @inherits Microsoft.AspNetCore.Components.ComponentBase *@
@implements IDialogContentComponent<IQueryable<TribEdificacoesContrib>>
@rendermode InteractiveServer
@inject IDialogService DialogService
@inject IContribuinteAppService contribuinteAppService
<FluentCard Justify="@JustifyContent.Center">
    <p>Proprietários/Responsáveis</p>
    <FluentDataGrid Items=@Content TGridItem=TribEdificacoesContrib>
        <PropertyColumn Title="CPF/CNPJ" Property="@(c => c!.Con.ConCnpjcpf)" Sortable="true" Align=Align.Start />
        <PropertyColumn Title="RG" Property="@(c => c!.Con.ConRg)" Sortable="true" Align=Align.Start />
        <PropertyColumn Title="Nome/Razão" Property="@(c => c!.Con.ConNome)" Sortable="true" Align=Align.Start />
        <PropertyColumn Title="Email" Property="@(c => c!.Con.ConEmail)" Sortable="true" Align=Align.Start />
        <PropertyColumn Title="Celular" Property="@(c => c!.Con.ConTelefoneCelular)" Sortable="true" Align=Align.Start />
        <PropertyColumn Title="Proprietário" Property="@(c => c!.Proprietario)" Sortable="true" Align=Align.Start />
        <PropertyColumn Title="Responsável" Property="@(c => c!.Responsavel)" Sortable="true" Align=Align.Start />
        <PropertyColumn Title="Percentual" Property="@(c => c!.Percentual)" Sortable="true" Align=Align.Start />
        <TemplateColumn Align="@Align.End">
            @{

                var item = context as TribEdificacoesContrib;
                Transmitente t = new Transmitente() { Contribuinte = item.Con };

                //t.percentualtransmitido = item.Percentual.ToString();
                //t.percentualtransmitido = string.Empty;

                <FluentButton Appearance="Appearance.Outline" OnClick="()=>AddRemovePlus(t)" IconStart="GetIcon2(item)">

                </FluentButton>
            }
        </TemplateColumn>
        <!--

               <TemplateColumn Align="@Align.End">
        @{
            var item = context as TribEdificacoesContrib;
            //bool isChecked = item.Responsavel == "Sim";
                       <FluentCheckbox onchange="@((ChangeEventArgs e)=>@AddRemove(e,item.Con))"> </FluentCheckbox>
        }

           </TemplateColumn>
        -->
        <!--
                    <FluentCheckbox onchange="@AddRemove(item)"> </FluentCheckbox>
            <FluentTextField @bind-Value="@Content">:</FluentTextField>
                <EnderecoForm Content="Imovel.Lograd" Bairro="@(Imovel.IdloteamentoNavigation.Descricao ?? " ")" Numero="@(Imovel.EdifNumeracao ?? " ")" />

        <FluentTextField @bind-Value="@Content.Lograd.LogradNome">Logradouro:</FluentTextField>
        <FluentTextField @bind-Value="@Content.EdifNumeracao">Número:</FluentTextField>
        <FluentTextField @bind-Value="@Content.IdloteamentoNavigation.Descricao">Bairro:</FluentTextField>
            -->
    </FluentDataGrid>


</FluentCard>
<FluentCard Justify="@JustifyContent.Center">
    <FluentButton OnClick="@( ()=> BuscarContribuinteDialog("Transmitente"))" Appearance="Appearance.Accent">Adicionar Novo Transmitente</FluentButton>
    <FluentDataGrid Items=@ContribuintesQ TGridItem=Transmitente>
        <!--
            <PropertyColumn Title="ID" Property="@(c => c!.ConId)" Sortable="true" Align=Align.Start />
        -->
        <PropertyColumn Title="CPF/CNPJ" Property="@(c => c!.Contribuinte.ConCnpjcpf)" Sortable="true" Align=Align.Start />
        <PropertyColumn Title="RG" Property="@(c => c!.Contribuinte.ConRg)" Sortable="true" Align=Align.Start />
        <PropertyColumn Title="Nome/Razão" Property="@(c => c!.Contribuinte.ConNome)" Sortable="true" Align=Align.Start />
        <PropertyColumn Title="Email" Property="@(c => c!.Contribuinte.ConEmail)" Sortable="true" Align=Align.Start />
        <PropertyColumn Title="Celular" Property="@(c => c!.Contribuinte.ConTelefoneCelular)" Sortable="true" Align=Align.Start />
        <!--     
                <PropertyColumn Title="% Transmitido" Property="@(c => c!.percentualtransmitido)"  Sortable="true" Align=Align.Start />
        <TemplateColumn Align="@Align.End">
            @{
                
                    var item = context as Transmitente;
                   // <FluentTextField Required Placeholder="Per" @bind-Value="item.percentualtransmitido">Per</FluentTextField> 
                
            }
        </TemplateColumn>
        -->

        <TemplateColumn Title="% Transmitido" Sortable="true" Align=Align.Start>
          
            @{
                var item = context as Transmitente;
                   
                <FluentTextField Required @bind-Value="item!.percentualtransmitido" Placeholder="% Transmitido" />
                <ValidationMessage For="() => item!.percentualtransmitido" />
            }

           
        </TemplateColumn>





        <TemplateColumn Align="@Align.End">
            @{

                var item = context as Transmitente;
                
                <FluentButton Appearance="Appearance.Outline" OnClick="()=>AddRemovePlus(item)"
                              IconStart="@(new Icons.Regular.Size24.SubtractSquare().WithColor(Color.Accent))">
                </FluentButton>
            }
        </TemplateColumn>
        <!--
                <TemplateColumn Align="@Align.End">
        @{
            var item = context as Contribuinte;
            //bool isChecked = item.Responsavel == "Sim";
                            <FluentCheckbox onchange="@((ChangeEventArgs e)=>@AddRemove(e,item))"> </FluentCheckbox>
        }
                </TemplateColumn>
        -->
    </FluentDataGrid>
</FluentCard>
@code {
    [Parameter]
    public IQueryable<TribEdificacoesContrib> Content { get; set; } = default!;
    public IQueryable<Transmitente>? ContribuintesQ { get; set; }
    public Domain.Specs.DBProsiga.ContribuinteByCPFCNPJSpec contribuinteSpec;
    private EditContext? editContext;
    private Dictionary<Transmitente, bool> itemStates = new Dictionary<Transmitente, bool>();
    [Parameter]
    public List<Transmitente>? ListaDeTransmitentes { get; set; }
    public string? tipoContribuinte = null;
    private Contribuinte? adquirente = new Contribuinte() { ConCnpjcpf = string.Empty };
    private Transmitente? transmitente = new Transmitente() { Contribuinte = new Contribuinte { ConCnpjcpf = string.Empty } };
    [CascadingParameter]
    public FluentDialog? Dialog { get; set; }
    protected override async Task OnInitializedAsync()
    {
        //    await Task.Delay(1000);
        //  await CarregaAlunos();
        //pagination.TotalItemCountChanged += (sender, eventArgs) => StateHasChanged();
        //ContribuintesQ = Content;
        editContext = new EditContext(ListaDeTransmitentes);
        await base.OnInitializedAsync();
    }
    [Parameter]
    public EventCallback<List<Transmitente>> ListaDeTransmitentesChanged { get; set; }

    public void AtualizarTransmitente(Transmitente contribuinte, int operacao)
    {
        if (operacao == 1)
        {

            //ListaDeTransmitentes[index] = contribuinte;
            ListaDeTransmitentes.Add(contribuinte);
            ContribuintesQ = ListaDeTransmitentes.AsQueryable();
            ListaDeTransmitentesChanged.InvokeAsync(ListaDeTransmitentes);
        }
        else if (operacao == 2)
        {
            ListaDeTransmitentes.Remove(contribuinte);
            ContribuintesQ = ListaDeTransmitentes.AsQueryable();
            ListaDeTransmitentesChanged.InvokeAsync(ListaDeTransmitentes);
        }
    }
    private void AddRemove(ChangeEventArgs e, Transmitente contribuinte)
    {
        //  bool isChecked = (bool) e.Value;
        // Lógica a ser executada quando o checkbox é marcado
        //await DialogService.ShowInfoAsync("Wizard completed");
        //if(isChecked){
        if (e.Value.ToString() == "True")
        {

            AtualizarTransmitente(contribuinte, 1);
            //ContribuintesQ = this.ListaDeTrasmitentes.AsQueryable();
        }
        else
        {
            AtualizarTransmitente(contribuinte, 2);
        }
    }
    private void AddRemovePlus(Transmitente contribuinte)
    {

        //  AtualizarTransmitente(contribuinte, 1);
        //ContribuintesQ = this.ListaDeTrasmitentes.AsQueryable();
        if (itemStates.ContainsKey(contribuinte))
        {
            //itemStates[contribuinte] = !itemStates[contribuinte];
            itemStates.Remove(contribuinte);
            AtualizarTransmitente(contribuinte, 2);
            //  itemStates.Add(contribuinte, false);
        }
        else
        {
            itemStates.Add(contribuinte, true);
            AtualizarTransmitente(contribuinte, 1);
        }
        StateHasChanged();

    }
    //private MarkupString GetIcon(Transmitente item)
    private Icon GetIcon(Transmitente item)
    {

        // Retorna o ícone de exclusão se o item foi adicionado, caso contrário, retorna o ícone de adição
        return itemStates.TryGetValue(item, out bool isAdded) && isAdded
         ? new Icons.Regular.Size24.SubtractSquare().WithColor(Color.Accent)
         : new Icons.Regular.Size24.AddSquare().WithColor(Color.Accent);
    }
    private Icon GetIcon2(TribEdificacoesContrib item)
    {
        Transmitente t = null;
        t = new Transmitente() { Contribuinte = item.Con };

        if (item.Responsavel == "Sim")
        {
            return itemStates.TryGetValue(t, out bool isAdded2) && isAdded2
         ? new Icons.Regular.Size24.SubtractSquare().WithColor(Color.Success)
         : new Icons.Regular.Size24.AddSquare().WithColor(Color.Success);
        }
        // Retorna o ícone de exclusão se o item foi adicionado, caso contrário, retorna o ícone de adição
        return itemStates.TryGetValue(t, out bool isAdded) && isAdded
         ? new Icons.Regular.Size24.SubtractSquare().WithColor(Color.Accent)
         : new Icons.Regular.Size24.AddSquare().WithColor(Color.Accent);
    }

    private async Task BuscarContribuinteDialog(string _tipoContribuinte)
    {
        tipoContribuinte = _tipoContribuinte;
        //Contribuinte contribuinte = new Contribuinte();
        if (tipoContribuinte == "Transmitente")
        {

            await DialogService.ShowDialogAsync<BuscarContribuinteDialogTransmitente>(transmitente, new DialogParameters()
                {
                    Title = $"Buscar {tipoContribuinte}",
                    OnDialogResult = DialogService.CreateDialogCallback(this, HandleBuscarContribuinteDialog),
                    //   Width = "500px",
                    //   Height = "500px",
                });
        }



    }
    private async Task HandleBuscarContribuinteDialog(DialogResult result)
    {
        if (result.Cancelled)
        {
            return;
        }
        if (result.Data is not null)
        {

            if (tipoContribuinte == "Transmitente")
            {
                transmitente = result.Data as Transmitente;
                //transmitente = await contribuinteService.GetContribuinte(transmitente.ConCnpjcpf);
                contribuinteSpec = new Domain.Specs.DBProsiga.ContribuinteByCPFCNPJSpec(transmitente.Contribuinte.ConCnpjcpf);
                transmitente.Contribuinte = await contribuinteAppService.GetBySpecAsync(contribuinteSpec, CancellationToken.None);
                if (transmitente != null)
                {
                    await ContribuinteFormDialog();
                }
                else
                {
                    //await DialogService.ShowInfoAsync("Transmitente Não Encontrado!");
                    //  tipoContribuinte = "NovoTransmitente";
                    transmitente.Contribuinte = new Contribuinte() { ConBairro = new Bairro(), ConCidade = new Cidade() { Pais = new Paise() } };
                    await ContribuinteFormDialog();

                }

            }

        }

        //await Task.Run(() => DemoLogger.WriteLine($"Dialog closed"));

    }
    private async Task ContribuinteFormDialog()
    {
        if (tipoContribuinte == "Transmitente")
        {
            if (transmitente != null)
            {


                await DialogService.ShowDialogAsync<ContribuinteFormDialogTransmitente>(transmitente, new DialogParameters()
                    {
                        Title = $"Cadastro de {tipoContribuinte}",
                        OnDialogResult = DialogService.CreateDialogCallback(this, HandleContribuinteFormDialog),
                        //  Width = "500px",
                        //  Height = "500px",
                    });
            }
            else
            {
                //transmitente = new Contribuinte();
                await DialogService.ShowDialogAsync<ContribuinteFormDialog>(transmitente, new DialogParameters()
                    {
                        Title = $"Cadastro de {tipoContribuinte}",
                        OnDialogResult = DialogService.CreateDialogCallback(this, HandleContribuinteFormDialog),
                        //  Width = "500px",
                        //  Height = "500px",
                    });
            }
        }
    }
    private async Task HandleContribuinteFormDialog(DialogResult result)
    {
        if (result.Cancelled)
        {
            return;
        }
        if (result.Data is not null)
        {

            if (tipoContribuinte == "Transmitente")
            {
                //result = result.Data as Contribuinte;
                transmitente = result.Data as Transmitente;
                //transmitente.Contribuinte = result;
                //AtualizarTransmitente(transmitente, 1);
                AddRemovePlus(transmitente);
                //           transmitentesList = new List<Contribuinte>();
                //   transmitentesList = adquirentes.ToList();
                // await Task.Run(() => DemoLogger.WriteLine($"Dialog closed by {simplePerson?.Firstname} {simplePerson?.Lastname} ({simplePerson?.Age})"));
                // transmitente = await contribuinteService.GetContribuinte(transmitente.ConCnpjcpf);
                /*
                 *
                 *   if (transmitente != null)
                  {
         //             transmitentesList.Add(transmitente);
                      // transmitentes = transmitentesList.AsQueryable();
                      //await ContribuinteFormDialog();
                  }
                  else
                  {
                      //await DialogService.ShowInfoAsync("Dilog com informações do Contribuinte");
                      await DialogService.ShowInfoAsync("Transmitente Não Encontrado, Adicione-o!");
                  }*/

                return;
            }
        }

        //await Task.Run(() => DemoLogger.WriteLine($"Dialog closed"));

    }


}

