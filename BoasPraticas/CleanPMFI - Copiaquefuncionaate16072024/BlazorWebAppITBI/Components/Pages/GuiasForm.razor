@using BlazorWebAppITBI.Models
@using System.Collections
@rendermode InteractiveServer
@inject IDialogService DialogService
@inject HttpClient Http

<FluentAccordion ExpandMode="AccordionExpandMode.Single">
    @if (Content != null)
    {
        @foreach (var divida in Content.AsQueryable().OrderBy(o=>o.ItbiedifParc))
        {
            <FluentAccordionItem Expanded="false">
                <HeadingTemplate>
                    <FluentStack Orientation="Orientation.Horizontal">
                        @if (divida.ItbiedifParc == 0)
                        {
                            <FluentNumberField ReadOnly @bind-Value="@divida.ItbiedifVlrDevido">Parcela Única</FluentNumberField>
                        }else{
                            <FluentNumberField ReadOnly @bind-Value="@divida.ItbiedifVlrDevido">Parcela : $"{divida.ItbiedifVlrDevido}"</FluentNumberField>
                        }
                        @{
                            var dt = divida.ItbiedifDataVenc.ToString();
                            <FluentTextField ReadOnly @bind-Value="@dt">Data Vencimento:</FluentTextField>
                            var sit = divida.ImoIddividaNavigation.TipoBxId == 1 ? "Pendente" : "Paga";
                            <FluentTextField ReadOnly @bind-Value=@sit >Situação:</FluentTextField>
                            <FluentButton Appearance="Appearance.Outline" OnClick="()=>Imprimir(divida)"
                                          IconStart="@(new Icons.Regular.Size20.DocumentPrint().WithColor(Color.Accent))">
                            </FluentButton>
                        }
                    </FluentStack>
                </HeadingTemplate>
                <ChildContent>
                    <FluentBodyContent>
                        <!--

                        <iframe src="http://www2.pmfi.pr.gov.br//directprint/home/printx?p=AAEAAAD%2f%2f%2f%2f%2fAQAAAAAAAAAEAQAAABxTeXN0ZW0uQ29sbGVjdGlvbnMuSGFzaHRhYmxlBwAAAApMb2FkRmFjdG9yB1ZlcnNpb24IQ29tcGFyZXIQSGFzaENvZGVQcm92aWRlcghIYXNoU2l6ZQRLZXlzBlZhbHVlcwAAAwMABQULCBxTeXN0ZW0uQ29sbGVjdGlvbnMuSUNvbXBhcmVyJFN5c3RlbS5Db2xsZWN0aW9ucy5JSGFzaENvZGVQcm92aWRlcgjsUTg%2fBgAAAAoKCwAAAAkCAAAACQMAAAAQAgAAAAYAAAAGBAAAAAdzZXNzaW9uBgUAAAAKcmVwb3J0bmFtZQYGAAAAC0BAQGRhdGFiYXNlBgcAAAALQEBAZXhlY2RhdGUGCAAAAAxyZXBvcnRmb3JtYXQGCQAAAARwYXRoEAMAAAAGAAAABgoAAAAYYW8zdGJ2NTV4YXdkc29panZiZHpsdzQ1BgsAAAAMeFJlbEd1aWFJVEJJBgwAAAAJREJQcm9TaWdhBg0AAAAQMTAvMDYvMjAyNCAxNzo0MwYOAAAAA3BkZgYPAAAAH0M6XEdJSUdOZXRcUERGXHhSZWxHdWlhSVRCSS5wZGYL" width="100%" height="600px" frameborder="0" allowfullscreen></iframe>

                        -->
                        <iframe src=@ExternalPageContent width="100%" height="600px" frameborder="0" allowfullscreen></iframe>
                        <!--
                        <div>
                        @{

                            if (!string.IsNullOrEmpty(ExternalPageContent))
                            {
                                            <div>@ExternalPageContent</div>
                            }
                            else
                            {
                                            <p>Carregando...</p>
                            }
                        }
                        </div>
                             -->
                    </FluentBodyContent>
                </ChildContent>
            </FluentAccordionItem>
        }
    }
</FluentAccordion>
@code {
    [Parameter]
    public string? ExternalPageContent { get; set; }
    [Parameter]
    public List<TribItbiedif>? Content { get; set; }
    [Parameter]
    public EventCallback<TribItbiedif> ImprimirGuia { get; set; }
    private async void Imprimir(TribItbiedif dividaitbi)
    {
        await ImprimirGuia.InvokeAsync(dividaitbi);
        StateHasChanged();
        try
        {
            ExternalPageContent = await Http.GetStringAsync(ExternalPageContent);
        }
        catch (Exception ex)
        {
            // Lidar com erros, se necessário
            Console.WriteLine($"Erro ao buscar conteúdo: {ex.Message}");
        }
    }
   
}

