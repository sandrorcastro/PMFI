// <auto-generated />
using System;
using Infra.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infra.Migrations
{
    [DbContext(typeof(ContextoAplicacao))]
    partial class ContextoAplicacaoModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Bairro", b =>
                {
                    b.Property<long>("BairroId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("BairroId"));

                    b.Property<int?>("CidadeId")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .HasColumnType("varchar");

                    b.Property<long?>("RegiaoId")
                        .HasColumnType("bigint");

                    b.HasKey("BairroId");

                    b.HasIndex("CidadeId");

                    b.HasIndex("RegiaoId");

                    b.ToTable("dbSBairros");
                });

            modelBuilder.Entity("Domain.Entities.Cidade", b =>
                {
                    b.Property<int>("CidadeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CidadeId"));

                    b.Property<int?>("DDDId")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .HasColumnType("varchar");

                    b.Property<int?>("EstadoId")
                        .HasColumnType("int");

                    b.HasKey("CidadeId");

                    b.HasIndex("DDDId");

                    b.HasIndex("EstadoId");

                    b.ToTable("dbSCidades");
                });

            modelBuilder.Entity("Domain.Entities.Contato", b =>
                {
                    b.Property<int>("ContatoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContatoId"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("varchar");

                    b.Property<bool>("Principal")
                        .HasColumnType("bit");

                    b.Property<int?>("TipoContatoId")
                        .HasColumnType("int");

                    b.HasKey("ContatoId");

                    b.HasIndex("TipoContatoId");

                    b.ToTable("dbSContatos");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Contato");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Domain.Entities.Contato_Pessoa", b =>
                {
                    b.Property<int>("ContatoId")
                        .HasColumnType("int");

                    b.Property<long>("PessoaId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("DataCadastro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("ContatoId", "PessoaId");

                    b.HasIndex("PessoaId");

                    b.ToTable("Contato_Pessoa", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.DDD", b =>
                {
                    b.Property<int>("DDDId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DDDId"));

                    b.Property<string>("CodigoDDD")
                        .HasColumnType("varchar");

                    b.HasKey("DDDId");

                    b.ToTable("dbSDDDs");
                });

            modelBuilder.Entity("Domain.Entities.DocumentoPessoa", b =>
                {
                    b.Property<int>("DocumentoPessoaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentoPessoaId"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("varchar");

                    b.Property<string>("Numero")
                        .HasColumnType("varchar");

                    b.Property<long>("PessoaId")
                        .HasColumnType("bigint");

                    b.Property<int>("TipoDocumentoId")
                        .HasColumnType("int");

                    b.HasKey("DocumentoPessoaId");

                    b.HasIndex("PessoaId");

                    b.HasIndex("TipoDocumentoId");

                    b.ToTable("dbSDocumentosPessoa");

                    b.HasDiscriminator<string>("Discriminator").HasValue("DocumentoPessoa");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Domain.Entities.Economia", b =>
                {
                    b.Property<long>("ImovelId")
                        .HasColumnType("bigint");

                    b.Property<long>("EconomiaId")
                        .HasColumnType("bigint");

                    b.Property<string>("AnoConstrucao")
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<string>("AreaConstruida")
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<string>("Caracteristica")
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<string>("Complemento")
                        .HasMaxLength(500)
                        .HasColumnType("varchar");

                    b.Property<string>("Latitude")
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<string>("Longitude")
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<string>("Matricula")
                        .HasColumnType("varchar");

                    b.Property<string>("Numeracao")
                        .HasColumnType("varchar");

                    b.Property<bool?>("TemProcessos")
                        .HasColumnType("bit");

                    b.Property<string>("TerrenoIdTemp")
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.HasKey("ImovelId", "EconomiaId");

                    b.ToTable("Economia", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Economia_Entidade", b =>
                {
                    b.Property<long?>("ImovelId")
                        .HasColumnType("bigint");

                    b.Property<long?>("EconomiaId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PessoaId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("CoResponsavel")
                        .HasColumnType("bit");

                    b.Property<bool?>("Correspondente")
                        .HasColumnType("bit");

                    b.Property<bool?>("Locatario")
                        .HasColumnType("bit");

                    b.Property<bool?>("Proprietario")
                        .HasColumnType("bit");

                    b.Property<bool?>("Responsavel")
                        .HasColumnType("bit");

                    b.Property<int?>("TipoResponsabilidadeId")
                        .HasColumnType("int");

                    b.HasKey("ImovelId", "EconomiaId", "PessoaId");

                    b.HasIndex("PessoaId");

                    b.HasIndex("TipoResponsabilidadeId");

                    b.ToTable("Economia_Entidade", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Endereco", b =>
                {
                    b.Property<long>("EnderecoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("EnderecoId"));

                    b.Property<bool?>("Ativo")
                        .HasColumnType("bit");

                    b.Property<long?>("BairroId")
                        .HasColumnType("bigint");

                    b.Property<int?>("CidadeId")
                        .HasColumnType("int");

                    b.Property<string>("Complemento")
                        .HasColumnType("varchar");

                    b.Property<long?>("LogradouroId")
                        .HasColumnType("bigint");

                    b.Property<string>("Referencia")
                        .HasColumnType("varchar");

                    b.HasKey("EnderecoId");

                    b.HasIndex("BairroId");

                    b.HasIndex("CidadeId");

                    b.HasIndex("LogradouroId");

                    b.ToTable("dbSEnderecos");
                });

            modelBuilder.Entity("Domain.Entities.Endereco_Entidade", b =>
                {
                    b.Property<long>("EntidadeId")
                        .HasColumnType("bigint");

                    b.Property<long>("EnderecoId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TipoEntidadeId")
                        .HasColumnType("int");

                    b.Property<string>("Numero")
                        .HasMaxLength(10)
                        .HasColumnType("varchar");

                    b.Property<bool?>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("CEP")
                        .HasMaxLength(10)
                        .HasColumnType("varchar");

                    b.Property<bool?>("Correnspondencia")
                        .HasColumnType("bit");

                    b.Property<bool?>("Correspondencia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("DataCadastro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime?>("DataUltimaAlteracao")
                        .HasColumnType("datetime2");

                    b.Property<long?>("EconomiaId")
                        .HasColumnType("bigint");

                    b.Property<long?>("EconomiaImovelId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ImovelId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PessoaId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("Principal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("EntidadeId", "EnderecoId", "TipoEntidadeId", "Numero");

                    b.HasIndex("EnderecoId");

                    b.HasIndex("ImovelId");

                    b.HasIndex("PessoaId");

                    b.HasIndex("EconomiaImovelId", "EconomiaId");

                    b.ToTable("Endereco_Entidade", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Estado", b =>
                {
                    b.Property<int>("EstadoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EstadoId"));

                    b.Property<string>("Descricao")
                        .HasColumnType("varchar");

                    b.Property<int?>("PaisId")
                        .HasColumnType("int");

                    b.Property<string>("Sigla")
                        .HasColumnType("varchar");

                    b.HasKey("EstadoId");

                    b.HasIndex("PaisId");

                    b.ToTable("dbSEstados");
                });

            modelBuilder.Entity("Domain.Entities.Etapa", b =>
                {
                    b.Property<long>("ProcessoId")
                        .HasColumnType("bigint");

                    b.Property<int>("TipoEtapaId")
                        .HasColumnType("int");

                    b.Property<int>("SituacaoEtapaId")
                        .HasColumnType("int");

                    b.Property<long>("ImovelId")
                        .HasColumnType("bigint");

                    b.Property<long>("EconomiaId")
                        .HasColumnType("bigint");

                    b.Property<string>("Ano")
                        .HasMaxLength(4)
                        .HasColumnType("varchar");

                    b.Property<DateTime?>("DataFim")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataInicio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<long?>("EnderecoId")
                        .HasColumnType("bigint");

                    b.Property<int>("EtapaId")
                        .HasColumnType("int");

                    b.Property<string>("Observacao")
                        .HasMaxLength(5000)
                        .HasColumnType("varchar");

                    b.Property<long?>("PessoaId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PessoaProprietariaResponsavelId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PessoaTerceiraID")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ProcessoAno")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProcessoDigitoVerificador")
                        .HasColumnType("int");

                    b.Property<int?>("ProcessoOrgaoId")
                        .HasColumnType("int");

                    b.Property<long?>("ProcessoSequenciaNumerica")
                        .HasColumnType("bigint");

                    b.Property<long>("ServidorId")
                        .HasColumnType("bigint");

                    b.Property<string>("anoprotocolo")
                        .HasMaxLength(20)
                        .HasColumnType("varchar");

                    b.Property<bool?>("antigo")
                        .HasColumnType("bit");

                    b.Property<bool?>("emailEnviado")
                        .HasColumnType("bit");

                    b.Property<bool?>("emailRecebido")
                        .HasColumnType("bit");

                    b.Property<string>("protocolo")
                        .HasMaxLength(20)
                        .HasColumnType("varchar");

                    b.Property<bool?>("whatsEnviado")
                        .HasColumnType("bit");

                    b.Property<bool?>("whatsRecebido")
                        .HasColumnType("bit");

                    b.HasKey("ProcessoId", "TipoEtapaId", "SituacaoEtapaId", "ImovelId", "EconomiaId");

                    b.HasIndex("EnderecoId");

                    b.HasIndex("PessoaId");

                    b.HasIndex("PessoaProprietariaResponsavelId");

                    b.HasIndex("PessoaTerceiraID");

                    b.HasIndex("ServidorId");

                    b.HasIndex("SituacaoEtapaId");

                    b.HasIndex("TipoEtapaId");

                    b.HasIndex("ImovelId", "EconomiaId");

                    b.HasIndex("ProcessoOrgaoId", "ProcessoSequenciaNumerica", "ProcessoAno", "ProcessoDigitoVerificador");

                    b.ToTable("Etapa", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.FluxoProcesso", b =>
                {
                    b.Property<int>("FluxoProcessoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FluxoProcessoId"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("varchar");

                    b.Property<int>("TipoEtapaId")
                        .HasColumnType("int");

                    b.Property<int>("TipoProcessoId")
                        .HasColumnType("int");

                    b.HasKey("FluxoProcessoId");

                    b.HasIndex("TipoEtapaId");

                    b.HasIndex("TipoProcessoId");

                    b.ToTable("dbSFluxosProcesso");
                });

            modelBuilder.Entity("Domain.Entities.Image", b =>
                {
                    b.Property<string>("ImageId")
                        .HasColumnType("varchar");

                    b.Property<string>("Caminho")
                        .HasColumnType("varchar");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("EconomiaId")
                        .HasColumnType("bigint");

                    b.Property<string>("ImageBase64String")
                        .HasColumnType("varchar");

                    b.Property<long?>("ImovelId")
                        .HasColumnType("bigint");

                    b.Property<string>("NomeArquivo")
                        .HasColumnType("varchar");

                    b.Property<int?>("PerspectivaId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ProcessoAno")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProcessoDigitoVerificador")
                        .HasColumnType("int");

                    b.Property<long?>("ProcessoId")
                        .HasColumnType("bigint");

                    b.Property<int?>("ProcessoOrgaoId")
                        .HasColumnType("int");

                    b.Property<long?>("ProcessoSequenciaNumerica")
                        .HasColumnType("bigint");

                    b.Property<int?>("SituacaoEtapaId")
                        .HasColumnType("int");

                    b.Property<int?>("SituacaoProcessoId")
                        .HasColumnType("int");

                    b.Property<int?>("TipoEtapaId")
                        .HasColumnType("int");

                    b.Property<int?>("TipoProcessoId")
                        .HasColumnType("int");

                    b.HasKey("ImageId");

                    b.HasIndex("ImovelId");

                    b.HasIndex("PerspectivaId");

                    b.HasIndex("SituacaoEtapaId");

                    b.HasIndex("SituacaoProcessoId");

                    b.HasIndex("TipoEtapaId");

                    b.HasIndex("TipoProcessoId");

                    b.HasIndex("ProcessoOrgaoId", "ProcessoSequenciaNumerica", "ProcessoAno", "ProcessoDigitoVerificador");

                    b.ToTable("dbSImages");
                });

            modelBuilder.Entity("Domain.Entities.Imovel", b =>
                {
                    b.Property<long>("ImovelId")
                        .HasColumnType("bigint");

                    b.Property<string>("AnoConstrucao")
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<string>("AreaConstruida")
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<string>("AreaTerreno")
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<string>("Caracteristica")
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<string>("Complemento")
                        .HasMaxLength(500)
                        .HasColumnType("varchar");

                    b.Property<string>("Latitude")
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<string>("Longitude")
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<string>("Matricula")
                        .HasMaxLength(20)
                        .HasColumnType("varchar");

                    b.HasKey("ImovelId");

                    b.ToTable("Imovel", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.IncrementoTabelas", b =>
                {
                    b.Property<int>("IncrementoTabelasId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IncrementoTabelasId"));

                    b.Property<string>("Ano")
                        .HasColumnType("varchar");

                    b.Property<string>("Parametro")
                        .HasColumnType("varchar");

                    b.Property<string>("Tabela")
                        .HasColumnType("varchar");

                    b.Property<long?>("valorAtual")
                        .HasColumnType("bigint");

                    b.Property<long?>("valorFinal")
                        .HasColumnType("bigint");

                    b.Property<long?>("valorInicial")
                        .HasColumnType("bigint");

                    b.Property<int?>("valorincrementar")
                        .HasColumnType("int");

                    b.HasKey("IncrementoTabelasId");

                    b.ToTable("dbSIncrementoTabelas");
                });

            modelBuilder.Entity("Domain.Entities.Logradouro", b =>
                {
                    b.Property<long>("LogradouroId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("LogradouroId"));

                    b.Property<bool?>("Ativo")
                        .HasColumnType("bit");

                    b.Property<long?>("BairroId")
                        .HasColumnType("bigint");

                    b.Property<string>("CEP")
                        .HasColumnType("varchar");

                    b.Property<int?>("CidadeId")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .HasColumnType("varchar");

                    b.Property<int?>("TipoLogradouroId")
                        .HasColumnType("int");

                    b.HasKey("LogradouroId");

                    b.HasIndex("BairroId");

                    b.HasIndex("CidadeId");

                    b.HasIndex("TipoLogradouroId");

                    b.ToTable("dbSLogradouros");
                });

            modelBuilder.Entity("Domain.Entities.Loteamento", b =>
                {
                    b.Property<int>("LoteamentoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LoteamentoId"));

                    b.Property<DateTime?>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .HasColumnType("varchar");

                    b.Property<long?>("RegiaoId")
                        .HasColumnType("bigint");

                    b.HasKey("LoteamentoId");

                    b.HasIndex("RegiaoId");

                    b.ToTable("dbSLoteamentos");
                });

            modelBuilder.Entity("Domain.Entities.OperadoraTelefone", b =>
                {
                    b.Property<int>("OperadoraTelefoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OperadoraTelefoneId"));

                    b.Property<string>("CodigoOperadora")
                        .HasColumnType("varchar");

                    b.Property<string>("Descricao")
                        .HasColumnType("varchar");

                    b.HasKey("OperadoraTelefoneId");

                    b.ToTable("dbSOperadoraTelefoneS");
                });

            modelBuilder.Entity("Domain.Entities.Orgao", b =>
                {
                    b.Property<int>("OrgaoId")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.HasKey("OrgaoId");

                    b.ToTable("Orgao", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Pais", b =>
                {
                    b.Property<int>("PaisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaisId"));

                    b.Property<string>("Nome")
                        .HasColumnType("varchar");

                    b.Property<string>("Sigla")
                        .HasColumnType("varchar");

                    b.HasKey("PaisId");

                    b.ToTable("dbSPaises");
                });

            modelBuilder.Entity("Domain.Entities.Perspectiva", b =>
                {
                    b.Property<int?>("PerspectivaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("PerspectivaId"));

                    b.Property<string>("Descricao")
                        .HasColumnType("varchar");

                    b.HasKey("PerspectivaId");

                    b.ToTable("dbSPerspectivas");
                });

            modelBuilder.Entity("Domain.Entities.Pessoa", b =>
                {
                    b.Property<long>("PessoaId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("DataCadastro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar");

                    b.Property<int>("TipoPessoaId")
                        .HasColumnType("int");

                    b.Property<long?>("conId")
                        .HasColumnType("bigint");

                    b.HasKey("PessoaId");

                    b.HasIndex("TipoPessoaId");

                    b.ToTable("Pessoa", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Domain.Entities.Processo", b =>
                {
                    b.Property<int>("OrgaoId")
                        .HasColumnType("int");

                    b.Property<long>("SequenciaNumerica")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Ano")
                        .HasColumnType("datetime2");

                    b.Property<int>("DigitoVerificador")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<int>("FluxoProcessoId")
                        .HasColumnType("int");

                    b.Property<string>("ObservacaoProcesso")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar");

                    b.Property<int>("OrgaoDestinatarioId")
                        .HasColumnType("int");

                    b.Property<int>("OrgaoRemetenteId")
                        .HasColumnType("int");

                    b.Property<bool>("ProcessoEnviado")
                        .HasColumnType("bit");

                    b.Property<bool>("ProcessoRecebido")
                        .HasColumnType("bit");

                    b.Property<int>("TipoProcessoId")
                        .HasColumnType("int");

                    b.Property<int>("UnidadeDestinatarioId")
                        .HasColumnType("int");

                    b.Property<int>("UnidadeRemetenteId")
                        .HasColumnType("int");

                    b.HasKey("OrgaoId", "SequenciaNumerica", "Ano", "DigitoVerificador");

                    b.HasIndex("FluxoProcessoId");

                    b.HasIndex("OrgaoDestinatarioId");

                    b.HasIndex("OrgaoRemetenteId");

                    b.HasIndex("TipoProcessoId");

                    b.HasIndex("UnidadeDestinatarioId");

                    b.HasIndex("UnidadeRemetenteId");

                    b.ToTable("Processo", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Regiao", b =>
                {
                    b.Property<long>("RegiaoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("RegiaoId"));

                    b.Property<string>("CentroGrauLat")
                        .HasColumnType("varchar");

                    b.Property<string>("CentroGrauLon")
                        .HasColumnType("varchar");

                    b.Property<int?>("CidadeId")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .HasColumnType("varchar");

                    b.Property<float?>("PercentualUVC")
                        .HasColumnType("real");

                    b.HasKey("RegiaoId");

                    b.HasIndex("CidadeId");

                    b.ToTable("dbSRegioes");
                });

            modelBuilder.Entity("Domain.Entities.Servidor", b =>
                {
                    b.Property<long>("ServidorId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Matricula")
                        .HasMaxLength(15)
                        .HasColumnType("varchar");

                    b.Property<string>("Nome")
                        .HasMaxLength(150)
                        .HasColumnType("varchar");

                    b.HasKey("ServidorId");

                    b.ToTable("Servidor", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.SituacaoEtapa", b =>
                {
                    b.Property<int>("SituacaoEtapaId")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.HasKey("SituacaoEtapaId");

                    b.ToTable("SituacaoEtapa", (string)null);

                    b.HasData(
                        new
                        {
                            SituacaoEtapaId = 1,
                            Descricao = "Iniciado"
                        },
                        new
                        {
                            SituacaoEtapaId = 2,
                            Descricao = "Finalizado"
                        },
                        new
                        {
                            SituacaoEtapaId = 3,
                            Descricao = "Trâmite"
                        });
                });

            modelBuilder.Entity("Domain.Entities.SituacaoProcesso", b =>
                {
                    b.Property<int>("SituacaoProcessoId")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.HasKey("SituacaoProcessoId");

                    b.ToTable("SituacaoProcesso", (string)null);

                    b.HasData(
                        new
                        {
                            SituacaoProcessoId = 1,
                            Descricao = "Iniciado"
                        },
                        new
                        {
                            SituacaoProcessoId = 2,
                            Descricao = "Finalizado"
                        });
                });

            modelBuilder.Entity("Domain.Entities.TipoContato", b =>
                {
                    b.Property<int>("TipoContatoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TipoContatoId"));

                    b.Property<int>("Descricao")
                        .HasColumnType("int");

                    b.HasKey("TipoContatoId");

                    b.ToTable("dbSTiposContato");
                });

            modelBuilder.Entity("Domain.Entities.TipoDocumento", b =>
                {
                    b.Property<int>("TipoDocumentoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TipoDocumentoId"));

                    b.Property<string>("Descricao")
                        .HasColumnType("varchar");

                    b.HasKey("TipoDocumentoId");

                    b.ToTable("dbSTiposDocumento");
                });

            modelBuilder.Entity("Domain.Entities.TipoEtapa", b =>
                {
                    b.Property<int>("TipoEtapaId")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .HasMaxLength(60)
                        .HasColumnType("varchar");

                    b.Property<int?>("DiasTramite")
                        .HasColumnType("int");

                    b.Property<string>("Lei")
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<int?>("Permanencia")
                        .HasColumnType("int");

                    b.Property<string>("Template")
                        .HasColumnType("varchar");

                    b.Property<string>("TextoLei")
                        .HasColumnType("varchar");

                    b.Property<bool?>("liberado")
                        .HasColumnType("bit");

                    b.HasKey("TipoEtapaId");

                    b.ToTable("TipoEtapa", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.TipoLogradouro", b =>
                {
                    b.Property<int>("TipoLogradouroId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TipoLogradouroId"));

                    b.Property<string>("Descricao")
                        .HasColumnType("varchar");

                    b.HasKey("TipoLogradouroId");

                    b.ToTable("dbSTiposLogradouro");
                });

            modelBuilder.Entity("Domain.Entities.TipoPessoa", b =>
                {
                    b.Property<int>("TipoPessoaId")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.HasKey("TipoPessoaId");

                    b.ToTable("TipoPessoa", (string)null);

                    b.HasData(
                        new
                        {
                            TipoPessoaId = 1,
                            Descricao = "FÍSICA"
                        },
                        new
                        {
                            TipoPessoaId = 2,
                            Descricao = "JURÍDICA"
                        });
                });

            modelBuilder.Entity("Domain.Entities.TipoProcesso", b =>
                {
                    b.Property<int>("TipoProcessoId")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<int?>("DiasTramite")
                        .HasColumnType("int");

                    b.Property<int?>("Permanencia")
                        .HasColumnType("int");

                    b.Property<bool?>("liberado")
                        .HasColumnType("bit");

                    b.HasKey("TipoProcessoId");

                    b.ToTable("TipoProcesso", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.TipoResponsabilidade", b =>
                {
                    b.Property<int>("TipoResponsabilidadeId")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.HasKey("TipoResponsabilidadeId");

                    b.ToTable("TipoResponsabilidade", (string)null);

                    b.HasData(
                        new
                        {
                            TipoResponsabilidadeId = 1,
                            Descricao = "Proprietário"
                        },
                        new
                        {
                            TipoResponsabilidadeId = 2,
                            Descricao = "Responsável"
                        },
                        new
                        {
                            TipoResponsabilidadeId = 3,
                            Descricao = "Co-Responsável"
                        });
                });

            modelBuilder.Entity("Domain.Entities.TipoTelefone", b =>
                {
                    b.Property<int>("TipoTelefoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TipoTelefoneId"));

                    b.Property<string>("Descricao")
                        .HasColumnType("varchar");

                    b.HasKey("TipoTelefoneId");

                    b.ToTable("dbSTiposTelefone");
                });

            modelBuilder.Entity("Domain.Entities.Unidade", b =>
                {
                    b.Property<int>("UnidadeId")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<int?>("OrgaoId")
                        .HasColumnType("int");

                    b.HasKey("UnidadeId");

                    b.HasIndex("OrgaoId");

                    b.ToTable("Unidade", (string)null);
                });

            modelBuilder.Entity("Infra.EntityConfig.ApplicationUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("varchar");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("varchar");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<long>", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("varchar");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("varchar");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("varchar");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("varchar");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("varchar");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("varchar");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar");

                    b.Property<string>("Value")
                        .HasColumnType("varchar");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Telefone", b =>
                {
                    b.HasBaseType("Domain.Entities.Contato");

                    b.Property<int>("DDDId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataUltimaAtualizacao")
                        .HasColumnType("datetime2");

                    b.Property<int>("OperadoraTelefoneId")
                        .HasColumnType("int");

                    b.Property<int>("TipoTelefoneId")
                        .HasColumnType("int");

                    b.HasIndex("DDDId");

                    b.HasIndex("OperadoraTelefoneId");

                    b.HasIndex("TipoTelefoneId");

                    b.HasDiscriminator().HasValue("Telefone");
                });

            modelBuilder.Entity("Domain.Entities.CNPJ", b =>
                {
                    b.HasBaseType("Domain.Entities.DocumentoPessoa");

                    b.Property<DateTime?>("DataExpedicao")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EstadoEmissorId")
                        .HasColumnType("int");

                    b.Property<string>("OrgaoEmissor")
                        .HasColumnType("varchar");

                    b.HasIndex("EstadoEmissorId");

                    b.ToTable("dbSDocumentosPessoa", t =>
                        {
                            t.Property("DataExpedicao")
                                .HasColumnName("CNPJ_DataExpedicao");

                            t.Property("EstadoEmissorId")
                                .HasColumnName("CNPJ_EstadoEmissorId");

                            t.Property("OrgaoEmissor")
                                .HasColumnName("CNPJ_OrgaoEmissor");
                        });

                    b.HasDiscriminator().HasValue("CNPJ");
                });

            modelBuilder.Entity("Domain.Entities.CPF", b =>
                {
                    b.HasBaseType("Domain.Entities.DocumentoPessoa");

                    b.Property<DateTime?>("DataExpedicao")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EstadoEmissorId")
                        .HasColumnType("int");

                    b.Property<string>("OrgaoEmissor")
                        .HasColumnType("varchar");

                    b.HasIndex("EstadoEmissorId");

                    b.HasDiscriminator().HasValue("CPF");
                });

            modelBuilder.Entity("Domain.Entities.RG", b =>
                {
                    b.HasBaseType("Domain.Entities.DocumentoPessoa");

                    b.Property<DateTime?>("DataExpedicao")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EstadoEmissorId")
                        .HasColumnType("int");

                    b.Property<string>("OrgaoEmissor")
                        .HasColumnType("varchar");

                    b.HasIndex("EstadoEmissorId");

                    b.ToTable("dbSDocumentosPessoa", t =>
                        {
                            t.Property("DataExpedicao")
                                .HasColumnName("RG_DataExpedicao");

                            t.Property("EstadoEmissorId")
                                .HasColumnName("RG_EstadoEmissorId");

                            t.Property("OrgaoEmissor")
                                .HasColumnName("RG_OrgaoEmissor");
                        });

                    b.HasDiscriminator().HasValue("RG");
                });

            modelBuilder.Entity("Domain.Entities.PessoaFisica", b =>
                {
                    b.HasBaseType("Domain.Entities.Pessoa");

                    b.Property<DateTime?>("DataNascimento")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataObito")
                        .HasColumnType("datetime2");

                    b.Property<string>("DefinicaoSexual")
                        .HasMaxLength(25)
                        .HasColumnType("varchar");

                    b.Property<string>("EstadoCivil")
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<string>("NomeMeio")
                        .HasMaxLength(150)
                        .HasColumnType("varchar");

                    b.Property<int?>("PaisId")
                        .HasColumnType("int");

                    b.Property<string>("PrimeiroNome")
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<string>("Sexo")
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<string>("Sobrenome")
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.HasIndex("PaisId");

                    b.ToTable("PessoaFisica", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.PessoaJuridica", b =>
                {
                    b.HasBaseType("Domain.Entities.Pessoa");

                    b.Property<string>("InscricaoEstadual")
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<string>("NomeFantasia")
                        .HasMaxLength(500)
                        .HasColumnType("varchar");

                    b.Property<string>("RazaoSocial")
                        .HasMaxLength(500)
                        .HasColumnType("varchar");

                    b.ToTable("PessoaJuridica", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.TelefoneComercial", b =>
                {
                    b.HasBaseType("Domain.Entities.Telefone");

                    b.Property<string>("Numero")
                        .HasColumnType("varchar");

                    b.HasDiscriminator().HasValue("TelefoneComercial");
                });

            modelBuilder.Entity("Domain.Entities.TelefoneResidencial", b =>
                {
                    b.HasBaseType("Domain.Entities.Telefone");

                    b.Property<string>("Numero")
                        .HasColumnType("varchar");

                    b.ToTable("dbSContatos", t =>
                        {
                            t.Property("Numero")
                                .HasColumnName("TelefoneResidencial_Numero");
                        });

                    b.HasDiscriminator().HasValue("TelefoneResidencial");
                });

            modelBuilder.Entity("Domain.Entities.Bairro", b =>
                {
                    b.HasOne("Domain.Entities.Cidade", "Cidade")
                        .WithMany("Bairros")
                        .HasForeignKey("CidadeId");

                    b.HasOne("Domain.Entities.Regiao", "Regiao")
                        .WithMany()
                        .HasForeignKey("RegiaoId");

                    b.Navigation("Cidade");

                    b.Navigation("Regiao");
                });

            modelBuilder.Entity("Domain.Entities.Cidade", b =>
                {
                    b.HasOne("Domain.Entities.DDD", "DDD")
                        .WithMany()
                        .HasForeignKey("DDDId");

                    b.HasOne("Domain.Entities.Estado", "Estado")
                        .WithMany("Cidades")
                        .HasForeignKey("EstadoId");

                    b.Navigation("DDD");

                    b.Navigation("Estado");
                });

            modelBuilder.Entity("Domain.Entities.Contato", b =>
                {
                    b.HasOne("Domain.Entities.TipoContato", "TipoContato")
                        .WithMany()
                        .HasForeignKey("TipoContatoId");

                    b.Navigation("TipoContato");
                });

            modelBuilder.Entity("Domain.Entities.Contato_Pessoa", b =>
                {
                    b.HasOne("Domain.Entities.Contato", "Contato")
                        .WithMany("Pessoas")
                        .HasForeignKey("ContatoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Pessoa", "Pessoa")
                        .WithMany("Contatos")
                        .HasForeignKey("PessoaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contato");

                    b.Navigation("Pessoa");
                });

            modelBuilder.Entity("Domain.Entities.DocumentoPessoa", b =>
                {
                    b.HasOne("Domain.Entities.Pessoa", "Pessoa")
                        .WithMany("Documentos")
                        .HasForeignKey("PessoaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.TipoDocumento", "TipoDocumento")
                        .WithMany()
                        .HasForeignKey("TipoDocumentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pessoa");

                    b.Navigation("TipoDocumento");
                });

            modelBuilder.Entity("Domain.Entities.Economia", b =>
                {
                    b.HasOne("Domain.Entities.Imovel", "Imovel")
                        .WithMany()
                        .HasForeignKey("ImovelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Imovel");
                });

            modelBuilder.Entity("Domain.Entities.Economia_Entidade", b =>
                {
                    b.HasOne("Domain.Entities.Imovel", "Imovel")
                        .WithMany("Economias")
                        .HasForeignKey("ImovelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Pessoa", "Pessoa")
                        .WithMany("Economias")
                        .HasForeignKey("PessoaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.TipoResponsabilidade", "TipoResponsabilidade")
                        .WithMany()
                        .HasForeignKey("TipoResponsabilidadeId");

                    b.HasOne("Domain.Entities.Economia", "Economia")
                        .WithMany("Pessoas")
                        .HasForeignKey("ImovelId", "EconomiaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Economia");

                    b.Navigation("Imovel");

                    b.Navigation("Pessoa");

                    b.Navigation("TipoResponsabilidade");
                });

            modelBuilder.Entity("Domain.Entities.Endereco", b =>
                {
                    b.HasOne("Domain.Entities.Bairro", "Bairro")
                        .WithMany()
                        .HasForeignKey("BairroId");

                    b.HasOne("Domain.Entities.Cidade", "Cidade")
                        .WithMany()
                        .HasForeignKey("CidadeId");

                    b.HasOne("Domain.Entities.Logradouro", "Logradouro")
                        .WithMany("Enderecos")
                        .HasForeignKey("LogradouroId");

                    b.Navigation("Bairro");

                    b.Navigation("Cidade");

                    b.Navigation("Logradouro");
                });

            modelBuilder.Entity("Domain.Entities.Endereco_Entidade", b =>
                {
                    b.HasOne("Domain.Entities.Endereco", "Endereco")
                        .WithMany("Entidades")
                        .HasForeignKey("EnderecoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Imovel", null)
                        .WithMany("Enderecos")
                        .HasForeignKey("ImovelId");

                    b.HasOne("Domain.Entities.Pessoa", null)
                        .WithMany("Enderecos")
                        .HasForeignKey("PessoaId");

                    b.HasOne("Domain.Entities.Economia", null)
                        .WithMany("Enderecos")
                        .HasForeignKey("EconomiaImovelId", "EconomiaId");

                    b.Navigation("Endereco");
                });

            modelBuilder.Entity("Domain.Entities.Estado", b =>
                {
                    b.HasOne("Domain.Entities.Pais", "Pais")
                        .WithMany("Estados")
                        .HasForeignKey("PaisId");

                    b.Navigation("Pais");
                });

            modelBuilder.Entity("Domain.Entities.Etapa", b =>
                {
                    b.HasOne("Domain.Entities.Endereco", "Endereco")
                        .WithMany()
                        .HasForeignKey("EnderecoId");

                    b.HasOne("Domain.Entities.Imovel", "Imovel")
                        .WithMany()
                        .HasForeignKey("ImovelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Pessoa", "Pessoa")
                        .WithMany()
                        .HasForeignKey("PessoaId");

                    b.HasOne("Domain.Entities.Pessoa", "PessoaProprietariaResponsavel")
                        .WithMany()
                        .HasForeignKey("PessoaProprietariaResponsavelId");

                    b.HasOne("Domain.Entities.Pessoa", "PessoaTerceira")
                        .WithMany()
                        .HasForeignKey("PessoaTerceiraID");

                    b.HasOne("Domain.Entities.Servidor", "Servidor")
                        .WithMany()
                        .HasForeignKey("ServidorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SituacaoEtapa", "SituacaoEtapa")
                        .WithMany()
                        .HasForeignKey("SituacaoEtapaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.TipoEtapa", "TipoEtapa")
                        .WithMany()
                        .HasForeignKey("TipoEtapaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Economia", "Economia")
                        .WithMany()
                        .HasForeignKey("ImovelId", "EconomiaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Processo", "Processo")
                        .WithMany("Etapas")
                        .HasForeignKey("ProcessoOrgaoId", "ProcessoSequenciaNumerica", "ProcessoAno", "ProcessoDigitoVerificador");

                    b.Navigation("Economia");

                    b.Navigation("Endereco");

                    b.Navigation("Imovel");

                    b.Navigation("Pessoa");

                    b.Navigation("PessoaProprietariaResponsavel");

                    b.Navigation("PessoaTerceira");

                    b.Navigation("Processo");

                    b.Navigation("Servidor");

                    b.Navigation("SituacaoEtapa");

                    b.Navigation("TipoEtapa");
                });

            modelBuilder.Entity("Domain.Entities.FluxoProcesso", b =>
                {
                    b.HasOne("Domain.Entities.TipoEtapa", "TipoEtapa")
                        .WithMany()
                        .HasForeignKey("TipoEtapaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.TipoProcesso", "TipoProcesso")
                        .WithMany()
                        .HasForeignKey("TipoProcessoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoEtapa");

                    b.Navigation("TipoProcesso");
                });

            modelBuilder.Entity("Domain.Entities.Image", b =>
                {
                    b.HasOne("Domain.Entities.Imovel", "Imovel")
                        .WithMany()
                        .HasForeignKey("ImovelId");

                    b.HasOne("Domain.Entities.Perspectiva", "Perspectiva")
                        .WithMany()
                        .HasForeignKey("PerspectivaId");

                    b.HasOne("Domain.Entities.SituacaoEtapa", "situacaoEtapa")
                        .WithMany()
                        .HasForeignKey("SituacaoEtapaId");

                    b.HasOne("Domain.Entities.SituacaoProcesso", "SituacaoProcesso")
                        .WithMany()
                        .HasForeignKey("SituacaoProcessoId");

                    b.HasOne("Domain.Entities.TipoEtapa", "TipoEtapa")
                        .WithMany()
                        .HasForeignKey("TipoEtapaId");

                    b.HasOne("Domain.Entities.TipoProcesso", "TipoProcesso")
                        .WithMany()
                        .HasForeignKey("TipoProcessoId");

                    b.HasOne("Domain.Entities.Processo", "Processo")
                        .WithMany()
                        .HasForeignKey("ProcessoOrgaoId", "ProcessoSequenciaNumerica", "ProcessoAno", "ProcessoDigitoVerificador");

                    b.Navigation("Imovel");

                    b.Navigation("Perspectiva");

                    b.Navigation("Processo");

                    b.Navigation("SituacaoProcesso");

                    b.Navigation("TipoEtapa");

                    b.Navigation("TipoProcesso");

                    b.Navigation("situacaoEtapa");
                });

            modelBuilder.Entity("Domain.Entities.Logradouro", b =>
                {
                    b.HasOne("Domain.Entities.Bairro", "Bairro")
                        .WithMany()
                        .HasForeignKey("BairroId");

                    b.HasOne("Domain.Entities.Cidade", "Cidade")
                        .WithMany("Logradouros")
                        .HasForeignKey("CidadeId");

                    b.HasOne("Domain.Entities.TipoLogradouro", "TipoLogradouro")
                        .WithMany()
                        .HasForeignKey("TipoLogradouroId");

                    b.Navigation("Bairro");

                    b.Navigation("Cidade");

                    b.Navigation("TipoLogradouro");
                });

            modelBuilder.Entity("Domain.Entities.Loteamento", b =>
                {
                    b.HasOne("Domain.Entities.Regiao", "Regiao")
                        .WithMany()
                        .HasForeignKey("RegiaoId");

                    b.Navigation("Regiao");
                });

            modelBuilder.Entity("Domain.Entities.Pessoa", b =>
                {
                    b.HasOne("Domain.Entities.TipoPessoa", "TipoPessoa")
                        .WithMany()
                        .HasForeignKey("TipoPessoaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoPessoa");
                });

            modelBuilder.Entity("Domain.Entities.Processo", b =>
                {
                    b.HasOne("Domain.Entities.FluxoProcesso", "FluxoProcesso")
                        .WithMany()
                        .HasForeignKey("FluxoProcessoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Orgao", "OrgaoDestinatario")
                        .WithMany()
                        .HasForeignKey("OrgaoDestinatarioId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Orgao", "Orgao")
                        .WithMany()
                        .HasForeignKey("OrgaoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Orgao", "OrgaoRemetente")
                        .WithMany()
                        .HasForeignKey("OrgaoRemetenteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.TipoProcesso", "TipoProcesso")
                        .WithMany()
                        .HasForeignKey("TipoProcessoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Unidade", "UnidadeDestinatario")
                        .WithMany()
                        .HasForeignKey("UnidadeDestinatarioId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Unidade", "UnidadeRemetente")
                        .WithMany()
                        .HasForeignKey("UnidadeRemetenteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FluxoProcesso");

                    b.Navigation("Orgao");

                    b.Navigation("OrgaoDestinatario");

                    b.Navigation("OrgaoRemetente");

                    b.Navigation("TipoProcesso");

                    b.Navigation("UnidadeDestinatario");

                    b.Navigation("UnidadeRemetente");
                });

            modelBuilder.Entity("Domain.Entities.Regiao", b =>
                {
                    b.HasOne("Domain.Entities.Cidade", "Cidade")
                        .WithMany()
                        .HasForeignKey("CidadeId");

                    b.Navigation("Cidade");
                });

            modelBuilder.Entity("Domain.Entities.Unidade", b =>
                {
                    b.HasOne("Domain.Entities.Orgao", "Orgao")
                        .WithMany("Unidades")
                        .HasForeignKey("OrgaoId");

                    b.Navigation("Orgao");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<long>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("Infra.EntityConfig.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("Infra.EntityConfig.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<long>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infra.EntityConfig.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("Infra.EntityConfig.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Telefone", b =>
                {
                    b.HasOne("Domain.Entities.DDD", "DDD")
                        .WithMany()
                        .HasForeignKey("DDDId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.OperadoraTelefone", "OperadoraTelefone")
                        .WithMany()
                        .HasForeignKey("OperadoraTelefoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.TipoTelefone", "TipoTelefone")
                        .WithMany()
                        .HasForeignKey("TipoTelefoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DDD");

                    b.Navigation("OperadoraTelefone");

                    b.Navigation("TipoTelefone");
                });

            modelBuilder.Entity("Domain.Entities.CNPJ", b =>
                {
                    b.HasOne("Domain.Entities.Estado", "EstadoEmissor")
                        .WithMany()
                        .HasForeignKey("EstadoEmissorId");

                    b.Navigation("EstadoEmissor");
                });

            modelBuilder.Entity("Domain.Entities.CPF", b =>
                {
                    b.HasOne("Domain.Entities.Estado", "EstadoEmissor")
                        .WithMany()
                        .HasForeignKey("EstadoEmissorId");

                    b.Navigation("EstadoEmissor");
                });

            modelBuilder.Entity("Domain.Entities.RG", b =>
                {
                    b.HasOne("Domain.Entities.Estado", "EstadoEmissor")
                        .WithMany()
                        .HasForeignKey("EstadoEmissorId");

                    b.Navigation("EstadoEmissor");
                });

            modelBuilder.Entity("Domain.Entities.PessoaFisica", b =>
                {
                    b.HasOne("Domain.Entities.Pais", "Pais")
                        .WithMany()
                        .HasForeignKey("PaisId");

                    b.HasOne("Domain.Entities.Pessoa", null)
                        .WithOne()
                        .HasForeignKey("Domain.Entities.PessoaFisica", "PessoaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pais");
                });

            modelBuilder.Entity("Domain.Entities.PessoaJuridica", b =>
                {
                    b.HasOne("Domain.Entities.Pessoa", null)
                        .WithOne()
                        .HasForeignKey("Domain.Entities.PessoaJuridica", "PessoaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Cidade", b =>
                {
                    b.Navigation("Bairros");

                    b.Navigation("Logradouros");
                });

            modelBuilder.Entity("Domain.Entities.Contato", b =>
                {
                    b.Navigation("Pessoas");
                });

            modelBuilder.Entity("Domain.Entities.Economia", b =>
                {
                    b.Navigation("Enderecos");

                    b.Navigation("Pessoas");
                });

            modelBuilder.Entity("Domain.Entities.Endereco", b =>
                {
                    b.Navigation("Entidades");
                });

            modelBuilder.Entity("Domain.Entities.Estado", b =>
                {
                    b.Navigation("Cidades");
                });

            modelBuilder.Entity("Domain.Entities.Imovel", b =>
                {
                    b.Navigation("Economias");

                    b.Navigation("Enderecos");
                });

            modelBuilder.Entity("Domain.Entities.Logradouro", b =>
                {
                    b.Navigation("Enderecos");
                });

            modelBuilder.Entity("Domain.Entities.Orgao", b =>
                {
                    b.Navigation("Unidades");
                });

            modelBuilder.Entity("Domain.Entities.Pais", b =>
                {
                    b.Navigation("Estados");
                });

            modelBuilder.Entity("Domain.Entities.Pessoa", b =>
                {
                    b.Navigation("Contatos");

                    b.Navigation("Documentos");

                    b.Navigation("Economias");

                    b.Navigation("Enderecos");
                });

            modelBuilder.Entity("Domain.Entities.Processo", b =>
                {
                    b.Navigation("Etapas");
                });
#pragma warning restore 612, 618
        }
    }
}
